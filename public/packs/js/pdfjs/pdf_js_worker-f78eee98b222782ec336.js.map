{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/process/browser.js","webpack:///./app/javascript/packs/pdfjs/pdf_js_worker.js","webpack:///./node_modules/pdfjs-dist/build/pdf.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","require","factory","__w_pdfjs_require__","_worker","WorkerMessageHandler","WorkerTask","_util","_primitives","_pdf_manager","_is_node","_message_handler","_worker_stream","_core_utils","terminated","_capability","createPromiseCapability","finished","promise","[object Object]","resolve","maybePort","handler","port","testMessageProcessed","data","Uint8Array","send","supportTransfers","postMessageTransfers","setVerbosityLevel","verbosity","createDocumentHandler","docParams","pdfManager","cancelXHRs","WorkerTasks","getVerbosityLevel","apiVersion","enumerableProperties","join","ReadableStream","Promise","allSettled","docId","docBaseUrl","workerHandlerName","MessageHandler","ensureNotTerminated","startWorkerTask","task","finishWorkerTask","finish","indexOf","splice","async","loadDocument","recoveryMode","ensureDoc","numPages","fingerprint","all","getPdfManager","evaluatorOptions","pdfManagerCapability","newPdfManager","source","LocalPdfManager","password","ex","reject","pdfStream","cachedChunks","PDFWorkerStream","fullRequest","getFullReader","headersReady","then","isRangeSupported","disableAutoFetch","isStreamingSupported","NetworkPdfManager","msgHandler","contentLength","rangeChunkSize","sendProgressiveData","catch","reason","loaded","readChunk","done","pdfFile","arraysToBytes","warn","flushChunks","arrayByteLength","total","Math","max","read","cancelAllRequests","getPage","pageIndex","page","ensure","rotate","ref","userUnit","view","Ref","num","gen","pdfDocument","catalog","getPageIndex","ensureCatalog","id","requestLoadedStream","onLoadedStream","stream","bytes","xref","stats","intent","getAnnotationsData","sink","start","VerbosityLevel","INFOS","Date","now","getOperatorList","renderInteractiveForms","operatorListInfo","info","close","featureId","UNSUPPORTED_FEATURES","errorOperatorList","error","onPull","desiredSize","onCancel","extractTextContent","normalizeWhitespace","combineTextItems","fontFallback","cleanup","waitOn","terminate","AbortException","cleanupPromise","clearPrimitiveCaches","forEach","destroy","onSuccess","doc","pdfInfo","onFailure","PasswordException","code","sendWithPromise","updatePassword","pdfManagerReady","InvalidPDFException","MissingPDFException","UnexpectedResponseException","UnknownErrorException","message","toString","XRefParseException","maxImageSize","disableFontFace","ignoreErrors","isEvalSupported","fontExtraProperties","byteLength","setupDoc","setup","window","isNodeJS","self","postMessage","initializeFromPort","arr","resultLength","pos","item","stringToBytes","itemLength","set","assert","bytesToString","undefined","String","fromCharCode","strBuf","chunkEnd","min","chunk","subarray","capability","isSettled","msg","console","log","isArrayBuffer","v","isArrayEqual","arr1","arr2","every","element","index","isBool","isEmptyObj","obj","isNum","isString","isSameOrigin","baseUrl","otherUrl","base","URL","origin","other","createValidAbsoluteUrl","url","absoluteUrl","protocol","_isValidProtocol","removeNullCharacters","str","replace","NullCharactersRegExp","level","Number","isInteger","shadow","string32","stringToPDFString","charCodeAt","PDFStringTranslateTable","charAt","stringToUTF8String","decodeURIComponent","escape","utf8StringToString","unescape","encodeURIComponent","unreachable","IsEvalSupportedCached","IsLittleEndianCached","createObjectURL","FormatError","Util","TextRenderingMode","StreamType","PermissionFlag","PasswordResponses","CMapCompressionType","ImageKind","FontType","AnnotationType","AnnotationStateModelType","AnnotationReviewState","AnnotationReplyType","AnnotationMarkedState","AnnotationFlag","AnnotationFieldFlag","AnnotationBorderStyleType","OPS","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","BaseException","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","NONE","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","BINARY","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","unknown","forms","javaScript","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorFontToUnicode","errorFontLoadNative","errorFontGetPath","NEED_PASSWORD","INCORRECT_PASSWORD","cond","prop","configurable","writable","constructor","super","details","status","buffer8","Uint32Array","buffer","isLittleEndian","Function","rgbBuf","g","b","m1","m2","p1","applyTransform","p2","slice","p3","p4","transpose","a","first","second","sqrt","sx","sy","rect","rect1","rect2","compare","orderedX","sort","orderedY","result","normalizeRect","digits","contentType","forceDataSchema","blob","Blob","type","ii","b1","b2","b3","nw","electron","Cmd","_clearCache","Name","isEOF","EOF","isCmd","cmd","isDict","isName","isRef","isRefsEqual","v1","v2","isStream","getBytes","RefSetCache","RefSet","Dict","nameCache","nameValue","cmdCache","cmdValue","nonSerializable","_map","objId","suppressEncryption","__nonSerializable__","assignXref","newXref","key1","key2","key3","fetch","fetchAsync","isArray","getRaw","getKeys","keys","has","callback","empty","merge","dictArray","mergedDict","dict","keyName","refCache","refValue","put","remove","size","putAlias","aliasRef","clear","_chunked_stream","_document","_stream","BasePdfManager","_docId","_password","_docBaseUrl","href","manuallyTriggered","begin","end","Stream","PDFDocument","_loadedStreamPromise","pdfNetworkStream","streamManager","ChunkedStreamManager","getStream","MissingDataException","requestRange","requestAllChunks","onReceiveData","abort","ChunkedStream","chunkSize","manager","loadedChunks","numChunksLoaded","numChunks","ceil","progressiveDataLength","lastSuccessfulEnsureByteChunk","chunks","beginChunk","floor","endChunk","curChunk","position","isEmpty","ensureByte","b0","getByte","forceClamped","strEnd","ensureRange","Uint8ClampedArray","peekedByte","ChunkedStreamSubstream","getMissingChunks","missingChunks","allChunksLoaded","subStream","currRequestId","chunksNeededByRequest","requestsByChunk","promisesByRequest","aborted","_loadedStreamCapability","rangeReader","getRangeReader","onProgress","chunkData","_requestChunks","requestId","chunksNeeded","hasChunk","chunksToRequest","groupedChunksToRequest","groupChunks","groupedChunk","sendRequest","getBeginChunk","getEndChunk","ranges","range","includes","groupedChunks","prevChunk","isProgressive","onReceiveProgressiveData","loadedRequests","requestIds","nextEmptyChunk","lastChunk","err","getLookupTableFactory","initializer","lookup","getInheritableProperty","getArray","stopWhenFound","values","loopCount","toRomanNumerals","number","lowerCase","romanBuf","ROMAN_NUMBER_MAP","romanStr","toLowerCase","log2","x","readInt8","offset","readUint16","readUint32","isWhiteSpace","ch","XRefEntryException","Page","_obj","_annotation","_crypto","_parser","_operator_list","_evaluator","_function","DEFAULT_USER_UNIT","LETTER_SIZE_MEDIABOX","isAnnotationRenderable","annotation","viewable","printable","pageDict","fontCache","builtInCMapCache","globalImageCache","pdfFunctionFactory","resourcesPromise","idCounters","idFactory","createObjId","getDocId","content","resources","_getInheritableProperty","box","mediaBox","_getBoundingBox","cropBox","intersect","streams","fetchIfRef","StreamsSequenceStream","NullStream","ObjectLoader","load","contentStreamPromise","loadResources","partialEvaluator","PartialEvaluator","options","pageListPromise","contentStream","opList","OperatorList","transparency","hasBlendModes","operatorList","_parsedAnnotations","pageOpList","annotations","flush","totalLength","opListPromises","opLists","addOp","addOpList","getTextContent","annotationsData","parsedAnnotations","annotationPromises","annotationRef","AnnotationFactory","filter","PDF_HEADER_SIGNATURE","STARTXREF_SIGNATURE","ENDOBJ_SIGNATURE","FINGERPRINT_FIRST_BYTES","EMPTY_FINGERPRINT","PDF_HEADER_VERSION_REGEXP","find","signature","limit","backwards","signatureLength","scanBytes","peekBytes","scanLength","signatureEnd","j","arg","XRef","PDFFunctionFactory","_pagePromises","catDict","pdfFormatVersion","acroForm","xfa","fields","collection","linearization","Linearization","startXRef","reset","step","startXRefLength","found","skip","parseInt","isNaN","moveStart","substring","setStartXRef","parse","Catalog","documentInfo","DocumentInfoValidators","Title","Author","Subject","Keywords","Creator","Producer","CreationDate","ModDate","Trapped","test","docInfo","PDFFormatVersion","IsLinearized","IsAcroFormPresent","IsXFAPresent","IsCollectionPresent","infoDict","trailer","customValue","Custom","hash","idArray","fingerprintBuf","calculateMD5","getByteRange","hex","padStart","objectNumberFirst","pageKidsCountCache","getPageDict","pageFirst","_getLinearizationPage","FileSpec","_colorspace","_image_utils","fetchDestination","dest","getCatalogObj","Map","GlobalImageCache","metadata","streamRef","encrypt","encryptMetadata","subtype","toplevelPagesDict","pagesObj","documentOutline","_readDocumentOutline","root","items","parent","processed","blackColor","shift","outlineDict","parseDestDictionary","destDict","resultObj","flags","color","count","rgbColor","ColorSpace","singletons","rgb","getRgb","outlineItem","unsafeUrl","newWindow","bold","italic","permissions","_readPermissions","destinations","_readDests","dests","NameTree","names","getAll","destinationId","pageLabels","_readPageLabels","style","prefix","nums","NumberTree","currentLabel","currentIndex","labelDict","st","LIMIT","A_UPPER_CASE","A_LOWER_CASE","baseCharCode","letterIndex","character","charBuf","jj","pageLayout","pageMode","viewerPreferences","ViewerPreferencesValidators","HideToolbar","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","NonFullScreenPageMode","Direction","ViewArea","ViewClip","PrintArea","PrintClip","PrintScaling","Duplex","PickTrayByPDFSize","PrintPageRange","NumCopies","prefs","prefValue","openAction","action","attachments","fs","serializable","appendIfJavaScriptDict","jsDict","js","promises","translatedFonts","translatedFont","loadedName","fallback","translated","nodesToVisit","visitedNodes","currentPageIndex","next","currentNode","pop","kids","last","pageRef","kidRef","parentRef","node","getAsync","kidPromises","kid","pagesBeforeRef","params","actionType","actionName","startsWith","addDefaultProtocolToUrl","urlDict","remoteDest","split","JSON","stringify","namedAction","jsAction","jsUrl","RegExp","exec","tryConvertUrlEncoding","entries","xrefstms","_cacheMap","streamTypes","fontTypes","startXRefQueue","trailerDict","indexObjects","readXRef","ids","fileId","CipherTransformFactory","processXRefTable","parser","tableState","entryNum","streamPos","lexer","parserBuf1","buf1","parserBuf2","buf2","readXRefTable","getObj","firstEntryNum","entryCount","entry","free","uncompressed","processXRefStream","streamParameters","byteWidths","streamState","entryRanges","readXRefStream","typeFieldWidth","offsetFieldWidth","generationFieldWidth","generation","LF","CR","LT","readToken","token","skipUntil","what","dataLength","skipped","objRegExp","endobjRegExp","nestedObjRegExp","trailerBytes","startxrefBytes","objBytes","xrefBytes","trailers","xrefStms","startPos","endPos","checkPos","tokenStr","objToken","xrefTagOffset","Parser","Lexer","allowStreams","rootDict","startXRefParsedCache","topDict","getEntry","xrefEntry","cacheEntry","fetchUncompressed","fetchCompressed","makeSubStream","obj1","obj2","obj3","createCipherTransform","tableOffset","NameOrNumberTree","_type","kidsOrEntries","limits","tmp","currentKey","mm","description","contentAvailable","pickPlatformItem","filename","_filename","contentRef","fileObj","mayHaveChildren","addChildren","dictKeys","rawValue","refSet","_walk","nodesToRevisit","pendingRequests","getBaseStreams","baseStreams","foundMissingData","requestRanges","_ccitt_stream","_jbig2_stream","_jpeg_stream","_jpx_stream","MAX_LENGTH_TO_CACHE","MAX_ADLER32_LENGTH","computeAdler32","bytesLength","imageCache","refill","cipherTransform","makeInlineImage","makeStream","decryptString","maybeEIPos","state","followingBytes","endOffset","peekByte","markerLength","foundEOI","getUint16","findDefaultInlineStreamEnd","inlineStreamSkipEI","tildePos","maybeEI","dictLength","beginInlineImagePos","filterName","filterZero","findDCTDecodeInlineStreamEnd","findASCII85DecodeInlineStreamEnd","findASCIIHexDecodeInlineStreamEnd","cacheKey","imageStream","imageBytes","initialStreamPos","dictBytes","createStream","skipToNextLine","nextChar","tryShift","ENDSTREAM_SIGNATURE","actualLength","_findStreamLength","MAX_TRUNCATION","TRUNCATED_SIGNATURE","maybeLength","lastByte","makeFilter","filterArray","paramsArray","xrefStreamStats","PredictorStream","FlateStream","earlyChange","LZWStream","JpegStream","JpxStream","Ascii85Stream","AsciiHexStream","CCITTFaxStream","RunLengthStream","Jbig2Stream","specialChars","toHexDigit","knownCommands","_hexStringNumWarn","currentChar","eNotation","divideBy","sign","baseValue","powerValue","powerValueSign","currentDigit","peekChar","numParen","charBuffered","previousCh","x2","firstDigit","secondDigit","isFirstHex","_hexStringWarn","comment","getNumber","getString","getName","getHexString","knownCommandFound","possibleCommand","getInt","linDict","allowZeroValue","hints","hintsLength","hint","getHints","endFirst","mainXRefEntriesOffset","StringStream","DecodeStream","DecryptStream","arrayBuffer","getInt32","emptyBuffer","maybeMinBufferLength","_rawMinBufferLength","bufferLength","eof","minBufferLength","readBlock","ensureBuffer","requested","buffer2","bufEnd","newLength","codeLenCodeMap","Int32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","cmf","flg","codeSize","codeBuf","getBits","bits","getCode","table","codes","maxLen","codeLen","codeVal","generateHuffmanTable","lengths","val","code2","hdr","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","bitsLength","bitsOffset","codeLengths","repeatLength","code1","dist","k","blockLen","check","block","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","bytesPerPixel","sum","compArray","bitMask","kk","prevRow","up","upLeft","left","pa","pb","pc","decrypt","nextChunk","initialized","hasMoreData","input","maxDecodeLength","digit","repeatHeader","cachedData","bitsCached","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","q","estimatedDecodedSize","blockSize","prevCode","decodedLength","currentBufferLength","hasPrev","_ccitt","ccittFaxDecoder","CCITTFaxDecoder","K","EndOfLine","EncodedByteAlign","Columns","Rows","EndOfBlock","BlackIs1","readNextChar","twoDimTable","whiteTable1","whiteTable2","blackTable1","blackTable2","blackTable3","encoding","eoline","byteAlign","rows","eoblock","black","codingLine","refLine","codingPos","row","nextLine2D","inputBits","inputBuf","outputBits","rowsDone","_lookBits","_eatBits","refPos","blackPixels","code3","_getTwoDimCode","_addPixels","_getBlackCode","_getWhiteCode","_addPixelsNeg","gotEOL","a1","limitValue","_findTableCode","_jbig","jbig2Image","Jbig2Image","globalsStream","globals","parseChunks","_arithmetic_decoder","Jbig2Error","ContextCache","DecodingContext","decodeInteger","contextCache","procedure","decoder","contexts","getContexts","prev","bit","readBit","decodeIAID","Int8Array","ArithmeticDecoder","cache","SegmentTypes","CodingTemplates","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","decodeBitmap","mmr","width","height","templateIndex","prediction","at","decodingContext","decodeMMRBitmap","Reader","contextLabel","pixel","row1","row2","bitmap","decodeBitmapTemplate0","useskip","template","templateLength","templateX","templateY","changingTemplateEntries","reuseMask","minX","maxX","minY","changingEntriesLength","changingTemplateX","changingTemplateY","changingTemplateBit","i0","j0","sbb_left","sbb_top","sbb_right","pseudoPixelContext","ltp","decodeRefinement","referenceBitmap","offsetX","offsetY","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceHeight","decodeTextRegion","huffman","refinement","defaultPixelValue","numberOfSymbolInstances","stripSize","inputSymbols","symbolCodeLength","transposed","dsOffset","referenceCorner","combinationOperator","huffmanTables","refinementTemplateIndex","refinementAt","logStripSize","huffmanInput","stripT","tableDeltaT","decode","firstS","currentS","tableFirstS","currentT","symbolId","symbolIDTable","applyRefinement","symbolBitmap","symbolWidth","symbolHeight","rdw","rdh","s2","t2","symbolRow","offsetT","offsetS","maxWidth","deltaS","tableDeltaS","readSegmentHeader","segmentHeader","segmentType","typeName","deferredNonRetain","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","referredToSegmentNumberSize","referredTo","pageAssociation","genericRegionInfo","readRegionSegmentInformation","genericRegionMmr","RegionSegmentInformationFieldLength","searchPattern","headerEnd","readSegments","header","segments","segment","randomAccess","processSegment","visitor","atLength","dictionary","dictionaryFlags","huffmanDHSelector","huffmanDWSelector","bitmapSizeSelector","aggregationInstancesSelector","bitmapCodingContextUsed","bitmapCodingContextRetained","refinementTemplate","numberOfExportedSymbols","numberOfNewSymbols","textRegion","textRegionSegmentFlags","textRegionHuffmanFlags","huffmanFS","huffmanDS","huffmanDT","huffmanRefinementDW","huffmanRefinementDH","huffmanRefinementDX","huffmanRefinementDY","huffmanRefinementSizeSelector","patternDictionary","patternDictionaryFlags","patternWidth","patternHeight","maxPatternIndex","halftoneRegion","halftoneRegionFlags","enableSkip","gridWidth","gridHeight","gridOffsetX","gridOffsetY","gridVectorX","gridVectorY","genericRegion","genericRegionSegmentFlags","pageInfo","resolutionX","resolutionY","pageSegmentFlags","lossless","requiresBuffer","combinationOperatorOverride","callbackName","processSegments","SimpleSegmentVisitor","HuffmanLine","lineData","isOOB","rangeLow","prefixLength","rangeLength","prefixCode","isLowerRange","HuffmanTreeNode","line","children","isLeaf","HuffmanTable","lines","prefixCodesDone","assignPrefixCodes","rootNode","buildTree","onPageInformation","currentPageInfo","rowSize","drawBitmap","regionInfo","mask","mask0","offset0","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","onSymbolDictionary","currentSegment","referredSegments","customTables","tableDeltaHeight","tableDeltaWidth","tableBitmapSize","tableAggregateInstances","customIndex","getStandardTable","getCustomHuffmanTable","getSymbolDictionaryHuffmanTables","symbols","referredSymbols","newSymbols","currentHeight","tableB1","symbolWidths","currentWidth","totalWidth","firstSymbol","deltaWidth","numberOfInstances","rdx","rdy","bitmapSize","collectiveBitmap","readUncompressedBitmap","originalEnd","bitmapEnd","numberOfSymbolsDecoded","xMax","bitmapWidth","xMin","exportedSymbols","currentFlag","totalSymbolsLength","runLength","decodeSymbolDictionary","onImmediateTextRegion","numberOfSymbols","reader","runCodesTable","repeatedLength","numberOfRepeats","getTextRegionHuffmanTables","onImmediateLosslessTextRegion","patterns","patternBitmap","decodePatternDictionary","regionWidth","regionHeight","regionBitmap","numberOfPatterns","pattern0","bitsPerValue","grayScaleBitPlanes","mmrInput","mg","ng","patternIndex","patternRow","regionRow","regionX","regionY","decodeHalftoneRegion","onImmediateHalftoneRegion","lowestValue","highestValue","prefixSizeBits","rangeSizeBits","currentRangeLow","decodeTablesSegment","htOffset","decodeNode","linesLength","prefixLengthMax","histogram","currentCode","currentTemp","currentLength","firstCode","standardTablesCache","currentByte","endOfBlock","lookForEOFLimit","numBits","parseJbig2Chunks","imgData","numberOfPages","bitPacked","parseJbig2","QeTable","qe","nmps","nlps","switchFlag","bp","dataEnd","chigh","clow","byteIn","ct","cx_index","cx_mps","qeTableIcx","qeIcx","_jpg","jpegOptions","decodeTransform","colorTransform","decodeArr","forceRGB","bitsPerComponent","decodeArrLength","transformNeeded","maxValue","jpegImage","JpegImage","getData","drawWidth","drawHeight","isSourcePDF","JpegError","DNLMarkerError","scanLines","EOIMarkerError","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","_decodeTransform","_colorTransform","buildHuffmanTable","getBlockBufferOffset","component","col","blocksPerLine","decodeScan","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","parseDNLMarker","mcusPerLine","progressive","startOffset","bitsData","bitsCount","nextByte","maybeScanLines","blockRow","decodeHuffman","tree","receive","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","mcu","mcuCol","blockCol","h","decodeBlock","decodeFn","componentsLength","blockOffset","huffmanTableDC","diff","blockData","pred","rs","huffmanTableAC","z","offsetZ","fileMarker","mcuExpected","blocksPerColumn","mcusPerColumn","mcuToRead","findNextFileMarker","invalid","partialMsg","quantizeAndInverse","blockBufferOffset","v0","v3","v4","v5","v6","v7","p0","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","currentPos","maxPos","newPos","currentMarker","newMarker","dnlScanLines","readDataBlock","prepareComponents","samplesPerLine","maxH","maxV","blocksPerLineForMcu","blocksBufferSize","jfif","adobe","numSOSMarkers","quantizationTables","huffmanTablesAC","huffmanTablesDC","markerLoop","appData","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","precision","sofScanLines","componentIds","componentId","componentsCount","qId","quantizationId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","nextFileMarker","output","scaleX","scaleY","numComponents","componentScaleX","componentScaleY","blocksPerScanline","xScaleBlockOffset","lastComponentScaleX","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","_convertYcckToCmyk","_convertCmykToRgb","_getLinearizedBlockData","rgbData","grayColor","_jpx","jpxImage","JpxImage","tileCount","tiles","tileComponents","tileWidth","tileHeight","tileLeft","tileTop","top","src","srcPosition","dataPosition","imgRowSize","tileRowSize","JpxError","SubbandsGainLog2","LL","LH","HL","HH","failOnCorruptedImage","calculateComponentDimensions","siz","x0","XOsiz","XRsiz","x1","Xsiz","y0","YOsiz","YRsiz","y1","Ysiz","calculateTileGrids","context","tile","SIZ","numXtiles","XTOsiz","XTsiz","numYtiles","YTOsiz","YTsiz","tx0","ty0","tx1","ty1","Csiz","tileComponent","tcx0","tcy0","tcx1","tcy1","getBlocksDimensions","codOrCoc","codingStyleParameters","entropyCoderWithCustomPrecincts","PPx","precinctsSizes","PPy","xcb_","xcb","ycb_","ycb","buildPrecincts","resolution","dimensions","precinctWidth","precinctHeight","isZeroRes","resLevel","precinctWidthInSubband","precinctHeightInSubband","numprecinctswide","trx1","trx0","numprecinctshigh","try1","try0","numprecincts","precinctParameters","buildCodeblocks","subband","codeblock","precinctNumber","codeblockWidth","codeblockHeight","cbx0","tbx0","cby0","tby0","cbx1","tbx1","cby1","tby1","codeblocks","precincts","cbx","cby","tbx0_","tby0_","tbx1_","tby1_","subbandType","Lblock","precinct","cbxMin","cbxMax","cbyMin","cbyMax","codeblockParameters","numcodeblockwide","numcodeblockhigh","createPacket","layerNumber","precinctCodeblocks","subbands","LayerResolutionComponentPositionIterator","tileIndex","currentTile","layersCount","codingStyleDefaultParameters","maxDecompositionLevelsCount","decompositionLevelsCount","nextPacket","resolutions","packet","ResolutionLayerComponentPositionIterator","ResolutionPositionComponentLayerIterator","maxNumPrecinctsInLevel","maxNumPrecincts","PositionComponentResolutionLayerIterator","getPrecinctSizesInImageScale","precinctsIterationSizes","px","py","maxNumHigh","maxNumWide","sizeInImageScale","getPrecinctIndexIfExist","ComponentPositionResolutionLayerIterator","pxIndex","pyIndex","precinctIterationSizes","posX","minWidth","posY","minHeight","startPrecinctRowIndex","MAX_VALUE","sizePerComponent","sizePerResolution","minWidthCurrentComponent","minHeightCurrentComponent","maxNumWideCurrentComponent","maxNumHighCurrentComponent","scale","widthCurrentResolution","heightCurrentResolution","buildPackets","blocksDimensions","bscale","resolutionSubbands","progressionOrder","packetsIterator","parseTilePackets","bufferSize","skipNextBit","skipMarkerIfEqual","skipBytes","alignToByte","readCodingpasses","sopMarkerUsed","COD","ephMarkerUsed","codeblockColumn","codeblockRow","codeblockIncluded","firstTimeInclusion","included","inclusionTree","zeroBitPlanesTree","InclusionTree","TagTree","incrementValue","nextLevel","zeroBitPlanes","codingpasses","codingpassesLog2","codedDataLength","packetItem","copyCoefficients","coefficients","levelWidth","levelHeight","delta","mb","reversible","segmentationSymbolUsed","right","bottom","blockWidth","blockHeight","bitModel","currentCodingpassType","BitModel","dataItem","encodedData","setDecoder","runSignificancePropagationPass","runMagnitudeRefinementPass","runCleanupPass","checkSegmentationSymbol","nb","coefficentsSign","magnitude","coefficentsMagnitude","bitsDecoded","magnitudeCorrection","interleave","levelOffset","transformTile","quantizationParameters","spqcds","SPqcds","scalarExpounded","guardBits","reversibleTransformation","ReversibleTransform","IrreversibleTransform","subbandCoefficients","Float32Array","mu","epsilon","gainLog2","calculate","initializeTile","qcdOrQcc","QCC","QCD","COC","headerSize","lbox","tbox","jumpDataLength","method","colorspace","parseCodestream","headerType","parseImageProperties","newByte","doNotRecover","sqcd","spqcdSize","mainHeader","isSigned","qcd","noQuantization","spqcd","cqcc","qcc","cod","scod","multipleComponentTransform","blockStyle","selectiveArithmeticCodingBypass","resetContextProbabilities","terminationOnEachCodingPass","verticallyStripe","predictableTermination","precinctsSize","unsupported","partIndex","partsCount","resultImages","transformedTiles","y2","tile0","out","fourComponents","y0items","y1items","y2items","y3items","component0","alpha01","transformComponents","levelsLength","levels","currentLevel","defaultValue","stopValue","propagateValues","levelIndex","currentValue","LLAndLHContextsLabel","HLContextLabel","HHContextLabel","contextLabelTable","coefficientCount","neighborsSignificance","processingFlags","setNeighborsSignificance","column","labels","i1","decodeSignBit","contribution","sign0","sign1","significance1","decoded","horizontalContribution","indexNext","width4","index0","iNext","oneRowDown","twoRowsDown","threeRowsDown","indexBase","checkAllEmpty","i2","Transform","u0","ll","iterate","extend","j1","j2","hl_lh_hh","u","llWidth","llHeight","llItems","rowBuffer","numBuffers","colBuffers","currentBuffer","current","alpha","beta","gamma","calculateSHA512","calculateSHA384","calculateSHA256","PDF20","PDF17","ARCFourCipher","AES256Cipher","AES128Cipher","keyLength","encryptBlock","tmp2","decryptBlock","h0","h1","h2","h3","paddedLength","padded","w","f","rotateArg","Word64","highInteger","lowInteger","high","low","and","word","xor","or","shiftRight","places","shiftLeft","rotateRight","not","add","lowAdd","highAdd","copyTo","assign","rotr","maj","sigma","sigmaPrime","littleSigma","h4","h5","h6","h7","t1","littleSigmaPrime","mode384","tmp3","tmp1","NullCipher","AESBaseCipher","_s","_inv_s","_mix","_mixCol","bufferPosition","cipherKey","_keySize","_cyclesOfRepetition","s0","s1","s3","finalize","sourceLength","iv","plain","_decrypt","_key","outputLength","lastBlock","psLen","_decryptBlock2","cipher","_encrypt","_rcon","_expandKey","rcon","t3","t4","compareByteArrays","array1","array2","checkOwnerPassword","ownerValidationSalt","userBytes","ownerPassword","hashData","checkUserPassword","userValidationSalt","userPassword","getOwnerKey","ownerKeySalt","ownerEncryption","getUserKey","userKeySalt","userEncryption","concatArrays","calculatePDF20Hash","arrayLength","k1","remainder","concatBytes","CipherTransform","stringCipherConstructor","streamCipherConstructor","StringCipherConstructor","StreamCipherConstructor","defaultPasswordBytes","prepareKeyData","revision","hashDataSize","keyLengthInBytes","checkData","encryptionKey","derivedKey","identityName","algorithm","cfDict","streamCryptoName","handlerDict","passwordBytes","fileIdBytes","uBytes","perms","passwordLength","pdfAlgorithm","createEncryptionKey20","decodeUserPassword","cf","stmf","strf","eff","buildObjectKey","isAes","buildCipherConstructor","cfm","cryptFilter","cipherConstructor","numComps","srcOffset","getRgbItem","destOffset","inputLength","decodeMap","bpc","isDefaultDecode","originalWidth","originalHeight","actualHeight","comps","numComponentColors","needsResizing","isPassthrough","allColors","colorMap","getRgbBuffer","rgbPos","destPos","w1","w2","xRatio","yRatio","oldIndex","newIndex","xScaled","w1Scanline","resizeRgbImage","usesZeroToOneRange","cs","res","IR","parseToIR","fromIR","whitePoint","blackPoint","gray","cmyk","CalGrayCS","matrix","CalRGBCS","basePatternCS","PatternCS","baseIndexedCS","hiVal","IndexedCS","alt","tintFn","AlternateCS","LabCS","colorSpaces","resCS","altIR","DeviceGrayCS","DeviceRgbCS","DeviceCmykCS","tmpBuf","baseNumComps","baseBuf","scaled","tinted","getOutputLength","baseCS","highVal","outputDelta","lookupPos","convertToRgb","srcScale","AG","G","L","YW","XW","ZW","XB","YB","ZB","BRADFORD_SCALE_MATRIX","BRADFORD_SCALE_INVERSE_MATRIX","SRGB_D65_XYZ_TO_RGB_MATRIX","FLAT_WHITEPOINT_MATRIX","tempNormalizeMatrix","tempConvertMatrix1","tempConvertMatrix2","DECODE_L_CONSTANT","matrixProduct","sRGBTransferFunction","adjustToRange","decodeL","A","B","C","AGR","GR","BGG","GG","CGB","GB","X","MXA","MXB","MXC","MYA","MYB","MYC","Z","MZA","MZB","MZC","XYZ","XYZ_Flat","sourceWhitePoint","XYZ_In","LMS","LMS_Flat","convertToFlat","normalizeWhitePointToFlat","XYZ_Black","sourceBlackPoint","zeroDecodeL","X_Scale","X_Offset","Y_Scale","Y_Offset","Z_Scale","Z_Offset","compensateBlackPoint","XYZ_D65","LMS_D65","convertToD65","normalizeWhitePointToD65","SRGB","fn_g","high1","low2","high2","maxVal","Ls","as","bs","amin","amax","bmin","bmax","M","N","LocalImageCache","_nameRefMap","_imageMap","_imageCache","getByRef","NUM_PAGES_THRESHOLD","MAX_IMAGES_TO_CACHE","_refCache","pageIndexSet","Set","onlyData","getQuadPoints","MarkupAnnotation","AnnotationBorderStyle","Annotation","quadPoints","quadPointsLists","parameters","LinkAnnotation","TextAnnotation","fieldType","TextWidgetAnnotation","ButtonWidgetAnnotation","ChoiceWidgetAnnotation","WidgetAnnotation","PopupAnnotation","FreeTextAnnotation","LineAnnotation","SquareAnnotation","CircleAnnotation","PolylineAnnotation","PolygonAnnotation","CaretAnnotation","InkAnnotation","HighlightAnnotation","UnderlineAnnotation","SquigglyAnnotation","StrikeOutAnnotation","StampAnnotation","FileAttachmentAnnotation","setContents","setModificationDate","setFlags","setRectangle","setColor","setBorderStyle","setAppearance","annotationFlags","borderStyle","contents","hasAppearance","appearance","modificationDate","flag","_hasFlag","_isViewable","_isPrintable","dictType","setWidth","setStyle","setDashArray","setHorizontalCornerRadius","setVerticalCornerRadius","appearanceStates","normalAppearanceState","evaluator","renderForms","appearanceDict","bbox","maxY","getAxialAlignedBoundingBox","getTransformMatrix","dashArray","horizontalCornerRadius","verticalCornerRadius","maxHeight","isValid","allZeros","radius","rawIRT","inReplyTo","rt","replyType","setCreationDate","creationDate","hasPopup","annotationType","fieldName","_constructFieldName","fieldValue","alternativeText","defaultAppearance","fieldResources","fieldFlags","readOnly","hasFieldFlag","unshift","loopDict","alignment","textAlignment","maximumLength","multiLine","comb","checkBox","radioButton","pushButton","_processCheckBox","_processRadioButton","_processPushButton","customAppearance","exportValueOptionsDict","exportValues","exportValue","buttonValue","fieldParent","fieldParentValue","option","isOptionArray","displayValue","combo","multiSelect","stateModel","parentItem","parentSubtype","parentType","rawParent","parentId","parentFlags","lineCoordinates","rawVertices","vertices","originalInkLists","inkLists","file","QueueOptimizer","addState","parentState","pattern","checkFn","iterateFn","processFn","InitialState","iCurr","fnArray","argsArray","match","lastProcessed","curr","iFirstSave","iFirstTransform","iFirstPIIXO","map","maxLineHeight","currentX","currentY","img","imgWidth","imgHeight","dataOffset","kind","iFirstPIMXO","imageMask","handlePaintSolidColorImageMask","iTransform","transformArgs","isSameImage","firstPIMXOArg0","firstTransformArg0","firstTransformArg3","iPIMXO","positions","images","maskParams","firstPIXOArg0","iFirstSetFont","firstSetFontArg0","firstSetFontArg1","iFirstBeginText","iFirstSetTextMatrix","iFirstShowText","iFirstEndText","iFirst","iEndText","fn","_optimize","NullOptimizer","streamSink","_streamSink","optimizer","dependencies","_totalLength","weight","_resolved","ready","CHUNK_SIZE","addDependency","_transfers","transfers","cached","enqueue","_cmap","_fonts","_encodings","_unicode","_standard_fonts","_pattern","_bidi","_glyphlist","_metrics","_murmurhash","_image","DefaultPartialEvaluatorOptions","parsingType3Font","fetchBuiltInCMap","sendWithStream","getReader","pump","compressionType","TimeSlotManager","normalizeBlendMode","parsingArray","maybeBM","checked","endTime","deferred","newOptions","newEvaluator","nodes","graphicStates","graphicStatesKeys","graphicState","bm","xObjects","xObjectsKeys","xObject","xResources","xobj","initialState","group","groupOptions","isolated","knockout","groupSubtype","colorSpace","parseColorSpace","backdrop","image","isInline","localImageCache","imageRef","bitStrideLength","imgArray","PDFImage","createMask","imageIsFromDecodeStream","inverseDecode","softMask","imageObj","createImageData","cacheGlobally","shouldCache","imgPromise","buildImage","addPageIndex","setData","handleSMask","stateManager","smaskContent","smaskOptions","transferObj","isPDFFunction","transferFn","transferMap","buildFormXObject","clone","patternDict","tilingOpList","resourcesArray","patternResources","getTilingPatternIR","tilingPatternIR","addDependencies","handleSetFont","fontArgs","fontRef","fontName","loadFont","isType3Font","loadType3Data","TranslatedFont","ErrorFont","extraProperties","chars","glyphs","charsToGlyphs","textRenderingMode","fillColorSpace","buildFontPaths","gState","gStateObj","gStateKeys","errorFont","fontRes","getFallbackFontDict","fontCapability","preEvaluatedFont","preEvaluateFont","descriptor","fontID","translatedPromise","fontRefIsRef","fontAliases","aliasFontRef","Font","getFontID","translateFont","fontType","fontFile3","getFontType","parsingText","lastIndex","opArgs","patternName","typeNum","handleTilingType","shading","Pattern","parseShading","getIR","EvalState","xobjs","StateManager","preprocessor","EvaluatorPreprocessor","timeSlotManager","closePendingRestoreOPS","argument","savedStatesDepth","promiseBody","stop","operation","localImage","getByName","resolveXObject","rejectXObject","globalImage","buildPaintImageXObject","fontSize","ensureStateFont","handleText","combinedGlyphs","arrLength","arrItem","strokeColorSpace","handleColorN","shadingRes","patternIR","dictName","extGState","buildPath","seenStyles","TextState","WhitespaceRegexp","textContent","styles","textContentItem","vertical","lastAdvanceWidth","lastAdvanceHeight","textAdvanceScale","spaceWidth","fakeSpaceMin","Infinity","fakeMultiSpaceMin","fakeMultiSpaceMax","textRunBreakAllowed","SPACE_FACTOR","MULTI_SPACE_FACTOR","MULTI_SPACE_FACTOR_MAX","emptyXObjectCache","textState","ensureTextContentItem","fontFamily","fallbackName","ascent","descent","tsm","textHScale","textRise","fontMatrix","glyphHeight","trm","ctm","textMatrix","textLineMatrix","scaleLineX","scaleCtmX","isMonospace","replaceWhitespace","buildTextContentItem","textChunk","glyph","glyphWidth","vmetric","glyphUnicode","unicode","NormalizedUnicodes","getNormalizedUnicodes","reverseIfRtl","charSpacing","isSpace","wordSpacing","addFakeSpaces","tx","ty","translateTextMatrix","abs","fakeSpaces","round","flushTextContentItem","bidiResult","bidi","enqueueChunk","advance","fontNameArg","fontSizeArg","leading","isSameTextLine","translateTextLineMatrix","carriageReturn","calcTextLineMatrixAdvance","setTextLineMatrix","breakTextRun","currentState","xObjStateManager","sinkWrapper","enqueueInvoked","gStateFont","extractDataStructures","baseDict","properties","cidToGidBytes","toUnicode","toUnicodePromise","readToUnicode","composite","cidSystemInfo","registry","ordering","supplement","cidToGidMap","differences","baseEncodingName","diffEncoding","defaultEncoding","getEncoding","isSymbolicFont","FontFlags","Symbolic","isNonsymbolicFont","Nonsymbolic","StandardEncoding","WinAnsiEncoding","MacRomanEncoding","SymbolSetEncoding","ZapfDingbatsEncoding","hasEncoding","buildToUnicode","builtToUnicode","readCidToGidMap","forceGlyphs","charcode","glyphName","glyphsUnicodeMap","getGlyphsUnicode","codeStr","_buildSimpleFontToUnicode","getUnicodeForGlyph","baseEncoding","fromCodePoint","ToUnicodeMap","hasIncludedToUnicodeMap","fallbackToUnicode","cMap","builtInCMap","IdentityCMap","ucs2CMapName","CMapFactory","useCMap","ucs2CMap","cid","ucs2","IdentityToUnicodeMap","firstChar","lastChar","cmapObj","cmap","getMap","charCode","glyphsData","glyphID","extractWidths","defaultVMetrics","widths","glyphsWidths","defaultWidth","glyphsVMetrics","vmetrics","parseFloat","baseFontName","metrics","getBaseFontMetrics","buildCharCodeToWidth","firstWidth","FixedPitch","isSerifFont","fontNameWoStyle","getSerifFonts","search","monospace","lookupName","getStdFontMap","Metrics","getMetrics","glyphWidths","widthsByGlyphName","uint8array","df","MurmurHash3_64","update","diffLength","diffBuf","diffEntry","hexdigest","maxCharIndex","Serif","getSymbolsFonts","newProperties","baseFont","fontNameStr","baseFontStr","cMapPromise","fontFile","length1","length2","length3","fixedPitch","xHeight","capHeight","italicAngle","cidEncoding","fontChar","renderer","hasBuiltPath","getPathJs","accent","_fallbackFontDict","_extraProperties","type3Loaded","sent","exportData","glyphCacheValues","parentOperatorList","type3Options","type3Evaluator","loadCharProcsPromise","charProcs","fontResources","charProcKeys","charProcOperatorList","glyphStream","dummyOperatorList","stateStack","old","txDiff","tyDiff","denominator","calcRenderMatrix","getOPMap","numArgs","variableArgs","J","ri","gs","Q","cm","re","S","F","W","BT","ET","Tc","Tw","Tz","TL","Tf","Tr","Ts","Td","TD","Tm","Tj","TJ","d0","d1","CS","SC","SCN","sc","scn","RG","rg","sh","BI","ID","EI","Do","MP","DP","BMC","BDC","EMC","BX","EX","BM","BD","true","fa","fal","fals","false","nu","nul","null","opMap","nonProcessedArgs","_numInvalidPathOPS","opSpec","argsLength","preprocessCommand","CMap","BUILT_IN_CMAPS","MAX_MAP_RANGE","codespaceRanges","numCodespaceRanges","dstLow","dst","nn","codespaceRange","isIdentityCMap","addCodespaceRange","BinaryCMapReader","hexToInt","hexToStr","addHex","incHex","MAX_NUM_SIZE","MAX_ENCODED_NUM_SIZE","BinaryCMapStream","readByte","readNumber","stack","sp","readHexNumber","char","sequence","dataSize","subitemsCount","readHex","mapOne","readSigned","mapCidRange","readHexSigned","mapBfRange","readString","strToInt","expectString","expectInt","parseBfChar","parseBfRange","mapBfRangeToArray","parseCidChar","parseCidRange","parseCodespaceRange","parseWMode","parseCMapName","parseCMap","previous","embeddedUseCMap","objLoop","extendCMap","createBuiltInCMap","newCMap","useCodespaceRanges","contains","cMapData","parsedCMap","SEAC_ANALYSIS_ENABLED","_cff_parser","_font_renderer","_type1_parser","PRIVATE_USE_AREAS","PDF_GLYPH_SPACE_UNITS","EXPORT_DATA_PROPERTIES","EXPORT_DATA_EXTRA_PROPERTIES","Script","Italic","AllCap","SmallCap","ForceBold","MacStandardGlyphOrdering","adjustWidths","recoverGlyphName","Glyph","operatorListId","isInFont","matchesForCache","OpenTypeFileBuilder","writeInt16","writeInt32","writeData","sfnt","tables","getSearchParams","entriesCount","entrySize","maxPower2","searchRange","rangeShift","toArray","tablesNames","tableName","numTables","tableOffsets","searchParams","checksum","addTable","tag","missingFile","glyphCache","toFontChar","fallbackToSystemFont","fileType","fileSubtype","isTrueTypeFile","isTrueTypeCollectionFile","isOpenTypeFile","isType1File","isCFFFile","getFontFileType","mimetype","cff","CFFFont","Type1Font","convert","checkAndRepair","isOpenType","seacMap","int16","signedInt16","string16","safeString16","buildToFontChar","adjustMapping","charCodeToGlyphId","hasGlyph","newGlyphZeroId","newMap","privateUseAreaIndex","nextAvailableFontCharCode","privateUseOffetEnd","originalCharCode","glyphId","fontCharCode","createCmapTable","numGlyphs","codeIndices","getRanges","bmpLength","trailingRangesCount","segCount","startCount","endCount","idDeltas","idRangeOffsets","glyphsIds","bias","contiguous","format314","format31012","header31012","createOS2Table","charstrings","override","unitsPerEm","yMax","yMin","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","firstCharIndex","lastCharIndex","getUnicodeRangeFor","ascentScaled","typoAscent","typoDescent","winAscent","winDescent","createPostTable","angle","createNameTable","proto","strings","stringsUnicode","strBufUnicode","platforms","encodings","languages","namesRecordCount","nameTable","strOffset","strs","FontRendererFactory","exportDataProperties","stdFontMap","nonStdFontMap","getNonStdFontMap","isStandardFont","remeasure","GlyphMapForStandardFonts","getGlyphMapForStandardFonts","SupplementalGlyphMapForArialBlack","getSupplementalGlyphMapForArialBlack","SupplementalGlyphMapForCalibri","getSupplementalGlyphMapForCalibri","unicodeCharCode","getDingbatsGlyphsUnicode","VALID_TABLES","readTables","head","hhea","hmtx","maxp","post","readTableEntry","previousPosition","readOpenTypeHeader","ttf","entrySelector","sanitizeGlyph","sourceStart","sourceEnd","destStart","hintsValid","glyphProfile","sizeOfInstructions","glyf","contoursCount","flagsCount","instructionsStart","instructionsLength","instructionsEnd","coordinatesLength","xLength","yLength","xyLength","repeat","glyphDataLength","readNameTable","numRecords","stringsStart","records","platform","language","record","nameIndex","TTOpsStackDeltas","sanitizeTTProgram","ttContext","funcId","lastEndf","lastDeff","callstack","functionsCalled","tooComplexToFollowFunctions","inFDEF","ifLevel","inELSE","op","functionsStackDeltas","stackTop","functionsDefined","functionsUsed","newStackLength","stackDelta","NaN","foldTTTable","cffFile","ttcData","ttc","numFonts","offsetTable","ttcTag","majorVersion","minorVersion","dsigTag","dsigLength","dsigOffset","readTrueTypeCollectionHeader","potentialHeader","potentialTables","nameEntry","readTrueTypeCollectionData","isTrueType","loca","isComposite","fpgm","prep","numGlyphsOut","dupFirstEntry","maxFunctionDefs","maxSizeOfInstructions","cvt","checkInvalidFunctions","cvtData","sanitizeTTPrograms","numOfMetrics","numMissing","sanitizeMetrics","locaLength","indexToLocFormat","numGlyphsPlusOne","sanitizeHead","missingGlyphs","isGlyphLocationsLong","glyphsInfo","itemSize","itemDecode","itemEncode","locaDataSize","locaData","oldGlyfData","oldGlyfDataLength","newGlyfData","writeOffset","simpleGlyph","firstEntryLength","sanitizeGlyphLocations","metricsOverride","propertiesObj","maxpNumGlyphs","glyphNames","valid","glyphNameIndexes","customNames","stringLength","readPostScriptTable","isCidToGidMapEmpty","cmapTable","platformId","encodingId","mappings","hasShortCmap","potentialTable","canBreak","useTable","format","segIndex","offsetsCount","rangeOffset","offsetIndex","offsets","readCmapTable","cmapPlatformId","cmapEncodingId","cmapMappings","cmapMappingsLength","standardGlyphName","unicodeOrCharCode","glyphZeroId","newMapping","os2","selection","validateOS2Table","CFFParser","duplicateFirstGlyph","compiler","CFFCompiler","compile","namePrototype","builder","tableTag","builtInEncoding","amend","adjustToUnicode","mapping","getGlyphMapping","hasGlyphId","getCharCodes","charCodes","createCharCode","seacs","charset","getCharset","seac","baseGlyphName","accentGlyphName","baseGlyphId","accentGlyphId","accentOffset","baseFontCharCode","accentFontCharCode","tan","cffWidths","charstring","possibleSpaceReplacements","charCodeOf","charToGlyph","widthCode","mapSpecialUnicodeValues","charsCache","charsCacheKey","readCharCode","type1FontGlyphMapping","findBlock","streamBytes","startIndex","streamBytesLength","headerBlockLength","pfbHeader","pfbHeaderPresent","headerBlock","suggestedLength","headerBytes","headerBytesLength","EEXEC_SIGNATURE","streamStartPos","getHeaderBlock","Type1Parser","extractFontHeader","eexecBytes","eexecBlock","extractFontProgram","type2Charstrings","getType2Charstrings","subrs","getType2Subrs","wrap","getSeacs","charstringsLen","type1Charstrings","type1Subrs","type2Subrs","CFF","CFFHeader","CFFTopDict","setByName","CFFStrings","globalSubrIndex","CFFIndex","charsetArray","CFFStandardStrings","CFFCharset","charStringsIndex","charStrings","privateDict","CFFPrivateDict","field","privateData","subrIndex","subrsIndex","charsets","isCIDFont","CFFFDSelect","_charsets","CharstringValidationData","stackClearing","stem","resetStack","undefStack","CharstringValidationData12","stackFn","seacAnalysisEnabled","parseHeader","parseIndex","topDictIndex","stringIndex","topDictParsed","parseDict","createDict","parseNameIndex","parseStringIndex","parsePrivateDict","hasName","charStringOffset","charStringIndex","fontBBox","fdArrayIndex","dictRaw","fontDict","fdArray","parseCharsets","fdSelect","parseFDSelect","parseEncoding","charStringsAndSeacs","parseCharStrings","localSubrIndex","hdrSize","offSize","parseOperand","parseFloatOperand","operands","cffIndex","offsetSize","offsetStart","offsetEnd","Type","cffDict","pair","setByKey","parseCharString","callDepth","stackSize","validationCommand","subrNumber","hasVStems","firstStackClearing","localSubrToUse","privateDictToUse","fdIndex","getFDIndex","nominalWidth","emptyPrivateDictionary","parentDict","privateOffset","privateDictEnd","dictData","subrsOffset","relativeOffset","removeByName","CFFCharsetPredefinedTypes","ISO_ADOBE","ISOAdobeCharset","EXPERT","ExpertCharset","EXPERT_SUBSET","ExpertSubsetCharset","raw","predefined","ExpertEncoding","dataStart","glyphsCount","rangesCount","gid","supplementsCount","sid","readSupplement","CFFEncoding","glyphZero","NUM_STANDARD_CFF_STRINGS","getSID","objects","CFFDict","keyToNameMap","nameToKeyMap","defaults","types","opcodes","order","valueLength","createTables","layout","glyphIndex","CFFOffsetTracker","isTracking","track","location","setEntryLocation","offset1","offset2","offset3","offset4","compileHeader","compileNameIndex","subDict","compiled","compileTopDicts","topDictTracker","trackers","compileStringIndex","compileIndex","compileEncoding","compileCharset","compileCharStrings","compileFDSelect","fontDictTrackers","compilePrivateDicts","encodeNumber","encodeFloat","encodeInteger","nibbles","sanitizedName","dicts","removeCidKeys","fontDictTracker","fontDictData","compileDict","privateDictTracker","privateDictData","offsetTracker","compileGlobalSubrIndex","writeByteArray","numGlyphsLessNotDef","charsetIndex","numCharsets","warned","compileTypedArray","lastFD","currentFD","numRanges","lastOffset","encodingName","MacExpertEncoding","AE","AEacute","AEmacron","AEsmall","Aacute","Aacutesmall","Abreve","Abreveacute","Abrevecyrillic","Abrevedotbelow","Abrevegrave","Abrevehookabove","Abrevetilde","Acaron","Acircle","Acircumflex","Acircumflexacute","Acircumflexdotbelow","Acircumflexgrave","Acircumflexhookabove","Acircumflexsmall","Acircumflextilde","Acute","Acutesmall","Acyrillic","Adblgrave","Adieresis","Adieresiscyrillic","Adieresismacron","Adieresissmall","Adotbelow","Adotmacron","Agrave","Agravesmall","Ahookabove","Aiecyrillic","Ainvertedbreve","Alpha","Alphatonos","Amacron","Amonospace","Aogonek","Aring","Aringacute","Aringbelow","Aringsmall","Asmall","Atilde","Atildesmall","Aybarmenian","Bcircle","Bdotaccent","Bdotbelow","Becyrillic","Benarmenian","Beta","Bhook","Blinebelow","Bmonospace","Brevesmall","Bsmall","Btopbar","Caarmenian","Cacute","Caron","Caronsmall","Ccaron","Ccedilla","Ccedillaacute","Ccedillasmall","Ccircle","Ccircumflex","Cdot","Cdotaccent","Cedillasmall","Chaarmenian","Cheabkhasiancyrillic","Checyrillic","Chedescenderabkhasiancyrillic","Chedescendercyrillic","Chedieresiscyrillic","Cheharmenian","Chekhakassiancyrillic","Cheverticalstrokecyrillic","Chi","Chook","Circumflexsmall","Cmonospace","Coarmenian","Csmall","D","DZ","DZcaron","Daarmenian","Dafrican","Dcaron","Dcedilla","Dcircle","Dcircumflexbelow","Dcroat","Ddotaccent","Ddotbelow","Decyrillic","Deicoptic","Delta","Deltagreek","Dhook","Dieresis","DieresisAcute","DieresisGrave","Dieresissmall","Digammagreek","Djecyrillic","Dlinebelow","Dmonospace","Dotaccentsmall","Dslash","Dsmall","Dtopbar","Dz","Dzcaron","Dzeabkhasiancyrillic","Dzecyrillic","Dzhecyrillic","E","Eacute","Eacutesmall","Ebreve","Ecaron","Ecedillabreve","Echarmenian","Ecircle","Ecircumflex","Ecircumflexacute","Ecircumflexbelow","Ecircumflexdotbelow","Ecircumflexgrave","Ecircumflexhookabove","Ecircumflexsmall","Ecircumflextilde","Ecyrillic","Edblgrave","Edieresis","Edieresissmall","Edot","Edotaccent","Edotbelow","Efcyrillic","Egrave","Egravesmall","Eharmenian","Ehookabove","Eightroman","Einvertedbreve","Eiotifiedcyrillic","Elcyrillic","Elevenroman","Emacron","Emacronacute","Emacrongrave","Emcyrillic","Emonospace","Encyrillic","Endescendercyrillic","Eng","Enghecyrillic","Enhookcyrillic","Eogonek","Eopen","Epsilon","Epsilontonos","Ercyrillic","Ereversed","Ereversedcyrillic","Escyrillic","Esdescendercyrillic","Esh","Esmall","Eta","Etarmenian","Etatonos","Eth","Ethsmall","Etilde","Etildebelow","Euro","Ezh","Ezhcaron","Ezhreversed","Fcircle","Fdotaccent","Feharmenian","Feicoptic","Fhook","Fitacyrillic","Fiveroman","Fmonospace","Fourroman","Fsmall","GBsquare","Gacute","Gamma","Gammaafrican","Gangiacoptic","Gbreve","Gcaron","Gcedilla","Gcircle","Gcircumflex","Gcommaaccent","Gdot","Gdotaccent","Gecyrillic","Ghadarmenian","Ghemiddlehookcyrillic","Ghestrokecyrillic","Gheupturncyrillic","Ghook","Gimarmenian","Gjecyrillic","Gmacron","Gmonospace","Grave","Gravesmall","Gsmall","Gsmallhook","Gstroke","H","H18533","H18543","H18551","H22073","HPsquare","Haabkhasiancyrillic","Hadescendercyrillic","Hardsigncyrillic","Hbar","Hbrevebelow","Hcedilla","Hcircle","Hcircumflex","Hdieresis","Hdotaccent","Hdotbelow","Hmonospace","Hoarmenian","Horicoptic","Hsmall","Hungarumlaut","Hungarumlautsmall","Hzsquare","I","IAcyrillic","IJ","IUcyrillic","Iacute","Iacutesmall","Ibreve","Icaron","Icircle","Icircumflex","Icircumflexsmall","Icyrillic","Idblgrave","Idieresis","Idieresisacute","Idieresiscyrillic","Idieresissmall","Idot","Idotaccent","Idotbelow","Iebrevecyrillic","Iecyrillic","Ifraktur","Igrave","Igravesmall","Ihookabove","Iicyrillic","Iinvertedbreve","Iishortcyrillic","Imacron","Imacroncyrillic","Imonospace","Iniarmenian","Iocyrillic","Iogonek","Iota","Iotaafrican","Iotadieresis","Iotatonos","Ismall","Istroke","Itilde","Itildebelow","Izhitsacyrillic","Izhitsadblgravecyrillic","Jaarmenian","Jcircle","Jcircumflex","Jecyrillic","Jheharmenian","Jmonospace","Jsmall","KBsquare","KKsquare","Kabashkircyrillic","Kacute","Kacyrillic","Kadescendercyrillic","Kahookcyrillic","Kappa","Kastrokecyrillic","Kaverticalstrokecyrillic","Kcaron","Kcedilla","Kcircle","Kcommaaccent","Kdotbelow","Keharmenian","Kenarmenian","Khacyrillic","Kheicoptic","Khook","Kjecyrillic","Klinebelow","Kmonospace","Koppacyrillic","Koppagreek","Ksicyrillic","Ksmall","LJ","Lacute","Lambda","Lcaron","Lcedilla","Lcircle","Lcircumflexbelow","Lcommaaccent","Ldot","Ldotaccent","Ldotbelow","Ldotbelowmacron","Liwnarmenian","Lj","Ljecyrillic","Llinebelow","Lmonospace","Lslash","Lslashsmall","Lsmall","MBsquare","Macron","Macronsmall","Macute","Mcircle","Mdotaccent","Mdotbelow","Menarmenian","Mmonospace","Msmall","Mturned","Mu","NJ","Nacute","Ncaron","Ncedilla","Ncircle","Ncircumflexbelow","Ncommaaccent","Ndotaccent","Ndotbelow","Nhookleft","Nineroman","Nj","Njecyrillic","Nlinebelow","Nmonospace","Nowarmenian","Nsmall","Ntilde","Ntildesmall","Nu","O","OE","OEsmall","Oacute","Oacutesmall","Obarredcyrillic","Obarreddieresiscyrillic","Obreve","Ocaron","Ocenteredtilde","Ocircle","Ocircumflex","Ocircumflexacute","Ocircumflexdotbelow","Ocircumflexgrave","Ocircumflexhookabove","Ocircumflexsmall","Ocircumflextilde","Ocyrillic","Odblacute","Odblgrave","Odieresis","Odieresiscyrillic","Odieresissmall","Odotbelow","Ogoneksmall","Ograve","Ogravesmall","Oharmenian","Ohm","Ohookabove","Ohorn","Ohornacute","Ohorndotbelow","Ohorngrave","Ohornhookabove","Ohorntilde","Ohungarumlaut","Oi","Oinvertedbreve","Omacron","Omacronacute","Omacrongrave","Omega","Omegacyrillic","Omegagreek","Omegaroundcyrillic","Omegatitlocyrillic","Omegatonos","Omicron","Omicrontonos","Omonospace","Oneroman","Oogonek","Oogonekmacron","Oopen","Oslash","Oslashacute","Oslashsmall","Osmall","Ostrokeacute","Otcyrillic","Otilde","Otildeacute","Otildedieresis","Otildesmall","P","Pacute","Pcircle","Pdotaccent","Pecyrillic","Peharmenian","Pemiddlehookcyrillic","Phi","Phook","Pi","Piwrarmenian","Pmonospace","Psi","Psicyrillic","Psmall","Qcircle","Qmonospace","Qsmall","R","Raarmenian","Racute","Rcaron","Rcedilla","Rcircle","Rcommaaccent","Rdblgrave","Rdotaccent","Rdotbelow","Rdotbelowmacron","Reharmenian","Rfraktur","Rho","Ringsmall","Rinvertedbreve","Rlinebelow","Rmonospace","Rsmall","Rsmallinverted","Rsmallinvertedsuperior","SF010000","SF020000","SF030000","SF040000","SF050000","SF060000","SF070000","SF080000","SF090000","SF100000","SF110000","SF190000","SF200000","SF210000","SF220000","SF230000","SF240000","SF250000","SF260000","SF270000","SF280000","SF360000","SF370000","SF380000","SF390000","SF400000","SF410000","SF420000","SF430000","SF440000","SF450000","SF460000","SF470000","SF480000","SF490000","SF500000","SF510000","SF520000","SF530000","SF540000","Sacute","Sacutedotaccent","Sampigreek","Scaron","Scarondotaccent","Scaronsmall","Scedilla","Schwa","Schwacyrillic","Schwadieresiscyrillic","Scircle","Scircumflex","Scommaaccent","Sdotaccent","Sdotbelow","Sdotbelowdotaccent","Seharmenian","Sevenroman","Shaarmenian","Shacyrillic","Shchacyrillic","Sheicoptic","Shhacyrillic","Shimacoptic","Sigma","Sixroman","Smonospace","Softsigncyrillic","Ssmall","Stigmagreek","T","Tau","Tbar","Tcaron","Tcedilla","Tcircle","Tcircumflexbelow","Tcommaaccent","Tdotaccent","Tdotbelow","Tecyrillic","Tedescendercyrillic","Tenroman","Tetsecyrillic","Theta","Thook","Thorn","Thornsmall","Threeroman","Tildesmall","Tiwnarmenian","Tlinebelow","Tmonospace","Toarmenian","Tonefive","Tonesix","Tonetwo","Tretroflexhook","Tsecyrillic","Tshecyrillic","Tsmall","Twelveroman","Tworoman","U","Uacute","Uacutesmall","Ubreve","Ucaron","Ucircle","Ucircumflex","Ucircumflexbelow","Ucircumflexsmall","Ucyrillic","Udblacute","Udblgrave","Udieresis","Udieresisacute","Udieresisbelow","Udieresiscaron","Udieresiscyrillic","Udieresisgrave","Udieresismacron","Udieresissmall","Udotbelow","Ugrave","Ugravesmall","Uhookabove","Uhorn","Uhornacute","Uhorndotbelow","Uhorngrave","Uhornhookabove","Uhorntilde","Uhungarumlaut","Uhungarumlautcyrillic","Uinvertedbreve","Ukcyrillic","Umacron","Umacroncyrillic","Umacrondieresis","Umonospace","Uogonek","Upsilon","Upsilon1","Upsilonacutehooksymbolgreek","Upsilonafrican","Upsilondieresis","Upsilondieresishooksymbolgreek","Upsilonhooksymbol","Upsilontonos","Uring","Ushortcyrillic","Usmall","Ustraightcyrillic","Ustraightstrokecyrillic","Utilde","Utildeacute","Utildebelow","V","Vcircle","Vdotbelow","Vecyrillic","Vewarmenian","Vhook","Vmonospace","Voarmenian","Vsmall","Vtilde","Wacute","Wcircle","Wcircumflex","Wdieresis","Wdotaccent","Wdotbelow","Wgrave","Wmonospace","Wsmall","Xcircle","Xdieresis","Xdotaccent","Xeharmenian","Xi","Xmonospace","Xsmall","Yacute","Yacutesmall","Yatcyrillic","Ycircle","Ycircumflex","Ydieresis","Ydieresissmall","Ydotaccent","Ydotbelow","Yericyrillic","Yerudieresiscyrillic","Ygrave","Yhook","Yhookabove","Yiarmenian","Yicyrillic","Yiwnarmenian","Ymonospace","Ysmall","Ytilde","Yusbigcyrillic","Yusbigiotifiedcyrillic","Yuslittlecyrillic","Yuslittleiotifiedcyrillic","Zaarmenian","Zacute","Zcaron","Zcaronsmall","Zcircle","Zcircumflex","Zdot","Zdotaccent","Zdotbelow","Zecyrillic","Zedescendercyrillic","Zedieresiscyrillic","Zeta","Zhearmenian","Zhebrevecyrillic","Zhecyrillic","Zhedescendercyrillic","Zhedieresiscyrillic","Zlinebelow","Zmonospace","Zsmall","Zstroke","aabengali","aacute","aadeva","aagujarati","aagurmukhi","aamatragurmukhi","aarusquare","aavowelsignbengali","aavowelsigndeva","aavowelsigngujarati","abbreviationmarkarmenian","abbreviationsigndeva","abengali","abopomofo","abreve","abreveacute","abrevecyrillic","abrevedotbelow","abrevegrave","abrevehookabove","abrevetilde","acaron","acircle","acircumflex","acircumflexacute","acircumflexdotbelow","acircumflexgrave","acircumflexhookabove","acircumflextilde","acute","acutebelowcmb","acutecmb","acutecomb","acutedeva","acutelowmod","acutetonecmb","acyrillic","adblgrave","addakgurmukhi","adeva","adieresis","adieresiscyrillic","adieresismacron","adotbelow","adotmacron","ae","aeacute","aekorean","aemacron","afii00208","afii08941","afii10017","afii10018","afii10019","afii10020","afii10021","afii10022","afii10023","afii10024","afii10025","afii10026","afii10027","afii10028","afii10029","afii10030","afii10031","afii10032","afii10033","afii10034","afii10035","afii10036","afii10037","afii10038","afii10039","afii10040","afii10041","afii10042","afii10043","afii10044","afii10045","afii10046","afii10047","afii10048","afii10049","afii10050","afii10051","afii10052","afii10053","afii10054","afii10055","afii10056","afii10057","afii10058","afii10059","afii10060","afii10061","afii10062","afii10063","afii10064","afii10065","afii10066","afii10067","afii10068","afii10069","afii10070","afii10071","afii10072","afii10073","afii10074","afii10075","afii10076","afii10077","afii10078","afii10079","afii10080","afii10081","afii10082","afii10083","afii10084","afii10085","afii10086","afii10087","afii10088","afii10089","afii10090","afii10091","afii10092","afii10093","afii10094","afii10095","afii10096","afii10097","afii10098","afii10099","afii10100","afii10101","afii10102","afii10103","afii10104","afii10105","afii10106","afii10107","afii10108","afii10109","afii10110","afii10145","afii10146","afii10147","afii10148","afii10192","afii10193","afii10194","afii10195","afii10196","afii10831","afii10832","afii10846","afii299","afii300","afii301","afii57381","afii57388","afii57392","afii57393","afii57394","afii57395","afii57396","afii57397","afii57398","afii57399","afii57400","afii57401","afii57403","afii57407","afii57409","afii57410","afii57411","afii57412","afii57413","afii57414","afii57415","afii57416","afii57417","afii57418","afii57419","afii57420","afii57421","afii57422","afii57423","afii57424","afii57425","afii57426","afii57427","afii57428","afii57429","afii57430","afii57431","afii57432","afii57433","afii57434","afii57440","afii57441","afii57442","afii57443","afii57444","afii57445","afii57446","afii57448","afii57449","afii57450","afii57451","afii57452","afii57453","afii57454","afii57455","afii57456","afii57457","afii57458","afii57470","afii57505","afii57506","afii57507","afii57508","afii57509","afii57511","afii57512","afii57513","afii57514","afii57519","afii57534","afii57636","afii57645","afii57658","afii57664","afii57665","afii57666","afii57667","afii57668","afii57669","afii57670","afii57671","afii57672","afii57673","afii57674","afii57675","afii57676","afii57677","afii57678","afii57679","afii57680","afii57681","afii57682","afii57683","afii57684","afii57685","afii57686","afii57687","afii57688","afii57689","afii57690","afii57694","afii57695","afii57700","afii57705","afii57716","afii57717","afii57718","afii57723","afii57793","afii57794","afii57795","afii57796","afii57797","afii57798","afii57799","afii57800","afii57801","afii57802","afii57803","afii57804","afii57806","afii57807","afii57839","afii57841","afii57842","afii57929","afii61248","afii61289","afii61352","afii61573","afii61574","afii61575","afii61664","afii63167","afii64937","agrave","agujarati","agurmukhi","ahiragana","ahookabove","aibengali","aibopomofo","aideva","aiecyrillic","aigujarati","aigurmukhi","aimatragurmukhi","ainarabic","ainfinalarabic","aininitialarabic","ainmedialarabic","ainvertedbreve","aivowelsignbengali","aivowelsigndeva","aivowelsigngujarati","akatakana","akatakanahalfwidth","akorean","alef","alefarabic","alefdageshhebrew","aleffinalarabic","alefhamzaabovearabic","alefhamzaabovefinalarabic","alefhamzabelowarabic","alefhamzabelowfinalarabic","alefhebrew","aleflamedhebrew","alefmaddaabovearabic","alefmaddaabovefinalarabic","alefmaksuraarabic","alefmaksurafinalarabic","alefmaksurainitialarabic","alefmaksuramedialarabic","alefpatahhebrew","alefqamatshebrew","aleph","allequal","alphatonos","amacron","amonospace","ampersand","ampersandmonospace","ampersandsmall","amsquare","anbopomofo","angbopomofo","angbracketleft","angbracketright","angkhankhuthai","anglebracketleft","anglebracketleftvertical","anglebracketright","anglebracketrightvertical","angleleft","angleright","angstrom","anoteleia","anudattadeva","anusvarabengali","anusvaradeva","anusvaragujarati","aogonek","apaatosquare","aparen","apostrophearmenian","apostrophemod","apple","approaches","approxequal","approxequalorimage","approximatelyequal","araeaekorean","araeakorean","arc","arighthalfring","aring","aringacute","aringbelow","arrowboth","arrowdashdown","arrowdashleft","arrowdashright","arrowdashup","arrowdblboth","arrowdbldown","arrowdblleft","arrowdblright","arrowdblup","arrowdown","arrowdownleft","arrowdownright","arrowdownwhite","arrowheaddownmod","arrowheadleftmod","arrowheadrightmod","arrowheadupmod","arrowhorizex","arrowleft","arrowleftdbl","arrowleftdblstroke","arrowleftoverright","arrowleftwhite","arrowright","arrowrightdblstroke","arrowrightheavy","arrowrightoverleft","arrowrightwhite","arrowtableft","arrowtabright","arrowup","arrowupdn","arrowupdnbse","arrowupdownbase","arrowupleft","arrowupleftofdown","arrowupright","arrowupwhite","arrowvertex","asciicircum","asciicircummonospace","asciitilde","asciitildemonospace","ascript","ascriptturned","asmallhiragana","asmallkatakana","asmallkatakanahalfwidth","asterisk","asteriskaltonearabic","asteriskarabic","asteriskmath","asteriskmonospace","asterisksmall","asterism","asuperior","asymptoticallyequal","atilde","atmonospace","atsmall","aturned","aubengali","aubopomofo","audeva","augujarati","augurmukhi","aulengthmarkbengali","aumatragurmukhi","auvowelsignbengali","auvowelsigndeva","auvowelsigngujarati","avagrahadeva","aybarmenian","ayin","ayinaltonehebrew","ayinhebrew","babengali","backslash","backslashmonospace","badeva","bagujarati","bagurmukhi","bahiragana","bahtthai","bakatakana","bar","barmonospace","bbopomofo","bcircle","bdotaccent","bdotbelow","beamedsixteenthnotes","because","becyrillic","beharabic","behfinalarabic","behinitialarabic","behiragana","behmedialarabic","behmeeminitialarabic","behmeemisolatedarabic","behnoonfinalarabic","bekatakana","benarmenian","bet","betasymbolgreek","betdagesh","betdageshhebrew","bethebrew","betrafehebrew","bhabengali","bhadeva","bhagujarati","bhagurmukhi","bhook","bihiragana","bikatakana","bilabialclick","bindigurmukhi","birusquare","blackcircle","blackdiamond","blackdownpointingtriangle","blackleftpointingpointer","blackleftpointingtriangle","blacklenticularbracketleft","blacklenticularbracketleftvertical","blacklenticularbracketright","blacklenticularbracketrightvertical","blacklowerlefttriangle","blacklowerrighttriangle","blackrectangle","blackrightpointingpointer","blackrightpointingtriangle","blacksmallsquare","blacksmilingface","blacksquare","blackstar","blackupperlefttriangle","blackupperrighttriangle","blackuppointingsmalltriangle","blackuppointingtriangle","blank","blinebelow","bmonospace","bobaimaithai","bohiragana","bokatakana","bparen","bqsquare","braceex","braceleft","braceleftbt","braceleftmid","braceleftmonospace","braceleftsmall","bracelefttp","braceleftvertical","braceright","bracerightbt","bracerightmid","bracerightmonospace","bracerightsmall","bracerighttp","bracerightvertical","bracketleft","bracketleftbt","bracketleftex","bracketleftmonospace","bracketlefttp","bracketright","bracketrightbt","bracketrightex","bracketrightmonospace","bracketrighttp","breve","brevebelowcmb","brevecmb","breveinvertedbelowcmb","breveinvertedcmb","breveinverteddoublecmb","bridgebelowcmb","bridgeinvertedbelowcmb","brokenbar","bstroke","bsuperior","btopbar","buhiragana","bukatakana","bullet","bulletinverse","bulletoperator","bullseye","caarmenian","cabengali","cacute","cadeva","cagujarati","cagurmukhi","calsquare","candrabindubengali","candrabinducmb","candrabindudeva","candrabindugujarati","capslock","careof","caron","caronbelowcmb","caroncmb","carriagereturn","cbopomofo","ccaron","ccedilla","ccedillaacute","ccircle","ccircumflex","ccurl","cdot","cdotaccent","cdsquare","cedilla","cedillacmb","cent","centigrade","centinferior","centmonospace","centoldstyle","centsuperior","chaarmenian","chabengali","chadeva","chagujarati","chagurmukhi","chbopomofo","cheabkhasiancyrillic","checkmark","checyrillic","chedescenderabkhasiancyrillic","chedescendercyrillic","chedieresiscyrillic","cheharmenian","chekhakassiancyrillic","cheverticalstrokecyrillic","chi","chieuchacirclekorean","chieuchaparenkorean","chieuchcirclekorean","chieuchkorean","chieuchparenkorean","chochangthai","chochanthai","chochingthai","chochoethai","chook","cieucacirclekorean","cieucaparenkorean","cieuccirclekorean","cieuckorean","cieucparenkorean","cieucuparenkorean","circle","circlecopyrt","circlemultiply","circleot","circleplus","circlepostalmark","circlewithlefthalfblack","circlewithrighthalfblack","circumflex","circumflexbelowcmb","circumflexcmb","clickalveolar","clickdental","clicklateral","clickretroflex","club","clubsuitblack","clubsuitwhite","cmcubedsquare","cmonospace","cmsquaredsquare","coarmenian","colon","colonmonetary","colonmonospace","colonsign","colonsmall","colontriangularhalfmod","colontriangularmod","comma","commaabovecmb","commaaboverightcmb","commaaccent","commaarabic","commaarmenian","commainferior","commamonospace","commareversedabovecmb","commareversedmod","commasmall","commasuperior","commaturnedabovecmb","commaturnedmod","compass","congruent","contourintegral","control","controlACK","controlBEL","controlBS","controlCAN","controlCR","controlDC1","controlDC2","controlDC3","controlDC4","controlDEL","controlDLE","controlEM","controlENQ","controlEOT","controlESC","controlETB","controlETX","controlFF","controlFS","controlGS","controlHT","controlLF","controlNAK","controlNULL","controlRS","controlSI","controlSO","controlSOT","controlSTX","controlSUB","controlSYN","controlUS","controlVT","copyright","copyrightsans","copyrightserif","cornerbracketleft","cornerbracketlefthalfwidth","cornerbracketleftvertical","cornerbracketright","cornerbracketrighthalfwidth","cornerbracketrightvertical","corporationsquare","cosquare","coverkgsquare","cparen","cruzeiro","cstretched","curlyand","curlyor","currency","cyrBreve","cyrFlex","cyrbreve","cyrflex","daarmenian","dabengali","dadarabic","dadeva","dadfinalarabic","dadinitialarabic","dadmedialarabic","dagesh","dageshhebrew","dagger","daggerdbl","dagujarati","dagurmukhi","dahiragana","dakatakana","dalarabic","dalet","daletdagesh","daletdageshhebrew","dalethebrew","dalfinalarabic","dammaarabic","dammalowarabic","dammatanaltonearabic","dammatanarabic","danda","dargahebrew","dargalefthebrew","dasiapneumatacyrilliccmb","dblGrave","dblanglebracketleft","dblanglebracketleftvertical","dblanglebracketright","dblanglebracketrightvertical","dblarchinvertedbelowcmb","dblarrowleft","dblarrowright","dbldanda","dblgrave","dblgravecmb","dblintegral","dbllowline","dbllowlinecmb","dbloverlinecmb","dblprimemod","dblverticalbar","dblverticallineabovecmb","dbopomofo","dbsquare","dcaron","dcedilla","dcircle","dcircumflexbelow","dcroat","ddabengali","ddadeva","ddagujarati","ddagurmukhi","ddalarabic","ddalfinalarabic","dddhadeva","ddhabengali","ddhadeva","ddhagujarati","ddhagurmukhi","ddotaccent","ddotbelow","decimalseparatorarabic","decimalseparatorpersian","decyrillic","degree","dehihebrew","dehiragana","deicoptic","dekatakana","deleteleft","deleteright","deltaturned","denominatorminusonenumeratorbengali","dezh","dhabengali","dhadeva","dhagujarati","dhagurmukhi","dhook","dialytikatonos","dialytikatonoscmb","diamond","diamondsuitwhite","dieresis","dieresisacute","dieresisbelowcmb","dieresiscmb","dieresisgrave","dieresistonos","dihiragana","dikatakana","dittomark","divide","divides","divisionslash","djecyrillic","dkshade","dlinebelow","dlsquare","dmacron","dmonospace","dnblock","dochadathai","dodekthai","dohiragana","dokatakana","dollar","dollarinferior","dollarmonospace","dollaroldstyle","dollarsmall","dollarsuperior","dong","dorusquare","dotaccent","dotaccentcmb","dotbelowcmb","dotbelowcomb","dotkatakana","dotlessi","dotlessj","dotlessjstrokehook","dotmath","dottedcircle","doubleyodpatah","doubleyodpatahhebrew","downtackbelowcmb","downtackmod","dparen","dsuperior","dtail","dtopbar","duhiragana","dukatakana","dz","dzaltone","dzcaron","dzcurl","dzeabkhasiancyrillic","dzecyrillic","dzhecyrillic","eacute","earth","ebengali","ebopomofo","ebreve","ecandradeva","ecandragujarati","ecandravowelsigndeva","ecandravowelsigngujarati","ecaron","ecedillabreve","echarmenian","echyiwnarmenian","ecircle","ecircumflex","ecircumflexacute","ecircumflexbelow","ecircumflexdotbelow","ecircumflexgrave","ecircumflexhookabove","ecircumflextilde","ecyrillic","edblgrave","edeva","edieresis","edot","edotaccent","edotbelow","eegurmukhi","eematragurmukhi","efcyrillic","egrave","egujarati","eharmenian","ehbopomofo","ehiragana","ehookabove","eibopomofo","eight","eightarabic","eightbengali","eightcircle","eightcircleinversesansserif","eightdeva","eighteencircle","eighteenparen","eighteenperiod","eightgujarati","eightgurmukhi","eighthackarabic","eighthangzhou","eighthnotebeamed","eightideographicparen","eightinferior","eightmonospace","eightoldstyle","eightparen","eightperiod","eightpersian","eightroman","eightsuperior","eightthai","einvertedbreve","eiotifiedcyrillic","ekatakana","ekatakanahalfwidth","ekonkargurmukhi","ekorean","elcyrillic","elevencircle","elevenparen","elevenperiod","elevenroman","ellipsis","ellipsisvertical","emacron","emacronacute","emacrongrave","emcyrillic","emdash","emdashvertical","emonospace","emphasismarkarmenian","emptyset","enbopomofo","encyrillic","endash","endashvertical","endescendercyrillic","eng","engbopomofo","enghecyrillic","enhookcyrillic","enspace","eogonek","eokorean","eopen","eopenclosed","eopenreversed","eopenreversedclosed","eopenreversedhook","eparen","epsilontonos","equal","equalmonospace","equalsmall","equalsuperior","equivalence","erbopomofo","ercyrillic","ereversed","ereversedcyrillic","escyrillic","esdescendercyrillic","esh","eshcurl","eshortdeva","eshortvowelsigndeva","eshreversedloop","eshsquatreversed","esmallhiragana","esmallkatakana","esmallkatakanahalfwidth","estimated","esuperior","eta","etarmenian","etatonos","eth","etilde","etildebelow","etnahtafoukhhebrew","etnahtafoukhlefthebrew","etnahtahebrew","etnahtalefthebrew","eturned","eukorean","euro","evowelsignbengali","evowelsigndeva","evowelsigngujarati","exclam","exclamarmenian","exclamdbl","exclamdown","exclamdownsmall","exclammonospace","exclamsmall","existential","ezh","ezhcaron","ezhcurl","ezhreversed","ezhtail","fadeva","fagurmukhi","fahrenheit","fathaarabic","fathalowarabic","fathatanarabic","fbopomofo","fcircle","fdotaccent","feharabic","feharmenian","fehfinalarabic","fehinitialarabic","fehmedialarabic","feicoptic","female","ff","f_f","ffi","ffl","fi","fifteencircle","fifteenparen","fifteenperiod","figuredash","filledbox","filledrect","finalkaf","finalkafdagesh","finalkafdageshhebrew","finalkafhebrew","finalmem","finalmemhebrew","finalnun","finalnunhebrew","finalpe","finalpehebrew","finaltsadi","finaltsadihebrew","firsttonechinese","fisheye","fitacyrillic","five","fivearabic","fivebengali","fivecircle","fivecircleinversesansserif","fivedeva","fiveeighths","fivegujarati","fivegurmukhi","fivehackarabic","fivehangzhou","fiveideographicparen","fiveinferior","fivemonospace","fiveoldstyle","fiveparen","fiveperiod","fivepersian","fiveroman","fivesuperior","fivethai","fl","florin","fmonospace","fmsquare","fofanthai","fofathai","fongmanthai","forall","four","fourarabic","fourbengali","fourcircle","fourcircleinversesansserif","fourdeva","fourgujarati","fourgurmukhi","fourhackarabic","fourhangzhou","fourideographicparen","fourinferior","fourmonospace","fournumeratorbengali","fouroldstyle","fourparen","fourperiod","fourpersian","fourroman","foursuperior","fourteencircle","fourteenparen","fourteenperiod","fourthai","fourthtonechinese","fparen","fraction","franc","gabengali","gacute","gadeva","gafarabic","gaffinalarabic","gafinitialarabic","gafmedialarabic","gagujarati","gagurmukhi","gahiragana","gakatakana","gammalatinsmall","gammasuperior","gangiacoptic","gbopomofo","gbreve","gcaron","gcedilla","gcircle","gcircumflex","gcommaaccent","gdot","gdotaccent","gecyrillic","gehiragana","gekatakana","geometricallyequal","gereshaccenthebrew","gereshhebrew","gereshmuqdamhebrew","germandbls","gershayimaccenthebrew","gershayimhebrew","getamark","ghabengali","ghadarmenian","ghadeva","ghagujarati","ghagurmukhi","ghainarabic","ghainfinalarabic","ghaininitialarabic","ghainmedialarabic","ghemiddlehookcyrillic","ghestrokecyrillic","gheupturncyrillic","ghhadeva","ghhagurmukhi","ghook","ghzsquare","gihiragana","gikatakana","gimarmenian","gimel","gimeldagesh","gimeldageshhebrew","gimelhebrew","gjecyrillic","glottalinvertedstroke","glottalstop","glottalstopinverted","glottalstopmod","glottalstopreversed","glottalstopreversedmod","glottalstopreversedsuperior","glottalstopstroke","glottalstopstrokereversed","gmacron","gmonospace","gohiragana","gokatakana","gparen","gpasquare","gradient","grave","gravebelowcmb","gravecmb","gravecomb","gravedeva","gravelowmod","gravemonospace","gravetonecmb","greater","greaterequal","greaterequalorless","greatermonospace","greaterorequivalent","greaterorless","greateroverequal","greatersmall","gscript","gstroke","guhiragana","guillemotleft","guillemotright","guilsinglleft","guilsinglright","gukatakana","guramusquare","gysquare","haabkhasiancyrillic","haaltonearabic","habengali","hadescendercyrillic","hadeva","hagujarati","hagurmukhi","haharabic","hahfinalarabic","hahinitialarabic","hahiragana","hahmedialarabic","haitusquare","hakatakana","hakatakanahalfwidth","halantgurmukhi","hamzaarabic","hamzalowarabic","hangulfiller","hardsigncyrillic","harpoonleftbarbup","harpoonrightbarbup","hasquare","hatafpatah","hatafpatah16","hatafpatah23","hatafpatah2f","hatafpatahhebrew","hatafpatahnarrowhebrew","hatafpatahquarterhebrew","hatafpatahwidehebrew","hatafqamats","hatafqamats1b","hatafqamats28","hatafqamats34","hatafqamatshebrew","hatafqamatsnarrowhebrew","hatafqamatsquarterhebrew","hatafqamatswidehebrew","hatafsegol","hatafsegol17","hatafsegol24","hatafsegol30","hatafsegolhebrew","hatafsegolnarrowhebrew","hatafsegolquarterhebrew","hatafsegolwidehebrew","hbar","hbopomofo","hbrevebelow","hcedilla","hcircle","hcircumflex","hdieresis","hdotaccent","hdotbelow","he","heart","heartsuitblack","heartsuitwhite","hedagesh","hedageshhebrew","hehaltonearabic","heharabic","hehebrew","hehfinalaltonearabic","hehfinalalttwoarabic","hehfinalarabic","hehhamzaabovefinalarabic","hehhamzaaboveisolatedarabic","hehinitialaltonearabic","hehinitialarabic","hehiragana","hehmedialaltonearabic","hehmedialarabic","heiseierasquare","hekatakana","hekatakanahalfwidth","hekutaarusquare","henghook","herutusquare","het","hethebrew","hhook","hhooksuperior","hieuhacirclekorean","hieuhaparenkorean","hieuhcirclekorean","hieuhkorean","hieuhparenkorean","hihiragana","hikatakana","hikatakanahalfwidth","hiriq","hiriq14","hiriq21","hiriq2d","hiriqhebrew","hiriqnarrowhebrew","hiriqquarterhebrew","hiriqwidehebrew","hlinebelow","hmonospace","hoarmenian","hohipthai","hohiragana","hokatakana","hokatakanahalfwidth","holam","holam19","holam26","holam32","holamhebrew","holamnarrowhebrew","holamquarterhebrew","holamwidehebrew","honokhukthai","hookabovecomb","hookcmb","hookpalatalizedbelowcmb","hookretroflexbelowcmb","hoonsquare","horicoptic","horizontalbar","horncmb","hotsprings","house","hparen","hsuperior","hturned","huhiragana","huiitosquare","hukatakana","hukatakanahalfwidth","hungarumlaut","hungarumlautcmb","hv","hyphen","hypheninferior","hyphenmonospace","hyphensmall","hyphensuperior","hyphentwo","iacute","iacyrillic","ibengali","ibopomofo","ibreve","icaron","icircle","icircumflex","icyrillic","idblgrave","ideographearthcircle","ideographfirecircle","ideographicallianceparen","ideographiccallparen","ideographiccentrecircle","ideographicclose","ideographiccomma","ideographiccommaleft","ideographiccongratulationparen","ideographiccorrectcircle","ideographicearthparen","ideographicenterpriseparen","ideographicexcellentcircle","ideographicfestivalparen","ideographicfinancialcircle","ideographicfinancialparen","ideographicfireparen","ideographichaveparen","ideographichighcircle","ideographiciterationmark","ideographiclaborcircle","ideographiclaborparen","ideographicleftcircle","ideographiclowcircle","ideographicmedicinecircle","ideographicmetalparen","ideographicmoonparen","ideographicnameparen","ideographicperiod","ideographicprintcircle","ideographicreachparen","ideographicrepresentparen","ideographicresourceparen","ideographicrightcircle","ideographicsecretcircle","ideographicselfparen","ideographicsocietyparen","ideographicspace","ideographicspecialparen","ideographicstockparen","ideographicstudyparen","ideographicsunparen","ideographicsuperviseparen","ideographicwaterparen","ideographicwoodparen","ideographiczero","ideographmetalcircle","ideographmooncircle","ideographnamecircle","ideographsuncircle","ideographwatercircle","ideographwoodcircle","ideva","idieresis","idieresisacute","idieresiscyrillic","idotbelow","iebrevecyrillic","iecyrillic","ieungacirclekorean","ieungaparenkorean","ieungcirclekorean","ieungkorean","ieungparenkorean","igrave","igujarati","igurmukhi","ihiragana","ihookabove","iibengali","iicyrillic","iideva","iigujarati","iigurmukhi","iimatragurmukhi","iinvertedbreve","iishortcyrillic","iivowelsignbengali","iivowelsigndeva","iivowelsigngujarati","ij","ikatakana","ikatakanahalfwidth","ikorean","ilde","iluyhebrew","imacron","imacroncyrillic","imageorapproximatelyequal","imatragurmukhi","imonospace","increment","infinity","iniarmenian","integral","integralbottom","integralbt","integralex","integraltop","integraltp","intersection","intisquare","invbullet","invcircle","invsmileface","iocyrillic","iogonek","iota","iotadieresis","iotadieresistonos","iotalatin","iotatonos","iparen","irigurmukhi","ismallhiragana","ismallkatakana","ismallkatakanahalfwidth","issharbengali","istroke","isuperior","iterationhiragana","iterationkatakana","itilde","itildebelow","iubopomofo","iucyrillic","ivowelsignbengali","ivowelsigndeva","ivowelsigngujarati","izhitsacyrillic","izhitsadblgravecyrillic","jaarmenian","jabengali","jadeva","jagujarati","jagurmukhi","jbopomofo","jcaron","jcircle","jcircumflex","jcrossedtail","jdotlessstroke","jecyrillic","jeemarabic","jeemfinalarabic","jeeminitialarabic","jeemmedialarabic","jeharabic","jehfinalarabic","jhabengali","jhadeva","jhagujarati","jhagurmukhi","jheharmenian","jis","jmonospace","jparen","jsuperior","kabashkircyrillic","kabengali","kacute","kacyrillic","kadescendercyrillic","kadeva","kaf","kafarabic","kafdagesh","kafdageshhebrew","kaffinalarabic","kafhebrew","kafinitialarabic","kafmedialarabic","kafrafehebrew","kagujarati","kagurmukhi","kahiragana","kahookcyrillic","kakatakana","kakatakanahalfwidth","kappa","kappasymbolgreek","kapyeounmieumkorean","kapyeounphieuphkorean","kapyeounpieupkorean","kapyeounssangpieupkorean","karoriisquare","kashidaautoarabic","kashidaautonosidebearingarabic","kasmallkatakana","kasquare","kasraarabic","kasratanarabic","kastrokecyrillic","katahiraprolongmarkhalfwidth","kaverticalstrokecyrillic","kbopomofo","kcalsquare","kcaron","kcedilla","kcircle","kcommaaccent","kdotbelow","keharmenian","kehiragana","kekatakana","kekatakanahalfwidth","kenarmenian","kesmallkatakana","kgreenlandic","khabengali","khacyrillic","khadeva","khagujarati","khagurmukhi","khaharabic","khahfinalarabic","khahinitialarabic","khahmedialarabic","kheicoptic","khhadeva","khhagurmukhi","khieukhacirclekorean","khieukhaparenkorean","khieukhcirclekorean","khieukhkorean","khieukhparenkorean","khokhaithai","khokhonthai","khokhuatthai","khokhwaithai","khomutthai","khook","khorakhangthai","khzsquare","kihiragana","kikatakana","kikatakanahalfwidth","kiroguramusquare","kiromeetorusquare","kirosquare","kiyeokacirclekorean","kiyeokaparenkorean","kiyeokcirclekorean","kiyeokkorean","kiyeokparenkorean","kiyeoksioskorean","kjecyrillic","klinebelow","klsquare","kmcubedsquare","kmonospace","kmsquaredsquare","kohiragana","kohmsquare","kokaithai","kokatakana","kokatakanahalfwidth","kooposquare","koppacyrillic","koreanstandardsymbol","koroniscmb","kparen","kpasquare","ksicyrillic","ktsquare","kturned","kuhiragana","kukatakana","kukatakanahalfwidth","kvsquare","kwsquare","labengali","lacute","ladeva","lagujarati","lagurmukhi","lakkhangyaothai","lamaleffinalarabic","lamalefhamzaabovefinalarabic","lamalefhamzaaboveisolatedarabic","lamalefhamzabelowfinalarabic","lamalefhamzabelowisolatedarabic","lamalefisolatedarabic","lamalefmaddaabovefinalarabic","lamalefmaddaaboveisolatedarabic","lamarabic","lambda","lambdastroke","lamed","lameddagesh","lameddageshhebrew","lamedhebrew","lamfinalarabic","lamhahinitialarabic","laminitialarabic","lamjeeminitialarabic","lamkhahinitialarabic","lamlamhehisolatedarabic","lammedialarabic","lammeemhahinitialarabic","lammeeminitialarabic","largecircle","lbar","lbelt","lbopomofo","lcaron","lcedilla","lcircle","lcircumflexbelow","lcommaaccent","ldot","ldotaccent","ldotbelow","ldotbelowmacron","leftangleabovecmb","lefttackbelowcmb","less","lessequal","lessequalorgreater","lessmonospace","lessorequivalent","lessorgreater","lessoverequal","lesssmall","lezh","lfblock","lhookretroflex","lira","liwnarmenian","lj","ljecyrillic","lladeva","llagujarati","llinebelow","llladeva","llvocalicbengali","llvocalicdeva","llvocalicvowelsignbengali","llvocalicvowelsigndeva","lmiddletilde","lmonospace","lmsquare","lochulathai","logicaland","logicalnot","logicalnotreversed","logicalor","lolingthai","longs","lowlinecenterline","lowlinecmb","lowlinedashed","lozenge","lparen","lslash","lsquare","lsuperior","ltshade","luthai","lvocalicbengali","lvocalicdeva","lvocalicvowelsignbengali","lvocalicvowelsigndeva","lxsquare","mabengali","macron","macronbelowcmb","macroncmb","macronlowmod","macronmonospace","macute","madeva","magujarati","magurmukhi","mahapakhhebrew","mahapakhlefthebrew","mahiragana","maichattawalowleftthai","maichattawalowrightthai","maichattawathai","maichattawaupperleftthai","maieklowleftthai","maieklowrightthai","maiekthai","maiekupperleftthai","maihanakatleftthai","maihanakatthai","maitaikhuleftthai","maitaikhuthai","maitholowleftthai","maitholowrightthai","maithothai","maithoupperleftthai","maitrilowleftthai","maitrilowrightthai","maitrithai","maitriupperleftthai","maiyamokthai","makatakana","makatakanahalfwidth","male","mansyonsquare","maqafhebrew","mars","masoracirclehebrew","masquare","mbopomofo","mbsquare","mcircle","mcubedsquare","mdotaccent","mdotbelow","meemarabic","meemfinalarabic","meeminitialarabic","meemmedialarabic","meemmeeminitialarabic","meemmeemisolatedarabic","meetorusquare","mehiragana","meizierasquare","mekatakana","mekatakanahalfwidth","mem","memdagesh","memdageshhebrew","memhebrew","menarmenian","merkhahebrew","merkhakefulahebrew","merkhakefulalefthebrew","merkhalefthebrew","mhook","mhzsquare","middledotkatakanahalfwidth","middot","mieumacirclekorean","mieumaparenkorean","mieumcirclekorean","mieumkorean","mieumpansioskorean","mieumparenkorean","mieumpieupkorean","mieumsioskorean","mihiragana","mikatakana","mikatakanahalfwidth","minus","minusbelowcmb","minuscircle","minusmod","minusplus","minute","miribaarusquare","mirisquare","mlonglegturned","mlsquare","mmcubedsquare","mmonospace","mmsquaredsquare","mohiragana","mohmsquare","mokatakana","mokatakanahalfwidth","molsquare","momathai","moverssquare","moverssquaredsquare","mparen","mpasquare","mssquare","msuperior","mturned","mu1","muasquare","muchgreater","muchless","mufsquare","mugreek","mugsquare","muhiragana","mukatakana","mukatakanahalfwidth","mulsquare","multiply","mumsquare","munahhebrew","munahlefthebrew","musicalnote","musicalnotedbl","musicflatsign","musicsharpsign","mussquare","muvsquare","muwsquare","mvmegasquare","mvsquare","mwmegasquare","mwsquare","nabengali","nabla","nacute","nadeva","nagujarati","nagurmukhi","nahiragana","nakatakana","nakatakanahalfwidth","napostrophe","nasquare","nbopomofo","nbspace","ncaron","ncedilla","ncircle","ncircumflexbelow","ncommaaccent","ndotaccent","ndotbelow","nehiragana","nekatakana","nekatakanahalfwidth","newsheqelsign","nfsquare","ngabengali","ngadeva","ngagujarati","ngagurmukhi","ngonguthai","nhiragana","nhookleft","nhookretroflex","nieunacirclekorean","nieunaparenkorean","nieuncieuckorean","nieuncirclekorean","nieunhieuhkorean","nieunkorean","nieunpansioskorean","nieunparenkorean","nieunsioskorean","nieuntikeutkorean","nihiragana","nikatakana","nikatakanahalfwidth","nikhahitleftthai","nikhahitthai","nine","ninearabic","ninebengali","ninecircle","ninecircleinversesansserif","ninedeva","ninegujarati","ninegurmukhi","ninehackarabic","ninehangzhou","nineideographicparen","nineinferior","ninemonospace","nineoldstyle","nineparen","nineperiod","ninepersian","nineroman","ninesuperior","nineteencircle","nineteenparen","nineteenperiod","ninethai","nj","njecyrillic","nkatakana","nkatakanahalfwidth","nlegrightlong","nlinebelow","nmonospace","nmsquare","nnabengali","nnadeva","nnagujarati","nnagurmukhi","nnnadeva","nohiragana","nokatakana","nokatakanahalfwidth","nonbreakingspace","nonenthai","nonuthai","noonarabic","noonfinalarabic","noonghunnaarabic","noonghunnafinalarabic","nooninitialarabic","noonjeeminitialarabic","noonjeemisolatedarabic","noonmedialarabic","noonmeeminitialarabic","noonmeemisolatedarabic","noonnoonfinalarabic","notcontains","notelement","notelementof","notequal","notgreater","notgreaternorequal","notgreaternorless","notidentical","notless","notlessnorequal","notparallel","notprecedes","notsubset","notsucceeds","notsuperset","nowarmenian","nparen","nssquare","nsuperior","ntilde","nuhiragana","nukatakana","nukatakanahalfwidth","nuktabengali","nuktadeva","nuktagujarati","nuktagurmukhi","numbersign","numbersignmonospace","numbersignsmall","numeralsigngreek","numeralsignlowergreek","numero","nun","nundagesh","nundageshhebrew","nunhebrew","nvsquare","nwsquare","nyabengali","nyadeva","nyagujarati","nyagurmukhi","oacute","oangthai","obarred","obarredcyrillic","obarreddieresiscyrillic","obengali","obopomofo","obreve","ocandradeva","ocandragujarati","ocandravowelsigndeva","ocandravowelsigngujarati","ocaron","ocircle","ocircumflex","ocircumflexacute","ocircumflexdotbelow","ocircumflexgrave","ocircumflexhookabove","ocircumflextilde","ocyrillic","odblacute","odblgrave","odeva","odieresis","odieresiscyrillic","odotbelow","oe","oekorean","ogonek","ogonekcmb","ograve","ogujarati","oharmenian","ohiragana","ohookabove","ohorn","ohornacute","ohorndotbelow","ohorngrave","ohornhookabove","ohorntilde","ohungarumlaut","oi","oinvertedbreve","okatakana","okatakanahalfwidth","okorean","olehebrew","omacron","omacronacute","omacrongrave","omdeva","omega","omega1","omegacyrillic","omegalatinclosed","omegaroundcyrillic","omegatitlocyrillic","omegatonos","omgujarati","omicron","omicrontonos","omonospace","one","onearabic","onebengali","onecircle","onecircleinversesansserif","onedeva","onedotenleader","oneeighth","onefitted","onegujarati","onegurmukhi","onehackarabic","onehalf","onehangzhou","oneideographicparen","oneinferior","onemonospace","onenumeratorbengali","oneoldstyle","oneparen","oneperiod","onepersian","onequarter","oneroman","onesuperior","onethai","onethird","oogonek","oogonekmacron","oogurmukhi","oomatragurmukhi","oopen","oparen","openbullet","ordfeminine","ordmasculine","orthogonal","oshortdeva","oshortvowelsigndeva","oslash","oslashacute","osmallhiragana","osmallkatakana","osmallkatakanahalfwidth","ostrokeacute","osuperior","otcyrillic","otilde","otildeacute","otildedieresis","oubopomofo","overline","overlinecenterline","overlinecmb","overlinedashed","overlinedblwavy","overlinewavy","overscore","ovowelsignbengali","ovowelsigndeva","ovowelsigngujarati","paampssquare","paasentosquare","pabengali","pacute","padeva","pagedown","pageup","pagujarati","pagurmukhi","pahiragana","paiyannoithai","pakatakana","palatalizationcyrilliccmb","palochkacyrillic","pansioskorean","paragraph","parallel","parenleft","parenleftaltonearabic","parenleftbt","parenleftex","parenleftinferior","parenleftmonospace","parenleftsmall","parenleftsuperior","parenlefttp","parenleftvertical","parenright","parenrightaltonearabic","parenrightbt","parenrightex","parenrightinferior","parenrightmonospace","parenrightsmall","parenrightsuperior","parenrighttp","parenrightvertical","partialdiff","paseqhebrew","pashtahebrew","pasquare","patah","patah11","patah1d","patah2a","patahhebrew","patahnarrowhebrew","patahquarterhebrew","patahwidehebrew","pazerhebrew","pbopomofo","pcircle","pdotaccent","pe","pecyrillic","pedagesh","pedageshhebrew","peezisquare","pefinaldageshhebrew","peharabic","peharmenian","pehebrew","pehfinalarabic","pehinitialarabic","pehiragana","pehmedialarabic","pekatakana","pemiddlehookcyrillic","perafehebrew","percent","percentarabic","percentmonospace","percentsmall","period","periodarmenian","periodcentered","periodhalfwidth","periodinferior","periodmonospace","periodsmall","periodsuperior","perispomenigreekcmb","perpendicular","perthousand","peseta","pfsquare","phabengali","phadeva","phagujarati","phagurmukhi","phi","phi1","phieuphacirclekorean","phieuphaparenkorean","phieuphcirclekorean","phieuphkorean","phieuphparenkorean","philatin","phinthuthai","phisymbolgreek","phook","phophanthai","phophungthai","phosamphaothai","pi","pieupacirclekorean","pieupaparenkorean","pieupcieuckorean","pieupcirclekorean","pieupkiyeokkorean","pieupkorean","pieupparenkorean","pieupsioskiyeokkorean","pieupsioskorean","pieupsiostikeutkorean","pieupthieuthkorean","pieuptikeutkorean","pihiragana","pikatakana","pisymbolgreek","piwrarmenian","plus","plusbelowcmb","pluscircle","plusminus","plusmod","plusmonospace","plussmall","plussuperior","pmonospace","pmsquare","pohiragana","pointingindexdownwhite","pointingindexleftwhite","pointingindexrightwhite","pointingindexupwhite","pokatakana","poplathai","postalmark","postalmarkface","pparen","precedes","prescription","primemod","primereversed","product","projective","prolongedkana","propellor","propersubset","propersuperset","proportion","proportional","psi","psicyrillic","psilipneumatacyrilliccmb","pssquare","puhiragana","pukatakana","pvsquare","pwsquare","qadeva","qadmahebrew","qafarabic","qaffinalarabic","qafinitialarabic","qafmedialarabic","qamats","qamats10","qamats1a","qamats1c","qamats27","qamats29","qamats33","qamatsde","qamatshebrew","qamatsnarrowhebrew","qamatsqatanhebrew","qamatsqatannarrowhebrew","qamatsqatanquarterhebrew","qamatsqatanwidehebrew","qamatsquarterhebrew","qamatswidehebrew","qarneyparahebrew","qbopomofo","qcircle","qhook","qmonospace","qof","qofdagesh","qofdageshhebrew","qofhebrew","qparen","quarternote","qubuts","qubuts18","qubuts25","qubuts31","qubutshebrew","qubutsnarrowhebrew","qubutsquarterhebrew","qubutswidehebrew","question","questionarabic","questionarmenian","questiondown","questiondownsmall","questiongreek","questionmonospace","questionsmall","quotedbl","quotedblbase","quotedblleft","quotedblmonospace","quotedblprime","quotedblprimereversed","quotedblright","quoteleft","quoteleftreversed","quotereversed","quoteright","quoterightn","quotesinglbase","quotesingle","quotesinglemonospace","raarmenian","rabengali","racute","radeva","radical","radicalex","radoverssquare","radoverssquaredsquare","radsquare","rafe","rafehebrew","ragujarati","ragurmukhi","rahiragana","rakatakana","rakatakanahalfwidth","ralowerdiagonalbengali","ramiddlediagonalbengali","ramshorn","ratio","rbopomofo","rcaron","rcedilla","rcircle","rcommaaccent","rdblgrave","rdotaccent","rdotbelow","rdotbelowmacron","referencemark","reflexsubset","reflexsuperset","registered","registersans","registerserif","reharabic","reharmenian","rehfinalarabic","rehiragana","rekatakana","rekatakanahalfwidth","resh","reshdageshhebrew","reshhebrew","reversedtilde","reviahebrew","reviamugrashhebrew","revlogicalnot","rfishhook","rfishhookreversed","rhabengali","rhadeva","rho","rhook","rhookturned","rhookturnedsuperior","rhosymbolgreek","rhotichookmod","rieulacirclekorean","rieulaparenkorean","rieulcirclekorean","rieulhieuhkorean","rieulkiyeokkorean","rieulkiyeoksioskorean","rieulkorean","rieulmieumkorean","rieulpansioskorean","rieulparenkorean","rieulphieuphkorean","rieulpieupkorean","rieulpieupsioskorean","rieulsioskorean","rieulthieuthkorean","rieultikeutkorean","rieulyeorinhieuhkorean","rightangle","righttackbelowcmb","righttriangle","rihiragana","rikatakana","rikatakanahalfwidth","ring","ringbelowcmb","ringcmb","ringhalfleft","ringhalfleftarmenian","ringhalfleftbelowcmb","ringhalfleftcentered","ringhalfright","ringhalfrightbelowcmb","ringhalfrightcentered","rinvertedbreve","rittorusquare","rlinebelow","rlongleg","rlonglegturned","rmonospace","rohiragana","rokatakana","rokatakanahalfwidth","roruathai","rparen","rrabengali","rradeva","rragurmukhi","rreharabic","rrehfinalarabic","rrvocalicbengali","rrvocalicdeva","rrvocalicgujarati","rrvocalicvowelsignbengali","rrvocalicvowelsigndeva","rrvocalicvowelsigngujarati","rsuperior","rtblock","rturned","rturnedsuperior","ruhiragana","rukatakana","rukatakanahalfwidth","rupeemarkbengali","rupeesignbengali","rupiah","ruthai","rvocalicbengali","rvocalicdeva","rvocalicgujarati","rvocalicvowelsignbengali","rvocalicvowelsigndeva","rvocalicvowelsigngujarati","sabengali","sacute","sacutedotaccent","sadarabic","sadeva","sadfinalarabic","sadinitialarabic","sadmedialarabic","sagujarati","sagurmukhi","sahiragana","sakatakana","sakatakanahalfwidth","sallallahoualayhewasallamarabic","samekh","samekhdagesh","samekhdageshhebrew","samekhhebrew","saraaathai","saraaethai","saraaimaimalaithai","saraaimaimuanthai","saraamthai","saraathai","saraethai","saraiileftthai","saraiithai","saraileftthai","saraithai","saraothai","saraueeleftthai","saraueethai","saraueleftthai","sarauethai","sarauthai","sarauuthai","sbopomofo","scaron","scarondotaccent","scedilla","schwa","schwacyrillic","schwadieresiscyrillic","schwahook","scircle","scircumflex","scommaaccent","sdotaccent","sdotbelow","sdotbelowdotaccent","seagullbelowcmb","secondtonechinese","section","seenarabic","seenfinalarabic","seeninitialarabic","seenmedialarabic","segol","segol13","segol1f","segol2c","segolhebrew","segolnarrowhebrew","segolquarterhebrew","segoltahebrew","segolwidehebrew","seharmenian","sehiragana","sekatakana","sekatakanahalfwidth","semicolon","semicolonarabic","semicolonmonospace","semicolonsmall","semivoicedmarkkana","semivoicedmarkkanahalfwidth","sentisquare","sentosquare","seven","sevenarabic","sevenbengali","sevencircle","sevencircleinversesansserif","sevendeva","seveneighths","sevengujarati","sevengurmukhi","sevenhackarabic","sevenhangzhou","sevenideographicparen","seveninferior","sevenmonospace","sevenoldstyle","sevenparen","sevenperiod","sevenpersian","sevenroman","sevensuperior","seventeencircle","seventeenparen","seventeenperiod","seventhai","sfthyphen","shaarmenian","shabengali","shacyrillic","shaddaarabic","shaddadammaarabic","shaddadammatanarabic","shaddafathaarabic","shaddakasraarabic","shaddakasratanarabic","shade","shadedark","shadelight","shademedium","shadeva","shagujarati","shagurmukhi","shalshelethebrew","shbopomofo","shchacyrillic","sheenarabic","sheenfinalarabic","sheeninitialarabic","sheenmedialarabic","sheicoptic","sheqel","sheqelhebrew","sheva","sheva115","sheva15","sheva22","sheva2e","shevahebrew","shevanarrowhebrew","shevaquarterhebrew","shevawidehebrew","shhacyrillic","shimacoptic","shin","shindagesh","shindageshhebrew","shindageshshindot","shindageshshindothebrew","shindageshsindot","shindageshsindothebrew","shindothebrew","shinhebrew","shinshindot","shinshindothebrew","shinsindot","shinsindothebrew","shook","sigma1","sigmafinal","sigmalunatesymbolgreek","sihiragana","sikatakana","sikatakanahalfwidth","siluqhebrew","siluqlefthebrew","similar","sindothebrew","siosacirclekorean","siosaparenkorean","sioscieuckorean","sioscirclekorean","sioskiyeokkorean","sioskorean","siosnieunkorean","siosparenkorean","siospieupkorean","siostikeutkorean","six","sixarabic","sixbengali","sixcircle","sixcircleinversesansserif","sixdeva","sixgujarati","sixgurmukhi","sixhackarabic","sixhangzhou","sixideographicparen","sixinferior","sixmonospace","sixoldstyle","sixparen","sixperiod","sixpersian","sixroman","sixsuperior","sixteencircle","sixteencurrencydenominatorbengali","sixteenparen","sixteenperiod","sixthai","slash","slashmonospace","slong","slongdotaccent","smileface","smonospace","sofpasuqhebrew","softhyphen","softsigncyrillic","sohiragana","sokatakana","sokatakanahalfwidth","soliduslongoverlaycmb","solidusshortoverlaycmb","sorusithai","sosalathai","sosothai","sosuathai","space","spacehackarabic","spade","spadesuitblack","spadesuitwhite","sparen","squarebelowcmb","squarecc","squarecm","squarediagonalcrosshatchfill","squarehorizontalfill","squarekg","squarekm","squarekmcapital","squareln","squarelog","squaremg","squaremil","squaremm","squaremsquared","squareorthogonalcrosshatchfill","squareupperlefttolowerrightfill","squareupperrighttolowerleftfill","squareverticalfill","squarewhitewithsmallblack","srsquare","ssabengali","ssadeva","ssagujarati","ssangcieuckorean","ssanghieuhkorean","ssangieungkorean","ssangkiyeokkorean","ssangnieunkorean","ssangpieupkorean","ssangsioskorean","ssangtikeutkorean","ssuperior","sterling","sterlingmonospace","strokelongoverlaycmb","strokeshortoverlaycmb","subset","subsetnotequal","subsetorequal","succeeds","suchthat","suhiragana","sukatakana","sukatakanahalfwidth","sukunarabic","summation","sun","superset","supersetnotequal","supersetorequal","svsquare","syouwaerasquare","tabengali","tackdown","tackleft","tadeva","tagujarati","tagurmukhi","taharabic","tahfinalarabic","tahinitialarabic","tahiragana","tahmedialarabic","taisyouerasquare","takatakana","takatakanahalfwidth","tatweelarabic","tau","tav","tavdages","tavdagesh","tavdageshhebrew","tavhebrew","tbar","tbopomofo","tcaron","tccurl","tcedilla","tcheharabic","tchehfinalarabic","tchehinitialarabic","tchehmedialarabic","tcircle","tcircumflexbelow","tcommaaccent","tdieresis","tdotaccent","tdotbelow","tecyrillic","tedescendercyrillic","teharabic","tehfinalarabic","tehhahinitialarabic","tehhahisolatedarabic","tehinitialarabic","tehiragana","tehjeeminitialarabic","tehjeemisolatedarabic","tehmarbutaarabic","tehmarbutafinalarabic","tehmedialarabic","tehmeeminitialarabic","tehmeemisolatedarabic","tehnoonfinalarabic","tekatakana","tekatakanahalfwidth","telephone","telephoneblack","telishagedolahebrew","telishaqetanahebrew","tencircle","tenideographicparen","tenparen","tenperiod","tenroman","tesh","tet","tetdagesh","tetdageshhebrew","tethebrew","tetsecyrillic","tevirhebrew","tevirlefthebrew","thabengali","thadeva","thagujarati","thagurmukhi","thalarabic","thalfinalarabic","thanthakhatlowleftthai","thanthakhatlowrightthai","thanthakhatthai","thanthakhatupperleftthai","theharabic","thehfinalarabic","thehinitialarabic","thehmedialarabic","thereexists","therefore","theta","theta1","thetasymbolgreek","thieuthacirclekorean","thieuthaparenkorean","thieuthcirclekorean","thieuthkorean","thieuthparenkorean","thirteencircle","thirteenparen","thirteenperiod","thonangmonthothai","thook","thophuthaothai","thorn","thothahanthai","thothanthai","thothongthai","thothungthai","thousandcyrillic","thousandsseparatorarabic","thousandsseparatorpersian","three","threearabic","threebengali","threecircle","threecircleinversesansserif","threedeva","threeeighths","threegujarati","threegurmukhi","threehackarabic","threehangzhou","threeideographicparen","threeinferior","threemonospace","threenumeratorbengali","threeoldstyle","threeparen","threeperiod","threepersian","threequarters","threequartersemdash","threeroman","threesuperior","threethai","thzsquare","tihiragana","tikatakana","tikatakanahalfwidth","tikeutacirclekorean","tikeutaparenkorean","tikeutcirclekorean","tikeutkorean","tikeutparenkorean","tilde","tildebelowcmb","tildecmb","tildecomb","tildedoublecmb","tildeoperator","tildeoverlaycmb","tildeverticalcmb","timescircle","tipehahebrew","tipehalefthebrew","tippigurmukhi","titlocyrilliccmb","tiwnarmenian","tlinebelow","tmonospace","toarmenian","tohiragana","tokatakana","tokatakanahalfwidth","tonebarextrahighmod","tonebarextralowmod","tonebarhighmod","tonebarlowmod","tonebarmidmod","tonefive","tonesix","tonetwo","tonos","tonsquare","topatakthai","tortoiseshellbracketleft","tortoiseshellbracketleftsmall","tortoiseshellbracketleftvertical","tortoiseshellbracketright","tortoiseshellbracketrightsmall","tortoiseshellbracketrightvertical","totaothai","tpalatalhook","tparen","trademark","trademarksans","trademarkserif","tretroflexhook","triagdn","triaglf","triagrt","triagup","ts","tsadi","tsadidagesh","tsadidageshhebrew","tsadihebrew","tsecyrillic","tsere","tsere12","tsere1e","tsere2b","tserehebrew","tserenarrowhebrew","tserequarterhebrew","tserewidehebrew","tshecyrillic","tsuperior","ttabengali","ttadeva","ttagujarati","ttagurmukhi","tteharabic","ttehfinalarabic","ttehinitialarabic","ttehmedialarabic","tthabengali","tthadeva","tthagujarati","tthagurmukhi","tturned","tuhiragana","tukatakana","tukatakanahalfwidth","tusmallhiragana","tusmallkatakana","tusmallkatakanahalfwidth","twelvecircle","twelveparen","twelveperiod","twelveroman","twentycircle","twentyhangzhou","twentyparen","twentyperiod","two","twoarabic","twobengali","twocircle","twocircleinversesansserif","twodeva","twodotenleader","twodotleader","twodotleadervertical","twogujarati","twogurmukhi","twohackarabic","twohangzhou","twoideographicparen","twoinferior","twomonospace","twonumeratorbengali","twooldstyle","twoparen","twoperiod","twopersian","tworoman","twostroke","twosuperior","twothai","twothirds","uacute","ubar","ubengali","ubopomofo","ubreve","ucaron","ucircle","ucircumflex","ucircumflexbelow","ucyrillic","udattadeva","udblacute","udblgrave","udeva","udieresis","udieresisacute","udieresisbelow","udieresiscaron","udieresiscyrillic","udieresisgrave","udieresismacron","udotbelow","ugrave","ugujarati","ugurmukhi","uhiragana","uhookabove","uhorn","uhornacute","uhorndotbelow","uhorngrave","uhornhookabove","uhorntilde","uhungarumlaut","uhungarumlautcyrillic","uinvertedbreve","ukatakana","ukatakanahalfwidth","ukcyrillic","ukorean","umacron","umacroncyrillic","umacrondieresis","umatragurmukhi","umonospace","underscore","underscoredbl","underscoremonospace","underscorevertical","underscorewavy","union","universal","uogonek","uparen","upblock","upperdothebrew","upsilon","upsilondieresis","upsilondieresistonos","upsilonlatin","upsilontonos","uptackbelowcmb","uptackmod","uragurmukhi","uring","ushortcyrillic","usmallhiragana","usmallkatakana","usmallkatakanahalfwidth","ustraightcyrillic","ustraightstrokecyrillic","utilde","utildeacute","utildebelow","uubengali","uudeva","uugujarati","uugurmukhi","uumatragurmukhi","uuvowelsignbengali","uuvowelsigndeva","uuvowelsigngujarati","uvowelsignbengali","uvowelsigndeva","uvowelsigngujarati","vadeva","vagujarati","vagurmukhi","vakatakana","vav","vavdagesh","vavdagesh65","vavdageshhebrew","vavhebrew","vavholam","vavholamhebrew","vavvavhebrew","vavyodhebrew","vcircle","vdotbelow","vecyrillic","veharabic","vehfinalarabic","vehinitialarabic","vehmedialarabic","vekatakana","venus","verticalbar","verticallineabovecmb","verticallinebelowcmb","verticallinelowmod","verticallinemod","vewarmenian","vhook","vikatakana","viramabengali","viramadeva","viramagujarati","visargabengali","visargadeva","visargagujarati","vmonospace","voarmenian","voicediterationhiragana","voicediterationkatakana","voicedmarkkana","voicedmarkkanahalfwidth","vokatakana","vparen","vtilde","vturned","vuhiragana","vukatakana","wacute","waekorean","wahiragana","wakatakana","wakatakanahalfwidth","wakorean","wasmallhiragana","wasmallkatakana","wattosquare","wavedash","wavyunderscorevertical","wawarabic","wawfinalarabic","wawhamzaabovearabic","wawhamzaabovefinalarabic","wbsquare","wcircle","wcircumflex","wdieresis","wdotaccent","wdotbelow","wehiragana","weierstrass","wekatakana","wekorean","weokorean","wgrave","whitebullet","whitecircle","whitecircleinverse","whitecornerbracketleft","whitecornerbracketleftvertical","whitecornerbracketright","whitecornerbracketrightvertical","whitediamond","whitediamondcontainingblacksmalldiamond","whitedownpointingsmalltriangle","whitedownpointingtriangle","whiteleftpointingsmalltriangle","whiteleftpointingtriangle","whitelenticularbracketleft","whitelenticularbracketright","whiterightpointingsmalltriangle","whiterightpointingtriangle","whitesmallsquare","whitesmilingface","whitesquare","whitestar","whitetelephone","whitetortoiseshellbracketleft","whitetortoiseshellbracketright","whiteuppointingsmalltriangle","whiteuppointingtriangle","wihiragana","wikatakana","wikorean","wmonospace","wohiragana","wokatakana","wokatakanahalfwidth","won","wonmonospace","wowaenthai","wparen","wring","wsuperior","wturned","wynn","xabovecmb","xbopomofo","xcircle","xdieresis","xdotaccent","xeharmenian","xi","xmonospace","xparen","xsuperior","yaadosquare","yabengali","yacute","yadeva","yaekorean","yagujarati","yagurmukhi","yahiragana","yakatakana","yakatakanahalfwidth","yakorean","yamakkanthai","yasmallhiragana","yasmallkatakana","yasmallkatakanahalfwidth","yatcyrillic","ycircle","ycircumflex","ydieresis","ydotaccent","ydotbelow","yeharabic","yehbarreearabic","yehbarreefinalarabic","yehfinalarabic","yehhamzaabovearabic","yehhamzaabovefinalarabic","yehhamzaaboveinitialarabic","yehhamzaabovemedialarabic","yehinitialarabic","yehmedialarabic","yehmeeminitialarabic","yehmeemisolatedarabic","yehnoonfinalarabic","yehthreedotsbelowarabic","yekorean","yen","yenmonospace","yeokorean","yeorinhieuhkorean","yerahbenyomohebrew","yerahbenyomolefthebrew","yericyrillic","yerudieresiscyrillic","yesieungkorean","yesieungpansioskorean","yesieungsioskorean","yetivhebrew","ygrave","yhook","yhookabove","yiarmenian","yicyrillic","yikorean","yinyang","yiwnarmenian","ymonospace","yod","yoddagesh","yoddageshhebrew","yodhebrew","yodyodhebrew","yodyodpatahhebrew","yohiragana","yoikorean","yokatakana","yokatakanahalfwidth","yokorean","yosmallhiragana","yosmallkatakana","yosmallkatakanahalfwidth","yotgreek","yoyaekorean","yoyakorean","yoyakthai","yoyingthai","yparen","ypogegrammeni","ypogegrammenigreekcmb","yr","yring","ysuperior","ytilde","yturned","yuhiragana","yuikorean","yukatakana","yukatakanahalfwidth","yukorean","yusbigcyrillic","yusbigiotifiedcyrillic","yuslittlecyrillic","yuslittleiotifiedcyrillic","yusmallhiragana","yusmallkatakana","yusmallkatakanahalfwidth","yuyekorean","yuyeokorean","yyabengali","yyadeva","zaarmenian","zacute","zadeva","zagurmukhi","zaharabic","zahfinalarabic","zahinitialarabic","zahiragana","zahmedialarabic","zainarabic","zainfinalarabic","zakatakana","zaqefgadolhebrew","zaqefqatanhebrew","zarqahebrew","zayin","zayindagesh","zayindageshhebrew","zayinhebrew","zbopomofo","zcaron","zcircle","zcircumflex","zcurl","zdot","zdotaccent","zdotbelow","zecyrillic","zedescendercyrillic","zedieresiscyrillic","zehiragana","zekatakana","zero","zeroarabic","zerobengali","zerodeva","zerogujarati","zerogurmukhi","zerohackarabic","zeroinferior","zeromonospace","zerooldstyle","zeropersian","zerosuperior","zerothai","zerowidthjoiner","zerowidthnonjoiner","zerowidthspace","zeta","zhbopomofo","zhearmenian","zhebrevecyrillic","zhecyrillic","zhedescendercyrillic","zhedieresiscyrillic","zihiragana","zikatakana","zinorhebrew","zlinebelow","zmonospace","zohiragana","zokatakana","zparen","zretroflexhook","zstroke","zuhiragana","zukatakana","angbracketleftbig","angbracketleftBig","angbracketleftbigg","angbracketleftBigg","angbracketrightBig","angbracketrightbig","angbracketrightBigg","angbracketrightbigg","arrowhookleft","arrowhookright","arrowlefttophalf","arrowleftbothalf","arrownortheast","arrownorthwest","arrowrighttophalf","arrowrightbothalf","arrowsoutheast","arrowsouthwest","backslashbig","backslashBig","backslashBigg","backslashbigg","bardbl","bracehtipdownleft","bracehtipdownright","bracehtipupleft","bracehtipupright","braceleftBig","braceleftbig","braceleftbigg","braceleftBigg","bracerightBig","bracerightbig","bracerightbigg","bracerightBigg","bracketleftbig","bracketleftBig","bracketleftbigg","bracketleftBigg","bracketrightBig","bracketrightbig","bracketrightbigg","bracketrightBigg","ceilingleftbig","ceilingleftBig","ceilingleftBigg","ceilingleftbigg","ceilingrightbig","ceilingrightBig","ceilingrightbigg","ceilingrightBigg","circledotdisplay","circledottext","circlemultiplydisplay","circlemultiplytext","circleplusdisplay","circleplustext","contintegraldisplay","contintegraltext","coproductdisplay","coproducttext","floorleftBig","floorleftbig","floorleftbigg","floorleftBigg","floorrightbig","floorrightBig","floorrightBigg","floorrightbigg","hatwide","hatwider","hatwidest","intercal","integraldisplay","integraltext","intersectiondisplay","intersectiontext","logicalanddisplay","logicalandtext","logicalordisplay","logicalortext","parenleftBig","parenleftbig","parenleftBigg","parenleftbigg","parenrightBig","parenrightbig","parenrightBigg","parenrightbigg","prime","productdisplay","producttext","radicalbig","radicalBig","radicalBigg","radicalbigg","radicalbt","radicaltp","radicalvertex","slashbig","slashBig","slashBigg","slashbigg","summationdisplay","summationtext","tildewide","tildewider","tildewidest","uniondisplay","unionmultidisplay","unionmultitext","unionsqdisplay","unionsqtext","uniontext","vextenddouble","vextendsingle","a2","a202","a3","a4","a5","a119","a118","a117","a11","a12","a13","a14","a15","a16","a105","a17","a18","a19","a20","a21","a22","a23","a24","a25","a26","a27","a28","a6","a7","a8","a9","a10","a29","a30","a31","a32","a33","a34","a35","a36","a37","a38","a39","a40","a41","a42","a43","a44","a45","a46","a47","a48","a49","a50","a51","a52","a53","a54","a55","a56","a57","a58","a59","a60","a61","a62","a63","a64","a65","a66","a67","a68","a69","a70","a71","a72","a73","a74","a203","a75","a204","a76","a77","a78","a79","a81","a82","a83","a84","a97","a98","a99","a100","a101","a102","a103","a104","a106","a107","a108","a112","a111","a110","a109","a120","a121","a122","a123","a124","a125","a126","a127","a128","a129","a130","a131","a132","a133","a134","a135","a136","a137","a138","a139","a140","a141","a142","a143","a144","a145","a146","a147","a148","a149","a150","a151","a152","a153","a154","a155","a156","a157","a158","a159","a160","a161","a163","a164","a196","a165","a192","a166","a167","a168","a169","a170","a171","a172","a173","a162","a174","a175","a176","a177","a178","a179","a193","a180","a199","a181","a200","a182","a201","a183","a184","a197","a185","a194","a198","a186","a195","a187","a188","a189","a190","a191","a89","a90","a93","a94","a91","a92","a205","a85","a206","a86","a87","a88","a95","a96","ArialNarrow","ArialBlack","Arial","ArialMT","CourierNew","CourierNewPSMT","Helvetica","TimesNewRoman","TimesNewRomanPS","TimesNewRomanPSMT","Calibri","CenturyGothic","ComicSansMS","LucidaConsole","NuptialScript","SegoeUISymbol","Wingdings","Albertus","Aldus","Alexandria","Algerian","Antiqua","Apex","Arno","Aster","Aurora","Baskerville","Bell","Bembo","Benguiat","Bodoni","Bookman","Calisto","Calvert","Capitals","Cambria","Cartier","Caslon","Catull","Centaur","Chaparral","Cheltenham","Clarendon","Clearface","Cochin","Colonna","Constantia","Corona","Ecotype","Egyptienne","Elephant","Excelsior","Fairfield","Folkard","Footlight","FreeSerif","Garamond","Gentium","Georgia","Gloucester","Granjon","Heather","Hercules","Hiroshige","Imprint","Janson","Joanna","Korinna","Lexicon","Literaturnaya","Lucida","Melior","Memphis","Miller","Minion","Modern","Palatino","Perpetua","Plantin","Playbill","Renault","Requiem","Rockwell","Roman","Sabon","Scala","Seagull","Sistina","Souvenir","STIX","Sylfaen","Times","Trajan","Utopia","Versailles","Wanted","Weiss","Windsor","XITS","Dingbats","ZapfDingbats","getSpecialPUASymbols","UnicodeRanges","charsLength","hexStr","nameLen","toUpperCase","getLong","getUshort","getSubroutineBias","numSubrs","parseCmap","idDelta","idOffset","groups","parseCff","gsubrs","isCFFCIDFont","lookupCmap","codePointAt","NOOP","CompiledFont","compiledGlyphs","compiledCharCodeToGlyphId","compileGlyph","cmds","compileGlyphImpl","TrueTypeCompiled","compileGlyf","quadraticCurveTo","xa","ya","numberOfContours","arg1","arg2","scale01","scale10","subglyph","endPtsOfContours","numberOfPoints","points","startPoint","endPoint","contour","Type2Compiled","cffInfo","glyphNameMap","gsubrsBias","subrsBias","compileCharString","charStringCode","bezierCurveTo","stems","xb","yb","subrCode","stackClean","achar","bchar","parseGlyfTable","Type1CharString","COMMAND_MAP","lsb","flexing","encoded","wx","sbx","dy","executeCommand","sby","num2","num1","flexArgs","howManyArgs","command","keepStack","stackLength","EEXEC_ENCRYPT_KEY","isHexDigit","discardNumber","decrypted","isSpecial","encrypted","isBinary","digit1","digit2","decryptAscii","readNumberArray","getToken","readInt","readBoolean","readCharStrings","lenIV","program","blueArray","charString","charStringObject","encodingArg","xstep","ystep","paintType","tilingType","ShadingType","FUNCTION_BASED","AXIAL","RADIAL","FREE_FORM_MESH","LATTICE_FORM_MESH","COONS_PATCH_MESH","TENSOR_PATCH_MESH","getPattern","ctx","Shadings","RadialAxial","Mesh","Dummy","SMALL_NUMBER","coordsArr","shadingType","t0","domainArr","extendStart","extendEnd","extendArr","r1","r2","distance","fnObj","createFromArray","colorStops","cssColor","makeCssRgb","background","r0","singularValueDecompose2dScale","MeshStreamReader","tmpCompsBuf","csNumComps","tmpCsCompsBuf","colorFn","hasData","align","readFlag","bitsPerFlag","readCoordinate","bitsPerCoordinate","yi","readComponents","ci","MIN_SPLIT_PATCH_CHUNKS_AMOUNT","MAX_SPLIT_PATCH_CHUNKS_AMOUNT","TRIANGLE_DENSITY","getB","lut","t_","buildB","buildFigureFromPatch","mesh","figure","figures","coords","figureMinX","figureMinY","figureMaxX","figureMaxY","splitXBy","bounds","splitYBy","verticesPerRow","figureCoords","figureColors","cl","cr","c0","c1","c2","c3","bRow","bCol","newColor","updateBounds","patchMesh","operators","ps","verticesLeft","coord","decodeType4Shading","decodeType5Shading","tmp4","decodeType6Shading","decodeType7Shading","coordsPacked","xy","colorsPacked","packData","startLevel","isLTR","strLength","createBidiText","numBidi","charType","baseTypes","arabicTypes","isOdd","sor","eor","lastType","findUnequal","before","after","setValues","isEven","highestLevel","lowestOddLevel","reverseValues","temp","Courier","fnDict","PostScriptCompiler","PostScriptEvaluator","_ps_parser","toNumberArray","PDFFunction","parseArray","outputSize","bps","sampleMul","strBytes","strIdx","typeFn","constructSampled","constructInterpolated","constructStiched","constructPostScript","constructSampledFromIR","constructInterpolatedFromIR","constructStichedFromIR","constructPostScriptFromIR","toMultiArray","domain","inputSize","encode","getSampleArray","interpolate","xmin","xmax","ymin","ymax","samples","cubeVertices","cubeN","Float64Array","cubeVertex","domain_2i","domain_2i_1","size_i","e0","n0","n1","rj","fnRefs","fns","dmin","dmax","rmin","rmax","PostScriptLexer","PostScriptParser","numOutputs","numInputs","cache_available","cachedValue","execute","stackIndex","bound","PostScriptStack","initialStack","copy","roll","operator","counter","atan","cos","LN10","sin","AstNode","AstArgument","AstLiteral","AstBinaryOperation","AstMin","AstVariable","AstVariableDefinition","variable","ExpressionBuilderVisitor","parts","buildAddOperation","buildMulOperation","buildSubOperation","buildMinOperation","visit","visitArgument","visitLiteral","visitBinaryOperation","visitMin","visitVariable","visitVariableDefinition","literal","definition","ast1","ast2","tmpVar","instructions","lastRegister","instruction","statementBuilder","expr","nextToken","accept","expect","PostScriptTokenTypes","LBRACE","parseBlock","RBRACE","NUMBER","OPERATOR","parseCondition","conditionLocation","IF","jumpLocation","endOfTrue","IFELSE","PostScriptToken","opCache","opValue","getOperator","SEED","MASK_HIGH","MASK_LOW","seed","blockCounts","tailLength","dataUint32","k2","C1","C2","C1_LOW","C2_LOW","hex1","hex2","decodeAndClamp","addend","coefficient","resizeImageMask","isMask","matte","needsDecode","decodeCoefficients","decodeAddends","isIndexed","imageData","smaskData","maskData","computedLength","bufferPos","buf","rowComps","loop1End","loop2End","remainingBits","rgbaBuf","alphaBuf","sw","fillGrayBuffer","opacity","imageOffset","maskOffset","matteRgb","matteR","matteG","matteB","forceRGBA","getImageBytes","newArray","imageLength","maybeUndoPreblend","getComponents","fillOpacity","decodeBuffer","fillRgb","undoPreblend","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","event","_processStreamMessage","cbSourceName","cbTargetName","_createStreamSink","addEventListener","ah","_postMessage","queueingStrategy","controller","startCapability","startCall","pullCall","cancelCall","isClosed","pull","pullCapability","cancel","cancelCapability","isCancelled","lastDesiredSize","sinkCapability","success","_deleteStreamController","removeEventListener","_msgHandler","_contentLength","_fullRequestReader","_rangeRequestReaders","PDFWorkerStreamReader","PDFWorkerStreamRangeReader","_isRangeSupported","_isStreamingSupported","readableStream","_reader","_headersReady"],"mappings":"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,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,IACG,EACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,IACG,EACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,EAAA,EACAgqB,GAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,GACG,CACHhqB,GAAA,EACAgqB,EAAA,KAEAC,EAAA,EACAC,OAAA,EACAlqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,GAAA,EACAgqB,EAAA,IAEAG,UAAA,EACAnqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,GAAA,EACAgqB,EAAA,GACK,CACLhqB,EAAA,EACAgqB,EAAA,GACK,CACLhqB,EAAA,EACAgqB,EAAA,GACK,CACLhqB,GAAA,EACAgqB,EAAA,GACK,CACLhqB,EAAA,EACAgqB,EAAA,GACK,CACLhqB,EAAA,EACAgqB,EAAA,KAEG,CACHE,OAAA,EACAlqB,GAAA,EACAgqB,GAAA,GACK,CACLhqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,EAAA,EACAgqB,GAAA,GACK,CACLhqB,GAAA,EACAgqB,EAAA,IAEAG,UAAA,EACAnqB,EAAA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,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,GACC,CACDH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,W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A,EACA2yG,eAAA,GACG,CACH73G,GAAA,UACAkF,IAAA,EACA2yG,eAAA,GACG,CACH73G,GAAA,UACAkF,IAAA,EACA2yG,eAAA,EACAC,MAAA,GACG,CACH93G,GAAA,aACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,aACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,YACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,YACAkF,IAAA,EACA6yG,YAAA,GACG,MACH/3G,GAAA,YACAkF,IAAA,EACA8yG,YAAA,GACG,CACHh4G,GAAA,YACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,YACAkF,IAAA,EACA6yG,YAAA,IAEAE,EAAA,iBACAj4G,GAAA,MACAkF,IAAA,EACAqnG,YAAA,GACG,CACHvsG,GAAA,KACAkF,IAAA,EACAqnG,YAAA,GACG,CACHvsG,GAAA,MACAkF,IAAA,EACAqnG,WAAA,GACG,gBACHvsG,GAAA,MACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,MACAkF,IAAA,EACAqnG,YAAA,EACA2L,QAAA,SAAAra,EAAA53F,GACA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,KAEG,CACHjG,GAAA,MACAkF,IAAA,EACAqnG,YAAA,EACA2L,QAAA,SAAAra,EAAA53F,GACA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,KAEG,CACHjG,GAAA,MACAkF,IAAA,EACAqnG,YAAA,EACA2L,QAAA,SAAAra,EAAA53F,GACA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,KAEG,MACHjG,GAAA,MACAkF,IAAA,EACAqnG,WAAA,EACA2L,QAAA,SAAAra,EAAA53F,GACA43F,EAAA53F,EAAA,IAAA43F,EAAA53F,EAAA,KAEG,CACHjG,GAAA,KACAkF,IAAA,EACAqnG,YAAA,GACG,WACHvsG,GAAA,OACAkF,IAAA,EACAqnG,YAAA,GACG,MACHvsG,GAAA,MACAkF,IAAA,EACAqnG,YAAA,GACG,CACHvsG,GAAA,MACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,SACAkF,IAAA,EACAqnG,YAAA,GACG,CACHvsG,GAAA,SACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,MACAkF,IAAA,EACAqnG,YAAA,EACA2L,QAAA,SAAAra,EAAA53F,GACA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,GAAA43F,EAAA53F,EAAA,KAEG,MACHjG,GAAA,OACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,MACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,OACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,QACAkF,IAAA,EACAqnG,WAAA,GACG,CACHvsG,GAAA,OACAkF,IAAA,EACAqnG,YAAA,GACG,gBACHvsG,GAAA,QACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,OACAkF,IAAA,GACA6yG,YAAA,GACG,CACH/3G,GAAA,SACAkF,IAAA,EACA6yG,YAAA,GACG,CACH/3G,GAAA,QACAkF,IAAA,GACA6yG,YAAA,IAGA,SAAA9F,EAAAr1B,EAAAmT,EAAAooB,GACAniH,KAAAoK,MAAAw8E,EAAA9gE,WACA9lB,KAAA+5F,aACA/5F,KAAAmiH,wBA4sBA,OAzsBAlG,EAAA/8G,UAAA,CACA02B,MAAA,WACA,IAAAmkE,EAAA/5F,KAAA+5F,WACAwT,EAAA,IAAA+S,EACAtgH,KAAAutG,MACA,IAAAxtD,EAAA//C,KAAAoiH,cACAhN,EAAAp1G,KAAAqiH,WAAAtiE,EAAA7b,QACAo+E,EAAAtiH,KAAAqiH,WAAAjN,EAAAlxE,QACAq+E,EAAAviH,KAAAqiH,WAAAC,EAAAp+E,QACAy8E,EAAA3gH,KAAAqiH,WAAAE,EAAAr+E,QACAs+E,EAAAxiH,KAAAyiH,UAAAH,EAAAlyG,IAAAjS,IAAA,IACAymC,EAAA5kC,KAAA0iH,WAAAlC,EAAAgC,EAAAjV,EAAA8D,SACA9D,EAAAxtD,SAAA3vC,IACAm9F,EAAAzyE,MAAA96B,KAAA2iH,eAAAvN,EAAAhlG,KACAm9F,EAAA8D,QAAArxG,KAAA4iH,iBAAAL,EAAAnyG,KACAm9F,EAAA3oE,UACA2oE,EAAAoT,kBAAAvwG,IACApQ,KAAA6iH,iBAAAtV,EAAA3oE,SACA2oE,EAAAkU,UAAA78E,EAAAk+E,QAAA,OACA,IAAAC,EAAAn+E,EAAAivD,UAAA,eACAmvB,EAAAhjH,KAAAqiH,WAAAU,GAAA3yG,IACAwmF,EAAAhyD,EAAAivD,UAAA,cAEA+C,IACAmD,EAAAnD,cAGA,IAQAumB,EAAA9nE,EARA4tE,EAAAr+E,EAAAivD,UAAA,YAUA,GARAovB,IACAlpB,EAAAxD,OAAA1tF,KAAAC,IAAAm6G,EAAA,GAAAA,EAAA,IACAlpB,EAAAvD,QAAA3tF,KAAAqG,IAAA+zG,EAAA,GAAAA,EAAA,IACAlpB,EAAA6W,cAAA,GAKArD,EAAAkU,UAAA,CAGA,IAFA,IAAAyB,EAAAljH,KAAAqiH,WAAAz9E,EAAAivD,UAAA,YAAAzjF,IAEA9S,EAAA,EAAAonB,EAAAw+F,EAAArpF,MAAgDv8B,EAAAonB,IAAQpnB,EAAA,CACxD,IAAA6lH,EAAAD,EAAA/kH,IAAAb,GACA8lH,EAAApjH,KAAA0iH,WAAAlC,EAAAxgH,KAAAyiH,UAAAU,GAAA5V,EAAA8D,SACArxG,KAAA6iH,iBAAAO,GACA7V,EAAA8V,QAAA/hH,KAAA8hH,GAGA/tE,EAAA,KACA8nE,EAAAn9G,KAAAsjH,cAAA1+E,EAAAivD,UAAA,WAAAmvB,EAAAnpF,MAAA0zE,EAAA8D,SAAA,GACA9D,EAAAgW,SAAAvjH,KAAAwjH,cAAA5+E,EAAAivD,UAAA,YAAAmvB,EAAAnpF,YAEAsjF,EAAAn9G,KAAAsjH,cAAA1+E,EAAAivD,UAAA,WAAAmvB,EAAAnpF,MAAA0zE,EAAA8D,SAAA,GACAh8D,EAAAr1C,KAAAyjH,cAAA7+E,EAAAivD,UAAA,YAAAkG,EAAAwT,EAAA8D,QAAA8L,WAGA5P,EAAA4P,UACA5P,EAAAl4D,WACA,IAAAquE,EAAA1jH,KAAA2jH,iBAAA,CACA1C,YAAA+B,EACAY,eAAAh/E,EAAAs8E,YAAAK,WACAZ,kBAAAvwG,IACAmzG,SAAAhW,EAAAgW,SACAF,QAAA9V,EAAA8V,QACAnC,YAAAt8E,EAAAs8E,cAKA,OAHA3T,EAAA0T,YAAAyC,EAAAzC,YACA1T,EAAA2P,MAAAwG,EAAAxG,MACA3P,EAAAzP,OAAA4lB,EAAA5lB,OACAyP,GAEA6U,YAAA,WAKA,IAJA,IAAAh4G,EAAApK,KAAAoK,MACAq9B,EAAAr9B,EAAA7J,OACAsuB,EAAA,EAEAA,EAAA4Y,GAAA,IAAAr9B,EAAAykB,MACAA,EAGA,GAAAA,GAAA4Y,EACA,UAAAtkC,EAAAuP,YAAA,sBAGA,IAAAmc,KACA,EAAA1rB,EAAA+H,MAAA,uBACAd,IAAAgF,SAAAyf,GACA7uB,KAAAoK,SAGA,IAAAqpD,EAAArpD,EAAA,GACAspD,EAAAtpD,EAAA,GACAy5G,EAAAz5G,EAAA,GACA05G,EAAA15G,EAAA,GAEA,OACAgG,IAFA,IAAAmwG,EAAA9sD,EAAAC,EAAAmwD,EAAAC,GAGA5/E,OAAA2/E,IAGApB,UAAA,SAAA76F,GACA,IAAAtZ,EAAA,EAEA,SAAAy1G,IACA,IAAAxlH,EAAAqpB,EAAAtZ,KAEA,YAAA/P,EAwBA,WACA,IAAA6S,EAAA,GAEA,MAAAyc,EAAA,gEACA,IAAAttB,EAAAqnB,EAAArnB,OAEA,KAAA+N,EAAA/N,GAAA,CACA,IAAAoiB,EAAAiF,EAAAtZ,KACAqW,EAAAhC,GAAA,EACAiC,EAAA,GAAAjC,EAEA,GATA,KASAgC,EACA,MAKA,GAFAvT,GAAAyc,EAAAlJ,GAbA,KAeAC,EACA,MAGAxT,GAAAyc,EAAAjJ,GAGA,OAAAu5E,WAAA/sF,GA/CA4yG,GACS,KAAAzlH,EAETA,IADAA,EAAAqpB,EAAAtZ,OACA,GAAAsZ,EAAAtZ,MAAA,QAES,KAAA/P,EAITA,GADAA,GADAA,GADAA,EAAAqpB,EAAAtZ,OACA,EAAAsZ,EAAAtZ,OACA,EAAAsZ,EAAAtZ,OACA,EAAAsZ,EAAAtZ,KAES/P,GAAA,IAAAA,GAAA,IACTA,EAAA,IACSA,GAAA,KAAAA,GAAA,IACT,KAAAA,EAAA,KAAAqpB,EAAAtZ,KAAA,IACS/P,GAAA,KAAAA,GAAA,KACT,KAAAA,EAAA,KAAAqpB,EAAAtZ,KAAA,MAGA,EAAAnL,EAAAsF,MAAA,yBAAAlK,EAAA,4BACAi4G,KA8BA,IAAAyN,EAAA,GACAzjF,EAAA,GACAlyB,EAAA,EAGA,IAFA,IAAA0a,EAAApB,EAAArnB,OAEA+N,EAAA0a,GAAA,CACA,IAAArG,EAAAiF,EAAAtZ,GAEAqU,GAAA,IACA,KAAAA,IACAA,KAAA,EAAAiF,IAAAtZ,IAGAkyB,EAAAl/B,KAAA,CAAAqhB,EAAAshG,IACAA,EAAA,KACA31G,GAEA21G,EAAA3iH,KAAAyiH,KAIA,OAAAvjF,GAEA6hF,WAAA,SAAA/zG,GACA,IAKAhR,EAAAonB,EALAw/F,EAAA,IAAAtD,EACAx2G,EAAApK,KAAAoK,MACAyvB,EAAAzvB,EAAAkE,MAAA,EAAAlE,EAAAkE,KACA8sG,EAAA,GACApyF,EAAA1a,EAGA,OAAAurB,EAAA,CACA,IAAAsqF,EAAA/5G,EAAAkE,KACA21B,EAAA31B,GAAAurB,EAAA,GAAAsqF,EAAA,EAEA,IAAA7mH,EAAA,EAAAonB,EAAAmV,EAAA,EAAmCv8B,EAAAonB,IAAQpnB,EAAA,CAG3C,IAFA,IAAAuxB,EAAA,EAEAuF,EAAA,EAAyBA,EAAA+vF,IAAgB/vF,EACzCvF,IAAA,EACAA,GAAAzkB,EAAAkE,KAGA8sG,EAAA95G,KAAA2iC,EAAApV,GAGA7F,EAAAoyF,EAAAvhF,GAGA,IAAAv8B,EAAA,EAAAonB,EAAA02F,EAAA76G,OAAA,EAA0CjD,EAAAonB,IAAQpnB,EAAA,CAClD,IAAA8mH,EAAAhJ,EAAA99G,GACA+mH,EAAAjJ,EAAA99G,EAAA,GACA4mH,EAAA11C,IAAApkE,EAAAgF,SAAAg1G,EAAAC,IAGA,OACAj0G,IAAA8zG,EACAhgF,OAAAlb,IAGA25F,eAAA,SAAA1yG,GAGA,IAFA,IAAA6qB,EAAA,GAEAx9B,EAAA,EAAAonB,EAAAzU,EAAA4pB,MAAuCv8B,EAAAonB,IAAQpnB,EAAA,CAC/C,IAAAO,EAAAoS,EAAA9R,IAAAb,GACAw9B,EAAAx5B,MAAA,EAAA6B,EAAAyL,eAAA/Q,IAGA,OAAAi9B,GAEA8nF,iBAAA,SAAA3yG,GAGA,IAFA,IAAAohG,EAAA,IAAAqP,EAEApjH,EAAA,EAAAonB,EAAAzU,EAAA4pB,MAAuCv8B,EAAAonB,IAAQpnB,EAAA,CAC/C,IAAA+G,EAAA4L,EAAA9R,IAAAb,GACA+zG,EAAA7iC,KAAA,EAAArrE,EAAAyL,eAAAvK,IAGA,OAAAgtG,GAEAqR,WAAA,SAAA4B,EAAA18F,EAAAypF,GAGA,IAFA,IAAAkT,EAAA,IAAAD,EAAAjT,GAEA/zG,EAAA,EAAAonB,EAAAkD,EAAArnB,OAAuCjD,EAAAonB,IAAQpnB,EAAA,CAC/C,IAAAknH,EAAA58F,EAAAtqB,GACAuB,EAAA2lH,EAAA,GACAjmH,EAAAimH,EAAA,GACAD,EAAAE,SAAA5lH,EAAAN,GAGA,OAAAgmH,GAEAG,gBAAA,SAAAz8E,EAAA5jC,EAAAu/G,EAAAjD,GACA,IAAAt8G,GAAA4jC,EAAA08E,UAvdA,GAwdA,SAOA,IAJA,IAAAC,EAAA38E,EAAA28E,UACA/c,EAAA5/D,EAAA4/D,MACAtnG,EAAA8D,EAAA9D,OAEA6zB,EAAA,EAAqBA,EAAA7zB,GAAY,CACjC,IAAAhC,EAAA8F,EAAA+vB,KACAywF,EAAA,KAEA,QAAAtmH,EAAA,CACA,IAAAs1C,EAAAxvC,EAAA+vB,KAEA,IAAAyf,GACAxvC,EAAA+vB,EAAA,OACA/vB,EAAA+vB,EAAA,MACAwwF,EAAA,GAEAC,EAAA5C,EAAApuE,QAES,QAAAt1C,EACTspG,EAAA+c,IAAAvgH,EAAA+vB,IAAA,GAAA/vB,EAAA+vB,EAAA,YACAA,GAAA,EACAwwF,SACS,QAAArmH,EAAA,CACT,GAAAqmH,GAAA,IACAA,GAAA,EAEA5kH,KAAAmiH,qBAEA,OADAl6E,EAAAo1E,KAAAxV,EAAA5kF,MAAA2hG,IAAA,IACA,EAIAC,EAAAjD,EAAArjH,QACS,GAAAA,GAAA,IAAAA,GAAA,IACTspG,EAAA+c,GAAArmH,EAAA,IACAqmH,SACS,GAAArmH,GAAA,KAAAA,GAAA,IACTspG,EAAA+c,GAAArmH,EAAA,KAAAA,EAAA,QAAA8F,EAAA+vB,GAAA,MAAA71B,EAAA,QAAA8F,EAAA+vB,GAAA,IACAA,IACAwwF,SACS,SAAArmH,EACTspG,EAAA+c,IAAAvgH,EAAA+vB,IAAA,GAAA/vB,EAAA+vB,EAAA,OAAA/vB,EAAA+vB,EAAA,MAAA/vB,EAAA+vB,EAAA,UACAA,GAAA,EACAwwF,SACS,QAAArmH,GAAA,KAAAA,EACT0pC,EAAAgF,OAAA23E,GAAA,EACAxwF,GAAA6T,EAAAgF,MAAA,KACA23E,GAAA,EACAC,EAAAjD,EAAArjH,OACS,SAAAA,GAAA,KAAAA,EAAA,CACT,IAAAgjH,EAQA,KALAA,EADA,KAAAhjH,EACAqlH,EAEAjD,GAMA,OAFAkE,EAAAjD,EAAArjH,IACA,EAAA4E,EAAAsF,MAAA,0BAAAo8G,EAAA76G,KACA,EAGA,IAAA0lG,EAAA,MAEA6R,EAAA1nF,MAAA,KACA61E,EAAA,IACW6R,EAAA1nF,MAAA,QACX61E,EAAA,MAGA,IAAAoV,EAAAjd,IAAA+c,GAAAlV,EAEA,GAAAoV,EAAA,GAAAA,GAAAvD,EAAA1nF,OAAArE,MAAAsvF,GAGA,OAFAD,EAAAjD,EAAArjH,IACA,EAAA4E,EAAAsF,MAAA,+BAAAo8G,EAAA76G,KACA,EAOA,GAJAi+B,EAAA28E,YACA38E,EAAA08E,aACA3kH,KAAA0kH,gBAAAz8E,EAAAs5E,EAAApjH,IAAA2mH,GAAAlB,EAAAjD,GAGA,SAGA14E,EAAA08E,YACAC,EAAA38E,EAAA28E,UACA,SACS,QAAArmH,EAET,OADA0pC,EAAA28E,aACA,EAEAC,EAAAjD,EAAArjH,GAGA,GAAAsmH,EAAA,CAYA,GAXAA,EAAA/C,OACA75E,EAAAgF,OAAA23E,GAAA,EAEA,IAAArmH,GAAA,KAAAA,EACA0pC,EAAA88E,WAAA,GACa98E,EAAA88E,WAAA,IAAAxmH,GAAA,KAAAA,KACb,EAAA4E,EAAAsF,MAAA,qCACApE,EAAA+vB,EAAA,OAAA71B,EAAA,OAIA,QAAAsmH,IACA58E,EAAA+5E,YAAA4C,EAAAC,EAAA31G,IAEA,OADA,EAAA/L,EAAAsF,MAAA,6BAAAo8G,EAAA76G,GAAA,aAAsF46G,EAAA,eAAAC,EAAA31G,MACtF,EAIA+4B,EAAA+8E,oBAAAH,EAAAhD,gBACA55E,EAAA+8E,oBAAA,GACAJ,GAAAC,EAAA31G,MAEA,GAAA21G,EAAA/C,KACA8C,GAAA,EACaA,EAAA,IACb,EAAAzhH,EAAAsF,MAAA,wDAGAm8G,EAAA,GAAA/c,EAAA+c,EAAA,QACA38E,EAAAkR,MAAA0uD,EAAA+c,EAAA,KAIA,eAAAC,GACA,YAAAA,GACAA,EAAA3C,QAAAra,EAAA+c,GAGAA,GAAAC,EAAAtO,YACWsO,EAAAhD,cACX+C,EAAA,EACWC,EAAA9C,YACX6C,EAAA,EACA38E,EAAA+5E,YAAA,GACW6C,EAAA7C,aACX4C,EAAA,EACA38E,EAAA+5E,YAAA,EACA/5E,EAAA+8E,oBAAA,IAMA,OADA/8E,EAAA28E,aACA,GAGA7gH,kBAAAk9G,YACAA,EAAA2C,eACAA,EAAAjD,gBACAA,EAAA4C,SACAA,EAAAF,QACAA,EAAAnC,YACAA,IAMA,IAJA,IAAAhE,EAAA,GACApf,EAAA,GACAjkE,EAAAonF,EAAApnF,MAEAv8B,EAAA,EAAqBA,EAAAu8B,EAAWv8B,IAAA,CAChC,IAAAygH,EAAAkD,EAAA9iH,IAAAb,GACA2qC,EAAA,CACA08E,UAAA,EACAC,UAAA,EACA/c,MAAA,GACAma,YAAA,EACA/0E,MAAA,EACA+3E,oBAAA,EACA3H,KAAA,KACAlkE,MAAA,KACA4rE,WAAA,GAEA9K,GAAA,EACAgL,EAAA,KACAC,EAAAhE,EAEA,GAAAqC,GAAAF,EAAA9iH,OAAA,CACA,IAAA4kH,EAAA5B,EAAA6B,WAAA9nH,IAEA,IAAA6nH,KACA,EAAAhiH,EAAAsF,MAAA,oCACAwxG,GAAA,GAGAkL,GAAA9B,EAAA9iH,UACA,EAAA4C,EAAAsF,MAAA,qCACAwxG,GAAA,GAGAA,IAEAgL,GADAC,EAAA7B,EAAA8B,GAAAjE,aACAK,iBAESqC,IACTqB,EAAArB,GAOA,GAJA3J,IACAA,EAAAj6G,KAAA0kH,gBAAAz8E,EAAA81E,EAAAkH,EAAAtE,IAGA,OAAA14E,EAAAkR,MAAA,CACA,MAAAksE,EAAAH,EAAArxB,UAAA,iBACAiK,EAAAxgG,GAAA+nH,EAAAp9E,EAAAkR,UACS,CACT,MAAA6kD,EAAAknB,EAAArxB,UAAA,iBACAiK,EAAAxgG,GAAA0gG,EAGA,OAAA/1D,EAAAo1E,OACAH,EAAA5/G,GAAA2qC,EAAAo1E,MAGApD,GACAgH,EAAAvyG,IAAApR,EAAA,IAAAgH,WAAA,OAIA,OACA28G,cACA/D,QACApf,WAIAwnB,uBAAA,SAAAC,GACA,IAAArE,EAAAlhH,KAAA0iH,WAAAvB,EAAA,GAAAoE,EAAAlU,SACAkU,EAAAd,SAAA,UACAc,EAAArE,eAEA2B,iBAAA,SAAA0C,GACA,GAAAA,EAAAzC,QAAA,YAKA,IAAA0C,EAAAD,EAAA1xB,UAAA,WAEA,GAAAzyF,MAAA8lB,QAAAs+F,IAAA,IAAAA,EAAAjlH,OAAA,CAKA,IAAA2nB,EAAAs9F,EAAA,GACA32F,EAAA22F,EAAA,GAEA,OAAAt9F,GAAA2G,GAAA7uB,KAAAoK,MAAA7J,OACAP,KAAAslH,uBAAAC,OADA,CAKA,IAAAE,EAAA52F,EAAA3G,EACAw9F,EAAA1lH,KAAAoK,MAAAgF,SAAAyf,EAAA42F,GACA79F,EAAA5nB,KAAAyiH,UAAAiD,GACAxE,EAAAlhH,KAAA0iH,WAAAvB,EAAAv5F,EAAA29F,EAAAlU,SAGA,GAFAkU,EAAArE,cAEAA,EAAArtB,UAAA,UAIA,IAAA8xB,EAAAzE,EAAArtB,UAAA,SACA+xB,EAAA/2F,EAAA82F,EAEA,OAAAA,GAAAC,GAAA5lH,KAAAoK,MAAA7J,OACAP,KAAAslH,uBAAAC,OADA,CAKA,IAAAhE,EAAAvhH,KAAAqiH,WAAAuD,GACA1E,EAAAK,aAAAnxG,YA/BAm1G,EAAAM,aAAA,gBAPA7lH,KAAAslH,uBAAAC,IAwCAjC,cAAA,SAAAh1G,EAAA/N,EAAA8wG,EAAApU,GACA,OAAA3uF,EACA,WAAAyyG,GAAA,EAAA+E,EAAAC,UAAApE,EAAAqE,iBACO,OAAA13G,EACP,WAAAyyG,GAAA,EAAA+E,EAAAG,OAAAtE,EAAAuE,eACO,OAAA53G,EACP,WAAAyyG,GAAA,EAAA+E,EAAAK,cAAAxE,EAAAyE,qBAGA,IAAAh8G,EAAApK,KAAAoK,MACAM,EAAA4D,EACAysG,EAAA3wG,EAAAkE,KACA,MAAA6uG,EAAA,CAAAlgB,EAAA,aACA,IAAAjzF,EAAA6vB,EAAAv8B,EAGA,OAFAiD,GAAA,EAEAw6G,GACA,OACA,IAAAz9G,EAAA,EAAqBA,EAAAiD,EAAYjD,IACjC0M,EAAAI,EAAAkE,MAAA,EAAAlE,EAAAkE,KACA6uG,EAAA77G,KAAA27F,EAAAjzF,EAAAqnG,EAAAlzG,IAAA6L,IAGA,MAEA,OACA,KAAAmzG,EAAA58G,WAIA,IAHAyJ,EAAAI,EAAAkE,MAAA,EAAAlE,EAAAkE,KACAurB,EAAAzvB,EAAAkE,KAEAhR,EAAA,EAAuBA,GAAAu8B,EAAYv8B,IACnC6/G,EAAA77G,KAAA27F,EAAAjzF,IAAAqnG,EAAAlzG,IAAA6L,MAIA,MAEA,OACA,KAAAmzG,EAAA58G,WAIA,IAHAyJ,EAAAI,EAAAkE,MAAA,EAAAlE,EAAAkE,KACAurB,EAAAzvB,EAAAkE,MAAA,EAAAlE,EAAAkE,KAEAhR,EAAA,EAAuBA,GAAAu8B,EAAYv8B,IACnC6/G,EAAA77G,KAAA27F,EAAAjzF,IAAAqnG,EAAAlzG,IAAA6L,MAIA,MAEA,QACA,UAAA7G,EAAAuP,YAAA,0BAGA,IAAAsW,EAAA1a,EACA+3G,EAAAj8G,EAAAgF,SAAA1E,EAAAse,GACA,WAAA+3F,GAAA,EAAAhG,EAAAoC,EAAAkJ,IAEA5C,cAAA,SAAAn1G,EAAAyrF,EAAAsX,EAAA8L,GACA,IAGApC,EAAAz9G,EAAAonB,EAHA2wB,EAAAr3C,OAAAY,OAAA,MACAwL,EAAApK,KAAAoK,MACAk8G,GAAA,EAEAD,EAAA,KAYA,OAAA/3G,GAAA,IAAAA,EAAA,CACAg4G,GAAA,EACAvL,EAAAzsG,EACA,IAAA+tF,EAAA/tF,EAAA28E,EAAAs7B,eAAAt7B,EAAAmQ,iBAEA,IAAA99F,EAAA,EAAAonB,EAAAy4F,EAAA58G,OAAwCjD,EAAAonB,EAAQpnB,IAAA,CAChD,IAAA2S,EAAAosF,EAAAp2F,QAAAk3G,EAAA7/G,KAEA,IAAA2S,IACAolC,EAAAplC,GAAA3S,QAGO,CACP,IAAAkpH,EAAAl4G,EAGA,YAFAysG,EAAA3wG,EAAAkE,OAGA,OACA,IAAAm4G,EAAAr8G,EAAAkE,KAEA,IAAAhR,EAAA,EAAuBA,GAAAmpH,EAAkBnpH,IACzC+3C,EAAAjrC,EAAAkE,MAAAhR,EAGA,MAEA,OACA,IAAAopH,EAAAt8G,EAAAkE,KACAq4G,EAAA,EAEA,IAAArpH,EAAA,EAAuBA,EAAAopH,EAAiBppH,IAIxC,IAHA,IAAAoN,EAAAN,EAAAkE,KACA8jC,EAAAhoC,EAAAkE,KAEA8lB,EAAA1pB,EAAiC0pB,GAAA1pB,EAAA0nC,EAAmBhe,IACpDihB,EAAAjhB,GAAAuyF,IAIA,MAEA,QACA,UAAAxjH,EAAAuP,wCAAoEqoG,YAGpE,IAAA1vD,EAAA/8C,EAEA,IAAAysG,IACA3wG,EAAAo8G,IAAA,IA1DA,WACA,IAAAI,EAAAx8G,EAAAkE,KAEA,IAAAhR,EAAA,EAAmBA,EAAAspH,EAAsBtpH,IAAA,CACzC,IAAAsP,EAAAxC,EAAAkE,KACAu4G,GAAAz8G,EAAAkE,MAAA,QAAAlE,EAAAkE,MACA+mC,EAAAzoC,GAAAuwG,EAAAl3G,QAAAorG,EAAAlzG,IAAA0oH,KAqDAC,IAGAT,EAAAj8G,EAAAgF,SAAAo3G,EAAAn7D,GAIA,WAAA07D,EAAAT,EADAvL,GAAA,IACA1lE,EAAAgxE,IAEA7C,cAAA,SAAAl1G,EAAA/N,GACA,IAGAjD,EAHA8M,EAAApK,KAAAoK,MACA2wG,EAAA3wG,EAAAkE,KACAi1G,EAAA,GAGA,OAAAxI,GACA,OACA,IAAAz9G,EAAA,EAAqBA,EAAAiD,IAAYjD,EAAA,CACjC,IAAA0M,EAAAI,EAAAkE,KACAi1G,EAAAjiH,KAAA0I,GAGA,MAEA,OACA,IAAA08G,EAAAt8G,EAAAkE,MAAA,EAAAlE,EAAAkE,KAEA,IAAAhR,EAAA,EAAqBA,EAAAopH,IAAiBppH,EAAA,CACtC,IAAAgmB,EAAAlZ,EAAAkE,MAAA,EAAAlE,EAAAkE,KAEA,IAAAhR,GAAA,IAAAgmB,KACA,EAAAngB,EAAAsF,MAAA,mFACA6a,EAAA,GAMA,IAHA,IAAA6hG,EAAA/6G,EAAAkE,KACAqwB,EAAAv0B,EAAAkE,IAAA,EAAAlE,EAAAkE,EAAA,GAEA8lB,EAAA9Q,EAA+B8Q,EAAAuK,IAAUvK,EACzCmvF,EAAAjiH,KAAA6jH,GAIA72G,GAAA,EACA,MAEA,QACA,UAAAnL,EAAAuP,8CAAwEqoG,OAGxE,GAAAwI,EAAAhjH,WACA,UAAA4C,EAAAuP,YAAA,qCAGA,WAAAgvG,EAAA3G,EAAAwI,KAGAtH,EAl6BA,GAq6BA7+G,EAAA6+G,YAEA,IAAAqE,EAAA,WACA,SAAAA,IACAtgH,KAAA+/C,OAAA,KACA//C,KAAA86B,MAAA,GACA96B,KAAA4kC,QAAA,KACA5kC,KAAAqxG,QAAA,IAAAqP,EACA1gH,KAAA2gH,gBAAA,KACA3gH,KAAAq1C,SAAA,KACAr1C,KAAAm9G,QAAA,KACAn9G,KAAAihH,YAAA,KACAjhH,KAAAqjH,QAAA,GACArjH,KAAAujH,SAAA,KACAvjH,KAAAyhH,WAAA,EA0BA,OAvBAnB,EAAAphH,UAAA,CACAg9G,oBAAA,WACA,GAAAl8G,KAAAihH,YAAApnF,OAAA,OACA,EAAA12B,EAAAsF,MAAA,iEADA,CAKA,IAAAu+G,EAAAhnH,KAAAihH,YAAA9iH,IAAA,GACA6B,KAAAihH,YAAAzyC,IAAAw4C,GAEAhnH,KAAAyhH,WACAzhH,KAAAujH,kBAAAjiH,KAAAtB,KAAAujH,kBAAA,MAGAzG,WAAA,SAAA9yG,GACA,QAAAA,EAAA,GAAAA,GAAAhK,KAAAihH,YAAApnF,QAIA75B,KAAAihH,YAAA9iH,IAAA6L,GACAzJ,OAAA,IAGA+/G,EAtCA,GAyCAljH,EAAAkjH,MAEA,IAAAC,EAAA,WAQA,OAPA,SAAA9sD,EAAAC,EAAAmwD,EAAAC,GACA9jH,KAAAyzD,QACAzzD,KAAA0zD,QACA1zD,KAAA6jH,UACA7jH,KAAA8jH,WALA,GAWA1mH,EAAAmjH,YAEA,IAAAG,EAAA,WACA,SAAAA,IACA1gH,KAAAqxG,QAAA,GAuCA,OApCAqP,EAAAxhH,UAAA,CACAf,IAAA,SAAA8R,GACA,OAAAA,GAAA,GAAAA,GAAAg3G,IACAnG,EAAA7wG,GAGAA,EA5+BA,KA4+BAjQ,KAAAqxG,QAAA9wG,OACAP,KAAAqxG,QAAAphG,EA7+BA,KAg/BA6wG,EAAA,IAEAoG,OAAA,SAAA91G,GACA,IAAAnB,EAAA6wG,EAAA76G,QAAAmL,GAEA,WAAAnB,EACAA,GAKA,KAFAA,EAAAjQ,KAAAqxG,QAAAprG,QAAAmL,IAGAnB,EA5/BA,KA+/BA,GAEAu+D,IAAA,SAAAjwE,GACAyB,KAAAqxG,QAAA/vG,KAAA/C,IAGAs7B,YACA,OAAA75B,KAAAqxG,QAAA9wG,SAIAmgH,EAzCA,GA4CAtjH,EAAAsjH,aAEA,IAAAE,EAAA,WACA,SAAAA,IACA5gH,KAAAmnH,QAAA,GACAnnH,KAAAO,OAAA,EAqBA,OAlBAqgH,EAAA1hH,UAAA,CACAsvE,IAAA,SAAAnqE,GACArE,KAAAO,QAAA8D,EAAA9D,OACAP,KAAAmnH,QAAA7lH,KAAA+C,IAEAqK,IAAA,SAAAuB,EAAA5L,GACArE,KAAAO,QAAA8D,EAAA9D,OAAAP,KAAAmnH,QAAAl3G,GAAA1P,OACAP,KAAAmnH,QAAAl3G,GAAA5L,GAEAlG,IAAA,SAAA8R,GACA,OAAAjQ,KAAAmnH,QAAAl3G,IAGA4pB,YACA,OAAA75B,KAAAmnH,QAAA5mH,SAIAqgH,EAxBA,GA2BAxjH,EAAAwjH,WAEA,IAAAwG,EAAA,WACA,SAAAA,EAAA1b,EAAA2F,GACArxG,KAAAqnH,aAAA3b,EAAA2b,aACArnH,KAAAsnH,aAAA5b,EAAA4b,aACAtnH,KAAAunH,SAAA7b,EAAA6b,SACAvnH,KAAAwnH,MAAA9b,EAAA8b,MACAxnH,KAAAynH,QAAA/b,EAAA+b,QACAznH,KAAA0nH,MAAAhc,EAAAgc,MACA1nH,KAAAqxG,UACArxG,KAAAiuB,OAAAjwB,OAAAY,OAAA,MAmFA,OAhFAwoH,EAAAloH,UAAA,CACAulH,SAAA,SAAA5lH,EAAAN,GACA,KAAAM,KAAAmB,KAAAqnH,cACA,SAGA,IAAAM,EAAAppH,EAAAgC,OAEA,OAAAonH,EACA,SAGA,QAAArqH,EAAA,EAAqBA,EAAAqqH,EAAiBrqH,IACtC,GAAAk4B,MAAAj3B,EAAAjB,IAEA,OADA,EAAA6F,EAAAsF,MAAA,2BAAAlK,EAAA,cAAAM,EAAA,OACA,EAIA,IAAA4lB,EAAAzkB,KAAAwnH,MAAA3oH,GAOA,MALA,QAAA4lB,GAAA,QAAAA,GAAA,WAAAA,IACAlmB,IAAA,IAGAyB,KAAAiuB,OAAApvB,GAAAN,GACA,GAEAkiH,UAAA,SAAA5iH,EAAAU,GACA,KAAAV,KAAAmC,KAAAsnH,cACA,UAAAnkH,EAAAuP,wCAAgE7U,MAGhEmC,KAAAiuB,OAAAjuB,KAAAsnH,aAAAzpH,IAAAU,GAEAukH,QAAA,SAAAjlH,GACA,OAAAmC,KAAAsnH,aAAAzpH,KAAAmC,KAAAiuB,QAEA4lE,UAAA,SAAAh2F,GACA,KAAAA,KAAAmC,KAAAsnH,cACA,UAAAnkH,EAAAuP,uCAA+D7U,MAG/D,IAAAgB,EAAAmB,KAAAsnH,aAAAzpH,GAEA,OAAAgB,KAAAmB,KAAAiuB,OAIAjuB,KAAAiuB,OAAApvB,GAHAmB,KAAAunH,SAAA1oH,IAKAgnH,aAAA,SAAAhoH,UACAmC,KAAAiuB,OAAAjuB,KAAAsnH,aAAAzpH,MAIAupH,EAAAQ,aAAA,SAAAC,GAUA,IATA,IAAAnc,EAAA,CACA2b,aAAA,GACAC,aAAA,GACAC,SAAA,GACAC,MAAA,GACAC,QAAA,GACAC,MAAA,IAGApqH,EAAA,EAAAonB,EAAAmjG,EAAAtnH,OAAuCjD,EAAAonB,IAAQpnB,EAAA,CAC/C,IAAA4kC,EAAA2lF,EAAAvqH,GACAuB,EAAAuC,MAAA8lB,QAAAgb,EAAA,KAAAA,EAAA,UAAAA,EAAA,MAAAA,EAAA,GACAwpE,EAAA2b,aAAAxoH,GAAAqjC,EAAA,GACAwpE,EAAA4b,aAAAplF,EAAA,IAAArjC,EACA6sG,EAAA8b,MAAA3oH,GAAAqjC,EAAA,GACAwpE,EAAA6b,SAAA1oH,GAAAqjC,EAAA,GACAwpE,EAAA+b,QAAA5oH,GAAAuC,MAAA8lB,QAAAgb,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACAwpE,EAAAgc,MAAApmH,KAAAzC,GAGA,OAAA6sG,GAGA0b,EA5FA,GA+FA5G,EAAA,WACA,IAAAqH,EAAA,qoCACAnc,EAAA,KAEA,SAAA8U,EAAAnP,GACA,OAAA3F,IACAA,EAAA0b,EAAAQ,aAAAC,IAGAT,EAAA3pH,KAAAuC,KAAA0rG,EAAA2F,GACArxG,KAAAkhH,YAAA,KAIA,OADAV,EAAAthH,UAAAlB,OAAAY,OAAAwoH,EAAAloH,WACAshH,EAdA,GAiBApjH,EAAAojH,aAEA,IAAAW,EAAA,WACA,IAAA0G,EAAA,sjBACAnc,EAAA,KAEA,SAAAyV,EAAA9P,GACA,OAAA3F,IACAA,EAAA0b,EAAAQ,aAAAC,IAGAT,EAAA3pH,KAAAuC,KAAA0rG,EAAA2F,GACArxG,KAAAuhH,WAAA,KAIA,OADAJ,EAAAjiH,UAAAlB,OAAAY,OAAAwoH,EAAAloH,WACAiiH,EAdA,GAiBA/jH,EAAA+jH,iBACA,IAAA2E,EAAA,CACAC,UAAA,EACAE,OAAA,EACAE,cAAA,GAGApF,EAAA,WAQA,OAPA,SAAAuF,EAAAvL,EAAAoC,EAAAkJ,GACArmH,KAAAsmH,aACAtmH,KAAA+6G,SACA/6G,KAAAm9G,UACAn9G,KAAAqmH,OALA,GAWAjpH,EAAA2jH,aAEA,IAAAgG,EAAA,WAQA,OAPA,SAAAT,EAAAvL,EAAA1lE,EAAAgxE,GACArmH,KAAAsmH,aACAtmH,KAAA+6G,SACA/6G,KAAAq1C,WACAr1C,KAAAqmH,OALA,GAWA3E,EAAA,WACA,SAAAA,EAAA3G,EAAAwI,GACAvjH,KAAA+6G,SACA/6G,KAAAujH,WAYA,OATA7B,EAAAxiH,UAAA,CACAkmH,WAAA,SAAA0C,GACA,OAAAA,EAAA,GAAAA,GAAA9nH,KAAAujH,SAAAhjH,QACA,EAGAP,KAAAujH,SAAAuE,KAGApG,EAfA,GAkBAtkH,EAAAskH,cAEA,IAAAqG,EAAA,WACA,SAAAA,IACA/nH,KAAAo7G,QAAAp9G,OAAAY,OAAA,MAgDA,OA7CAmpH,EAAA7oH,UAAA,CACA8oH,WAAA,SAAAnpH,GACA,OAAAA,KAAAmB,KAAAo7G,SAEA6M,MAAA,SAAAppH,EAAAqpH,GACA,GAAArpH,KAAAmB,KAAAo7G,QACA,UAAAj4G,EAAAuP,4CAAoE7T,KAGpEmB,KAAAo7G,QAAAv8G,GAAAqpH,GAEAr5F,OAAA,SAAAtwB,GACA,QAAAM,KAAAmB,KAAAo7G,QACAp7G,KAAAo7G,QAAAv8G,IAAAN,GAGA4pH,iBAAA,SAAAtpH,EAAAovB,EAAAunC,GACA,KAAA32D,KAAAmB,KAAAo7G,SACA,UAAAj4G,EAAAuP,wCAAgE7T,KAOhE,IAJA,IAAAwF,EAAAmxD,EAAAnxD,KACAgkF,EAAAroF,KAAAo7G,QAAAv8G,GAGAvB,EAAA,EAAAonB,EAAAuJ,EAAA1tB,OAAyCjD,EAAAonB,IAAQpnB,EAAA,CACjD,IAAAynD,EAHA,EAGAznD,EAAA+qF,EACA+/B,EAAArjE,EAAA,EACAsjE,EAAAtjE,EAAA,EACAujE,EAAAvjE,EAAA,EACAwjE,EAAAxjE,EAAA,EAEA,QAAA1gD,EAAA0gD,IAAA,IAAA1gD,EAAA+jH,IAAA,IAAA/jH,EAAAgkH,IAAA,IAAAhkH,EAAAikH,IAAA,IAAAjkH,EAAAkkH,GACA,UAAAplH,EAAAuP,YAAA,0CAGA,IAAAnU,EAAA0vB,EAAA3wB,GACA+G,EAAA0gD,GAAA,GACA1gD,EAAA+jH,GAAA7pH,GAAA,OACA8F,EAAAgkH,GAAA9pH,GAAA,OACA8F,EAAAikH,GAAA/pH,GAAA,MACA8F,EAAAkkH,GAAA,IAAAhqH,KAIAwpH,EAlDA,GAqDA3L,EAAA,WACA,SAAAA,EAAA7O,GACAvtG,KAAAutG,MAwdA,OArdA6O,EAAAl9G,UAAA,CACAm9G,QAAA,WACA,IAAA9O,EAAAvtG,KAAAutG,IACA/3C,EAAA,CACAnxD,KAAA,GACA9D,OAAA,EACAiuE,IAAA,SAAAnqE,GACArE,KAAAqE,KAAArE,KAAAqE,KAAA7D,OAAA6D,GACArE,KAAAO,OAAAP,KAAAqE,KAAA9D,SAGAw/C,EAAA//C,KAAAwoH,cAAAjb,EAAAxtD,QACAyV,EAAAgZ,IAAAzuB,GACA,IAAAq1D,EAAAp1G,KAAAyoH,iBAAAlb,EAAAzyE,OAGA,GAFA06B,EAAAgZ,IAAA4mC,GAEA7H,EAAAkU,WACAlU,EAAA3oE,QAAAk+E,QAAA,eACA,IAAApyG,EAAA68F,EAAA3oE,QAAAivD,UAAA,cACA0Z,EAAA3oE,QAAAihF,aAAA,cAEA,QAAAvoH,EAAA,EAAAonB,EAAA6oF,EAAA8V,QAAA9iH,OAAkDjD,EAAAonB,EAAQpnB,IAAA,CAC1D,IAAAorH,EAAAnb,EAAA8V,QAAA/lH,GACAs6E,EAAAlnE,EAAAuS,MAAA,GAEAylG,EAAA5F,QAAA,gBACAlrC,EAAAz0E,EAAAwP,KAAA8I,UAAAm8D,EAAA8wC,EAAA70B,UAAA,gBAGA60B,EAAAjI,UAAA,aAAA7oC,IAKA21B,EAAA3oE,QAAA67E,UAAA,aACA,IAAAkI,EAAA3oH,KAAA4oH,gBAAA,CAAArb,EAAA3oE,SAAA4wB,EAAAj1D,OAAAgtG,EAAAkU,WACAjsD,EAAAgZ,IAAAm6C,EAAAnzD,QACA,IAAAqzD,EAAAF,EAAAG,SAAA,GACAvG,EAAAviH,KAAA+oH,mBAAAxb,EAAA8D,iBACA77C,EAAAgZ,IAAA+zC,GACA,IAAA5B,EAAA3gH,KAAAgpH,aAAAzb,EAAAoT,iBAGA,GAFAnrD,EAAAgZ,IAAAmyC,GAEApT,EAAAl4D,UAAAk4D,EAAA3oE,QAAAk+E,QAAA,YACA,GAAAvV,EAAAl4D,SAAAixE,WACAuC,EAAAV,iBAAA,YAAA5a,EAAAl4D,SAAA0lE,QAAAvlD,OACS,CACT,IAAAngB,EAAAr1C,KAAAipH,gBAAA1b,EAAAl4D,UACAwzE,EAAAV,iBAAA,YAAA3yD,EAAAj1D,QAAAi1D,GACAA,EAAAgZ,IAAAn5B,GAIA,IAAA8nE,EAAAn9G,KAAAkpH,eAAA3b,EAAA4P,QAAA5P,EAAA0T,YAAApnF,MAAA0zE,EAAA8D,QAAA9D,EAAAkU,WACAoH,EAAAV,iBAAA,WAAA3yD,EAAAj1D,QAAAi1D,GACAA,EAAAgZ,IAAA2uC,GACA,IAAA8D,EAAAjhH,KAAAmpH,mBAAA5b,EAAA0T,aAIA,GAHA4H,EAAAV,iBAAA,eAAA3yD,EAAAj1D,QAAAi1D,GACAA,EAAAgZ,IAAAyyC,GAEA1T,EAAAkU,UAAA,CACAoH,EAAAV,iBAAA,YAAA3yD,EAAAj1D,QAAAi1D,GACA,IAAA+tD,EAAAvjH,KAAAopH,gBAAA7b,EAAAgW,UACA/tD,EAAAgZ,IAAA+0C,GACAoF,EAAA3oH,KAAA4oH,gBAAArb,EAAA8V,QAAA7tD,EAAAj1D,QAAA,GACAsoH,EAAAV,iBAAA,WAAA3yD,EAAAj1D,QAAAi1D,GACAA,EAAAgZ,IAAAm6C,EAAAnzD,QACA,IAAA6zD,EAAAV,EAAAG,SACA9oH,KAAAspH,oBAAA/b,EAAA8V,QAAAgG,EAAA7zD,GAKA,OAFAx1D,KAAAspH,oBAAA,CAAA/b,EAAA3oE,SAAA,CAAAikF,GAAArzD,GACAA,EAAAgZ,IAAA,KACAhZ,EAAAnxD,MAEAklH,aAAA,SAAAhrH,GACA,OAAA4/F,WAAA5/F,KAAAg3B,SAAAh3B,EAAA,KAAAi3B,MAAAj3B,GAIAyB,KAAAwpH,YAAAjrH,GAHAyB,KAAAypH,cAAAlrH,IAKAirH,YAAA,SAAA9/G,GACA,IAAAnL,EAAAmL,EAAA2D,WACA3P,EAAA,gDAAiD4iC,KAAA/hC,GAEjD,GAAAb,EAAA,CACA,IAAA6nE,EAAA44B,WAAA,OAAAzgG,EAAA,IAAAA,EAAA,MAAAA,EAAA,GAAA6C,SACAhC,GAAAsK,KAAA4vF,MAAA/uF,EAAA67D,MAAAl4D,WAGA,IACA/P,EAAAonB,EADAglG,EAAA,GAGA,IAAApsH,EAAA,EAAAonB,EAAAnmB,EAAAgC,OAAoCjD,EAAAonB,IAAQpnB,EAAA,CAC5C,IAAA+lB,EAAA9kB,EAAAjB,GAGAosH,GADA,MAAArmG,EACA,MAAA9kB,IAAAjB,GAAA,QACS,MAAA+lB,EACT,IACS,MAAAA,EACT,IAEAA,EAKA,IAAA+kD,EAAA,KAEA,IAAA9qE,EAAA,EAAAonB,GAHAglG,GAAA,EAAAA,EAAAnpH,OAAA,UAGAA,OAAsCjD,EAAAonB,EAAQpnB,GAAA,EAC9C8qE,EAAA9mE,KAAAi0B,SAAAm0F,EAAAh0F,UAAAp4B,IAAA,QAGA,OAAA8qE,GAEAqhD,cAAA,SAAAlrH,GAiBA,OAdAA,IAAA,KAAAA,GAAA,IACA,CAAAA,EAAA,KACOA,GAAA,KAAAA,GAAA,KAEP,OADAA,GAAA,MACA,OAAAA,GACOA,IAAA,MAAAA,IAAA,IAEP,OADAA,KAAA,MACA,OAAAA,GACOA,IAAA,OAAAA,GAAA,MACP,IAAAA,GAAA,UAAAA,GAEA,IAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,IAKAiqH,cAAA,SAAAzoE,GACA,OAAAA,EAAA0T,MAAA1T,EAAA2T,MAAA3T,EAAA8jE,QAAA9jE,EAAA+jE,UAEA2E,iBAAA,SAAA3tF,GAGA,IAFA,IAAAs6E,EAAA,IAAAwL,EAEAtjH,EAAA,EAAAonB,EAAAoW,EAAAv6B,OAAwCjD,EAAAonB,IAAQpnB,EAAA,CAKhD,IAJA,IAAAO,EAAAi9B,EAAAx9B,GACAiD,EAAAsI,KAAAqG,IAAArR,EAAA0C,OAAA,KACAopH,EAAA,IAAAvoH,MAAAb,GAEA6zB,EAAA,EAAuBA,EAAA7zB,EAAY6zB,IAAA,CACnC,IAAA4zE,EAAAnqG,EAAAu2B,IAEA4zE,EAAA,KAAAA,EAAA,WAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAqH,MAAAA,GAAgB,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,KACrIA,EAAA,KAGA2hB,EAAAv1F,GAAA4zE,EAKA,MAFA2hB,IAAAvkH,KAAA,OAGAukH,EAAA,iBAGAvU,EAAA5mC,KAAA,EAAArrE,EAAAqL,eAAAm7G,IAGA,OAAA3pH,KAAAgpH,aAAA5T,IAEAwT,gBAAA,SAAAgB,EAAArpH,EAAAspH,GAIA,IAHA,IAAAR,EAAA,GACAnG,EAAA,IAAAtC,EAEAtjH,EAAA,EAAAonB,EAAAklG,EAAArpH,OAAwCjD,EAAAonB,IAAQpnB,EAAA,CAChD,IAAA8lH,EAAAwG,EAAAtsH,GAEAusH,IACAzG,EAAAyC,aAAA,kBACAzC,EAAAyC,aAAA,mBACAzC,EAAAyC,aAAA,eACAzC,EAAAyC,aAAA,YACAzC,EAAAyC,aAAA,YAGA,IAAAiE,EAAA,IAAA/B,EACAgC,EAAA/pH,KAAAgqH,YAAA5G,EAAA0G,GACAT,EAAA/nH,KAAAwoH,GACA5G,EAAA10C,IAAAu7C,GACAD,EAAAj7F,OAAAtuB,GAIA,OACAuoH,SAAAO,EACA7zD,OAHA0tD,EAAAljH,KAAAgpH,aAAA9F,EAAAmG,KAMAC,oBAAA,SAAAM,EAAAd,EAAAtzD,GACA,QAAAl4D,EAAA,EAAAonB,EAAAklG,EAAArpH,OAAwCjD,EAAAonB,IAAQpnB,EAAA,CAChD,IAAA8lH,EAAAwG,EAAAtsH,GACA4jH,EAAAkC,EAAAlC,YAEA,IAAAA,IAAAkC,EAAAN,QAAA,WACA,UAAA3/G,EAAAuP,YAAA,uCAGA,IAAAu3G,EAAA,IAAAlC,EACAmC,EAAAlqH,KAAAgqH,YAAA9I,EAAA+I,GACAn5C,EAAAtb,EAAAj1D,OAUA,GATA0pH,EAAAp7F,OAAAiiD,GAEAo5C,EAAA3pH,SACAuwE,EAAA,GAGAg4C,EAAAxrH,GAAA6qH,iBAAA,WAAA+B,EAAA3pH,OAAAuwE,GAAAtb,GACAA,EAAAgZ,IAAA07C,GAEAhJ,EAAAK,YAAAL,EAAA4B,QAAA,UACA,IAAAhD,EAAA9/G,KAAAgpH,aAAA9H,EAAAK,YACA0I,EAAA9B,iBAAA,SAAA+B,EAAA3pH,QAAAi1D,GACAA,EAAAgZ,IAAAsxC,MAIAkK,YAAA,SAAApiG,EAAAuiG,GAIA,IAHA,IAAA/hD,EAAA,GACAs/C,EAAA9/F,EAAA8/F,MAEApqH,EAAA,EAAqBA,EAAAoqH,EAAAnnH,SAAkBjD,EAAA,CACvC,IAAAuB,EAAA6oH,EAAApqH,GAEA,GAAAuB,KAAA+oB,EAAAqG,OAAA,CAIA,IAAAA,EAAArG,EAAAqG,OAAApvB,GACA2oH,EAAA5/F,EAAA4/F,MAAA3oH,GAUA,GARAuC,MAAA8lB,QAAAsgG,KACAA,EAAA,CAAAA,IAGApmH,MAAA8lB,QAAA+G,KACAA,EAAA,CAAAA,IAGA,IAAAA,EAAA1tB,OAAA,CAIA,QAAA6zB,EAAA,EAAA8H,EAAAsrF,EAAAjnH,OAA0C6zB,EAAA8H,IAAQ9H,EAAA,CAClD,IAAA3P,EAAA+iG,EAAApzF,GACA71B,EAAA0vB,EAAAmG,GAEA,OAAA3P,GACA,UACA,UACA2jD,IAAA5nE,OAAAR,KAAAupH,aAAAhrH,IACA,MAEA,aACA,IAAAV,EAAA+pB,EAAAy/F,aAAAxoH,GAEAsrH,EAAAnC,WAAAnqH,IACAssH,EAAAlC,MAAApqH,EAAAuqE,EAAA7nE,QAGA6nE,IAAA5nE,OAAA,cACA,MAEA,YACA,YACA4nE,IAAA5nE,OAAAR,KAAAupH,aAAAhrH,IAEA,QAAAqyC,EAAA,EAAAoB,EAAA/jB,EAAA1tB,OAAiDqwC,EAAAoB,IAAQpB,EACzDw3B,IAAA5nE,OAAAR,KAAAupH,aAAAt7F,EAAA2iB,KAGA,MAEA,QACA,UAAAztC,EAAAuP,oCAAkE+R,MAIlE2jD,IAAA5nE,OAAAonB,EAAA6/F,QAAA5oH,MAGA,OAAAupE,GAEA2gD,mBAAA,SAAA1X,GAGA,IAFA,IAAAkR,EAAA,IAAA3B,EAEAtjH,EAAA,EAAAonB,EAAA2sF,EAAA9wG,OAA0CjD,EAAAonB,IAAQpnB,EAClDilH,EAAA/zC,KAAA,EAAArrE,EAAAqL,eAAA6iG,EAAA/zG,KAGA,OAAA0C,KAAAgpH,aAAAzG,IAEA6H,uBAAA,WACA,IAAAzJ,EAAA3gH,KAAAutG,IAAAoT,gBACA3gH,KAAAooE,IAAAiiD,eAAArqH,KAAAgpH,aAAArI,KAEAwI,mBAAA,SAAAlI,GAGA,IAFA,IAAAD,EAAA,IAAAJ,EAEAtjH,EAAA,EAAqBA,EAAA2jH,EAAApnF,MAAuBv8B,IAAA,CAC5C,IAAAk6F,EAAAypB,EAAA9iH,IAAAb,GAEA,IAAAk6F,EAAAj3F,OAKAygH,EAAAxyC,IAAAgpB,GAJAwpB,EAAAxyC,IAAA,IAAAlqE,WAAA,WAOA,OAAAtE,KAAAgpH,aAAAhI,IAEAkI,eAAA,SAAA/L,EAAApO,EAAAsC,EAAAoQ,GACA,IAAAr5C,EACA,MAAAkiD,EAAAvb,EAAA,EAEA,GAAA0S,EACAr5C,EAAA,IAAA9jE,WAAA,OAAAgmH,GAAA,UAAAA,QACO,EAEPliD,EAAA,IAAA9jE,WADA,IAAAgmH,IAEA,KACA,IAAAC,EAAA,EACA,MAAAC,EAAArN,UAAA58G,OACA,IAAAkqH,GAAA,EAEA,QAAAntH,EAAA,EAAuBA,EAAA8qE,EAAA7nE,OAAgBjD,GAAA,GACvC,IAAAupH,EAAA,EAEA,GAAA0D,EAAAC,EAAA,CACA,MAAA3sH,EAAAs/G,UAAAoN,MAGA,KAFA1D,EAAAxV,EAAA6V,OAAArpH,MAGAgpH,EAAA,EAEA4D,IACAA,GAAA,GACA,EAAAtnH,EAAAsF,uBAAiD5K,sBAKjDuqE,EAAA9qE,GAAAupH,GAAA,MACAz+C,EAAA9qE,EAAA,OAAAupH,GAIA,OAAA7mH,KAAA0qH,kBAAAtiD,IAEA6gD,gBAAA,SAAA5zE,GACA,OAAAr1C,KAAA0qH,kBAAAr1E,EAAAgxE,MAEA+C,gBAAA,SAAA7F,GACA,MAAAxI,EAAAwI,EAAAxI,OACA,IAAA3yC,EAAA9qE,EAEA,OAAAy9G,GACA,OAIA,KAHA3yC,EAAA,IAAA9jE,WAAA,EAAAi/G,WAAAhjH,SACA,GAAAw6G,EAEAz9G,EAAA,EAAqBA,EAAAimH,WAAAhjH,OAA8BjD,IACnD8qE,EAAA9qE,EAAA,GAAAimH,WAAAjmH,GAGA,MAEA,OACA,MAAAoN,EAAA,EACA,IAAAigH,EAAApH,WAAA,GACA,MAAAx2F,EAAA,CAAAguF,EAAA,IAAArwG,GAAA,UAAAA,EAAAigH,GAEA,IAAArtH,EAAA,EAAqBA,EAAAimH,WAAAhjH,OAA8BjD,IAAA,CACnD,MAAAstH,EAAArH,WAAAjmH,GAEAstH,IAAAD,IACA59F,EAAAzrB,KAAAhE,GAAA,UAAAA,EAAAstH,GACAD,EAAAC,GAIA,MAAAC,GAAA99F,EAAAxsB,OAAA,KACAwsB,EAAA,GAAA89F,GAAA,MACA99F,EAAA,OAAA89F,EACA99F,EAAAzrB,KAAAhE,GAAA,UAAAA,GACA8qE,EAAA,IAAA9jE,WAAAyoB,GAIA,OAAA/sB,KAAA0qH,kBAAAtiD,IAEAsiD,kBAAA,SAAArmH,GAGA,IAFA,IAAA+jE,EAAA,GAEA9qE,EAAA,EAAAonB,EAAArgB,EAAA9D,OAAuCjD,EAAAonB,IAAQpnB,EAC/C8qE,EAAA9qE,GAAA+G,EAAA/G,GAGA,OAAA8qE,GAEA4gD,aAAA,SAAA/4G,EAAA64G,GACAA,KAAA,GACA,IAAA3B,EAAAl3G,EAAAk3G,QACAttF,EAAAstF,EAAA5mH,OAEA,OAAAs5B,EACA,cAGA,IAEAv8B,EAMA6mH,EARA9/G,EAAA,CAAAw1B,GAAA,UAAAA,GACAixF,EAAA,EAGA,IAAAxtH,EAAA,EAAiBA,EAAAu8B,IAAWv8B,EAC5BwtH,GAAA3D,EAAA7pH,GAAAiD,OAMA4jH,EADA2G,EAAA,IACA,EACOA,EAAA,MACP,EACOA,EAAA,SACP,EAEA,EAGAzmH,EAAA/C,KAAA6iH,GACA,IAAAyB,EAAA,EAEA,IAAAtoH,EAAA,EAAiBA,EAAAu8B,EAAA,EAAev8B,IAChC,IAAA6mH,EACA9/G,EAAA/C,KAAA,IAAAskH,GACS,IAAAzB,EACT9/G,EAAA/C,KAAAskH,GAAA,UAAAA,GACS,IAAAzB,EACT9/G,EAAA/C,KAAAskH,GAAA,OAAAA,GAAA,UAAAA,GAEAvhH,EAAA/C,KAAAskH,IAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,GAGAuB,EAAA7pH,KACAsoH,GAAAuB,EAAA7pH,GAAAiD,QAIA,IAAAjD,EAAA,EAAiBA,EAAAu8B,EAAWv8B,IAAA,CAC5BwrH,EAAAxrH,IACAwrH,EAAAxrH,GAAAuxB,OAAAxqB,EAAA9D,QAGA,QAAA6zB,EAAA,EAAA8H,EAAAirF,EAAA7pH,GAAAiD,OAA+C6zB,EAAA8H,EAAQ9H,IACvD/vB,EAAA/C,KAAA6lH,EAAA7pH,GAAA82B,IAIA,OAAA/vB,IAGA+3G,EA1dA,GA6dAh/G,EAAAg/G,eAIA,SAAA/+G,EAAAD,EAAA2F,GAEA,aAGA/E,OAAAC,eAAAb,EAAA,cACAmB,OAAA,IAEAnB,EAAAgpH,oBAAAhpH,EAAA8oH,cAAA9oH,EAAA4oH,qBAAA,EAEA5oH,EAAA4oH,gBADA,ygEAGA5oH,EAAA8oH,cADA,wrEAGA9oH,EAAAgpH,oBADA,irCAKA,SAAA/oH,EAAAD,EAAA2F,GAEA,aAGA/E,OAAAC,eAAAb,EAAA,cACAmB,OAAA,IAEAnB,EAAA09F,YAgBA,SAAAiwB,GACA,OAAAA,GACA,sBACA,OAAA1vB,EAEA,uBACA,OAAAD,EAEA,uBACA,OAAAE,EAEA,wBACA,OAAAC,EAEA,2BACA,OAAAC,EAEA,qBACA,OAAA+qB,EAEA,wBACA,OAAAyE,EAEA,QACA,cAvCA5tH,EAAAmpH,eAAAnpH,EAAAo+F,qBAAAp+F,EAAAm+F,kBAAAn+F,EAAAk+F,iBAAAl+F,EAAAg+F,iBAAAh+F,EAAAi+F,qBAAA,EACA,MAAAkrB,EAAA,+7EACAnpH,EAAAmpH,iBACA,MAAAyE,EAAA,+7EACA1vB,EAAA,mjEACAl+F,EAAAk+F,mBACA,MAAAF,EAAA,2/CACAh+F,EAAAg+F,mBACA,MAAAC,EAAA,wjEACAj+F,EAAAi+F,kBACA,MAAAE,EAAA,2qEACAn+F,EAAAm+F,oBACA,MAAAC,EAAA,g8CACAp+F,EAAAo+F,wBAgCA,SAAAn+F,EAAAD,EAAA2F,GAEA,IAAA4qB,EAAA5qB,EAAA,GAAA4qB,sBACAsuE,EAAAtuE,EAAA,SAAAnvB,GACAA,EAAAs8E,EAAA,GACAt8E,EAAAysH,GAAA,IACAzsH,EAAA0sH,QAAA,IACA1sH,EAAA2sH,SAAA,IACA3sH,EAAA4sH,QAAA,MACA5sH,EAAA6sH,OAAA,IACA7sH,EAAA8sH,YAAA,MACA9sH,EAAA+sH,OAAA,IACA/sH,EAAAgtH,YAAA,KACAhtH,EAAAitH,eAAA,KACAjtH,EAAAktH,eAAA,KACAltH,EAAAmtH,YAAA,KACAntH,EAAAotH,gBAAA,KACAptH,EAAAqtH,YAAA,KACArtH,EAAAstH,OAAA,IACAttH,EAAAutH,QAAA,KACAvtH,EAAAwtH,YAAA,IACAxtH,EAAAytH,iBAAA,KACAztH,EAAA0tH,oBAAA,KACA1tH,EAAA2tH,iBAAA,KACA3tH,EAAA4tH,qBAAA,KACA5tH,EAAA6tH,iBAAA,MACA7tH,EAAA8tH,iBAAA,KACA9tH,EAAA+tH,MAAA,MACA/tH,EAAAguH,WAAA,MACAhuH,EAAAiuH,UAAA,KACAjuH,EAAAkuH,UAAA,IACAluH,EAAAmuH,UAAA,IACAnuH,EAAAouH,kBAAA,KACApuH,EAAAquH,gBAAA,IACAruH,EAAAsuH,eAAA,MACAtuH,EAAAuuH,UAAA,KACAvuH,EAAAwuH,WAAA,IACAxuH,EAAAyuH,OAAA,IACAzuH,EAAA0uH,YAAA,MACA1uH,EAAA2uH,WAAA,KACA3uH,EAAA4uH,YAAA,KACA5uH,EAAA6uH,eAAA,IACA7uH,EAAA8uH,MAAA,IACA9uH,EAAA+uH,WAAA,IACA/uH,EAAAgvH,QAAA,IACAhvH,EAAAivH,WAAA,MACAjvH,EAAAkvH,QAAA,IACAlvH,EAAAmvH,MAAA,IACAnvH,EAAAovH,WAAA,IACApvH,EAAAqvH,WAAA,KACArvH,EAAAsvH,WAAA,MACAtvH,EAAAuvH,OAAA,MACAvvH,EAAAwvH,OAAA,IACAxvH,EAAAyvH,YAAA,MACAzvH,EAAA0vH,YAAA,KACA1vH,EAAAu8E,EAAA,GACAv8E,EAAA2vH,QAAA,KACA3vH,EAAA4vH,WAAA,KACA5vH,EAAA6vH,UAAA,KACA7vH,EAAA8vH,WAAA,KACA9vH,EAAA+vH,YAAA,KACA/vH,EAAAgwH,KAAA,IACAhwH,EAAAiwH,MAAA,IACAjwH,EAAAkwH,WAAA,KACAlwH,EAAAmwH,WAAA,MACAnwH,EAAAowH,WAAA,MACApwH,EAAAqwH,OAAA,MACArwH,EAAAswH,QAAA,IACAtwH,EAAAw8E,EAAA,GACAx8E,EAAAuwH,WAAA,KACAvwH,EAAAwwH,OAAA,IACAxwH,EAAAywH,MAAA,MACAzwH,EAAA0wH,WAAA,MACA1wH,EAAA2wH,OAAA,IACA3wH,EAAA4wH,SAAA,IACA5wH,EAAA6wH,cAAA,KACA7wH,EAAA8wH,cAAA,MACA9wH,EAAA+wH,QAAA,KACA/wH,EAAAgxH,YAAA,IACAhxH,EAAAixH,KAAA,IACAjxH,EAAAkxH,WAAA,IACAlxH,EAAAmxH,aAAA,MACAnxH,EAAAoxH,YAAA,KACApxH,EAAAqxH,qBAAA,KACArxH,EAAAsxH,YAAA,KACAtxH,EAAAuxH,8BAAA,KACAvxH,EAAAwxH,qBAAA,KACAxxH,EAAAyxH,oBAAA,KACAzxH,EAAA0xH,aAAA,KACA1xH,EAAA2xH,sBAAA,KACA3xH,EAAA4xH,0BAAA,KACA5xH,EAAA6xH,IAAA,IACA7xH,EAAA8xH,MAAA,IACA9xH,EAAA+xH,gBAAA,MACA/xH,EAAAgyH,WAAA,MACAhyH,EAAAiyH,WAAA,KACAjyH,EAAAkyH,OAAA,MACAlyH,EAAAmyH,EAAA,GACAnyH,EAAAoyH,GAAA,IACApyH,EAAAqyH,QAAA,IACAryH,EAAAsyH,WAAA,KACAtyH,EAAAuyH,SAAA,IACAvyH,EAAAwyH,OAAA,IACAxyH,EAAAyyH,SAAA,KACAzyH,EAAA0yH,QAAA,KACA1yH,EAAA2yH,iBAAA,KACA3yH,EAAA4yH,OAAA,IACA5yH,EAAA6yH,WAAA,KACA7yH,EAAA8yH,UAAA,KACA9yH,EAAA+yH,WAAA,KACA/yH,EAAAgzH,UAAA,KACAhzH,EAAAizH,MAAA,KACAjzH,EAAAkzH,WAAA,IACAlzH,EAAAmzH,MAAA,IACAnzH,EAAAozH,SAAA,MACApzH,EAAAqzH,cAAA,MACArzH,EAAAszH,cAAA,MACAtzH,EAAAuzH,cAAA,MACAvzH,EAAAwzH,aAAA,IACAxzH,EAAAyzH,YAAA,KACAzzH,EAAA0zH,WAAA,KACA1zH,EAAA2zH,WAAA,MACA3zH,EAAA4zH,eAAA,MACA5zH,EAAA6zH,OAAA,IACA7zH,EAAA8zH,OAAA,MACA9zH,EAAA+zH,QAAA,IACA/zH,EAAAg0H,GAAA,IACAh0H,EAAAi0H,QAAA,IACAj0H,EAAAk0H,qBAAA,KACAl0H,EAAAm0H,YAAA,KACAn0H,EAAAo0H,aAAA,KACAp0H,EAAAq0H,EAAA,GACAr0H,EAAAs0H,OAAA,IACAt0H,EAAAu0H,YAAA,MACAv0H,EAAAw0H,OAAA,IACAx0H,EAAAy0H,OAAA,IACAz0H,EAAA00H,cAAA,KACA10H,EAAA20H,YAAA,KACA30H,EAAA40H,QAAA,KACA50H,EAAA60H,YAAA,IACA70H,EAAA80H,iBAAA,KACA90H,EAAA+0H,iBAAA,KACA/0H,EAAAg1H,oBAAA,KACAh1H,EAAAi1H,iBAAA,KACAj1H,EAAAk1H,qBAAA,KACAl1H,EAAAm1H,iBAAA,MACAn1H,EAAAo1H,iBAAA,KACAp1H,EAAAq1H,UAAA,KACAr1H,EAAAs1H,UAAA,IACAt1H,EAAAu1H,UAAA,IACAv1H,EAAAw1H,eAAA,MACAx1H,EAAAy1H,KAAA,IACAz1H,EAAA01H,WAAA,IACA11H,EAAA21H,UAAA,KACA31H,EAAA41H,WAAA,KACA51H,EAAA61H,OAAA,IACA71H,EAAA81H,YAAA,MACA91H,EAAA+1H,WAAA,KACA/1H,EAAAg2H,WAAA,KACAh2H,EAAAi2H,WAAA,KACAj2H,EAAAk2H,eAAA,IACAl2H,EAAAm2H,kBAAA,KACAn2H,EAAAo2H,WAAA,KACAp2H,EAAAq2H,YAAA,KACAr2H,EAAAs2H,QAAA,IACAt2H,EAAAu2H,aAAA,KACAv2H,EAAAw2H,aAAA,KACAx2H,EAAAy2H,WAAA,KACAz2H,EAAA02H,WAAA,MACA12H,EAAA22H,WAAA,KACA32H,EAAA42H,oBAAA,KACA52H,EAAA62H,IAAA,IACA72H,EAAA82H,cAAA,KACA92H,EAAA+2H,eAAA,KACA/2H,EAAAg3H,QAAA,IACAh3H,EAAAi3H,MAAA,IACAj3H,EAAAk3H,QAAA,IACAl3H,EAAAm3H,aAAA,IACAn3H,EAAAo3H,WAAA,KACAp3H,EAAAq3H,UAAA,IACAr3H,EAAAs3H,kBAAA,KACAt3H,EAAAu3H,WAAA,KACAv3H,EAAAw3H,oBAAA,KACAx3H,EAAAy3H,IAAA,IACAz3H,EAAA03H,OAAA,MACA13H,EAAA23H,IAAA,IACA33H,EAAA43H,WAAA,KACA53H,EAAA63H,SAAA,IACA73H,EAAA83H,IAAA,IACA93H,EAAA+3H,SAAA,MACA/3H,EAAAg4H,OAAA,KACAh4H,EAAAi4H,YAAA,KACAj4H,EAAAk4H,KAAA,KACAl4H,EAAAm4H,IAAA,IACAn4H,EAAAo4H,SAAA,IACAp4H,EAAAq4H,YAAA,IACAr4H,EAAA2kG,EAAA,GACA3kG,EAAAs4H,QAAA,KACAt4H,EAAAu4H,WAAA,KACAv4H,EAAAw4H,YAAA,KACAx4H,EAAAy4H,UAAA,IACAz4H,EAAA04H,MAAA,IACA14H,EAAA24H,aAAA,KACA34H,EAAA44H,UAAA,KACA54H,EAAA64H,WAAA,MACA74H,EAAA84H,UAAA,KACA94H,EAAA+4H,OAAA,MACA/4H,EAAAk7E,EAAA,GACAl7E,EAAAg5H,SAAA,MACAh5H,EAAAi5H,OAAA,IACAj5H,EAAAk5H,MAAA,IACAl5H,EAAAm5H,aAAA,IACAn5H,EAAAo5H,aAAA,KACAp5H,EAAAq5H,OAAA,IACAr5H,EAAAs5H,OAAA,IACAt5H,EAAAu5H,SAAA,IACAv5H,EAAAw5H,QAAA,KACAx5H,EAAAy5H,YAAA,IACAz5H,EAAA05H,aAAA,IACA15H,EAAA25H,KAAA,IACA35H,EAAA45H,WAAA,IACA55H,EAAA65H,WAAA,KACA75H,EAAA85H,aAAA,KACA95H,EAAA+5H,sBAAA,KACA/5H,EAAAg6H,kBAAA,KACAh6H,EAAAi6H,kBAAA,KACAj6H,EAAAk6H,MAAA,IACAl6H,EAAAm6H,YAAA,KACAn6H,EAAAo6H,YAAA,KACAp6H,EAAAq6H,QAAA,KACAr6H,EAAAs6H,WAAA,MACAt6H,EAAAu6H,MAAA,MACAv6H,EAAAw6H,WAAA,MACAx6H,EAAAy6H,OAAA,MACAz6H,EAAA06H,WAAA,IACA16H,EAAA26H,QAAA,IACA36H,EAAA46H,EAAA,GACA56H,EAAA66H,OAAA,KACA76H,EAAA86H,OAAA,KACA96H,EAAA+6H,OAAA,KACA/6H,EAAAg7H,OAAA,KACAh7H,EAAAi7H,SAAA,MACAj7H,EAAAk7H,oBAAA,KACAl7H,EAAAm7H,oBAAA,KACAn7H,EAAAo7H,iBAAA,KACAp7H,EAAAq7H,KAAA,IACAr7H,EAAAs7H,YAAA,KACAt7H,EAAAu7H,SAAA,KACAv7H,EAAAw7H,QAAA,KACAx7H,EAAAy7H,YAAA,IACAz7H,EAAA07H,UAAA,KACA17H,EAAA27H,WAAA,KACA37H,EAAA47H,UAAA,KACA57H,EAAA67H,WAAA,MACA77H,EAAA87H,WAAA,KACA97H,EAAA+7H,WAAA,IACA/7H,EAAAg8H,OAAA,MACAh8H,EAAAi8H,aAAA,MACAj8H,EAAAk8H,kBAAA,MACAl8H,EAAAm8H,SAAA,MACAn8H,EAAAo8H,EAAA,GACAp8H,EAAAq8H,WAAA,KACAr8H,EAAAs8H,GAAA,IACAt8H,EAAAu8H,WAAA,KACAv8H,EAAAw8H,OAAA,IACAx8H,EAAAy8H,YAAA,MACAz8H,EAAA08H,OAAA,IACA18H,EAAA28H,OAAA,IACA38H,EAAA48H,QAAA,KACA58H,EAAA68H,YAAA,IACA78H,EAAA88H,iBAAA,MACA98H,EAAA+8H,UAAA,KACA/8H,EAAAg9H,UAAA,IACAh9H,EAAAi9H,UAAA,IACAj9H,EAAAk9H,eAAA,KACAl9H,EAAAm9H,kBAAA,KACAn9H,EAAAo9H,eAAA,MACAp9H,EAAAq9H,KAAA,IACAr9H,EAAAs9H,WAAA,IACAt9H,EAAAu9H,UAAA,KACAv9H,EAAAw9H,gBAAA,KACAx9H,EAAAy9H,WAAA,KACAz9H,EAAA09H,SAAA,KACA19H,EAAA29H,OAAA,IACA39H,EAAA49H,YAAA,MACA59H,EAAA69H,WAAA,KACA79H,EAAA89H,WAAA,KACA99H,EAAA+9H,eAAA,IACA/9H,EAAAg+H,gBAAA,KACAh+H,EAAAi+H,QAAA,IACAj+H,EAAAk+H,gBAAA,KACAl+H,EAAAm+H,WAAA,MACAn+H,EAAAo+H,YAAA,KACAp+H,EAAAq+H,WAAA,KACAr+H,EAAAs+H,QAAA,IACAt+H,EAAAu+H,KAAA,IACAv+H,EAAAw+H,YAAA,IACAx+H,EAAAy+H,aAAA,IACAz+H,EAAA0+H,UAAA,IACA1+H,EAAA2+H,OAAA,MACA3+H,EAAA4+H,QAAA,IACA5+H,EAAA6+H,OAAA,IACA7+H,EAAA8+H,YAAA,KACA9+H,EAAA++H,gBAAA,KACA/+H,EAAAg/H,wBAAA,KACAh/H,EAAAokG,EAAA,GACApkG,EAAAi/H,WAAA,KACAj/H,EAAAk/H,QAAA,KACAl/H,EAAAm/H,YAAA,IACAn/H,EAAAo/H,WAAA,KACAp/H,EAAAq/H,aAAA,KACAr/H,EAAAs/H,WAAA,MACAt/H,EAAAu/H,OAAA,MACAv/H,EAAA+1C,EAAA,GACA/1C,EAAAw/H,SAAA,MACAx/H,EAAAy/H,SAAA,MACAz/H,EAAA0/H,kBAAA,KACA1/H,EAAA2/H,OAAA,KACA3/H,EAAA4/H,WAAA,KACA5/H,EAAA6/H,oBAAA,KACA7/H,EAAA8/H,eAAA,KACA9/H,EAAA+/H,MAAA,IACA//H,EAAAggI,iBAAA,KACAhgI,EAAAigI,yBAAA,KACAjgI,EAAAkgI,OAAA,IACAlgI,EAAAmgI,SAAA,IACAngI,EAAAogI,QAAA,KACApgI,EAAAqgI,aAAA,IACArgI,EAAAsgI,UAAA,KACAtgI,EAAAugI,YAAA,KACAvgI,EAAAwgI,YAAA,KACAxgI,EAAAygI,YAAA,KACAzgI,EAAA0gI,WAAA,IACA1gI,EAAA2gI,MAAA,IACA3gI,EAAA4gI,YAAA,KACA5gI,EAAA6gI,WAAA,KACA7gI,EAAA8gI,WAAA,MACA9gI,EAAA+gI,cAAA,KACA/gI,EAAAghI,WAAA,IACAhhI,EAAAihI,YAAA,KACAjhI,EAAAkhI,OAAA,MACAlhI,EAAAm7E,EAAA,GACAn7E,EAAAmhI,GAAA,IACAnhI,EAAAs5D,GAAA,MACAt5D,EAAAohI,OAAA,IACAphI,EAAAqhI,OAAA,IACArhI,EAAAshI,OAAA,IACAthI,EAAAuhI,SAAA,IACAvhI,EAAAwhI,QAAA,KACAxhI,EAAAyhI,iBAAA,KACAzhI,EAAA0hI,aAAA,IACA1hI,EAAA2hI,KAAA,IACA3hI,EAAA4hI,WAAA,IACA5hI,EAAA6hI,UAAA,KACA7hI,EAAA8hI,gBAAA,KACA9hI,EAAA+hI,aAAA,KACA/hI,EAAAgiI,GAAA,IACAhiI,EAAAiiI,YAAA,KACAjiI,EAAAkiI,WAAA,KACAliI,EAAAmiI,WAAA,MACAniI,EAAAoiI,OAAA,IACApiI,EAAAqiI,YAAA,MACAriI,EAAAsiI,OAAA,MACAtiI,EAAA6/E,EAAA,GACA7/E,EAAAuiI,SAAA,MACAviI,EAAAwiI,OAAA,MACAxiI,EAAAyiI,YAAA,MACAziI,EAAA0iI,OAAA,KACA1iI,EAAA2iI,QAAA,KACA3iI,EAAA4iI,WAAA,KACA5iI,EAAA6iI,UAAA,KACA7iI,EAAA8iI,YAAA,KACA9iI,EAAA+iI,WAAA,MACA/iI,EAAAgjI,OAAA,MACAhjI,EAAAijI,QAAA,IACAjjI,EAAAkjI,GAAA,IACAljI,EAAA8/E,EAAA,GACA9/E,EAAAmjI,GAAA,IACAnjI,EAAAojI,OAAA,IACApjI,EAAAqjI,OAAA,IACArjI,EAAAsjI,SAAA,IACAtjI,EAAAujI,QAAA,KACAvjI,EAAAwjI,iBAAA,KACAxjI,EAAAyjI,aAAA,IACAzjI,EAAA0jI,WAAA,KACA1jI,EAAA2jI,UAAA,KACA3jI,EAAA4jI,UAAA,IACA5jI,EAAA6jI,UAAA,KACA7jI,EAAA8jI,GAAA,IACA9jI,EAAA+jI,YAAA,KACA/jI,EAAAgkI,WAAA,KACAhkI,EAAAikI,WAAA,MACAjkI,EAAAkkI,YAAA,KACAlkI,EAAAmkI,OAAA,MACAnkI,EAAAokI,OAAA,IACApkI,EAAAqkI,YAAA,MACArkI,EAAAskI,GAAA,IACAtkI,EAAAukI,EAAA,GACAvkI,EAAAwkI,GAAA,IACAxkI,EAAAykI,QAAA,MACAzkI,EAAA0kI,OAAA,IACA1kI,EAAA2kI,YAAA,MACA3kI,EAAA4kI,gBAAA,KACA5kI,EAAA6kI,wBAAA,KACA7kI,EAAA8kI,OAAA,IACA9kI,EAAA+kI,OAAA,IACA/kI,EAAAglI,eAAA,IACAhlI,EAAAilI,QAAA,KACAjlI,EAAAklI,YAAA,IACAllI,EAAAmlI,iBAAA,KACAnlI,EAAAolI,oBAAA,KACAplI,EAAAqlI,iBAAA,KACArlI,EAAAslI,qBAAA,KACAtlI,EAAAulI,iBAAA,MACAvlI,EAAAwlI,iBAAA,KACAxlI,EAAAylI,UAAA,KACAzlI,EAAA0lI,UAAA,IACA1lI,EAAA2lI,UAAA,IACA3lI,EAAA4lI,UAAA,IACA5lI,EAAA6lI,kBAAA,KACA7lI,EAAA8lI,eAAA,MACA9lI,EAAA+lI,UAAA,KACA/lI,EAAAgmI,YAAA,MACAhmI,EAAAimI,OAAA,IACAjmI,EAAAkmI,YAAA,MACAlmI,EAAAmmI,WAAA,KACAnmI,EAAAomI,IAAA,KACApmI,EAAAqmI,WAAA,KACArmI,EAAAsmI,MAAA,IACAtmI,EAAAumI,WAAA,KACAvmI,EAAAwmI,cAAA,KACAxmI,EAAAymI,WAAA,KACAzmI,EAAA0mI,eAAA,KACA1mI,EAAA2mI,WAAA,KACA3mI,EAAA4mI,cAAA,IACA5mI,EAAA6mI,GAAA,IACA7mI,EAAA8mI,eAAA,IACA9mI,EAAA+mI,QAAA,IACA/mI,EAAAgnI,aAAA,KACAhnI,EAAAinI,aAAA,KACAjnI,EAAAknI,MAAA,KACAlnI,EAAAmnI,cAAA,KACAnnI,EAAAonI,WAAA,IACApnI,EAAAqnI,mBAAA,KACArnI,EAAAsnI,mBAAA,KACAtnI,EAAAunI,WAAA,IACAvnI,EAAAwnI,QAAA,IACAxnI,EAAAynI,aAAA,IACAznI,EAAA0nI,WAAA,MACA1nI,EAAA2nI,SAAA,KACA3nI,EAAA4nI,QAAA,IACA5nI,EAAA6nI,cAAA,IACA7nI,EAAA8nI,MAAA,IACA9nI,EAAA+nI,OAAA,IACA/nI,EAAAgoI,YAAA,IACAhoI,EAAAioI,YAAA,MACAjoI,EAAAkoI,OAAA,MACAloI,EAAAmoI,aAAA,IACAnoI,EAAAooI,WAAA,KACApoI,EAAAqoI,OAAA,IACAroI,EAAAsoI,YAAA,KACAtoI,EAAAuoI,eAAA,KACAvoI,EAAAwoI,YAAA,MACAxoI,EAAAyoI,EAAA,GACAzoI,EAAA0oI,OAAA,KACA1oI,EAAA2oI,QAAA,KACA3oI,EAAA4oI,WAAA,KACA5oI,EAAA6oI,WAAA,KACA7oI,EAAA8oI,YAAA,KACA9oI,EAAA+oI,qBAAA,KACA/oI,EAAAgpI,IAAA,IACAhpI,EAAAipI,MAAA,IACAjpI,EAAAkpI,GAAA,IACAlpI,EAAAmpI,aAAA,KACAnpI,EAAAopI,WAAA,MACAppI,EAAAqpI,IAAA,IACArpI,EAAAspI,YAAA,KACAtpI,EAAAupI,OAAA,MACAvpI,EAAAukG,EAAA,GACAvkG,EAAAwpI,QAAA,KACAxpI,EAAAypI,WAAA,MACAzpI,EAAA0pI,OAAA,MACA1pI,EAAA2pI,EAAA,GACA3pI,EAAA4pI,WAAA,KACA5pI,EAAA6pI,OAAA,IACA7pI,EAAA8pI,OAAA,IACA9pI,EAAA+pI,SAAA,IACA/pI,EAAAgqI,QAAA,KACAhqI,EAAAiqI,aAAA,IACAjqI,EAAAkqI,UAAA,IACAlqI,EAAAmqI,WAAA,KACAnqI,EAAAoqI,UAAA,KACApqI,EAAAqqI,gBAAA,KACArqI,EAAAsqI,YAAA,KACAtqI,EAAAuqI,SAAA,KACAvqI,EAAAwqI,IAAA,IACAxqI,EAAAyqI,UAAA,MACAzqI,EAAA0qI,eAAA,IACA1qI,EAAA2qI,WAAA,KACA3qI,EAAA4qI,WAAA,MACA5qI,EAAA6qI,OAAA,MACA7qI,EAAA8qI,eAAA,IACA9qI,EAAA+qI,uBAAA,IACA/qI,EAAA0kG,EAAA,GACA1kG,EAAAgrI,SAAA,KACAhrI,EAAAirI,SAAA,KACAjrI,EAAAkrI,SAAA,KACAlrI,EAAAmrI,SAAA,KACAnrI,EAAAorI,SAAA,KACAprI,EAAAqrI,SAAA,KACArrI,EAAAsrI,SAAA,KACAtrI,EAAAurI,SAAA,KACAvrI,EAAAwrI,SAAA,KACAxrI,EAAAyrI,SAAA,KACAzrI,EAAA0rI,SAAA,KACA1rI,EAAA2rI,SAAA,KACA3rI,EAAA4rI,SAAA,KACA5rI,EAAA6rI,SAAA,KACA7rI,EAAA8rI,SAAA,KACA9rI,EAAA+rI,SAAA,KACA/rI,EAAAgsI,SAAA,KACAhsI,EAAAisI,SAAA,KACAjsI,EAAAksI,SAAA,KACAlsI,EAAAmsI,SAAA,KACAnsI,EAAAosI,SAAA,KACApsI,EAAAqsI,SAAA,KACArsI,EAAAssI,SAAA,KACAtsI,EAAAusI,SAAA,KACAvsI,EAAAwsI,SAAA,KACAxsI,EAAAysI,SAAA,KACAzsI,EAAA0sI,SAAA,KACA1sI,EAAA2sI,SAAA,KACA3sI,EAAA4sI,SAAA,KACA5sI,EAAA6sI,SAAA,KACA7sI,EAAA8sI,SAAA,KACA9sI,EAAA+sI,SAAA,KACA/sI,EAAAgtI,SAAA,KACAhtI,EAAAitI,SAAA,KACAjtI,EAAAktI,SAAA,KACAltI,EAAAmtI,SAAA,KACAntI,EAAAotI,SAAA,KACAptI,EAAAqtI,SAAA,KACArtI,EAAAstI,SAAA,KACAttI,EAAAutI,SAAA,KACAvtI,EAAAwtI,OAAA,IACAxtI,EAAAytI,gBAAA,KACAztI,EAAA0tI,WAAA,IACA1tI,EAAA2tI,OAAA,IACA3tI,EAAA4tI,gBAAA,KACA5tI,EAAA6tI,YAAA,MACA7tI,EAAA8tI,SAAA,IACA9tI,EAAA+tI,MAAA,IACA/tI,EAAAguI,cAAA,KACAhuI,EAAAiuI,sBAAA,KACAjuI,EAAAkuI,QAAA,KACAluI,EAAAmuI,YAAA,IACAnuI,EAAAouI,aAAA,IACApuI,EAAAquI,WAAA,KACAruI,EAAAsuI,UAAA,KACAtuI,EAAAuuI,mBAAA,KACAvuI,EAAAwuI,YAAA,KACAxuI,EAAAyuI,WAAA,KACAzuI,EAAA0uI,YAAA,KACA1uI,EAAA2uI,YAAA,KACA3uI,EAAA4uI,cAAA,KACA5uI,EAAA6uI,WAAA,IACA7uI,EAAA8uI,aAAA,KACA9uI,EAAA+uI,YAAA,KACA/uI,EAAAgvI,MAAA,IACAhvI,EAAAivI,SAAA,KACAjvI,EAAAkvI,WAAA,MACAlvI,EAAAmvI,iBAAA,KACAnvI,EAAAovI,OAAA,MACApvI,EAAAqvI,YAAA,IACArvI,EAAAsvI,EAAA,GACAtvI,EAAAuvI,IAAA,IACAvvI,EAAAwvI,KAAA,IACAxvI,EAAAyvI,OAAA,IACAzvI,EAAA0vI,SAAA,IACA1vI,EAAA2vI,QAAA,KACA3vI,EAAA4vI,iBAAA,KACA5vI,EAAA6vI,aAAA,IACA7vI,EAAA8vI,WAAA,KACA9vI,EAAA+vI,UAAA,KACA/vI,EAAAgwI,WAAA,KACAhwI,EAAAiwI,oBAAA,KACAjwI,EAAAkwI,SAAA,KACAlwI,EAAAmwI,cAAA,KACAnwI,EAAAowI,MAAA,IACApwI,EAAAqwI,MAAA,IACArwI,EAAAswI,MAAA,IACAtwI,EAAAuwI,WAAA,MACAvwI,EAAAwwI,WAAA,KACAxwI,EAAAywI,WAAA,MACAzwI,EAAA0wI,aAAA,KACA1wI,EAAA2wI,WAAA,KACA3wI,EAAA4wI,WAAA,MACA5wI,EAAA6wI,WAAA,KACA7wI,EAAA8wI,SAAA,IACA9wI,EAAA+wI,QAAA,IACA/wI,EAAAgxI,QAAA,IACAhxI,EAAAixI,eAAA,IACAjxI,EAAAkxI,YAAA,KACAlxI,EAAAmxI,aAAA,KACAnxI,EAAAoxI,OAAA,MACApxI,EAAAqxI,YAAA,KACArxI,EAAAsxI,SAAA,KACAtxI,EAAAuxI,EAAA,GACAvxI,EAAAwxI,OAAA,IACAxxI,EAAAyxI,YAAA,MACAzxI,EAAA0xI,OAAA,IACA1xI,EAAA2xI,OAAA,IACA3xI,EAAA4xI,QAAA,KACA5xI,EAAA6xI,YAAA,IACA7xI,EAAA8xI,iBAAA,KACA9xI,EAAA+xI,iBAAA,MACA/xI,EAAAgyI,UAAA,KACAhyI,EAAAiyI,UAAA,IACAjyI,EAAAkyI,UAAA,IACAlyI,EAAAmyI,UAAA,IACAnyI,EAAAoyI,eAAA,IACApyI,EAAAqyI,eAAA,KACAryI,EAAAsyI,eAAA,IACAtyI,EAAAuyI,kBAAA,KACAvyI,EAAAwyI,eAAA,IACAxyI,EAAAyyI,gBAAA,IACAzyI,EAAA0yI,eAAA,MACA1yI,EAAA2yI,UAAA,KACA3yI,EAAA4yI,OAAA,IACA5yI,EAAA6yI,YAAA,MACA7yI,EAAA8yI,WAAA,KACA9yI,EAAA+yI,MAAA,IACA/yI,EAAAgzI,WAAA,KACAhzI,EAAAizI,cAAA,KACAjzI,EAAAkzI,WAAA,KACAlzI,EAAAmzI,eAAA,KACAnzI,EAAAozI,WAAA,KACApzI,EAAAqzI,cAAA,IACArzI,EAAAszI,sBAAA,KACAtzI,EAAAuzI,eAAA,IACAvzI,EAAAwzI,WAAA,KACAxzI,EAAAyzI,QAAA,IACAzzI,EAAA0zI,gBAAA,KACA1zI,EAAA2zI,gBAAA,KACA3zI,EAAA4zI,WAAA,MACA5zI,EAAA6zI,QAAA,IACA7zI,EAAA8zI,QAAA,IACA9zI,EAAA+zI,SAAA,IACA/zI,EAAAg0I,4BAAA,IACAh0I,EAAAi0I,eAAA,IACAj0I,EAAAk0I,gBAAA,IACAl0I,EAAAm0I,+BAAA,IACAn0I,EAAAo0I,kBAAA,IACAp0I,EAAAq0I,aAAA,IACAr0I,EAAAs0I,MAAA,IACAt0I,EAAAu0I,eAAA,KACAv0I,EAAAw0I,OAAA,MACAx0I,EAAAy0I,kBAAA,KACAz0I,EAAA00I,wBAAA,KACA10I,EAAA20I,OAAA,IACA30I,EAAA40I,YAAA,KACA50I,EAAA60I,YAAA,KACA70I,EAAA80I,EAAA,GACA90I,EAAA+0I,QAAA,KACA/0I,EAAAg1I,UAAA,KACAh1I,EAAAi1I,WAAA,KACAj1I,EAAAk1I,YAAA,KACAl1I,EAAAm1I,MAAA,IACAn1I,EAAAo1I,WAAA,MACAp1I,EAAAq1I,WAAA,KACAr1I,EAAAs1I,OAAA,MACAt1I,EAAAu1I,OAAA,KACAv1I,EAAA4kG,EAAA,GACA5kG,EAAAw1I,OAAA,KACAx1I,EAAAy1I,QAAA,KACAz1I,EAAA01I,YAAA,IACA11I,EAAA21I,UAAA,KACA31I,EAAA41I,WAAA,KACA51I,EAAA61I,UAAA,KACA71I,EAAA81I,OAAA,KACA91I,EAAA+1I,WAAA,MACA/1I,EAAAg2I,OAAA,MACAh2I,EAAA+8E,EAAA,GACA/8E,EAAAi2I,QAAA,KACAj2I,EAAAk2I,UAAA,KACAl2I,EAAAm2I,WAAA,KACAn2I,EAAAo2I,YAAA,KACAp2I,EAAAq2I,GAAA,IACAr2I,EAAAs2I,WAAA,MACAt2I,EAAAu2I,OAAA,MACAv2I,EAAA23D,EAAA,GACA33D,EAAAw2I,OAAA,IACAx2I,EAAAy2I,YAAA,MACAz2I,EAAA02I,YAAA,KACA12I,EAAA22I,QAAA,KACA32I,EAAA42I,YAAA,IACA52I,EAAA62I,UAAA,IACA72I,EAAA82I,eAAA,MACA92I,EAAA+2I,WAAA,KACA/2I,EAAAg3I,UAAA,KACAh3I,EAAAi3I,aAAA,KACAj3I,EAAAk3I,qBAAA,KACAl3I,EAAAm3I,OAAA,KACAn3I,EAAAo3I,MAAA,IACAp3I,EAAAq3I,WAAA,KACAr3I,EAAAs3I,WAAA,KACAt3I,EAAAu3I,WAAA,KACAv3I,EAAAw3I,aAAA,KACAx3I,EAAAy3I,WAAA,MACAz3I,EAAA03I,OAAA,MACA13I,EAAA23I,OAAA,KACA33I,EAAA43I,eAAA,KACA53I,EAAA63I,uBAAA,KACA73I,EAAA83I,kBAAA,KACA93I,EAAA+3I,0BAAA,KACA/3I,EAAAs9E,EAAA,GACAt9E,EAAAg4I,WAAA,KACAh4I,EAAAi4I,OAAA,IACAj4I,EAAAk4I,OAAA,IACAl4I,EAAAm4I,YAAA,MACAn4I,EAAAo4I,QAAA,KACAp4I,EAAAq4I,YAAA,KACAr4I,EAAAs4I,KAAA,IACAt4I,EAAAu4I,WAAA,IACAv4I,EAAAw4I,UAAA,KACAx4I,EAAAy4I,WAAA,KACAz4I,EAAA04I,oBAAA,KACA14I,EAAA24I,mBAAA,KACA34I,EAAA44I,KAAA,IACA54I,EAAA64I,YAAA,KACA74I,EAAA84I,iBAAA,KACA94I,EAAA+4I,YAAA,KACA/4I,EAAAg5I,qBAAA,KACAh5I,EAAAi5I,oBAAA,KACAj5I,EAAAk5I,WAAA,KACAl5I,EAAAm5I,WAAA,MACAn5I,EAAAo5I,OAAA,MACAp5I,EAAAq5I,QAAA,IACAr5I,EAAA6kB,EAAA,GACA7kB,EAAAs5I,UAAA,KACAt5I,EAAAu5I,OAAA,IACAv5I,EAAAw5I,OAAA,KACAx5I,EAAAy5I,WAAA,KACAz5I,EAAA05I,WAAA,KACA15I,EAAA25I,gBAAA,KACA35I,EAAA45I,WAAA,MACA55I,EAAA65I,mBAAA,KACA75I,EAAA85I,gBAAA,KACA95I,EAAA+5I,oBAAA,KACA/5I,EAAAg6I,yBAAA,KACAh6I,EAAAi6I,qBAAA,KACAj6I,EAAAk6I,SAAA,KACAl6I,EAAAm6I,UAAA,MACAn6I,EAAAo6I,OAAA,IACAp6I,EAAAq6I,YAAA,KACAr6I,EAAAs6I,eAAA,KACAt6I,EAAAu6I,eAAA,KACAv6I,EAAAw6I,YAAA,KACAx6I,EAAAy6I,gBAAA,KACAz6I,EAAA06I,YAAA,KACA16I,EAAA26I,OAAA,IACA36I,EAAA46I,QAAA,KACA56I,EAAA66I,YAAA,IACA76I,EAAA86I,iBAAA,KACA96I,EAAA+6I,oBAAA,KACA/6I,EAAAg7I,iBAAA,KACAh7I,EAAAi7I,qBAAA,KACAj7I,EAAAk7I,iBAAA,KACAl7I,EAAAm7I,MAAA,IACAn7I,EAAAo7I,cAAA,IACAp7I,EAAAq7I,SAAA,IACAr7I,EAAAs7I,UAAA,IACAt7I,EAAAu7I,UAAA,KACAv7I,EAAAw7I,YAAA,IACAx7I,EAAAy7I,aAAA,IACAz7I,EAAA07I,UAAA,KACA17I,EAAA27I,UAAA,IACA37I,EAAA47I,cAAA,KACA57I,EAAA67I,MAAA,KACA77I,EAAA87I,UAAA,IACA97I,EAAA+7I,kBAAA,KACA/7I,EAAAg8I,gBAAA,IACAh8I,EAAAi8I,UAAA,KACAj8I,EAAAk8I,WAAA,IACAl8I,EAAAm8I,GAAA,IACAn8I,EAAAo8I,QAAA,IACAp8I,EAAAq8I,SAAA,MACAr8I,EAAAs8I,SAAA,IACAt8I,EAAAu8I,UAAA,KACAv8I,EAAAw8I,UAAA,KACAx8I,EAAAy8I,UAAA,KACAz8I,EAAA08I,UAAA,KACA18I,EAAA28I,UAAA,KACA38I,EAAA48I,UAAA,KACA58I,EAAA68I,UAAA,KACA78I,EAAA88I,UAAA,KACA98I,EAAA+8I,UAAA,KACA/8I,EAAAg9I,UAAA,KACAh9I,EAAAi9I,UAAA,KACAj9I,EAAAk9I,UAAA,KACAl9I,EAAAm9I,UAAA,KACAn9I,EAAAo9I,UAAA,KACAp9I,EAAAq9I,UAAA,KACAr9I,EAAAs9I,UAAA,KACAt9I,EAAAu9I,UAAA,KACAv9I,EAAAw9I,UAAA,KACAx9I,EAAAy9I,UAAA,KACAz9I,EAAA09I,UAAA,KACA19I,EAAA29I,UAAA,KACA39I,EAAA49I,UAAA,KACA59I,EAAA69I,UAAA,KACA79I,EAAA89I,UAAA,KACA99I,EAAA+9I,UAAA,KACA/9I,EAAAg+I,UAAA,KACAh+I,EAAAi+I,UAAA,KACAj+I,EAAAk+I,UAAA,KACAl+I,EAAAm+I,UAAA,KACAn+I,EAAAo+I,UAAA,KACAp+I,EAAAq+I,UAAA,KACAr+I,EAAAs+I,UAAA,KACAt+I,EAAAu+I,UAAA,KACAv+I,EAAAw+I,UAAA,KACAx+I,EAAAy+I,UAAA,KACAz+I,EAAA0+I,UAAA,KACA1+I,EAAA2+I,UAAA,KACA3+I,EAAA4+I,UAAA,KACA5+I,EAAA6+I,UAAA,KACA7+I,EAAA8+I,UAAA,KACA9+I,EAAA++I,UAAA,KACA/+I,EAAAg/I,UAAA,KACAh/I,EAAAi/I,UAAA,KACAj/I,EAAAk/I,UAAA,KACAl/I,EAAAm/I,UAAA,KACAn/I,EAAAo/I,UAAA,KACAp/I,EAAAq/I,UAAA,KACAr/I,EAAAs/I,UAAA,KACAt/I,EAAAu/I,UAAA,MACAv/I,EAAAw/I,UAAA,MACAx/I,EAAAy/I,UAAA,KACAz/I,EAAA0/I,UAAA,KACA1/I,EAAA2/I,UAAA,KACA3/I,EAAA4/I,UAAA,KACA5/I,EAAA6/I,UAAA,KACA7/I,EAAA8/I,UAAA,KACA9/I,EAAA+/I,UAAA,KACA//I,EAAAggJ,UAAA,KACAhgJ,EAAAigJ,UAAA,KACAjgJ,EAAAkgJ,UAAA,KACAlgJ,EAAAmgJ,UAAA,KACAngJ,EAAAogJ,UAAA,KACApgJ,EAAAqgJ,UAAA,KACArgJ,EAAAsgJ,UAAA,KACAtgJ,EAAAugJ,UAAA,KACAvgJ,EAAAwgJ,UAAA,KACAxgJ,EAAAygJ,UAAA,KACAzgJ,EAAA0gJ,UAAA,KACA1gJ,EAAA2gJ,UAAA,KACA3gJ,EAAA4gJ,UAAA,KACA5gJ,EAAA6gJ,UAAA,KACA7gJ,EAAA8gJ,UAAA,KACA9gJ,EAAA+gJ,UAAA,KACA/gJ,EAAAghJ,UAAA,KACAhhJ,EAAAihJ,UAAA,KACAjhJ,EAAAkhJ,UAAA,KACAlhJ,EAAAmhJ,UAAA,KACAnhJ,EAAAohJ,UAAA,KACAphJ,EAAAqhJ,UAAA,KACArhJ,EAAAshJ,UAAA,KACAthJ,EAAAuhJ,UAAA,KACAvhJ,EAAAwhJ,UAAA,KACAxhJ,EAAAyhJ,UAAA,KACAzhJ,EAAA0hJ,UAAA,KACA1hJ,EAAA2hJ,UAAA,KACA3hJ,EAAA4hJ,UAAA,KACA5hJ,EAAA6hJ,UAAA,KACA7hJ,EAAA8hJ,UAAA,KACA9hJ,EAAA+hJ,UAAA,KACA/hJ,EAAAgiJ,UAAA,KACAhiJ,EAAAiiJ,UAAA,KACAjiJ,EAAAkiJ,UAAA,KACAliJ,EAAAmiJ,UAAA,KACAniJ,EAAAoiJ,UAAA,KACApiJ,EAAAqiJ,UAAA,KACAriJ,EAAAsiJ,UAAA,KACAtiJ,EAAAuiJ,UAAA,KACAviJ,EAAAwiJ,UAAA,KACAxiJ,EAAAyiJ,UAAA,KACAziJ,EAAA0iJ,UAAA,KACA1iJ,EAAA2iJ,UAAA,MACA3iJ,EAAA4iJ,UAAA,KACA5iJ,EAAA6iJ,UAAA,KACA7iJ,EAAA8iJ,UAAA,KACA9iJ,EAAA+iJ,UAAA,KACA/iJ,EAAAgjJ,UAAA,MACAhjJ,EAAAijJ,UAAA,MACAjjJ,EAAAkjJ,UAAA,KACAljJ,EAAAmjJ,QAAA,KACAnjJ,EAAAojJ,QAAA,KACApjJ,EAAAqjJ,QAAA,KACArjJ,EAAAsjJ,UAAA,KACAtjJ,EAAAujJ,UAAA,KACAvjJ,EAAAwjJ,UAAA,KACAxjJ,EAAAyjJ,UAAA,KACAzjJ,EAAA0jJ,UAAA,KACA1jJ,EAAA2jJ,UAAA,KACA3jJ,EAAA4jJ,UAAA,KACA5jJ,EAAA6jJ,UAAA,KACA7jJ,EAAA8jJ,UAAA,KACA9jJ,EAAA+jJ,UAAA,KACA/jJ,EAAAgkJ,UAAA,KACAhkJ,EAAAikJ,UAAA,KACAjkJ,EAAAkkJ,UAAA,KACAlkJ,EAAAmkJ,UAAA,KACAnkJ,EAAAokJ,UAAA,KACApkJ,EAAAqkJ,UAAA,KACArkJ,EAAAskJ,UAAA,KACAtkJ,EAAAukJ,UAAA,KACAvkJ,EAAAwkJ,UAAA,KACAxkJ,EAAAykJ,UAAA,KACAzkJ,EAAA0kJ,UAAA,KACA1kJ,EAAA2kJ,UAAA,KACA3kJ,EAAA4kJ,UAAA,KACA5kJ,EAAA6kJ,UAAA,KACA7kJ,EAAA8kJ,UAAA,KACA9kJ,EAAA+kJ,UAAA,KACA/kJ,EAAAglJ,UAAA,KACAhlJ,EAAAilJ,UAAA,KACAjlJ,EAAAklJ,UAAA,KACAllJ,EAAAmlJ,UAAA,KACAnlJ,EAAAolJ,UAAA,KACAplJ,EAAAqlJ,UAAA,KACArlJ,EAAAslJ,UAAA,KACAtlJ,EAAAulJ,UAAA,KACAvlJ,EAAAwlJ,UAAA,KACAxlJ,EAAAylJ,UAAA,KACAzlJ,EAAA0lJ,UAAA,KACA1lJ,EAAA2lJ,UAAA,KACA3lJ,EAAA4lJ,UAAA,KACA5lJ,EAAA6lJ,UAAA,KACA7lJ,EAAA8lJ,UAAA,KACA9lJ,EAAA+lJ,UAAA,KACA/lJ,EAAAgmJ,UAAA,KACAhmJ,EAAAimJ,UAAA,KACAjmJ,EAAAkmJ,UAAA,KACAlmJ,EAAAmmJ,UAAA,KACAnmJ,EAAAomJ,UAAA,KACApmJ,EAAAqmJ,UAAA,KACArmJ,EAAAsmJ,UAAA,KACAtmJ,EAAAumJ,UAAA,KACAvmJ,EAAAwmJ,UAAA,KACAxmJ,EAAAymJ,UAAA,KACAzmJ,EAAA0mJ,UAAA,KACA1mJ,EAAA2mJ,UAAA,KACA3mJ,EAAA4mJ,UAAA,KACA5mJ,EAAA6mJ,UAAA,KACA7mJ,EAAA8mJ,UAAA,KACA9mJ,EAAA+mJ,UAAA,KACA/mJ,EAAAgnJ,UAAA,KACAhnJ,EAAAinJ,UAAA,KACAjnJ,EAAAknJ,UAAA,KACAlnJ,EAAAmnJ,UAAA,KACAnnJ,EAAAonJ,UAAA,KACApnJ,EAAAqnJ,UAAA,KACArnJ,EAAAsnJ,UAAA,KACAtnJ,EAAAunJ,UAAA,KACAvnJ,EAAAwnJ,UAAA,KACAxnJ,EAAAynJ,UAAA,KACAznJ,EAAA0nJ,UAAA,KACA1nJ,EAAA2nJ,UAAA,KACA3nJ,EAAA4nJ,UAAA,KACA5nJ,EAAA6nJ,UAAA,KACA7nJ,EAAA8nJ,UAAA,KACA9nJ,EAAA+nJ,UAAA,KACA/nJ,EAAAgoJ,UAAA,KACAhoJ,EAAAioJ,UAAA,KACAjoJ,EAAAkoJ,UAAA,KACAloJ,EAAAmoJ,UAAA,KACAnoJ,EAAAooJ,UAAA,KACApoJ,EAAAqoJ,UAAA,KACAroJ,EAAAsoJ,UAAA,KACAtoJ,EAAAuoJ,UAAA,KACAvoJ,EAAAwoJ,UAAA,KACAxoJ,EAAAyoJ,UAAA,KACAzoJ,EAAA0oJ,UAAA,KACA1oJ,EAAA2oJ,UAAA,KACA3oJ,EAAA4oJ,UAAA,KACA5oJ,EAAA6oJ,UAAA,KACA7oJ,EAAA8oJ,UAAA,KACA9oJ,EAAA+oJ,UAAA,KACA/oJ,EAAAgpJ,UAAA,KACAhpJ,EAAAipJ,UAAA,KACAjpJ,EAAAkpJ,UAAA,KACAlpJ,EAAAmpJ,UAAA,KACAnpJ,EAAAopJ,UAAA,KACAppJ,EAAAqpJ,UAAA,KACArpJ,EAAAspJ,UAAA,KACAtpJ,EAAAupJ,UAAA,KACAvpJ,EAAAwpJ,UAAA,KACAxpJ,EAAAypJ,UAAA,KACAzpJ,EAAA0pJ,UAAA,MACA1pJ,EAAA2pJ,UAAA,MACA3pJ,EAAA4pJ,UAAA,MACA5pJ,EAAA6pJ,UAAA,MACA7pJ,EAAA8pJ,UAAA,KACA9pJ,EAAA+pJ,UAAA,KACA/pJ,EAAAgqJ,UAAA,KACAhqJ,EAAAiqJ,UAAA,MACAjqJ,EAAAkqJ,UAAA,KACAlqJ,EAAAmqJ,UAAA,KACAnqJ,EAAAoqJ,UAAA,KACApqJ,EAAAqqJ,UAAA,KACArqJ,EAAAsqJ,UAAA,KACAtqJ,EAAAuqJ,UAAA,KACAvqJ,EAAAwqJ,UAAA,KACAxqJ,EAAAyqJ,UAAA,KACAzqJ,EAAA0qJ,UAAA,KACA1qJ,EAAA2qJ,UAAA,KACA3qJ,EAAA4qJ,UAAA,KACA5qJ,EAAA6qJ,UAAA,KACA7qJ,EAAA8qJ,UAAA,KACA9qJ,EAAA+qJ,UAAA,KACA/qJ,EAAAgrJ,UAAA,KACAhrJ,EAAAirJ,UAAA,KACAjrJ,EAAAkrJ,UAAA,KACAlrJ,EAAAmrJ,UAAA,IACAnrJ,EAAAorJ,UAAA,KACAprJ,EAAAqrJ,UAAA,KACArrJ,EAAAsrJ,UAAA,KACAtrJ,EAAAurJ,UAAA,KACAvrJ,EAAAwrJ,UAAA,KACAxrJ,EAAAyrJ,UAAA,KACAzrJ,EAAA0rJ,UAAA,KACA1rJ,EAAA2rJ,UAAA,KACA3rJ,EAAA4rJ,UAAA,IACA5rJ,EAAA6rJ,OAAA,IACA7rJ,EAAA8rJ,UAAA,KACA9rJ,EAAA+rJ,UAAA,KACA/rJ,EAAAgsJ,UAAA,MACAhsJ,EAAAisJ,WAAA,KACAjsJ,EAAAksJ,UAAA,KACAlsJ,EAAAmsJ,WAAA,MACAnsJ,EAAAosJ,OAAA,KACApsJ,EAAAqsJ,YAAA,KACArsJ,EAAAssJ,WAAA,KACAtsJ,EAAAusJ,WAAA,KACAvsJ,EAAAwsJ,gBAAA,KACAxsJ,EAAAysJ,UAAA,KACAzsJ,EAAA0sJ,eAAA,MACA1sJ,EAAA2sJ,iBAAA,MACA3sJ,EAAA4sJ,gBAAA,MACA5sJ,EAAA6sJ,eAAA,IACA7sJ,EAAA8sJ,mBAAA,KACA9sJ,EAAA+sJ,gBAAA,KACA/sJ,EAAAgtJ,oBAAA,KACAhtJ,EAAAitJ,UAAA,MACAjtJ,EAAAktJ,mBAAA,MACAltJ,EAAAmtJ,QAAA,MACAntJ,EAAAotJ,KAAA,KACAptJ,EAAAqtJ,WAAA,KACArtJ,EAAAstJ,iBAAA,MACAttJ,EAAAutJ,gBAAA,MACAvtJ,EAAAwtJ,qBAAA,KACAxtJ,EAAAytJ,0BAAA,MACAztJ,EAAA0tJ,qBAAA,KACA1tJ,EAAA2tJ,0BAAA,MACA3tJ,EAAA4tJ,WAAA,KACA5tJ,EAAA6tJ,gBAAA,MACA7tJ,EAAA8tJ,qBAAA,KACA9tJ,EAAA+tJ,0BAAA,MACA/tJ,EAAAguJ,kBAAA,KACAhuJ,EAAAiuJ,uBAAA,MACAjuJ,EAAAkuJ,yBAAA,MACAluJ,EAAAmuJ,wBAAA,MACAnuJ,EAAAouJ,gBAAA,MACApuJ,EAAAquJ,iBAAA,MACAruJ,EAAAsuJ,MAAA,KACAtuJ,EAAAuuJ,SAAA,KACAvuJ,EAAA0tE,MAAA,IACA1tE,EAAAwuJ,WAAA,IACAxuJ,EAAAyuJ,QAAA,IACAzuJ,EAAA0uJ,WAAA,MACA1uJ,EAAA2uJ,UAAA,GACA3uJ,EAAA4uJ,mBAAA,MACA5uJ,EAAA6uJ,eAAA,MACA7uJ,EAAA8uJ,SAAA,MACA9uJ,EAAA+uJ,WAAA,MACA/uJ,EAAAgvJ,YAAA,MACAhvJ,EAAAivJ,eAAA,MACAjvJ,EAAAkvJ,gBAAA,MACAlvJ,EAAAmvJ,eAAA,KACAnvJ,EAAA0yG,MAAA,KACA1yG,EAAAovJ,iBAAA,MACApvJ,EAAAqvJ,yBAAA,MACArvJ,EAAAsvJ,kBAAA,MACAtvJ,EAAAuvJ,0BAAA,MACAvvJ,EAAAwvJ,UAAA,KACAxvJ,EAAAyvJ,WAAA,KACAzvJ,EAAA0vJ,SAAA,KACA1vJ,EAAA2vJ,UAAA,IACA3vJ,EAAA4vJ,aAAA,KACA5vJ,EAAA6vJ,gBAAA,KACA7vJ,EAAA8vJ,aAAA,KACA9vJ,EAAA+vJ,iBAAA,KACA/vJ,EAAAgwJ,QAAA,IACAhwJ,EAAAiwJ,aAAA,MACAjwJ,EAAAkwJ,OAAA,KACAlwJ,EAAAmwJ,mBAAA,KACAnwJ,EAAAowJ,cAAA,IACApwJ,EAAAqwJ,MAAA,MACArwJ,EAAAswJ,WAAA,KACAtwJ,EAAAuwJ,YAAA,KACAvwJ,EAAAwwJ,mBAAA,KACAxwJ,EAAAywJ,mBAAA,KACAzwJ,EAAA0wJ,aAAA,MACA1wJ,EAAA2wJ,YAAA,MACA3wJ,EAAA4wJ,IAAA,KACA5wJ,EAAA6wJ,eAAA,KACA7wJ,EAAA8wJ,MAAA,IACA9wJ,EAAA+wJ,WAAA,IACA/wJ,EAAAgxJ,WAAA,KACAhxJ,EAAAixJ,UAAA,KACAjxJ,EAAAkxJ,cAAA,KACAlxJ,EAAAmxJ,cAAA,KACAnxJ,EAAAoxJ,eAAA,KACApxJ,EAAAqxJ,YAAA,KACArxJ,EAAAsxJ,aAAA,KACAtxJ,EAAAuxJ,aAAA,KACAvxJ,EAAAwxJ,aAAA,KACAxxJ,EAAAyxJ,cAAA,KACAzxJ,EAAA0xJ,WAAA,KACA1xJ,EAAA2xJ,UAAA,KACA3xJ,EAAA4xJ,cAAA,KACA5xJ,EAAA6xJ,eAAA,KACA7xJ,EAAA8xJ,eAAA,KACA9xJ,EAAA+xJ,iBAAA,IACA/xJ,EAAAgyJ,iBAAA,IACAhyJ,EAAAiyJ,kBAAA,IACAjyJ,EAAAkyJ,eAAA,IACAlyJ,EAAAmyJ,aAAA,MACAnyJ,EAAAoyJ,UAAA,KACApyJ,EAAAqyJ,aAAA,KACAryJ,EAAAsyJ,mBAAA,KACAtyJ,EAAAuyJ,mBAAA,KACAvyJ,EAAAwyJ,eAAA,KACAxyJ,EAAAyyJ,WAAA,KACAzyJ,EAAA0yJ,oBAAA,KACA1yJ,EAAA2yJ,gBAAA,MACA3yJ,EAAA4yJ,mBAAA,KACA5yJ,EAAA6yJ,gBAAA,KACA7yJ,EAAA8yJ,aAAA,KACA9yJ,EAAA+yJ,cAAA,KACA/yJ,EAAAgzJ,QAAA,KACAhzJ,EAAAizJ,UAAA,KACAjzJ,EAAAkzJ,aAAA,KACAlzJ,EAAAmzJ,gBAAA,KACAnzJ,EAAAozJ,YAAA,KACApzJ,EAAAqzJ,kBAAA,KACArzJ,EAAAszJ,aAAA,KACAtzJ,EAAAuzJ,aAAA,KACAvzJ,EAAAwzJ,YAAA,MACAxzJ,EAAAyzJ,YAAA,GACAzzJ,EAAA0zJ,qBAAA,MACA1zJ,EAAA2zJ,WAAA,IACA3zJ,EAAA4zJ,oBAAA,MACA5zJ,EAAA6zJ,QAAA,IACA7zJ,EAAA8zJ,cAAA,IACA9zJ,EAAA+zJ,eAAA,MACA/zJ,EAAAg0J,eAAA,MACAh0J,EAAAi0J,wBAAA,MACAj0J,EAAAk0J,SAAA,GACAl0J,EAAAm0J,qBAAA,KACAn0J,EAAAo0J,eAAA,KACAp0J,EAAAq0J,aAAA,KACAr0J,EAAAs0J,kBAAA,MACAt0J,EAAAu0J,cAAA,MACAv0J,EAAAw0J,SAAA,KACAx0J,EAAAy0J,UAAA,MACAz0J,EAAA00J,oBAAA,KACA10J,EAAA+6C,GAAA,GACA/6C,EAAA20J,OAAA,IACA30J,EAAA40J,YAAA,MACA50J,EAAA60J,QAAA,MACA70J,EAAA80J,QAAA,IACA90J,EAAA+0J,UAAA,KACA/0J,EAAAg1J,WAAA,MACAh1J,EAAAi1J,OAAA,KACAj1J,EAAAk1J,WAAA,KACAl1J,EAAAm1J,WAAA,KACAn1J,EAAAo1J,oBAAA,KACAp1J,EAAAq1J,gBAAA,KACAr1J,EAAAs1J,mBAAA,KACAt1J,EAAAu1J,gBAAA,KACAv1J,EAAAw1J,oBAAA,KACAx1J,EAAAy1J,aAAA,KACAz1J,EAAA01J,YAAA,KACA11J,EAAA21J,KAAA,KACA31J,EAAA41J,iBAAA,MACA51J,EAAA61J,WAAA,KACA71J,EAAAmkB,EAAA,GACAnkB,EAAA81J,UAAA,KACA91J,EAAA+1J,UAAA,GACA/1J,EAAAg2J,mBAAA,MACAh2J,EAAAi2J,OAAA,KACAj2J,EAAAk2J,WAAA,KACAl2J,EAAAm2J,WAAA,KACAn2J,EAAAo2J,WAAA,MACAp2J,EAAAq2J,SAAA,KACAr2J,EAAAs2J,WAAA,MACAt2J,EAAAu2J,IAAA,IACAv2J,EAAAw2J,aAAA,MACAx2J,EAAAy2J,UAAA,MACAz2J,EAAA02J,QAAA,KACA12J,EAAA22J,WAAA,KACA32J,EAAA42J,UAAA,KACA52J,EAAA62J,qBAAA,KACA72J,EAAA82J,QAAA,KACA92J,EAAA+2J,WAAA,KACA/2J,EAAAg3J,UAAA,KACAh3J,EAAAi3J,eAAA,MACAj3J,EAAAk3J,iBAAA,MACAl3J,EAAAm3J,WAAA,MACAn3J,EAAAo3J,gBAAA,MACAp3J,EAAAq3J,qBAAA,MACAr3J,EAAAs3J,sBAAA,MACAt3J,EAAAu3J,mBAAA,MACAv3J,EAAAw3J,WAAA,MACAx3J,EAAAy3J,YAAA,KACAz3J,EAAA03J,IAAA,KACA13J,EAAA2tE,KAAA,IACA3tE,EAAA23J,gBAAA,IACA33J,EAAA43J,UAAA,MACA53J,EAAA63J,gBAAA,MACA73J,EAAA83J,UAAA,KACA93J,EAAA+3J,cAAA,MACA/3J,EAAAg4J,WAAA,KACAh4J,EAAAi4J,QAAA,KACAj4J,EAAAk4J,YAAA,KACAl4J,EAAAm4J,YAAA,KACAn4J,EAAAo4J,MAAA,IACAp4J,EAAAq4J,WAAA,MACAr4J,EAAAs4J,WAAA,MACAt4J,EAAAu4J,cAAA,IACAv4J,EAAAw4J,cAAA,KACAx4J,EAAAy4J,WAAA,MACAz4J,EAAA04J,YAAA,KACA14J,EAAA24J,aAAA,KACA34J,EAAA44J,0BAAA,KACA54J,EAAA64J,yBAAA,KACA74J,EAAA84J,0BAAA,KACA94J,EAAA+4J,2BAAA,MACA/4J,EAAAg5J,mCAAA,MACAh5J,EAAAi5J,4BAAA,MACAj5J,EAAAk5J,oCAAA,MACAl5J,EAAAm5J,uBAAA,KACAn5J,EAAAo5J,wBAAA,KACAp5J,EAAAq5J,eAAA,KACAr5J,EAAAs5J,0BAAA,KACAt5J,EAAAu5J,2BAAA,KACAv5J,EAAAw5J,iBAAA,KACAx5J,EAAAy5J,iBAAA,KACAz5J,EAAA05J,YAAA,KACA15J,EAAA25J,UAAA,KACA35J,EAAA45J,uBAAA,KACA55J,EAAA65J,wBAAA,KACA75J,EAAA85J,6BAAA,KACA95J,EAAA+5J,wBAAA,KACA/5J,EAAAg6J,MAAA,KACAh6J,EAAAi6J,WAAA,KACAj6J,EAAAuyC,MAAA,KACAvyC,EAAAk6J,WAAA,MACAl6J,EAAAm6J,aAAA,KACAn6J,EAAAo6J,WAAA,MACAp6J,EAAAq6J,WAAA,MACAr6J,EAAAs6J,OAAA,KACAt6J,EAAAu6J,SAAA,MACAv6J,EAAAw6J,QAAA,MACAx6J,EAAAy6J,UAAA,IACAz6J,EAAA06J,YAAA,MACA16J,EAAA26J,aAAA,MACA36J,EAAA46J,mBAAA,MACA56J,EAAA66J,eAAA,MACA76J,EAAA86J,YAAA,MACA96J,EAAA+6J,kBAAA,MACA/6J,EAAAg7J,WAAA,IACAh7J,EAAAi7J,aAAA,MACAj7J,EAAAk7J,cAAA,MACAl7J,EAAAm7J,oBAAA,MACAn7J,EAAAo7J,gBAAA,MACAp7J,EAAAq7J,aAAA,MACAr7J,EAAAs7J,mBAAA,MACAt7J,EAAAu7J,YAAA,GACAv7J,EAAAw7J,cAAA,MACAx7J,EAAAy7J,cAAA,MACAz7J,EAAA07J,qBAAA,MACA17J,EAAA27J,cAAA,MACA37J,EAAA47J,aAAA,GACA57J,EAAA67J,eAAA,MACA77J,EAAA87J,eAAA,MACA97J,EAAA+7J,sBAAA,MACA/7J,EAAAg8J,eAAA,MACAh8J,EAAAi8J,MAAA,IACAj8J,EAAAk8J,cAAA,IACAl8J,EAAAm8J,SAAA,IACAn8J,EAAAo8J,sBAAA,IACAp8J,EAAAq8J,iBAAA,IACAr8J,EAAAs8J,uBAAA,IACAt8J,EAAAu8J,eAAA,IACAv8J,EAAAw8J,uBAAA,IACAx8J,EAAAy8J,UAAA,IACAz8J,EAAA08J,QAAA,IACA18J,EAAA28J,UAAA,MACA38J,EAAA48J,QAAA,IACA58J,EAAA68J,WAAA,MACA78J,EAAA88J,WAAA,MACA98J,EAAA+8J,OAAA,KACA/8J,EAAAg9J,cAAA,KACAh9J,EAAAi9J,eAAA,KACAj9J,EAAAk9J,SAAA,KACAl9J,EAAAb,EAAA,GACAa,EAAAm9J,WAAA,KACAn9J,EAAAo9J,UAAA,KACAp9J,EAAAq9J,OAAA,IACAr9J,EAAAs9J,OAAA,KACAt9J,EAAAu9J,WAAA,KACAv9J,EAAAw9J,WAAA,KACAx9J,EAAAy9J,UAAA,MACAz9J,EAAA09J,mBAAA,KACA19J,EAAA29J,eAAA,IACA39J,EAAA49J,gBAAA,KACA59J,EAAA69J,oBAAA,KACA79J,EAAA89J,SAAA,KACA99J,EAAA+9J,OAAA,KACA/9J,EAAAg+J,MAAA,IACAh+J,EAAAi+J,cAAA,IACAj+J,EAAAk+J,SAAA,IACAl+J,EAAAm+J,eAAA,KACAn+J,EAAAo+J,UAAA,MACAp+J,EAAAq+J,OAAA,IACAr+J,EAAAs+J,SAAA,IACAt+J,EAAAu+J,cAAA,KACAv+J,EAAAw+J,QAAA,KACAx+J,EAAAy+J,YAAA,IACAz+J,EAAA0+J,MAAA,IACA1+J,EAAA2+J,KAAA,IACA3+J,EAAA4+J,WAAA,IACA5+J,EAAA6+J,SAAA,MACA7+J,EAAA8+J,QAAA,IACA9+J,EAAA++J,WAAA,IACA/+J,EAAAg/J,KAAA,IACAh/J,EAAAi/J,WAAA,KACAj/J,EAAAk/J,aAAA,MACAl/J,EAAAm/J,cAAA,MACAn/J,EAAAo/J,aAAA,MACAp/J,EAAAq/J,aAAA,MACAr/J,EAAAs/J,YAAA,KACAt/J,EAAAu/J,WAAA,KACAv/J,EAAAw/J,QAAA,KACAx/J,EAAAy/J,YAAA,KACAz/J,EAAA0/J,YAAA,KACA1/J,EAAA2/J,WAAA,MACA3/J,EAAA4/J,qBAAA,KACA5/J,EAAA6/J,UAAA,MACA7/J,EAAA8/J,YAAA,KACA9/J,EAAA+/J,8BAAA,KACA//J,EAAAggK,qBAAA,KACAhgK,EAAAigK,oBAAA,KACAjgK,EAAAkgK,aAAA,KACAlgK,EAAAmgK,sBAAA,KACAngK,EAAAogK,0BAAA,KACApgK,EAAAqgK,IAAA,IACArgK,EAAAsgK,qBAAA,MACAtgK,EAAAugK,oBAAA,MACAvgK,EAAAwgK,oBAAA,MACAxgK,EAAAygK,cAAA,MACAzgK,EAAA0gK,mBAAA,MACA1gK,EAAA2gK,aAAA,KACA3gK,EAAA4gK,YAAA,KACA5gK,EAAA6gK,aAAA,KACA7gK,EAAA8gK,YAAA,KACA9gK,EAAA+gK,MAAA,IACA/gK,EAAAghK,mBAAA,MACAhhK,EAAAihK,kBAAA,MACAjhK,EAAAkhK,kBAAA,MACAlhK,EAAAmhK,YAAA,MACAnhK,EAAAohK,iBAAA,MACAphK,EAAAqhK,kBAAA,MACArhK,EAAAshK,OAAA,KACAthK,EAAAuhK,aAAA,IACAvhK,EAAAwhK,eAAA,KACAxhK,EAAAyhK,SAAA,KACAzhK,EAAA0hK,WAAA,KACA1hK,EAAA2hK,iBAAA,MACA3hK,EAAA4hK,wBAAA,KACA5hK,EAAA6hK,yBAAA,KACA7hK,EAAA8hK,WAAA,IACA9hK,EAAA+hK,mBAAA,IACA/hK,EAAAgiK,cAAA,IACAhiK,EAAA6pB,MAAA,KACA7pB,EAAAiiK,cAAA,IACAjiK,EAAAkiK,YAAA,IACAliK,EAAAmiK,aAAA,IACAniK,EAAAoiK,eAAA,IACApiK,EAAAqiK,KAAA,KACAriK,EAAAsiK,cAAA,KACAtiK,EAAAuiK,cAAA,KACAviK,EAAAwiK,cAAA,MACAxiK,EAAAyiK,WAAA,MACAziK,EAAA0iK,gBAAA,MACA1iK,EAAA2iK,WAAA,KACA3iK,EAAA4iK,MAAA,GACA5iK,EAAA6iK,cAAA,KACA7iK,EAAA8iK,eAAA,MACA9iK,EAAA+iK,UAAA,KACA/iK,EAAAgjK,WAAA,MACAhjK,EAAAijK,uBAAA,IACAjjK,EAAAkjK,mBAAA,IACAljK,EAAAmjK,MAAA,GACAnjK,EAAAojK,cAAA,IACApjK,EAAAqjK,mBAAA,IACArjK,EAAAsjK,YAAA,MACAtjK,EAAAujK,YAAA,KACAvjK,EAAAwjK,cAAA,KACAxjK,EAAAyjK,cAAA,MACAzjK,EAAA0jK,eAAA,MACA1jK,EAAA2jK,sBAAA,IACA3jK,EAAA4jK,iBAAA,IACA5jK,EAAA6jK,WAAA,MACA7jK,EAAA8jK,cAAA,MACA9jK,EAAA+jK,oBAAA,IACA/jK,EAAAgkK,eAAA,IACAhkK,EAAAikK,QAAA,KACAjkK,EAAAkkK,UAAA,KACAlkK,EAAAmkK,gBAAA,KACAnkK,EAAAokK,QAAA,KACApkK,EAAAqkK,WAAA,EACArkK,EAAAskK,WAAA,EACAtkK,EAAAukK,UAAA,EACAvkK,EAAAwkK,WAAA,GACAxkK,EAAAykK,UAAA,GACAzkK,EAAA0kK,WAAA,GACA1kK,EAAA2kK,WAAA,GACA3kK,EAAA4kK,WAAA,GACA5kK,EAAA6kK,WAAA,GACA7kK,EAAA8kK,WAAA,IACA9kK,EAAA+kK,WAAA,GACA/kK,EAAAglK,UAAA,GACAhlK,EAAAilK,WAAA,EACAjlK,EAAAklK,WAAA,EACAllK,EAAAmlK,WAAA,GACAnlK,EAAAolK,WAAA,GACAplK,EAAAqlK,WAAA,EACArlK,EAAAslK,UAAA,GACAtlK,EAAAulK,UAAA,GACAvlK,EAAAwlK,UAAA,GACAxlK,EAAAylK,UAAA,EACAzlK,EAAA0lK,UAAA,GACA1lK,EAAA2lK,WAAA,GACA3lK,EAAA4lK,YAAA,EACA5lK,EAAA6lK,UAAA,GACA7lK,EAAA8lK,UAAA,GACA9lK,EAAA+lK,UAAA,GACA/lK,EAAAgmK,WAAA,EACAhmK,EAAAimK,WAAA,EACAjmK,EAAAkmK,WAAA,GACAlmK,EAAAmmK,WAAA,GACAnmK,EAAAomK,UAAA,GACApmK,EAAAqmK,UAAA,GACArmK,EAAAsmK,UAAA,IACAtmK,EAAAumK,cAAA,MACAvmK,EAAAwmK,eAAA,MACAxmK,EAAAymK,kBAAA,MACAzmK,EAAA0mK,2BAAA,MACA1mK,EAAA2mK,0BAAA,MACA3mK,EAAA4mK,mBAAA,MACA5mK,EAAA6mK,4BAAA,MACA7mK,EAAA8mK,2BAAA,MACA9mK,EAAA+mK,kBAAA,MACA/mK,EAAAgnK,SAAA,MACAhnK,EAAAinK,cAAA,MACAjnK,EAAAknK,OAAA,KACAlnK,EAAAmnK,SAAA,KACAnnK,EAAAonK,WAAA,IACApnK,EAAAqnK,SAAA,KACArnK,EAAAsnK,QAAA,KACAtnK,EAAAunK,SAAA,IACAvnK,EAAAwnK,SAAA,MACAxnK,EAAAynK,QAAA,MACAznK,EAAA0nK,SAAA,MACA1nK,EAAA2nK,QAAA,MACA3nK,EAAAZ,EAAA,IACAY,EAAA4nK,WAAA,KACA5nK,EAAA6nK,UAAA,KACA7nK,EAAA8nK,UAAA,KACA9nK,EAAA+nK,OAAA,KACA/nK,EAAAgoK,eAAA,MACAhoK,EAAAioK,iBAAA,MACAjoK,EAAAkoK,gBAAA,MACAloK,EAAAmoK,OAAA,KACAnoK,EAAAooK,aAAA,KACApoK,EAAAqoK,OAAA,KACAroK,EAAAsoK,UAAA,KACAtoK,EAAAuoK,WAAA,KACAvoK,EAAAwoK,WAAA,KACAxoK,EAAAyoK,WAAA,MACAzoK,EAAA0oK,WAAA,MACA1oK,EAAA2oK,UAAA,KACA3oK,EAAA4oK,MAAA,KACA5oK,EAAA6oK,YAAA,MACA7oK,EAAA8oK,kBAAA,MACA9oK,EAAA+oK,YAAA,KACA/oK,EAAAgpK,eAAA,MACAhpK,EAAAipK,YAAA,KACAjpK,EAAAkpK,eAAA,KACAlpK,EAAAmpK,qBAAA,KACAnpK,EAAAopK,eAAA,KACAppK,EAAAqpK,MAAA,KACArpK,EAAAspK,YAAA,KACAtpK,EAAAupK,gBAAA,KACAvpK,EAAAwpK,yBAAA,KACAxpK,EAAAypK,SAAA,MACAzpK,EAAA0pK,oBAAA,MACA1pK,EAAA2pK,4BAAA,MACA3pK,EAAA4pK,qBAAA,MACA5pK,EAAA6pK,6BAAA,MACA7pK,EAAA8pK,wBAAA,IACA9pK,EAAA+pK,aAAA,KACA/pK,EAAAgqK,cAAA,KACAhqK,EAAAiqK,SAAA,KACAjqK,EAAAkqK,SAAA,MACAlqK,EAAAmqK,YAAA,IACAnqK,EAAAoqK,YAAA,KACApqK,EAAAqqK,WAAA,KACArqK,EAAAsqK,cAAA,IACAtqK,EAAAuqK,eAAA,IACAvqK,EAAAwqK,YAAA,IACAxqK,EAAAyqK,eAAA,KACAzqK,EAAA0qK,wBAAA,IACA1qK,EAAA2qK,UAAA,MACA3qK,EAAA4qK,SAAA,MACA5qK,EAAA6qK,OAAA,IACA7qK,EAAA8qK,SAAA,KACA9qK,EAAA+qK,QAAA,KACA/qK,EAAAgrK,iBAAA,KACAhrK,EAAAirK,OAAA,IACAjrK,EAAAkrK,WAAA,KACAlrK,EAAAmrK,QAAA,KACAnrK,EAAAorK,YAAA,KACAprK,EAAAqrK,YAAA,KACArrK,EAAAsrK,WAAA,KACAtrK,EAAAurK,gBAAA,MACAvrK,EAAAwrK,UAAA,KACAxrK,EAAAyrK,YAAA,KACAzrK,EAAA0rK,SAAA,KACA1rK,EAAA2rK,aAAA,KACA3rK,EAAA4rK,aAAA,KACA5rK,EAAA6rK,WAAA,KACA7rK,EAAA8rK,UAAA,KACA9rK,EAAA+rK,uBAAA,KACA/rK,EAAAgsK,wBAAA,KACAhsK,EAAAisK,WAAA,KACAjsK,EAAAksK,OAAA,IACAlsK,EAAAmsK,WAAA,KACAnsK,EAAAosK,WAAA,MACApsK,EAAAqsK,UAAA,KACArsK,EAAAssK,WAAA,MACAtsK,EAAAusK,WAAA,KACAvsK,EAAAwsK,YAAA,KACAxsK,EAAAykE,MAAA,IACAzkE,EAAAysK,YAAA,IACAzsK,EAAA0sK,oCAAA,KACA1sK,EAAA2sK,KAAA,IACA3sK,EAAA4sK,WAAA,KACA5sK,EAAA6sK,QAAA,KACA7sK,EAAA8sK,YAAA,KACA9sK,EAAA+sK,YAAA,KACA/sK,EAAAgtK,MAAA,IACAhtK,EAAAitK,eAAA,IACAjtK,EAAAktK,kBAAA,IACAltK,EAAAmtK,QAAA,KACAntK,EAAAotK,iBAAA,KACAptK,EAAAqtK,SAAA,IACArtK,EAAAstK,cAAA,MACAttK,EAAAutK,iBAAA,IACAvtK,EAAAwtK,YAAA,IACAxtK,EAAAytK,cAAA,MACAztK,EAAA0tK,cAAA,IACA1tK,EAAA2tK,WAAA,MACA3tK,EAAA4tK,WAAA,MACA5tK,EAAA6tK,UAAA,MACA7tK,EAAA8tK,OAAA,IACA9tK,EAAA+tK,QAAA,KACA/tK,EAAAguK,cAAA,KACAhuK,EAAAiuK,YAAA,KACAjuK,EAAAkuK,QAAA,KACAluK,EAAAmuK,WAAA,KACAnuK,EAAAouK,SAAA,MACApuK,EAAAquK,QAAA,IACAruK,EAAAsuK,WAAA,MACAtuK,EAAAuuK,QAAA,KACAvuK,EAAAwuK,YAAA,KACAxuK,EAAAyuK,UAAA,KACAzuK,EAAA0uK,WAAA,MACA1uK,EAAA2uK,WAAA,MACA3uK,EAAA4uK,OAAA,GACA5uK,EAAA6uK,eAAA,MACA7uK,EAAA8uK,gBAAA,MACA9uK,EAAA+uK,eAAA,MACA/uK,EAAAgvK,YAAA,MACAhvK,EAAAivK,eAAA,MACAjvK,EAAAkvK,KAAA,KACAlvK,EAAAmvK,WAAA,MACAnvK,EAAAovK,UAAA,IACApvK,EAAAqvK,aAAA,IACArvK,EAAAsvK,YAAA,IACAtvK,EAAAuvK,aAAA,IACAvvK,EAAAwvK,YAAA,MACAxvK,EAAAyvK,SAAA,IACAzvK,EAAA0vK,SAAA,MACA1vK,EAAA2vK,mBAAA,IACA3vK,EAAA4vK,QAAA,KACA5vK,EAAA6vK,aAAA,KACA7vK,EAAA8vK,eAAA,MACA9vK,EAAA+vK,qBAAA,MACA/vK,EAAAgwK,iBAAA,IACAhwK,EAAAiwK,YAAA,IACAjwK,EAAAkwK,OAAA,KACAlwK,EAAAmwK,UAAA,MACAnwK,EAAAowK,MAAA,IACApwK,EAAAqwK,QAAA,IACArwK,EAAAswK,WAAA,MACAtwK,EAAAuwK,WAAA,MACAvwK,EAAAwwK,GAAA,IACAxwK,EAAAywK,SAAA,IACAzwK,EAAA0wK,QAAA,IACA1wK,EAAA2wK,OAAA,IACA3wK,EAAA4wK,qBAAA,KACA5wK,EAAA6wK,YAAA,KACA7wK,EAAA8wK,aAAA,KACA9wK,EAAAuB,EAAA,IACAvB,EAAA+wK,OAAA,IACA/wK,EAAAgxK,MAAA,KACAhxK,EAAAixK,SAAA,KACAjxK,EAAAkxK,UAAA,MACAlxK,EAAAmxK,OAAA,IACAnxK,EAAAoxK,YAAA,KACApxK,EAAAqxK,gBAAA,KACArxK,EAAAsxK,qBAAA,KACAtxK,EAAAuxK,yBAAA,KACAvxK,EAAAwxK,OAAA,IACAxxK,EAAAyxK,cAAA,KACAzxK,EAAA0xK,YAAA,KACA1xK,EAAA2xK,gBAAA,KACA3xK,EAAA4xK,QAAA,KACA5xK,EAAA6xK,YAAA,IACA7xK,EAAA8xK,iBAAA,KACA9xK,EAAA+xK,iBAAA,KACA/xK,EAAAgyK,oBAAA,KACAhyK,EAAAiyK,iBAAA,KACAjyK,EAAAkyK,qBAAA,KACAlyK,EAAAmyK,iBAAA,KACAnyK,EAAAoyK,UAAA,KACApyK,EAAAqyK,UAAA,IACAryK,EAAAsyK,MAAA,KACAtyK,EAAAuyK,UAAA,IACAvyK,EAAAwyK,KAAA,IACAxyK,EAAAyyK,WAAA,IACAzyK,EAAA0yK,UAAA,KACA1yK,EAAA2yK,WAAA,KACA3yK,EAAA4yK,gBAAA,KACA5yK,EAAA6yK,WAAA,KACA7yK,EAAA8yK,OAAA,IACA9yK,EAAA+yK,UAAA,KACA/yK,EAAAgzK,WAAA,KACAhzK,EAAAizK,WAAA,MACAjzK,EAAAkzK,UAAA,MACAlzK,EAAAmzK,WAAA,KACAnzK,EAAAozK,WAAA,MACApzK,EAAAqzK,MAAA,GACArzK,EAAAszK,YAAA,KACAtzK,EAAAuzK,aAAA,KACAvzK,EAAAwzK,YAAA,KACAxzK,EAAAyzK,4BAAA,MACAzzK,EAAA0zK,UAAA,KACA1zK,EAAA2zK,eAAA,KACA3zK,EAAA4zK,cAAA,KACA5zK,EAAA6zK,eAAA,KACA7zK,EAAA8zK,cAAA,KACA9zK,EAAA+zK,cAAA,KACA/zK,EAAAg0K,gBAAA,KACAh0K,EAAAi0K,cAAA,MACAj0K,EAAAk0K,iBAAA,KACAl0K,EAAAm0K,sBAAA,MACAn0K,EAAAo0K,cAAA,KACAp0K,EAAAq0K,eAAA,MACAr0K,EAAAs0K,cAAA,MACAt0K,EAAAu0K,WAAA,KACAv0K,EAAAw0K,YAAA,KACAx0K,EAAAy0K,aAAA,KACAz0K,EAAA00K,WAAA,KACA10K,EAAA20K,cAAA,KACA30K,EAAA40K,UAAA,KACA50K,EAAA60K,eAAA,IACA70K,EAAA80K,kBAAA,KACA90K,EAAA+0K,UAAA,MACA/0K,EAAAg1K,mBAAA,MACAh1K,EAAAi1K,gBAAA,KACAj1K,EAAAk1K,QAAA,MACAl1K,EAAAm1K,WAAA,KACAn1K,EAAAwR,QAAA,KACAxR,EAAAo1K,aAAA,KACAp1K,EAAAq1K,YAAA,KACAr1K,EAAAs1K,aAAA,KACAt1K,EAAAu1K,YAAA,KACAv1K,EAAAw1K,SAAA,KACAx1K,EAAAy1K,iBAAA,KACAz1K,EAAA01K,QAAA,IACA11K,EAAA21K,aAAA,KACA31K,EAAA41K,aAAA,KACA51K,EAAA61K,WAAA,KACA71K,EAAA81K,OAAA,KACA91K,EAAA+1K,eAAA,MACA/1K,EAAAg2K,WAAA,MACAh2K,EAAAi2K,qBAAA,KACAj2K,EAAAk2K,SAAA,KACAl2K,EAAAm2K,WAAA,MACAn2K,EAAAo2K,WAAA,KACAp2K,EAAAq2K,OAAA,KACAr2K,EAAAs2K,eAAA,MACAt2K,EAAAu2K,oBAAA,KACAv2K,EAAAw2K,IAAA,IACAx2K,EAAAy2K,YAAA,MACAz2K,EAAA02K,cAAA,KACA12K,EAAA22K,eAAA,KACA32K,EAAA42K,QAAA,KACA52K,EAAA62K,QAAA,IACA72K,EAAA82K,SAAA,MACA92K,EAAA+2K,MAAA,IACA/2K,EAAAg3K,YAAA,IACAh3K,EAAAi3K,cAAA,IACAj3K,EAAAk3K,oBAAA,IACAl3K,EAAAm3K,kBAAA,IACAn3K,EAAAo3K,OAAA,KACAp3K,EAAA+mE,QAAA,IACA/mE,EAAAq3K,aAAA,IACAr3K,EAAAs3K,MAAA,GACAt3K,EAAAu3K,eAAA,MACAv3K,EAAAw3K,WAAA,MACAx3K,EAAAy3K,cAAA,KACAz3K,EAAA03K,YAAA,KACA13K,EAAA23K,WAAA,MACA33K,EAAA43K,WAAA,KACA53K,EAAA63K,UAAA,IACA73K,EAAA83K,kBAAA,KACA93K,EAAA+3K,WAAA,KACA/3K,EAAAg4K,oBAAA,KACAh4K,EAAAi4K,IAAA,IACAj4K,EAAAk4K,QAAA,IACAl4K,EAAAm4K,WAAA,KACAn4K,EAAAo4K,oBAAA,KACAp4K,EAAAq4K,gBAAA,IACAr4K,EAAAs4K,iBAAA,IACAt4K,EAAAu4K,eAAA,MACAv4K,EAAAw4K,eAAA,MACAx4K,EAAAy4K,wBAAA,MACAz4K,EAAA04K,UAAA,KACA14K,EAAA24K,UAAA,MACA34K,EAAA44K,IAAA,IACA54K,EAAA64K,WAAA,KACA74K,EAAA84K,SAAA,IACA94K,EAAA+4K,IAAA,IACA/4K,EAAAg5K,OAAA,KACAh5K,EAAAi5K,YAAA,KACAj5K,EAAAk5K,mBAAA,KACAl5K,EAAAm5K,uBAAA,KACAn5K,EAAAo5K,cAAA,KACAp5K,EAAAq5K,kBAAA,KACAr5K,EAAAs5K,QAAA,IACAt5K,EAAAu5K,SAAA,MACAv5K,EAAAw5K,KAAA,KACAx5K,EAAAy5K,kBAAA,KACAz5K,EAAA05K,eAAA,KACA15K,EAAA25K,mBAAA,KACA35K,EAAA45K,OAAA,GACA55K,EAAA65K,eAAA,KACA75K,EAAA85K,UAAA,KACA95K,EAAA+5K,WAAA,IACA/5K,EAAAg6K,gBAAA,MACAh6K,EAAAi6K,gBAAA,MACAj6K,EAAAk6K,YAAA,MACAl6K,EAAAm6K,YAAA,KACAn6K,EAAAo6K,IAAA,IACAp6K,EAAAq6K,SAAA,IACAr6K,EAAAs6K,QAAA,IACAt6K,EAAAu6K,YAAA,IACAv6K,EAAAw6K,QAAA,IACAx6K,EAAAgvE,EAAA,IACAhvE,EAAAy6K,OAAA,KACAz6K,EAAA06K,WAAA,KACA16K,EAAA26K,WAAA,KACA36K,EAAA46K,YAAA,KACA56K,EAAA66K,eAAA,KACA76K,EAAA86K,eAAA,KACA96K,EAAA+6K,UAAA,MACA/6K,EAAAg7K,QAAA,KACAh7K,EAAAi7K,WAAA,KACAj7K,EAAAk7K,UAAA,KACAl7K,EAAAm7K,YAAA,KACAn7K,EAAAo7K,eAAA,MACAp7K,EAAAq7K,iBAAA,MACAr7K,EAAAs7K,gBAAA,MACAt7K,EAAAu7K,UAAA,IACAv7K,EAAAw7K,OAAA,KACAx7K,EAAAy7K,GAAA,MACAz7K,EAAA07K,IAAA,MACA17K,EAAA27K,IAAA,MACA37K,EAAA47K,IAAA,MACA57K,EAAA67K,GAAA,MACA77K,EAAA87K,cAAA,KACA97K,EAAA+7K,aAAA,KACA/7K,EAAAg8K,cAAA,KACAh8K,EAAAi8K,WAAA,KACAj8K,EAAAk8K,UAAA,KACAl8K,EAAAm8K,WAAA,KACAn8K,EAAAo8K,SAAA,KACAp8K,EAAAq8K,eAAA,MACAr8K,EAAAs8K,qBAAA,MACAt8K,EAAAu8K,eAAA,KACAv8K,EAAAw8K,SAAA,KACAx8K,EAAAy8K,eAAA,KACAz8K,EAAA08K,SAAA,KACA18K,EAAA28K,eAAA,KACA38K,EAAA48K,QAAA,KACA58K,EAAA68K,cAAA,KACA78K,EAAA88K,WAAA,KACA98K,EAAA+8K,iBAAA,KACA/8K,EAAAg9K,iBAAA,IACAh9K,EAAAi9K,QAAA,KACAj9K,EAAAk9K,aAAA,KACAl9K,EAAAm9K,KAAA,GACAn9K,EAAAo9K,WAAA,KACAp9K,EAAAq9K,YAAA,KACAr9K,EAAAs9K,WAAA,KACAt9K,EAAAu9K,2BAAA,MACAv9K,EAAAw9K,SAAA,KACAx9K,EAAAy9K,YAAA,KACAz9K,EAAA09K,aAAA,KACA19K,EAAA29K,aAAA,KACA39K,EAAA49K,eAAA,KACA59K,EAAA69K,aAAA,MACA79K,EAAA89K,qBAAA,MACA99K,EAAA+9K,aAAA,KACA/9K,EAAAg+K,cAAA,MACAh+K,EAAAi+K,aAAA,MACAj+K,EAAAk+K,UAAA,KACAl+K,EAAAm+K,WAAA,KACAn+K,EAAAo+K,YAAA,KACAp+K,EAAAq+K,UAAA,KACAr+K,EAAAs+K,aAAA,KACAt+K,EAAAu+K,SAAA,KACAv+K,EAAAw+K,GAAA,MACAx+K,EAAAy+K,OAAA,IACAz+K,EAAA0+K,WAAA,MACA1+K,EAAA2+K,SAAA,MACA3+K,EAAA4+K,UAAA,KACA5+K,EAAA6+K,SAAA,KACA7+K,EAAA8+K,YAAA,KACA9+K,EAAA++K,OAAA,KACA/+K,EAAAg/K,KAAA,GACAh/K,EAAAi/K,WAAA,KACAj/K,EAAAk/K,YAAA,KACAl/K,EAAAm/K,WAAA,KACAn/K,EAAAo/K,2BAAA,MACAp/K,EAAAq/K,SAAA,KACAr/K,EAAAs/K,aAAA,KACAt/K,EAAAu/K,aAAA,KACAv/K,EAAAw/K,eAAA,KACAx/K,EAAAy/K,aAAA,MACAz/K,EAAA0/K,qBAAA,MACA1/K,EAAA2/K,aAAA,KACA3/K,EAAA4/K,cAAA,MACA5/K,EAAA6/K,qBAAA,KACA7/K,EAAA8/K,aAAA,MACA9/K,EAAA+/K,UAAA,KACA//K,EAAAggL,WAAA,KACAhgL,EAAAigL,YAAA,KACAjgL,EAAAkgL,UAAA,KACAlgL,EAAAmgL,aAAA,KACAngL,EAAAogL,eAAA,KACApgL,EAAAqgL,cAAA,KACArgL,EAAAsgL,eAAA,KACAtgL,EAAAugL,SAAA,KACAvgL,EAAAwgL,kBAAA,IACAxgL,EAAAygL,OAAA,KACAzgL,EAAA0gL,SAAA,KACA1gL,EAAA2gL,MAAA,KACA3gL,EAAAkkB,EAAA,IACAlkB,EAAA4gL,UAAA,KACA5gL,EAAA6gL,OAAA,IACA7gL,EAAA8gL,OAAA,KACA9gL,EAAA+gL,UAAA,KACA/gL,EAAAghL,eAAA,MACAhhL,EAAAihL,iBAAA,MACAjhL,EAAAkhL,gBAAA,MACAlhL,EAAAmhL,WAAA,KACAnhL,EAAAohL,WAAA,KACAphL,EAAAqhL,WAAA,MACArhL,EAAAshL,WAAA,MACAthL,EAAA4tE,MAAA,IACA5tE,EAAAuhL,gBAAA,IACAvhL,EAAAwhL,cAAA,IACAxhL,EAAAyhL,aAAA,KACAzhL,EAAA0hL,UAAA,MACA1hL,EAAA2hL,OAAA,IACA3hL,EAAA4hL,OAAA,IACA5hL,EAAA6hL,SAAA,IACA7hL,EAAA8hL,QAAA,KACA9hL,EAAA+hL,YAAA,IACA/hL,EAAAgiL,aAAA,IACAhiL,EAAAiiL,KAAA,IACAjiL,EAAAkiL,WAAA,IACAliL,EAAAmiL,WAAA,KACAniL,EAAAoiL,WAAA,MACApiL,EAAAqiL,WAAA,MACAriL,EAAAsiL,mBAAA,KACAtiL,EAAAuiL,mBAAA,KACAviL,EAAAwiL,aAAA,KACAxiL,EAAAyiL,mBAAA,KACAziL,EAAA0iL,WAAA,IACA1iL,EAAA2iL,sBAAA,KACA3iL,EAAA4iL,gBAAA,KACA5iL,EAAA6iL,SAAA,MACA7iL,EAAA8iL,WAAA,KACA9iL,EAAA+iL,aAAA,KACA/iL,EAAAgjL,QAAA,KACAhjL,EAAAijL,YAAA,KACAjjL,EAAAkjL,YAAA,KACAljL,EAAAmjL,YAAA,KACAnjL,EAAAojL,iBAAA,MACApjL,EAAAqjL,mBAAA,MACArjL,EAAAsjL,kBAAA,MACAtjL,EAAAujL,sBAAA,KACAvjL,EAAAwjL,kBAAA,KACAxjL,EAAAyjL,kBAAA,KACAzjL,EAAA0jL,SAAA,KACA1jL,EAAA2jL,aAAA,KACA3jL,EAAA4jL,MAAA,IACA5jL,EAAA6jL,UAAA,MACA7jL,EAAA8jL,WAAA,MACA9jL,EAAA+jL,WAAA,MACA/jL,EAAAgkL,YAAA,KACAhkL,EAAAikL,MAAA,KACAjkL,EAAAkkL,YAAA,MACAlkL,EAAAmkL,kBAAA,MACAnkL,EAAAokL,YAAA,KACApkL,EAAAqkL,YAAA,KACArkL,EAAAskL,sBAAA,IACAtkL,EAAAukL,YAAA,IACAvkL,EAAAwkL,oBAAA,IACAxkL,EAAAykL,eAAA,IACAzkL,EAAA0kL,oBAAA,IACA1kL,EAAA2kL,uBAAA,IACA3kL,EAAA4kL,4BAAA,IACA5kL,EAAA6kL,kBAAA,IACA7kL,EAAA8kL,0BAAA,IACA9kL,EAAA+kL,QAAA,KACA/kL,EAAAglL,WAAA,MACAhlL,EAAAilL,WAAA,MACAjlL,EAAAklL,WAAA,MACAllL,EAAAmlL,OAAA,KACAnlL,EAAAolL,UAAA,MACAplL,EAAAqlL,SAAA,KACArlL,EAAAslL,MAAA,GACAtlL,EAAAulL,cAAA,IACAvlL,EAAAwlL,SAAA,IACAxlL,EAAAylL,UAAA,IACAzlL,EAAA0lL,UAAA,KACA1lL,EAAA2lL,YAAA,IACA3lL,EAAA4lL,eAAA,MACA5lL,EAAA6lL,aAAA,IACA7lL,EAAA8lL,QAAA,GACA9lL,EAAA+lL,aAAA,KACA/lL,EAAAgmL,mBAAA,KACAhmL,EAAAimL,iBAAA,MACAjmL,EAAAkmL,oBAAA,KACAlmL,EAAAmmL,cAAA,KACAnmL,EAAAomL,iBAAA,KACApmL,EAAAqmL,aAAA,MACArmL,EAAAsmL,QAAA,IACAtmL,EAAAumL,QAAA,IACAvmL,EAAAwmL,WAAA,MACAxmL,EAAAymL,cAAA,IACAzmL,EAAA0mL,eAAA,IACA1mL,EAAA2mL,cAAA,KACA3mL,EAAA4mL,eAAA,KACA5mL,EAAA6mL,WAAA,MACA7mL,EAAA8mL,aAAA,MACA9mL,EAAA+mL,SAAA,MACA/mL,EAAAsxD,EAAA,IACAtxD,EAAAgnL,oBAAA,KACAhnL,EAAAinL,eAAA,KACAjnL,EAAAknL,UAAA,KACAlnL,EAAAmnL,oBAAA,KACAnnL,EAAAonL,OAAA,KACApnL,EAAAqnL,WAAA,KACArnL,EAAAsnL,WAAA,KACAtnL,EAAAunL,UAAA,KACAvnL,EAAAwnL,eAAA,MACAxnL,EAAAynL,iBAAA,MACAznL,EAAA0nL,WAAA,MACA1nL,EAAA2nL,gBAAA,MACA3nL,EAAA4nL,YAAA,MACA5nL,EAAA6nL,WAAA,MACA7nL,EAAA8nL,oBAAA,MACA9nL,EAAA+nL,eAAA,KACA/nL,EAAAgoL,YAAA,KACAhoL,EAAAioL,eAAA,KACAjoL,EAAAkoL,aAAA,MACAloL,EAAAmoL,iBAAA,KACAnoL,EAAAooL,kBAAA,KACApoL,EAAAqoL,mBAAA,KACAroL,EAAAsoL,SAAA,MACAtoL,EAAAuoL,WAAA,KACAvoL,EAAAwoL,aAAA,KACAxoL,EAAAyoL,aAAA,KACAzoL,EAAA0oL,aAAA,KACA1oL,EAAA2oL,iBAAA,KACA3oL,EAAA4oL,uBAAA,KACA5oL,EAAA6oL,wBAAA,KACA7oL,EAAA8oL,qBAAA,KACA9oL,EAAA+oL,YAAA,KACA/oL,EAAAgpL,cAAA,KACAhpL,EAAAipL,cAAA,KACAjpL,EAAAkpL,cAAA,KACAlpL,EAAAmpL,kBAAA,KACAnpL,EAAAopL,wBAAA,KACAppL,EAAAqpL,yBAAA,KACArpL,EAAAspL,sBAAA,KACAtpL,EAAAupL,WAAA,KACAvpL,EAAAwpL,aAAA,KACAxpL,EAAAypL,aAAA,KACAzpL,EAAA0pL,aAAA,KACA1pL,EAAA2pL,iBAAA,KACA3pL,EAAA4pL,uBAAA,KACA5pL,EAAA6pL,wBAAA,KACA7pL,EAAA8pL,qBAAA,KACA9pL,EAAA+pL,KAAA,IACA/pL,EAAAgqL,UAAA,MACAhqL,EAAAiqL,YAAA,KACAjqL,EAAAkqL,SAAA,KACAlqL,EAAAmqL,QAAA,KACAnqL,EAAAoqL,YAAA,IACApqL,EAAAqqL,UAAA,KACArqL,EAAAsqL,WAAA,KACAtqL,EAAAuqL,UAAA,KACAvqL,EAAAwqL,GAAA,KACAxqL,EAAAyqL,MAAA,KACAzqL,EAAA0qL,eAAA,KACA1qL,EAAA2qL,eAAA,KACA3qL,EAAA4qL,SAAA,MACA5qL,EAAA6qL,eAAA,MACA7qL,EAAA8qL,gBAAA,KACA9qL,EAAA+qL,UAAA,KACA/qL,EAAAgrL,SAAA,KACAhrL,EAAAirL,qBAAA,MACAjrL,EAAAkrL,qBAAA,MACAlrL,EAAAmrL,eAAA,MACAnrL,EAAAorL,yBAAA,MACAprL,EAAAqrL,4BAAA,MACArrL,EAAAsrL,uBAAA,MACAtrL,EAAAurL,iBAAA,MACAvrL,EAAAwrL,WAAA,MACAxrL,EAAAyrL,sBAAA,MACAzrL,EAAA0rL,gBAAA,MACA1rL,EAAA2rL,gBAAA,MACA3rL,EAAA4rL,WAAA,MACA5rL,EAAA6rL,oBAAA,MACA7rL,EAAA8rL,gBAAA,MACA9rL,EAAA+rL,SAAA,IACA/rL,EAAAgsL,aAAA,MACAhsL,EAAAisL,IAAA,KACAjsL,EAAAksL,UAAA,KACAlsL,EAAAmsL,MAAA,IACAnsL,EAAAosL,cAAA,IACApsL,EAAAqsL,mBAAA,MACArsL,EAAAssL,kBAAA,MACAtsL,EAAAusL,kBAAA,MACAvsL,EAAAwsL,YAAA,MACAxsL,EAAAysL,iBAAA,MACAzsL,EAAA0sL,WAAA,MACA1sL,EAAA2sL,WAAA,MACA3sL,EAAA4sL,oBAAA,MACA5sL,EAAA6sL,MAAA,KACA7sL,EAAA8sL,QAAA,KACA9sL,EAAA+sL,QAAA,KACA/sL,EAAAgtL,QAAA,KACAhtL,EAAAitL,YAAA,KACAjtL,EAAAktL,kBAAA,KACAltL,EAAAmtL,mBAAA,KACAntL,EAAAotL,gBAAA,KACAptL,EAAAqtL,WAAA,KACArtL,EAAAstL,WAAA,MACAttL,EAAAutL,WAAA,KACAvtL,EAAAwtL,UAAA,KACAxtL,EAAAytL,WAAA,MACAztL,EAAA0tL,WAAA,MACA1tL,EAAA2tL,oBAAA,MACA3tL,EAAA4tL,MAAA,KACA5tL,EAAA6tL,QAAA,KACA7tL,EAAA8tL,QAAA,KACA9tL,EAAA+tL,QAAA,KACA/tL,EAAAguL,YAAA,KACAhuL,EAAAiuL,kBAAA,KACAjuL,EAAAkuL,mBAAA,KACAluL,EAAAmuL,gBAAA,KACAnuL,EAAAouL,aAAA,KACApuL,EAAAquL,cAAA,IACAruL,EAAAsuL,QAAA,IACAtuL,EAAAuuL,wBAAA,IACAvuL,EAAAwuL,sBAAA,IACAxuL,EAAAyuL,WAAA,MACAzuL,EAAA0uL,WAAA,KACA1uL,EAAA2uL,cAAA,KACA3uL,EAAA4uL,QAAA,IACA5uL,EAAA6uL,WAAA,KACA7uL,EAAA8uL,MAAA,KACA9uL,EAAA+uL,OAAA,KACA/uL,EAAAgvL,UAAA,IACAhvL,EAAAivL,QAAA,IACAjvL,EAAAkvL,WAAA,MACAlvL,EAAAmvL,aAAA,MACAnvL,EAAAovL,WAAA,MACApvL,EAAAqvL,oBAAA,MACArvL,EAAAsvL,aAAA,IACAtvL,EAAAuvL,gBAAA,IACAvvL,EAAAwvL,GAAA,IACAxvL,EAAAyvL,OAAA,GACAzvL,EAAA0vL,eAAA,MACA1vL,EAAA2vL,gBAAA,MACA3vL,EAAA4vL,YAAA,MACA5vL,EAAA6vL,eAAA,MACA7vL,EAAA8vL,UAAA,KACA9vL,EAAAlB,EAAA,IACAkB,EAAA+vL,OAAA,IACA/vL,EAAAgwL,WAAA,KACAhwL,EAAAiwL,SAAA,KACAjwL,EAAAkwL,UAAA,MACAlwL,EAAAmwL,OAAA,IACAnwL,EAAAowL,OAAA,IACApwL,EAAAqwL,QAAA,KACArwL,EAAAswL,YAAA,IACAtwL,EAAAuwL,UAAA,KACAvwL,EAAAwwL,UAAA,IACAxwL,EAAAywL,qBAAA,MACAzwL,EAAA0wL,oBAAA,MACA1wL,EAAA2wL,yBAAA,MACA3wL,EAAA4wL,qBAAA,MACA5wL,EAAA6wL,wBAAA,MACA7wL,EAAA8wL,iBAAA,MACA9wL,EAAA+wL,iBAAA,MACA/wL,EAAAgxL,qBAAA,MACAhxL,EAAAixL,+BAAA,MACAjxL,EAAAkxL,yBAAA,MACAlxL,EAAAmxL,sBAAA,MACAnxL,EAAAoxL,2BAAA,MACApxL,EAAAqxL,2BAAA,MACArxL,EAAAsxL,yBAAA,MACAtxL,EAAAuxL,2BAAA,MACAvxL,EAAAwxL,0BAAA,MACAxxL,EAAAyxL,qBAAA,MACAzxL,EAAA0xL,qBAAA,MACA1xL,EAAA2xL,sBAAA,MACA3xL,EAAA4xL,yBAAA,MACA5xL,EAAA6xL,uBAAA,MACA7xL,EAAA8xL,sBAAA,MACA9xL,EAAA+xL,sBAAA,MACA/xL,EAAAgyL,qBAAA,MACAhyL,EAAAiyL,0BAAA,MACAjyL,EAAAkyL,sBAAA,MACAlyL,EAAAmyL,qBAAA,MACAnyL,EAAAoyL,qBAAA,MACApyL,EAAAqyL,kBAAA,MACAryL,EAAAsyL,uBAAA,MACAtyL,EAAAuyL,sBAAA,MACAvyL,EAAAwyL,0BAAA,MACAxyL,EAAAyyL,yBAAA,MACAzyL,EAAA0yL,uBAAA,MACA1yL,EAAA2yL,wBAAA,MACA3yL,EAAA4yL,qBAAA,MACA5yL,EAAA6yL,wBAAA,MACA7yL,EAAA8yL,iBAAA,MACA9yL,EAAA+yL,wBAAA,MACA/yL,EAAAgzL,sBAAA,MACAhzL,EAAAizL,sBAAA,MACAjzL,EAAAkzL,oBAAA,MACAlzL,EAAAmzL,0BAAA,MACAnzL,EAAAozL,sBAAA,MACApzL,EAAAqzL,qBAAA,MACArzL,EAAAszL,gBAAA,MACAtzL,EAAAuzL,qBAAA,MACAvzL,EAAAwzL,oBAAA,MACAxzL,EAAAyzL,oBAAA,MACAzzL,EAAA0zL,mBAAA,MACA1zL,EAAA2zL,qBAAA,MACA3zL,EAAA4zL,oBAAA,MACA5zL,EAAA6zL,MAAA,KACA7zL,EAAA8zL,UAAA,IACA9zL,EAAA+zL,eAAA,KACA/zL,EAAAg0L,kBAAA,KACAh0L,EAAAi0L,UAAA,KACAj0L,EAAAk0L,gBAAA,KACAl0L,EAAAm0L,WAAA,KACAn0L,EAAAo0L,mBAAA,MACAp0L,EAAAq0L,kBAAA,MACAr0L,EAAAs0L,kBAAA,MACAt0L,EAAAu0L,YAAA,MACAv0L,EAAAw0L,iBAAA,MACAx0L,EAAAy0L,OAAA,IACAz0L,EAAA00L,UAAA,KACA10L,EAAA20L,UAAA,KACA30L,EAAA40L,UAAA,MACA50L,EAAA60L,WAAA,KACA70L,EAAA80L,UAAA,KACA90L,EAAA+0L,WAAA,KACA/0L,EAAAg1L,OAAA,KACAh1L,EAAAi1L,WAAA,KACAj1L,EAAAk1L,WAAA,KACAl1L,EAAAm1L,gBAAA,KACAn1L,EAAAo1L,eAAA,IACAp1L,EAAAq1L,gBAAA,KACAr1L,EAAAs1L,mBAAA,KACAt1L,EAAAu1L,gBAAA,KACAv1L,EAAAw1L,oBAAA,KACAx1L,EAAAy1L,GAAA,IACAz1L,EAAA01L,UAAA,MACA11L,EAAA21L,mBAAA,MACA31L,EAAA41L,QAAA,MACA51L,EAAA61L,KAAA,IACA71L,EAAA81L,WAAA,KACA91L,EAAA+1L,QAAA,IACA/1L,EAAAg2L,gBAAA,KACAh2L,EAAAi2L,0BAAA,KACAj2L,EAAAk2L,eAAA,KACAl2L,EAAAm2L,WAAA,MACAn2L,EAAAo2L,UAAA,KACAp2L,EAAAq2L,SAAA,KACAr2L,EAAAs2L,YAAA,KACAt2L,EAAAu2L,SAAA,KACAv2L,EAAAw2L,eAAA,KACAx2L,EAAAy2L,WAAA,KACAz2L,EAAA02L,WAAA,MACA12L,EAAA22L,YAAA,KACA32L,EAAA42L,WAAA,KACA52L,EAAA62L,aAAA,KACA72L,EAAA82L,WAAA,MACA92L,EAAA+2L,UAAA,KACA/2L,EAAAg3L,UAAA,KACAh3L,EAAAi3L,aAAA,KACAj3L,EAAAk3L,WAAA,KACAl3L,EAAAm3L,QAAA,IACAn3L,EAAAo3L,KAAA,IACAp3L,EAAAq3L,aAAA,IACAr3L,EAAAs3L,kBAAA,IACAt3L,EAAAu3L,UAAA,IACAv3L,EAAAw3L,UAAA,IACAx3L,EAAAy3L,OAAA,KACAz3L,EAAA03L,YAAA,KACA13L,EAAA23L,eAAA,MACA33L,EAAA43L,eAAA,MACA53L,EAAA63L,wBAAA,MACA73L,EAAA83L,cAAA,KACA93L,EAAA+3L,QAAA,IACA/3L,EAAAg4L,UAAA,MACAh4L,EAAAi4L,kBAAA,MACAj4L,EAAAk4L,kBAAA,MACAl4L,EAAAm4L,OAAA,IACAn4L,EAAAo4L,YAAA,KACAp4L,EAAAq4L,WAAA,MACAr4L,EAAAs4L,WAAA,KACAt4L,EAAAu4L,kBAAA,KACAv4L,EAAAw4L,eAAA,KACAx4L,EAAAy4L,mBAAA,KACAz4L,EAAA04L,gBAAA,KACA14L,EAAA24L,wBAAA,KACA34L,EAAA41B,EAAA,IACA51B,EAAA44L,WAAA,KACA54L,EAAA64L,UAAA,KACA74L,EAAA84L,OAAA,KACA94L,EAAA+4L,WAAA,KACA/4L,EAAAg5L,WAAA,KACAh5L,EAAAi5L,UAAA,MACAj5L,EAAAk5L,OAAA,IACAl5L,EAAAm5L,QAAA,KACAn5L,EAAAo5L,YAAA,IACAp5L,EAAAq5L,aAAA,IACAr5L,EAAAs5L,eAAA,IACAt5L,EAAAu5L,WAAA,KACAv5L,EAAAw5L,WAAA,KACAx5L,EAAAy5L,gBAAA,MACAz5L,EAAA05L,kBAAA,MACA15L,EAAA25L,iBAAA,MACA35L,EAAA45L,UAAA,KACA55L,EAAA65L,eAAA,MACA75L,EAAA85L,WAAA,KACA95L,EAAA+5L,QAAA,KACA/5L,EAAAg6L,YAAA,KACAh6L,EAAAi6L,YAAA,KACAj6L,EAAAk6L,aAAA,KACAl6L,EAAAm6L,IAAA,MACAn6L,EAAAo6L,WAAA,MACAp6L,EAAAq6L,OAAA,KACAr6L,EAAAs6L,UAAA,IACAt6L,EAAAoyC,EAAA,IACApyC,EAAAu6L,kBAAA,KACAv6L,EAAAw6L,UAAA,KACAx6L,EAAAy6L,OAAA,KACAz6L,EAAA06L,WAAA,KACA16L,EAAA26L,oBAAA,KACA36L,EAAA46L,OAAA,KACA56L,EAAA66L,IAAA,KACA76L,EAAA86L,UAAA,KACA96L,EAAA+6L,UAAA,MACA/6L,EAAAg7L,gBAAA,MACAh7L,EAAAi7L,eAAA,MACAj7L,EAAAk7L,UAAA,KACAl7L,EAAAm7L,iBAAA,MACAn7L,EAAAo7L,gBAAA,MACAp7L,EAAAq7L,cAAA,MACAr7L,EAAAs7L,WAAA,KACAt7L,EAAAu7L,WAAA,KACAv7L,EAAAw7L,WAAA,MACAx7L,EAAAy7L,eAAA,KACAz7L,EAAA07L,WAAA,MACA17L,EAAA27L,oBAAA,MACA37L,EAAA47L,MAAA,IACA57L,EAAA67L,iBAAA,KACA77L,EAAA87L,oBAAA,MACA97L,EAAA+7L,sBAAA,MACA/7L,EAAAg8L,oBAAA,MACAh8L,EAAAi8L,yBAAA,MACAj8L,EAAAk8L,cAAA,MACAl8L,EAAAm8L,kBAAA,KACAn8L,EAAAo8L,+BAAA,KACAp8L,EAAAq8L,gBAAA,MACAr8L,EAAAs8L,SAAA,MACAt8L,EAAAu8L,YAAA,KACAv8L,EAAAw8L,eAAA,KACAx8L,EAAAy8L,iBAAA,KACAz8L,EAAA08L,6BAAA,MACA18L,EAAA28L,yBAAA,KACA38L,EAAA48L,UAAA,MACA58L,EAAA68L,WAAA,MACA78L,EAAA88L,OAAA,IACA98L,EAAA+8L,SAAA,IACA/8L,EAAAg9L,QAAA,KACAh9L,EAAAi9L,aAAA,IACAj9L,EAAAk9L,UAAA,KACAl9L,EAAAm9L,YAAA,KACAn9L,EAAAo9L,WAAA,MACAp9L,EAAAq9L,WAAA,MACAr9L,EAAAs9L,oBAAA,MACAt9L,EAAAu9L,YAAA,KACAv9L,EAAAw9L,gBAAA,MACAx9L,EAAAy9L,aAAA,IACAz9L,EAAA09L,WAAA,KACA19L,EAAA29L,YAAA,KACA39L,EAAA49L,QAAA,KACA59L,EAAA69L,YAAA,KACA79L,EAAA89L,YAAA,KACA99L,EAAA+9L,WAAA,KACA/9L,EAAAg+L,gBAAA,MACAh+L,EAAAi+L,kBAAA,MACAj+L,EAAAk+L,iBAAA,MACAl+L,EAAAm+L,WAAA,IACAn+L,EAAAo+L,SAAA,KACAp+L,EAAAq+L,aAAA,KACAr+L,EAAAs+L,qBAAA,MACAt+L,EAAAu+L,oBAAA,MACAv+L,EAAAw+L,oBAAA,MACAx+L,EAAAy+L,cAAA,MACAz+L,EAAA0+L,mBAAA,MACA1+L,EAAA2+L,YAAA,KACA3+L,EAAA4+L,YAAA,KACA5+L,EAAA6+L,aAAA,KACA7+L,EAAA8+L,aAAA,KACA9+L,EAAA++L,WAAA,KACA/+L,EAAAg/L,MAAA,IACAh/L,EAAAi/L,eAAA,KACAj/L,EAAAk/L,UAAA,MACAl/L,EAAAm/L,WAAA,MACAn/L,EAAAo/L,WAAA,MACAp/L,EAAAq/L,oBAAA,MACAr/L,EAAAs/L,iBAAA,MACAt/L,EAAAu/L,kBAAA,MACAv/L,EAAAw/L,WAAA,MACAx/L,EAAAy/L,oBAAA,MACAz/L,EAAA0/L,mBAAA,MACA1/L,EAAA2/L,mBAAA,MACA3/L,EAAA4/L,aAAA,MACA5/L,EAAA6/L,kBAAA,MACA7/L,EAAA8/L,iBAAA,MACA9/L,EAAA+/L,YAAA,KACA//L,EAAAggM,WAAA,KACAhgM,EAAAigM,SAAA,MACAjgM,EAAAkgM,cAAA,MACAlgM,EAAAmgM,WAAA,MACAngM,EAAAogM,gBAAA,MACApgM,EAAAqgM,WAAA,MACArgM,EAAAsgM,WAAA,MACAtgM,EAAAugM,UAAA,KACAvgM,EAAAwgM,WAAA,MACAxgM,EAAAygM,oBAAA,MACAzgM,EAAA0gM,YAAA,MACA1gM,EAAA2gM,cAAA,KACA3gM,EAAA4gM,qBAAA,MACA5gM,EAAA6gM,WAAA,IACA7gM,EAAA8gM,OAAA,KACA9gM,EAAA+gM,UAAA,MACA/gM,EAAAghM,YAAA,KACAhhM,EAAAihM,SAAA,MACAjhM,EAAAkhM,QAAA,IACAlhM,EAAAmhM,WAAA,MACAnhM,EAAAohM,WAAA,MACAphM,EAAAqhM,oBAAA,MACArhM,EAAAshM,SAAA,MACAthM,EAAAuhM,SAAA,MACAvhM,EAAAjB,EAAA,IACAiB,EAAAwhM,UAAA,KACAxhM,EAAAyhM,OAAA,IACAzhM,EAAA0hM,OAAA,KACA1hM,EAAA2hM,WAAA,KACA3hM,EAAA4hM,WAAA,KACA5hM,EAAA6hM,gBAAA,KACA7hM,EAAA8hM,mBAAA,MACA9hM,EAAA+hM,6BAAA,MACA/hM,EAAAgiM,gCAAA,MACAhiM,EAAAiiM,6BAAA,MACAjiM,EAAAkiM,gCAAA,MACAliM,EAAAmiM,sBAAA,MACAniM,EAAAoiM,6BAAA,MACApiM,EAAAqiM,gCAAA,MACAriM,EAAAsiM,UAAA,KACAtiM,EAAAuiM,OAAA,IACAviM,EAAAwiM,aAAA,IACAxiM,EAAAyiM,MAAA,KACAziM,EAAA0iM,YAAA,MACA1iM,EAAA2iM,kBAAA,MACA3iM,EAAA4iM,YAAA,KACA5iM,EAAA6iM,eAAA,MACA7iM,EAAA8iM,oBAAA,MACA9iM,EAAA+iM,iBAAA,MACA/iM,EAAAgjM,qBAAA,MACAhjM,EAAAijM,qBAAA,MACAjjM,EAAAkjM,wBAAA,MACAljM,EAAAmjM,gBAAA,MACAnjM,EAAAojM,wBAAA,MACApjM,EAAAqjM,qBAAA,MACArjM,EAAAsjM,YAAA,KACAtjM,EAAAujM,KAAA,IACAvjM,EAAAwjM,MAAA,IACAxjM,EAAAyjM,UAAA,MACAzjM,EAAA0jM,OAAA,IACA1jM,EAAA2jM,SAAA,IACA3jM,EAAA4jM,QAAA,KACA5jM,EAAA6jM,iBAAA,KACA7jM,EAAA8jM,aAAA,IACA9jM,EAAA+jM,KAAA,IACA/jM,EAAAgkM,WAAA,IACAhkM,EAAAikM,UAAA,KACAjkM,EAAAkkM,gBAAA,KACAlkM,EAAAmkM,kBAAA,IACAnkM,EAAAokM,iBAAA,IACApkM,EAAAqkM,KAAA,GACArkM,EAAAskM,UAAA,KACAtkM,EAAAukM,mBAAA,KACAvkM,EAAAwkM,cAAA,MACAxkM,EAAAykM,iBAAA,KACAzkM,EAAA0kM,cAAA,KACA1kM,EAAA2kM,cAAA,KACA3kM,EAAA4kM,UAAA,MACA5kM,EAAA6kM,KAAA,IACA7kM,EAAA8kM,QAAA,KACA9kM,EAAA+kM,eAAA,IACA/kM,EAAAglM,KAAA,KACAhlM,EAAAilM,aAAA,KACAjlM,EAAAklM,GAAA,IACAllM,EAAAmlM,YAAA,KACAnlM,EAAA2sE,GAAA,MACA3sE,EAAAolM,QAAA,KACAplM,EAAAqlM,YAAA,KACArlM,EAAAslM,WAAA,KACAtlM,EAAAulM,SAAA,KACAvlM,EAAAwlM,iBAAA,KACAxlM,EAAAylM,cAAA,KACAzlM,EAAA0lM,0BAAA,KACA1lM,EAAA2lM,uBAAA,KACA3lM,EAAA4lM,aAAA,IACA5lM,EAAA6lM,WAAA,MACA7lM,EAAA8lM,SAAA,MACA9lM,EAAA+lM,YAAA,KACA/lM,EAAAgmM,WAAA,KACAhmM,EAAAimM,WAAA,IACAjmM,EAAAkmM,mBAAA,KACAlmM,EAAAmmM,UAAA,KACAnmM,EAAAomM,WAAA,KACApmM,EAAAqmM,MAAA,IACArmM,EAAAsmM,kBAAA,MACAtmM,EAAAumM,WAAA,IACAvmM,EAAAwmM,cAAA,MACAxmM,EAAAymM,QAAA,KACAzmM,EAAA0mM,OAAA,KACA1mM,EAAA2mM,OAAA,IACA3mM,EAAA4mM,QAAA,KACA5mM,EAAA6mM,UAAA,MACA7mM,EAAA8mM,QAAA,KACA9mM,EAAA+mM,OAAA,KACA/mM,EAAAgnM,gBAAA,KACAhnM,EAAAinM,aAAA,KACAjnM,EAAAknM,yBAAA,KACAlnM,EAAAmnM,sBAAA,KACAnnM,EAAAonM,SAAA,MACApnM,EAAAd,EAAA,IACAc,EAAAqnM,UAAA,KACArnM,EAAAsnM,OAAA,IACAtnM,EAAAunM,eAAA,IACAvnM,EAAAwnM,UAAA,IACAxnM,EAAAynM,aAAA,IACAznM,EAAA0nM,gBAAA,MACA1nM,EAAA2nM,OAAA,KACA3nM,EAAA4nM,OAAA,KACA5nM,EAAA6nM,WAAA,KACA7nM,EAAA8nM,WAAA,KACA9nM,EAAA+nM,eAAA,KACA/nM,EAAAgoM,mBAAA,KACAhoM,EAAAioM,WAAA,MACAjoM,EAAAkoM,uBAAA,MACAloM,EAAAmoM,wBAAA,MACAnoM,EAAAooM,gBAAA,KACApoM,EAAAqoM,yBAAA,MACAroM,EAAAsoM,iBAAA,MACAtoM,EAAAuoM,kBAAA,MACAvoM,EAAAwoM,UAAA,KACAxoM,EAAAyoM,mBAAA,MACAzoM,EAAA0oM,mBAAA,MACA1oM,EAAA2oM,eAAA,KACA3oM,EAAA4oM,kBAAA,MACA5oM,EAAA6oM,cAAA,KACA7oM,EAAA8oM,kBAAA,MACA9oM,EAAA+oM,mBAAA,MACA/oM,EAAAgpM,WAAA,KACAhpM,EAAAipM,oBAAA,MACAjpM,EAAAkpM,kBAAA,MACAlpM,EAAAmpM,mBAAA,MACAnpM,EAAAopM,WAAA,KACAppM,EAAAqpM,oBAAA,MACArpM,EAAAspM,aAAA,KACAtpM,EAAAupM,WAAA,MACAvpM,EAAAwpM,oBAAA,MACAxpM,EAAAypM,KAAA,KACAzpM,EAAA0pM,cAAA,MACA1pM,EAAA2pM,YAAA,KACA3pM,EAAA4pM,KAAA,KACA5pM,EAAA6pM,mBAAA,KACA7pM,EAAA8pM,SAAA,MACA9pM,EAAA+pM,UAAA,MACA/pM,EAAAgqM,SAAA,MACAhqM,EAAAiqM,QAAA,KACAjqM,EAAAkqM,aAAA,MACAlqM,EAAAmqM,WAAA,KACAnqM,EAAAoqM,UAAA,KACApqM,EAAAqqM,WAAA,KACArqM,EAAAsqM,gBAAA,MACAtqM,EAAAuqM,kBAAA,MACAvqM,EAAAwqM,iBAAA,MACAxqM,EAAAyqM,sBAAA,MACAzqM,EAAA0qM,uBAAA,MACA1qM,EAAA2qM,cAAA,MACA3qM,EAAA4qM,WAAA,MACA5qM,EAAA6qM,eAAA,MACA7qM,EAAA8qM,WAAA,MACA9qM,EAAA+qM,oBAAA,MACA/qM,EAAAgrM,IAAA,KACAhrM,EAAAirM,UAAA,MACAjrM,EAAAkrM,gBAAA,MACAlrM,EAAAmrM,UAAA,KACAnrM,EAAAorM,YAAA,KACAprM,EAAAqrM,aAAA,KACArrM,EAAAsrM,mBAAA,KACAtrM,EAAAurM,uBAAA,KACAvrM,EAAAwrM,iBAAA,KACAxrM,EAAAyrM,MAAA,IACAzrM,EAAA0rM,UAAA,MACA1rM,EAAA2rM,2BAAA,MACA3rM,EAAA4rM,OAAA,IACA5rM,EAAA6rM,mBAAA,MACA7rM,EAAA8rM,kBAAA,MACA9rM,EAAA+rM,kBAAA,MACA/rM,EAAAgsM,YAAA,MACAhsM,EAAAisM,mBAAA,MACAjsM,EAAAksM,iBAAA,MACAlsM,EAAAmsM,iBAAA,MACAnsM,EAAAosM,gBAAA,MACApsM,EAAAqsM,WAAA,MACArsM,EAAAssM,WAAA,MACAtsM,EAAAusM,oBAAA,MACAvsM,EAAAwsM,MAAA,KACAxsM,EAAAysM,cAAA,IACAzsM,EAAA0sM,YAAA,KACA1sM,EAAA2sM,SAAA,IACA3sM,EAAA4sM,UAAA,KACA5sM,EAAA6sM,OAAA,KACA7sM,EAAA8sM,gBAAA,MACA9sM,EAAA+sM,WAAA,MACA/sM,EAAAgtM,eAAA,IACAhtM,EAAAitM,SAAA,MACAjtM,EAAAktM,cAAA,MACAltM,EAAAmtM,WAAA,MACAntM,EAAAotM,gBAAA,MACAptM,EAAAqtM,WAAA,MACArtM,EAAAstM,WAAA,MACAttM,EAAAutM,WAAA,MACAvtM,EAAAwtM,oBAAA,MACAxtM,EAAAytM,UAAA,MACAztM,EAAA0tM,SAAA,KACA1tM,EAAA2tM,aAAA,MACA3tM,EAAA4tM,oBAAA,MACA5tM,EAAA6tM,OAAA,KACA7tM,EAAA8tM,UAAA,MACA9tM,EAAA+tM,SAAA,MACA/tM,EAAAguM,UAAA,MACAhuM,EAAAiuM,QAAA,IACAjuM,EAAA8mE,GAAA,IACA9mE,EAAAkuM,IAAA,IACAluM,EAAAmuM,UAAA,MACAnuM,EAAAouM,YAAA,KACApuM,EAAAquM,SAAA,KACAruM,EAAAsuM,UAAA,MACAtuM,EAAAuuM,QAAA,IACAvuM,EAAAwuM,UAAA,MACAxuM,EAAAyuM,WAAA,MACAzuM,EAAA0uM,WAAA,MACA1uM,EAAA2uM,oBAAA,MACA3uM,EAAA4uM,UAAA,MACA5uM,EAAA6uM,SAAA,IACA7uM,EAAA8uM,UAAA,MACA9uM,EAAA+uM,YAAA,KACA/uM,EAAAgvM,gBAAA,KACAhvM,EAAAivM,YAAA,KACAjvM,EAAAkvM,eAAA,KACAlvM,EAAAmvM,cAAA,KACAnvM,EAAAovM,eAAA,KACApvM,EAAAqvM,UAAA,MACArvM,EAAAsvM,UAAA,MACAtvM,EAAAuvM,UAAA,MACAvvM,EAAAwvM,aAAA,MACAxvM,EAAAyvM,SAAA,MACAzvM,EAAA0vM,aAAA,MACA1vM,EAAA2vM,SAAA,MACA3vM,EAAAO,EAAA,IACAP,EAAA4vM,UAAA,KACA5vM,EAAA6vM,MAAA,KACA7vM,EAAA8vM,OAAA,IACA9vM,EAAA+vM,OAAA,KACA/vM,EAAAgwM,WAAA,KACAhwM,EAAAiwM,WAAA,KACAjwM,EAAAkwM,WAAA,MACAlwM,EAAAmwM,WAAA,MACAnwM,EAAAowM,oBAAA,MACApwM,EAAAqwM,YAAA,IACArwM,EAAAswM,SAAA,MACAtwM,EAAAuwM,UAAA,MACAvwM,EAAAwwM,QAAA,IACAxwM,EAAAywM,OAAA,IACAzwM,EAAA0wM,SAAA,IACA1wM,EAAA2wM,QAAA,KACA3wM,EAAA4wM,iBAAA,KACA5wM,EAAA6wM,aAAA,IACA7wM,EAAA8wM,WAAA,KACA9wM,EAAA+wM,UAAA,KACA/wM,EAAAgxM,WAAA,MACAhxM,EAAAixM,WAAA,MACAjxM,EAAAkxM,oBAAA,MACAlxM,EAAAmxM,cAAA,KACAnxM,EAAAoxM,SAAA,MACApxM,EAAAqxM,WAAA,KACArxM,EAAAsxM,QAAA,KACAtxM,EAAAuxM,YAAA,KACAvxM,EAAAwxM,YAAA,KACAxxM,EAAAyxM,WAAA,KACAzxM,EAAA0xM,UAAA,MACA1xM,EAAA2xM,UAAA,IACA3xM,EAAA4xM,eAAA,IACA5xM,EAAA6xM,mBAAA,MACA7xM,EAAA8xM,kBAAA,MACA9xM,EAAA+xM,iBAAA,MACA/xM,EAAAgyM,kBAAA,MACAhyM,EAAAiyM,iBAAA,MACAjyM,EAAAkyM,YAAA,MACAlyM,EAAAmyM,mBAAA,MACAnyM,EAAAoyM,iBAAA,MACApyM,EAAAqyM,gBAAA,MACAryM,EAAAsyM,kBAAA,MACAtyM,EAAAuyM,WAAA,MACAvyM,EAAAwyM,WAAA,MACAxyM,EAAAyyM,oBAAA,MACAzyM,EAAA0yM,iBAAA,MACA1yM,EAAA2yM,aAAA,KACA3yM,EAAA4yM,KAAA,GACA5yM,EAAA6yM,WAAA,KACA7yM,EAAA8yM,YAAA,KACA9yM,EAAA+yM,WAAA,KACA/yM,EAAAgzM,2BAAA,MACAhzM,EAAAizM,SAAA,KACAjzM,EAAAkzM,aAAA,KACAlzM,EAAAmzM,aAAA,KACAnzM,EAAAozM,eAAA,KACApzM,EAAAqzM,aAAA,MACArzM,EAAAszM,qBAAA,MACAtzM,EAAAuzM,aAAA,KACAvzM,EAAAwzM,cAAA,MACAxzM,EAAAyzM,aAAA,MACAzzM,EAAA0zM,UAAA,KACA1zM,EAAA2zM,WAAA,KACA3zM,EAAA4zM,YAAA,KACA5zM,EAAA6zM,UAAA,KACA7zM,EAAA8zM,aAAA,KACA9zM,EAAA+zM,eAAA,KACA/zM,EAAAg0M,cAAA,KACAh0M,EAAAi0M,eAAA,KACAj0M,EAAAk0M,SAAA,KACAl0M,EAAAm0M,GAAA,IACAn0M,EAAAo0M,YAAA,KACAp0M,EAAAq0M,UAAA,MACAr0M,EAAAs0M,mBAAA,MACAt0M,EAAAu0M,cAAA,IACAv0M,EAAAw0M,WAAA,KACAx0M,EAAAy0M,WAAA,MACAz0M,EAAA00M,SAAA,MACA10M,EAAA20M,WAAA,KACA30M,EAAA40M,QAAA,KACA50M,EAAA60M,YAAA,KACA70M,EAAA80M,YAAA,KACA90M,EAAA+0M,SAAA,KACA/0M,EAAAg1M,WAAA,MACAh1M,EAAAi1M,WAAA,MACAj1M,EAAAk1M,oBAAA,MACAl1M,EAAAm1M,iBAAA,IACAn1M,EAAAo1M,UAAA,KACAp1M,EAAAq1M,SAAA,KACAr1M,EAAAs1M,WAAA,KACAt1M,EAAAu1M,gBAAA,MACAv1M,EAAAw1M,iBAAA,KACAx1M,EAAAy1M,sBAAA,MACAz1M,EAAA01M,kBAAA,MACA11M,EAAA21M,sBAAA,MACA31M,EAAA41M,uBAAA,MACA51M,EAAA61M,iBAAA,MACA71M,EAAA81M,sBAAA,MACA91M,EAAA+1M,uBAAA,MACA/1M,EAAAg2M,oBAAA,MACAh2M,EAAAi2M,YAAA,KACAj2M,EAAAk2M,WAAA,KACAl2M,EAAAm2M,aAAA,KACAn2M,EAAAo2M,SAAA,KACAp2M,EAAAq2M,WAAA,KACAr2M,EAAAs2M,mBAAA,KACAt2M,EAAAu2M,kBAAA,KACAv2M,EAAAw2M,aAAA,KACAx2M,EAAAy2M,QAAA,KACAz2M,EAAA02M,gBAAA,KACA12M,EAAA22M,YAAA,KACA32M,EAAA42M,YAAA,KACA52M,EAAA62M,UAAA,KACA72M,EAAA82M,YAAA,KACA92M,EAAA+2M,YAAA,KACA/2M,EAAAg3M,YAAA,KACAh3M,EAAAi3M,OAAA,KACAj3M,EAAAk3M,SAAA,MACAl3M,EAAAm3M,UAAA,KACAn3M,EAAAo3M,OAAA,IACAp3M,EAAAunG,GAAA,IACAvnG,EAAAq3M,WAAA,MACAr3M,EAAAs3M,WAAA,MACAt3M,EAAAu3M,oBAAA,MACAv3M,EAAAw3M,aAAA,KACAx3M,EAAAy3M,UAAA,KACAz3M,EAAA03M,cAAA,KACA13M,EAAA23M,cAAA,KACA33M,EAAA43M,WAAA,GACA53M,EAAA63M,oBAAA,MACA73M,EAAA83M,gBAAA,MACA93M,EAAA+3M,iBAAA,IACA/3M,EAAAg4M,sBAAA,IACAh4M,EAAAi4M,OAAA,KACAj4M,EAAAk4M,IAAA,KACAl4M,EAAAm4M,UAAA,MACAn4M,EAAAo4M,gBAAA,MACAp4M,EAAAq4M,UAAA,KACAr4M,EAAAs4M,SAAA,MACAt4M,EAAAu4M,SAAA,MACAv4M,EAAAw4M,WAAA,KACAx4M,EAAAy4M,QAAA,KACAz4M,EAAA04M,YAAA,KACA14M,EAAA24M,YAAA,KACA34M,EAAAT,EAAA,IACAS,EAAA44M,OAAA,IACA54M,EAAA64M,SAAA,KACA74M,EAAA84M,QAAA,IACA94M,EAAA+4M,gBAAA,KACA/4M,EAAAg5M,wBAAA,KACAh5M,EAAAi5M,SAAA,KACAj5M,EAAAk5M,UAAA,MACAl5M,EAAAm5M,OAAA,IACAn5M,EAAAo5M,YAAA,KACAp5M,EAAAq5M,gBAAA,KACAr5M,EAAAs5M,qBAAA,KACAt5M,EAAAu5M,yBAAA,KACAv5M,EAAAw5M,OAAA,IACAx5M,EAAAy5M,QAAA,KACAz5M,EAAA05M,YAAA,IACA15M,EAAA25M,iBAAA,KACA35M,EAAA45M,oBAAA,KACA55M,EAAA65M,iBAAA,KACA75M,EAAA85M,qBAAA,KACA95M,EAAA+5M,iBAAA,KACA/5M,EAAAg6M,UAAA,KACAh6M,EAAAi6M,UAAA,IACAj6M,EAAAk6M,UAAA,IACAl6M,EAAAm6M,MAAA,KACAn6M,EAAAo6M,UAAA,IACAp6M,EAAAq6M,kBAAA,KACAr6M,EAAAs6M,UAAA,KACAt6M,EAAAu6M,GAAA,IACAv6M,EAAAw6M,SAAA,MACAx6M,EAAAy6M,OAAA,IACAz6M,EAAA06M,UAAA,IACA16M,EAAA26M,OAAA,IACA36M,EAAA46M,UAAA,KACA56M,EAAA66M,WAAA,KACA76M,EAAA86M,UAAA,MACA96M,EAAA+6M,WAAA,KACA/6M,EAAAg7M,MAAA,IACAh7M,EAAAi7M,WAAA,KACAj7M,EAAAk7M,cAAA,KACAl7M,EAAAm7M,WAAA,KACAn7M,EAAAo7M,eAAA,KACAp7M,EAAAq7M,WAAA,KACAr7M,EAAAs7M,cAAA,IACAt7M,EAAAu7M,GAAA,IACAv7M,EAAAw7M,eAAA,IACAx7M,EAAAy7M,UAAA,MACAz7M,EAAA07M,mBAAA,MACA17M,EAAA27M,QAAA,MACA37M,EAAA47M,UAAA,KACA57M,EAAA67M,QAAA,IACA77M,EAAA87M,aAAA,KACA97M,EAAA+7M,aAAA,KACA/7M,EAAAg8M,OAAA,KACAh8M,EAAAi8M,MAAA,IACAj8M,EAAAk8M,OAAA,IACAl8M,EAAAm8M,cAAA,KACAn8M,EAAAo8M,iBAAA,IACAp8M,EAAAq8M,mBAAA,KACAr8M,EAAAs8M,mBAAA,KACAt8M,EAAAu8M,WAAA,IACAv8M,EAAAw8M,WAAA,KACAx8M,EAAAy8M,QAAA,IACAz8M,EAAA08M,aAAA,IACA18M,EAAA28M,WAAA,MACA38M,EAAA48M,IAAA,GACA58M,EAAA68M,UAAA,KACA78M,EAAA88M,WAAA,KACA98M,EAAA+8M,UAAA,KACA/8M,EAAAg9M,0BAAA,MACAh9M,EAAAi9M,QAAA,KACAj9M,EAAAk9M,eAAA,KACAl9M,EAAAm9M,UAAA,KACAn9M,EAAAo9M,UAAA,MACAp9M,EAAAq9M,YAAA,KACAr9M,EAAAs9M,YAAA,KACAt9M,EAAAu9M,cAAA,KACAv9M,EAAAw9M,QAAA,IACAx9M,EAAAy9M,YAAA,MACAz9M,EAAA09M,oBAAA,MACA19M,EAAA29M,YAAA,KACA39M,EAAA49M,aAAA,MACA59M,EAAA69M,oBAAA,KACA79M,EAAA89M,YAAA,MACA99M,EAAA+9M,SAAA,KACA/9M,EAAAg+M,UAAA,KACAh+M,EAAAi+M,WAAA,KACAj+M,EAAAk+M,WAAA,IACAl+M,EAAAm+M,SAAA,KACAn+M,EAAAo+M,YAAA,IACAp+M,EAAAq+M,QAAA,KACAr+M,EAAAs+M,SAAA,KACAt+M,EAAAu+M,QAAA,IACAv+M,EAAAw+M,cAAA,IACAx+M,EAAAy+M,WAAA,KACAz+M,EAAA0+M,gBAAA,KACA1+M,EAAA2+M,MAAA,IACA3+M,EAAA4+M,OAAA,KACA5+M,EAAA6+M,WAAA,KACA7+M,EAAAmnF,OAAA,KACAnnF,EAAA8+M,YAAA,IACA9+M,EAAA++M,aAAA,IACA/+M,EAAAg/M,WAAA,KACAh/M,EAAAi/M,WAAA,KACAj/M,EAAAk/M,oBAAA,KACAl/M,EAAAm/M,OAAA,IACAn/M,EAAAo/M,YAAA,IACAp/M,EAAAq/M,eAAA,MACAr/M,EAAAs/M,eAAA,MACAt/M,EAAAu/M,wBAAA,MACAv/M,EAAAw/M,aAAA,IACAx/M,EAAAy/M,UAAA,MACAz/M,EAAA0/M,WAAA,KACA1/M,EAAA2/M,OAAA,IACA3/M,EAAA4/M,YAAA,KACA5/M,EAAA6/M,eAAA,KACA7/M,EAAA8/M,WAAA,MACA9/M,EAAA+/M,SAAA,KACA//M,EAAAggN,mBAAA,MACAhgN,EAAAigN,YAAA,IACAjgN,EAAAkgN,eAAA,MACAlgN,EAAAmgN,gBAAA,MACAngN,EAAAogN,aAAA,MACApgN,EAAAqgN,UAAA,IACArgN,EAAAsgN,kBAAA,KACAtgN,EAAAugN,eAAA,KACAvgN,EAAAwgN,mBAAA,KACAxgN,EAAAY,EAAA,IACAZ,EAAAygN,aAAA,MACAzgN,EAAA0gN,eAAA,MACA1gN,EAAA2gN,UAAA,KACA3gN,EAAA4gN,OAAA,KACA5gN,EAAA6gN,OAAA,KACA7gN,EAAA8gN,SAAA,KACA9gN,EAAA+gN,OAAA,KACA/gN,EAAAghN,WAAA,KACAhhN,EAAAihN,WAAA,KACAjhN,EAAAkhN,WAAA,MACAlhN,EAAAmhN,cAAA,KACAnhN,EAAAohN,WAAA,MACAphN,EAAAqhN,0BAAA,KACArhN,EAAAshN,iBAAA,KACAthN,EAAAuhN,cAAA,MACAvhN,EAAAwhN,UAAA,IACAxhN,EAAAyhN,SAAA,KACAzhN,EAAA0hN,UAAA,GACA1hN,EAAA2hN,sBAAA,MACA3hN,EAAA4hN,YAAA,MACA5hN,EAAA6hN,YAAA,MACA7hN,EAAA8hN,kBAAA,KACA9hN,EAAA+hN,mBAAA,MACA/hN,EAAAgiN,eAAA,MACAhiN,EAAAiiN,kBAAA,KACAjiN,EAAAkiN,YAAA,MACAliN,EAAAmiN,kBAAA,MACAniN,EAAAoiN,WAAA,GACApiN,EAAAqiN,uBAAA,MACAriN,EAAAsiN,aAAA,MACAtiN,EAAAuiN,aAAA,MACAviN,EAAAwiN,mBAAA,KACAxiN,EAAAyiN,oBAAA,MACAziN,EAAA0iN,gBAAA,MACA1iN,EAAA2iN,mBAAA,KACA3iN,EAAA4iN,aAAA,MACA5iN,EAAA6iN,mBAAA,MACA7iN,EAAA8iN,YAAA,KACA9iN,EAAA+iN,YAAA,KACA/iN,EAAAgjN,aAAA,KACAhjN,EAAAijN,SAAA,MACAjjN,EAAAkjN,MAAA,KACAljN,EAAAmjN,QAAA,KACAnjN,EAAAojN,QAAA,KACApjN,EAAAqjN,QAAA,KACArjN,EAAAsjN,YAAA,KACAtjN,EAAAujN,kBAAA,KACAvjN,EAAAwjN,mBAAA,KACAxjN,EAAAyjN,gBAAA,KACAzjN,EAAA0jN,YAAA,KACA1jN,EAAA2jN,UAAA,MACA3jN,EAAA4jN,QAAA,KACA5jN,EAAA6jN,WAAA,KACA7jN,EAAA8jN,GAAA,KACA9jN,EAAA+jN,WAAA,KACA/jN,EAAAgkN,SAAA,MACAhkN,EAAAikN,eAAA,MACAjkN,EAAAkkN,YAAA,MACAlkN,EAAAmkN,oBAAA,MACAnkN,EAAAokN,UAAA,KACApkN,EAAAqkN,YAAA,KACArkN,EAAAskN,SAAA,KACAtkN,EAAAukN,eAAA,MACAvkN,EAAAwkN,iBAAA,MACAxkN,EAAAykN,WAAA,MACAzkN,EAAA0kN,gBAAA,MACA1kN,EAAA2kN,WAAA,MACA3kN,EAAA4kN,qBAAA,KACA5kN,EAAA6kN,aAAA,MACA7kN,EAAA8kN,QAAA,GACA9kN,EAAA+kN,cAAA,KACA/kN,EAAAglN,iBAAA,MACAhlN,EAAAilN,aAAA,MACAjlN,EAAAklN,OAAA,GACAllN,EAAAmlN,eAAA,KACAnlN,EAAAolN,eAAA,IACAplN,EAAAqlN,gBAAA,MACArlN,EAAAslN,eAAA,MACAtlN,EAAAulN,gBAAA,MACAvlN,EAAAwlN,YAAA,MACAxlN,EAAAylN,eAAA,MACAzlN,EAAA0lN,oBAAA,IACA1lN,EAAA2lN,cAAA,KACA3lN,EAAA4lN,YAAA,KACA5lN,EAAA6lN,OAAA,KACA7lN,EAAA8lN,SAAA,MACA9lN,EAAA+lN,WAAA,KACA/lN,EAAAgmN,QAAA,KACAhmN,EAAAimN,YAAA,KACAjmN,EAAAkmN,YAAA,KACAlmN,EAAAmmN,IAAA,IACAnmN,EAAAomN,KAAA,IACApmN,EAAAqmN,qBAAA,MACArmN,EAAAsmN,oBAAA,MACAtmN,EAAAumN,oBAAA,MACAvmN,EAAAwmN,cAAA,MACAxmN,EAAAymN,mBAAA,MACAzmN,EAAA0mN,SAAA,IACA1mN,EAAA2mN,YAAA,KACA3mN,EAAA4mN,eAAA,IACA5mN,EAAA6mN,MAAA,IACA7mN,EAAA8mN,YAAA,KACA9mN,EAAA+mN,aAAA,KACA/mN,EAAAgnN,eAAA,KACAhnN,EAAAinN,GAAA,IACAjnN,EAAAknN,mBAAA,MACAlnN,EAAAmnN,kBAAA,MACAnnN,EAAAonN,iBAAA,MACApnN,EAAAqnN,kBAAA,MACArnN,EAAAsnN,kBAAA,MACAtnN,EAAAunN,YAAA,MACAvnN,EAAAwnN,iBAAA,MACAxnN,EAAAynN,sBAAA,MACAznN,EAAA0nN,gBAAA,MACA1nN,EAAA2nN,sBAAA,MACA3nN,EAAA4nN,mBAAA,MACA5nN,EAAA6nN,kBAAA,MACA7nN,EAAA8nN,WAAA,MACA9nN,EAAA+nN,WAAA,MACA/nN,EAAAgoN,cAAA,IACAhoN,EAAAioN,aAAA,KACAjoN,EAAAkoN,KAAA,GACAloN,EAAAmoN,aAAA,IACAnoN,EAAAooN,WAAA,KACApoN,EAAAqoN,UAAA,IACAroN,EAAAsoN,QAAA,IACAtoN,EAAAuoN,cAAA,MACAvoN,EAAAwoN,UAAA,MACAxoN,EAAAyoN,aAAA,KACAzoN,EAAA0oN,WAAA,MACA1oN,EAAA2oN,SAAA,MACA3oN,EAAA4oN,WAAA,MACA5oN,EAAA6oN,uBAAA,KACA7oN,EAAA8oN,uBAAA,KACA9oN,EAAA+oN,wBAAA,KACA/oN,EAAAgpN,qBAAA,KACAhpN,EAAAipN,WAAA,MACAjpN,EAAAkpN,UAAA,KACAlpN,EAAAmpN,WAAA,MACAnpN,EAAAopN,eAAA,MACAppN,EAAAqpN,OAAA,KACArpN,EAAAspN,SAAA,KACAtpN,EAAAupN,aAAA,KACAvpN,EAAAwpN,SAAA,IACAxpN,EAAAypN,cAAA,KACAzpN,EAAA0pN,QAAA,KACA1pN,EAAA2pN,WAAA,KACA3pN,EAAA4pN,cAAA,MACA5pN,EAAA6pN,UAAA,KACA7pN,EAAA8pN,aAAA,KACA9pN,EAAA+pN,eAAA,KACA/pN,EAAAgqN,WAAA,KACAhqN,EAAAiqN,aAAA,KACAjqN,EAAAkqN,IAAA,IACAlqN,EAAAmqN,YAAA,KACAnqN,EAAAoqN,yBAAA,KACApqN,EAAAqqN,SAAA,MACArqN,EAAAsqN,WAAA,MACAtqN,EAAAuqN,WAAA,MACAvqN,EAAAwqN,SAAA,MACAxqN,EAAAyqN,SAAA,MACAzqN,EAAAq1C,EAAA,IACAr1C,EAAA0qN,OAAA,KACA1qN,EAAA2qN,YAAA,KACA3qN,EAAA4qN,UAAA,KACA5qN,EAAA6qN,eAAA,MACA7qN,EAAA8qN,iBAAA,MACA9qN,EAAA+qN,gBAAA,MACA/qN,EAAAgrN,OAAA,KACAhrN,EAAAirN,SAAA,KACAjrN,EAAAkrN,SAAA,KACAlrN,EAAAmrN,SAAA,KACAnrN,EAAAorN,SAAA,KACAprN,EAAAqrN,SAAA,KACArrN,EAAAsrN,SAAA,KACAtrN,EAAAurN,SAAA,KACAvrN,EAAAwrN,aAAA,KACAxrN,EAAAyrN,mBAAA,KACAzrN,EAAA0rN,kBAAA,KACA1rN,EAAA2rN,wBAAA,KACA3rN,EAAA4rN,yBAAA,KACA5rN,EAAA6rN,sBAAA,KACA7rN,EAAA8rN,oBAAA,KACA9rN,EAAA+rN,iBAAA,KACA/rN,EAAAgsN,iBAAA,KACAhsN,EAAAisN,UAAA,MACAjsN,EAAAksN,QAAA,KACAlsN,EAAAmsN,MAAA,IACAnsN,EAAAosN,WAAA,MACApsN,EAAAqsN,IAAA,KACArsN,EAAAssN,UAAA,MACAtsN,EAAAusN,gBAAA,MACAvsN,EAAAwsN,UAAA,KACAxsN,EAAAysN,OAAA,KACAzsN,EAAA0sN,YAAA,KACA1sN,EAAA2sN,OAAA,KACA3sN,EAAA4sN,SAAA,KACA5sN,EAAA6sN,SAAA,KACA7sN,EAAA8sN,SAAA,KACA9sN,EAAA+sN,aAAA,KACA/sN,EAAAgtN,mBAAA,KACAhtN,EAAAitN,oBAAA,KACAjtN,EAAAktN,iBAAA,KACAltN,EAAAmtN,SAAA,GACAntN,EAAAotN,eAAA,KACAptN,EAAAqtN,iBAAA,KACArtN,EAAAstN,aAAA,IACAttN,EAAAutN,kBAAA,MACAvtN,EAAAwtN,cAAA,IACAxtN,EAAAytN,kBAAA,MACAztN,EAAA0tN,cAAA,MACA1tN,EAAA2tN,SAAA,GACA3tN,EAAA4tN,aAAA,KACA5tN,EAAA6tN,aAAA,KACA7tN,EAAA8tN,kBAAA,MACA9tN,EAAA+tN,cAAA,MACA/tN,EAAAguN,sBAAA,MACAhuN,EAAAiuN,cAAA,KACAjuN,EAAAkuN,UAAA,KACAluN,EAAAmuN,kBAAA,KACAnuN,EAAAouN,cAAA,KACApuN,EAAAquN,WAAA,KACAruN,EAAAsuN,YAAA,IACAtuN,EAAAuuN,eAAA,KACAvuN,EAAAwuN,YAAA,GACAxuN,EAAAyuN,qBAAA,MACAzuN,EAAAJ,EAAA,IACAI,EAAA0uN,WAAA,KACA1uN,EAAA2uN,UAAA,KACA3uN,EAAA4uN,OAAA,IACA5uN,EAAA6uN,OAAA,KACA7uN,EAAA8uN,QAAA,KACA9uN,EAAA+uN,UAAA,MACA/uN,EAAAgvN,eAAA,MACAhvN,EAAAivN,sBAAA,MACAjvN,EAAAkvN,UAAA,MACAlvN,EAAAmvN,KAAA,KACAnvN,EAAAovN,WAAA,KACApvN,EAAAqvN,WAAA,KACArvN,EAAAsvN,WAAA,KACAtvN,EAAAuvN,WAAA,MACAvvN,EAAAwvN,WAAA,MACAxvN,EAAAyvN,oBAAA,MACAzvN,EAAA0vN,uBAAA,KACA1vN,EAAA2vN,wBAAA,KACA3vN,EAAA4vN,SAAA,IACA5vN,EAAA6vN,MAAA,KACA7vN,EAAA8vN,UAAA,MACA9vN,EAAA+vN,OAAA,IACA/vN,EAAAgwN,SAAA,IACAhwN,EAAAiwN,QAAA,KACAjwN,EAAAkwN,aAAA,IACAlwN,EAAAmwN,UAAA,IACAnwN,EAAAowN,WAAA,KACApwN,EAAAqwN,UAAA,KACArwN,EAAAswN,gBAAA,KACAtwN,EAAAuwN,cAAA,KACAvwN,EAAAwwN,aAAA,KACAxwN,EAAAywN,eAAA,KACAzwN,EAAA0wN,WAAA,IACA1wN,EAAA2wN,aAAA,MACA3wN,EAAA4wN,cAAA,MACA5wN,EAAA6wN,UAAA,KACA7wN,EAAA8wN,YAAA,KACA9wN,EAAA+wN,eAAA,MACA/wN,EAAAgxN,WAAA,MACAhxN,EAAAixN,WAAA,MACAjxN,EAAAkxN,oBAAA,MACAlxN,EAAAmxN,KAAA,KACAnxN,EAAAoxN,iBAAA,MACApxN,EAAAqxN,WAAA,KACArxN,EAAAsxN,cAAA,KACAtxN,EAAAuxN,YAAA,KACAvxN,EAAAwxN,mBAAA,KACAxxN,EAAAyxN,cAAA,KACAzxN,EAAA0xN,UAAA,IACA1xN,EAAA2xN,kBAAA,IACA3xN,EAAA4xN,WAAA,KACA5xN,EAAA6xN,QAAA,KACA7xN,EAAA8xN,IAAA,IACA9xN,EAAA+xN,MAAA,IACA/xN,EAAAgyN,YAAA,IACAhyN,EAAAiyN,oBAAA,IACAjyN,EAAAkyN,eAAA,KACAlyN,EAAAmyN,cAAA,IACAnyN,EAAAoyN,mBAAA,MACApyN,EAAAqyN,kBAAA,MACAryN,EAAAsyN,kBAAA,MACAtyN,EAAAuyN,iBAAA,MACAvyN,EAAAwyN,kBAAA,MACAxyN,EAAAyyN,sBAAA,MACAzyN,EAAA0yN,YAAA,MACA1yN,EAAA2yN,iBAAA,MACA3yN,EAAA4yN,mBAAA,MACA5yN,EAAA6yN,iBAAA,MACA7yN,EAAA8yN,mBAAA,MACA9yN,EAAA+yN,iBAAA,MACA/yN,EAAAgzN,qBAAA,MACAhzN,EAAAizN,gBAAA,MACAjzN,EAAAkzN,mBAAA,MACAlzN,EAAAmzN,kBAAA,MACAnzN,EAAAozN,uBAAA,MACApzN,EAAAqzN,WAAA,KACArzN,EAAAszN,kBAAA,IACAtzN,EAAAuzN,cAAA,KACAvzN,EAAAwzN,WAAA,MACAxzN,EAAAyzN,WAAA,MACAzzN,EAAA0zN,oBAAA,MACA1zN,EAAA2zN,KAAA,IACA3zN,EAAA4zN,aAAA,IACA5zN,EAAA6zN,QAAA,IACA7zN,EAAA8zN,aAAA,IACA9zN,EAAA+zN,qBAAA,KACA/zN,EAAAg0N,qBAAA,IACAh0N,EAAAi0N,qBAAA,IACAj0N,EAAAk0N,cAAA,IACAl0N,EAAAm0N,sBAAA,IACAn0N,EAAAo0N,sBAAA,IACAp0N,EAAAq0N,eAAA,IACAr0N,EAAAs0N,cAAA,MACAt0N,EAAAu0N,WAAA,KACAv0N,EAAAw0N,SAAA,IACAx0N,EAAAy0N,eAAA,IACAz0N,EAAA00N,WAAA,MACA10N,EAAA20N,WAAA,MACA30N,EAAA40N,WAAA,MACA50N,EAAA60N,oBAAA,MACA70N,EAAA80N,UAAA,KACA90N,EAAA+0N,OAAA,KACA/0N,EAAAg1N,WAAA,KACAh1N,EAAAi1N,QAAA,KACAj1N,EAAAk1N,YAAA,KACAl1N,EAAAm1N,WAAA,KACAn1N,EAAAo1N,gBAAA,MACAp1N,EAAAq1N,iBAAA,KACAr1N,EAAAs1N,cAAA,KACAt1N,EAAAu1N,kBAAA,KACAv1N,EAAAw1N,0BAAA,KACAx1N,EAAAy1N,uBAAA,KACAz1N,EAAA01N,2BAAA,KACA11N,EAAA21N,UAAA,MACA31N,EAAA41N,QAAA,KACA51N,EAAA61N,QAAA,IACA71N,EAAA81N,gBAAA,IACA91N,EAAA+1N,WAAA,MACA/1N,EAAAg2N,WAAA,MACAh2N,EAAAi2N,oBAAA,MACAj2N,EAAAk2N,iBAAA,KACAl2N,EAAAm2N,iBAAA,KACAn2N,EAAAo2N,OAAA,MACAp2N,EAAAq2N,OAAA,KACAr2N,EAAAs2N,gBAAA,KACAt2N,EAAAu2N,aAAA,KACAv2N,EAAAw2N,iBAAA,KACAx2N,EAAAy2N,yBAAA,KACAz2N,EAAA02N,sBAAA,KACA12N,EAAA22N,0BAAA,KACA32N,EAAAa,EAAA,IACAb,EAAA42N,UAAA,KACA52N,EAAA62N,OAAA,IACA72N,EAAA82N,gBAAA,KACA92N,EAAA+2N,UAAA,KACA/2N,EAAAg3N,OAAA,KACAh3N,EAAAi3N,eAAA,MACAj3N,EAAAk3N,iBAAA,MACAl3N,EAAAm3N,gBAAA,MACAn3N,EAAAo3N,WAAA,KACAp3N,EAAAq3N,WAAA,KACAr3N,EAAAs3N,WAAA,MACAt3N,EAAAu3N,WAAA,MACAv3N,EAAAw3N,oBAAA,MACAx3N,EAAAy3N,gCAAA,MACAz3N,EAAA03N,OAAA,KACA13N,EAAA23N,aAAA,MACA33N,EAAA43N,mBAAA,MACA53N,EAAA63N,aAAA,KACA73N,EAAA83N,WAAA,KACA93N,EAAA+3N,WAAA,KACA/3N,EAAAg4N,mBAAA,KACAh4N,EAAAi4N,kBAAA,KACAj4N,EAAAk4N,WAAA,KACAl4N,EAAAm4N,UAAA,KACAn4N,EAAAo4N,UAAA,KACAp4N,EAAAq4N,eAAA,MACAr4N,EAAAs4N,WAAA,KACAt4N,EAAAu4N,cAAA,MACAv4N,EAAAw4N,UAAA,KACAx4N,EAAAy4N,UAAA,KACAz4N,EAAA04N,gBAAA,MACA14N,EAAA24N,YAAA,KACA34N,EAAA44N,eAAA,MACA54N,EAAA64N,WAAA,KACA74N,EAAA84N,UAAA,KACA94N,EAAA+4N,WAAA,KACA/4N,EAAAg5N,UAAA,MACAh5N,EAAAi5N,OAAA,IACAj5N,EAAAk5N,gBAAA,KACAl5N,EAAAm5N,SAAA,IACAn5N,EAAAo5N,MAAA,IACAp5N,EAAAq5N,cAAA,KACAr5N,EAAAs5N,sBAAA,KACAt5N,EAAAu5N,UAAA,IACAv5N,EAAAw5N,QAAA,KACAx5N,EAAAy5N,YAAA,IACAz5N,EAAA05N,aAAA,IACA15N,EAAA25N,WAAA,KACA35N,EAAA45N,UAAA,KACA55N,EAAA65N,mBAAA,KACA75N,EAAA85N,gBAAA,IACA95N,EAAA+kB,OAAA,KACA/kB,EAAA+5N,kBAAA,IACA/5N,EAAAg6N,QAAA,IACAh6N,EAAAi6N,WAAA,KACAj6N,EAAAk6N,gBAAA,MACAl6N,EAAAm6N,kBAAA,MACAn6N,EAAAo6N,iBAAA,MACAp6N,EAAAq6N,MAAA,KACAr6N,EAAAs6N,QAAA,KACAt6N,EAAAu6N,QAAA,KACAv6N,EAAAw6N,QAAA,KACAx6N,EAAAy6N,YAAA,KACAz6N,EAAA06N,kBAAA,KACA16N,EAAA26N,mBAAA,KACA36N,EAAA46N,cAAA,KACA56N,EAAA66N,gBAAA,KACA76N,EAAA86N,YAAA,KACA96N,EAAA+6N,WAAA,MACA/6N,EAAAg7N,WAAA,MACAh7N,EAAAi7N,oBAAA,MACAj7N,EAAAk7N,UAAA,GACAl7N,EAAAm7N,gBAAA,KACAn7N,EAAAo7N,mBAAA,MACAp7N,EAAAq7N,eAAA,MACAr7N,EAAAs7N,mBAAA,MACAt7N,EAAAu7N,4BAAA,MACAv7N,EAAAw7N,YAAA,MACAx7N,EAAAy7N,YAAA,MACAz7N,EAAA07N,MAAA,GACA17N,EAAA27N,YAAA,KACA37N,EAAA47N,aAAA,KACA57N,EAAA67N,YAAA,KACA77N,EAAA87N,4BAAA,MACA97N,EAAA+7N,UAAA,KACA/7N,EAAAg8N,aAAA,KACAh8N,EAAAi8N,cAAA,KACAj8N,EAAAk8N,cAAA,KACAl8N,EAAAm8N,gBAAA,KACAn8N,EAAAo8N,cAAA,MACAp8N,EAAAq8N,sBAAA,MACAr8N,EAAAs8N,cAAA,KACAt8N,EAAAu8N,eAAA,MACAv8N,EAAAw8N,cAAA,MACAx8N,EAAAy8N,WAAA,KACAz8N,EAAA08N,YAAA,KACA18N,EAAA28N,aAAA,KACA38N,EAAA48N,WAAA,KACA58N,EAAA68N,cAAA,KACA78N,EAAA88N,gBAAA,KACA98N,EAAA+8N,eAAA,KACA/8N,EAAAg9N,gBAAA,KACAh9N,EAAAi9N,UAAA,KACAj9N,EAAAk9N,UAAA,IACAl9N,EAAAm9N,YAAA,KACAn9N,EAAAo9N,WAAA,KACAp9N,EAAAq9N,YAAA,KACAr9N,EAAAs9N,aAAA,KACAt9N,EAAAu9N,kBAAA,MACAv9N,EAAAw9N,qBAAA,MACAx9N,EAAAy9N,kBAAA,MACAz9N,EAAA09N,kBAAA,MACA19N,EAAA29N,qBAAA,MACA39N,EAAA49N,MAAA,KACA59N,EAAA69N,UAAA,KACA79N,EAAA89N,WAAA,KACA99N,EAAA+9N,YAAA,KACA/9N,EAAAg+N,QAAA,KACAh+N,EAAAi+N,YAAA,KACAj+N,EAAAk+N,YAAA,KACAl+N,EAAAm+N,iBAAA,KACAn+N,EAAAo+N,WAAA,MACAp+N,EAAAq+N,cAAA,KACAr+N,EAAAs+N,YAAA,KACAt+N,EAAAu+N,iBAAA,MACAv+N,EAAAw+N,mBAAA,MACAx+N,EAAAy+N,kBAAA,MACAz+N,EAAA0+N,WAAA,IACA1+N,EAAA2+N,OAAA,KACA3+N,EAAA4+N,aAAA,KACA5+N,EAAA6+N,MAAA,KACA7+N,EAAA8+N,SAAA,KACA9+N,EAAA++N,QAAA,KACA/+N,EAAAg/N,QAAA,KACAh/N,EAAAi/N,QAAA,KACAj/N,EAAAk/N,YAAA,KACAl/N,EAAAm/N,kBAAA,KACAn/N,EAAAo/N,mBAAA,KACAp/N,EAAAq/N,gBAAA,KACAr/N,EAAAs/N,aAAA,KACAt/N,EAAAu/N,YAAA,KACAv/N,EAAAw/N,KAAA,KACAx/N,EAAAy/N,WAAA,MACAz/N,EAAA0/N,iBAAA,MACA1/N,EAAA2/N,kBAAA,MACA3/N,EAAA4/N,wBAAA,MACA5/N,EAAA6/N,iBAAA,MACA7/N,EAAA8/N,uBAAA,MACA9/N,EAAA+/N,cAAA,KACA//N,EAAAggO,WAAA,KACAhgO,EAAAigO,YAAA,MACAjgO,EAAAkgO,kBAAA,MACAlgO,EAAAmgO,WAAA,MACAngO,EAAAogO,iBAAA,MACApgO,EAAAqgO,MAAA,IACArgO,EAAAuwE,MAAA,IACAvwE,EAAAsgO,OAAA,IACAtgO,EAAAugO,WAAA,IACAvgO,EAAAwgO,uBAAA,KACAxgO,EAAAygO,WAAA,MACAzgO,EAAA0gO,WAAA,MACA1gO,EAAA2gO,oBAAA,MACA3gO,EAAA4gO,YAAA,KACA5gO,EAAA6gO,gBAAA,KACA7gO,EAAA8gO,QAAA,KACA9gO,EAAA+gO,aAAA,KACA/gO,EAAAghO,kBAAA,MACAhhO,EAAAihO,iBAAA,MACAjhO,EAAAkhO,gBAAA,MACAlhO,EAAAmhO,iBAAA,MACAnhO,EAAAohO,iBAAA,MACAphO,EAAAqhO,WAAA,MACArhO,EAAAshO,gBAAA,MACAthO,EAAAuhO,gBAAA,MACAvhO,EAAAwhO,gBAAA,MACAxhO,EAAAyhO,iBAAA,MACAzhO,EAAA0hO,IAAA,GACA1hO,EAAA2hO,UAAA,KACA3hO,EAAA4hO,WAAA,KACA5hO,EAAA6hO,UAAA,KACA7hO,EAAA8hO,0BAAA,MACA9hO,EAAA+hO,QAAA,KACA/hO,EAAAgiO,YAAA,KACAhiO,EAAAiiO,YAAA,KACAjiO,EAAAkiO,cAAA,KACAliO,EAAAmiO,YAAA,MACAniO,EAAAoiO,oBAAA,MACApiO,EAAAqiO,YAAA,KACAriO,EAAAsiO,aAAA,MACAtiO,EAAAuiO,YAAA,MACAviO,EAAAwiO,SAAA,KACAxiO,EAAAyiO,UAAA,KACAziO,EAAA0iO,WAAA,KACA1iO,EAAA2iO,SAAA,KACA3iO,EAAA4iO,YAAA,KACA5iO,EAAA6iO,cAAA,KACA7iO,EAAA8iO,kCAAA,KACA9iO,EAAA+iO,aAAA,KACA/iO,EAAAgjO,cAAA,KACAhjO,EAAAijO,QAAA,KACAjjO,EAAAkjO,MAAA,GACAljO,EAAAmjO,eAAA,MACAnjO,EAAAojO,MAAA,IACApjO,EAAAqjO,eAAA,KACArjO,EAAAsjO,UAAA,KACAtjO,EAAAujO,WAAA,MACAvjO,EAAAwjO,eAAA,KACAxjO,EAAAyjO,WAAA,IACAzjO,EAAA0jO,iBAAA,KACA1jO,EAAA2jO,WAAA,MACA3jO,EAAA4jO,WAAA,MACA5jO,EAAA6jO,oBAAA,MACA7jO,EAAA8jO,sBAAA,IACA9jO,EAAA+jO,uBAAA,IACA/jO,EAAAgkO,WAAA,KACAhkO,EAAAikO,WAAA,KACAjkO,EAAAkkO,SAAA,KACAlkO,EAAAmkO,UAAA,KACAnkO,EAAAokO,MAAA,GACApkO,EAAAqkO,gBAAA,GACArkO,EAAAskO,MAAA,KACAtkO,EAAAukO,eAAA,KACAvkO,EAAAwkO,eAAA,KACAxkO,EAAAykO,OAAA,KACAzkO,EAAA0kO,eAAA,IACA1kO,EAAA2kO,SAAA,MACA3kO,EAAA4kO,SAAA,MACA5kO,EAAA6kO,6BAAA,KACA7kO,EAAA8kO,qBAAA,KACA9kO,EAAA+kO,SAAA,MACA/kO,EAAAglO,SAAA,MACAhlO,EAAAilO,gBAAA,MACAjlO,EAAAklO,SAAA,MACAllO,EAAAmlO,UAAA,MACAnlO,EAAAolO,SAAA,MACAplO,EAAAqlO,UAAA,MACArlO,EAAAslO,SAAA,MACAtlO,EAAAulO,eAAA,MACAvlO,EAAAwlO,+BAAA,KACAxlO,EAAAylO,gCAAA,KACAzlO,EAAA0lO,gCAAA,KACA1lO,EAAA2lO,mBAAA,KACA3lO,EAAA4lO,0BAAA,KACA5lO,EAAA6lO,SAAA,MACA7lO,EAAA8lO,WAAA,KACA9lO,EAAA+lO,QAAA,KACA/lO,EAAAgmO,YAAA,KACAhmO,EAAAimO,iBAAA,MACAjmO,EAAAkmO,iBAAA,MACAlmO,EAAAmmO,iBAAA,MACAnmO,EAAAomO,kBAAA,MACApmO,EAAAqmO,iBAAA,MACArmO,EAAAsmO,iBAAA,MACAtmO,EAAAumO,gBAAA,MACAvmO,EAAAwmO,kBAAA,MACAxmO,EAAAymO,UAAA,MACAzmO,EAAA0mO,SAAA,IACA1mO,EAAA2mO,kBAAA,MACA3mO,EAAA4mO,qBAAA,IACA5mO,EAAA6mO,sBAAA,IACA7mO,EAAA8mO,OAAA,KACA9mO,EAAA+mO,eAAA,KACA/mO,EAAAgnO,cAAA,KACAhnO,EAAAinO,SAAA,KACAjnO,EAAAknO,SAAA,KACAlnO,EAAAmnO,WAAA,MACAnnO,EAAAonO,WAAA,MACApnO,EAAAqnO,oBAAA,MACArnO,EAAAsnO,YAAA,KACAtnO,EAAAunO,UAAA,KACAvnO,EAAAwnO,IAAA,KACAxnO,EAAAynO,SAAA,KACAznO,EAAA0nO,iBAAA,KACA1nO,EAAA2nO,gBAAA,KACA3nO,EAAA4nO,SAAA,MACA5nO,EAAA6nO,gBAAA,MACA7nO,IAAA,IACAA,EAAA8nO,UAAA,KACA9nO,EAAA+nO,SAAA,KACA/nO,EAAAgoO,SAAA,KACAhoO,EAAAioO,OAAA,KACAjoO,EAAAkoO,WAAA,KACAloO,EAAAmoO,WAAA,KACAnoO,EAAAooO,UAAA,KACApoO,EAAAqoO,eAAA,MACAroO,EAAAsoO,iBAAA,MACAtoO,EAAAuoO,WAAA,MACAvoO,EAAAwoO,gBAAA,MACAxoO,EAAAyoO,iBAAA,MACAzoO,EAAA0oO,WAAA,MACA1oO,EAAA2oO,oBAAA,MACA3oO,EAAA4oO,cAAA,KACA5oO,EAAA6oO,IAAA,IACA7oO,EAAA8oO,IAAA,KACA9oO,EAAA+oO,SAAA,MACA/oO,EAAAgpO,UAAA,MACAhpO,EAAAipO,gBAAA,MACAjpO,EAAAkpO,UAAA,KACAlpO,EAAAmpO,KAAA,IACAnpO,EAAAopO,UAAA,MACAppO,EAAAqpO,OAAA,IACArpO,EAAAspO,OAAA,IACAtpO,EAAAupO,SAAA,IACAvpO,EAAAwpO,YAAA,KACAxpO,EAAAypO,iBAAA,MACAzpO,EAAA0pO,mBAAA,MACA1pO,EAAA2pO,kBAAA,MACA3pO,EAAA4pO,QAAA,KACA5pO,EAAA6pO,iBAAA,KACA7pO,EAAA8pO,aAAA,IACA9pO,EAAA+pO,UAAA,KACA/pO,EAAAgqO,WAAA,KACAhqO,EAAAiqO,UAAA,KACAjqO,EAAAkqO,WAAA,KACAlqO,EAAAmqO,oBAAA,KACAnqO,EAAAoqO,UAAA,KACApqO,EAAAqqO,eAAA,MACArqO,EAAAsqO,oBAAA,MACAtqO,EAAAuqO,qBAAA,MACAvqO,EAAAwqO,iBAAA,MACAxqO,EAAAyqO,WAAA,MACAzqO,EAAA0qO,qBAAA,MACA1qO,EAAA2qO,sBAAA,MACA3qO,EAAA4qO,iBAAA,KACA5qO,EAAA6qO,sBAAA,MACA7qO,EAAA8qO,gBAAA,MACA9qO,EAAA+qO,qBAAA,MACA/qO,EAAAgrO,sBAAA,MACAhrO,EAAAirO,mBAAA,MACAjrO,EAAAkrO,WAAA,MACAlrO,EAAAmrO,oBAAA,MACAnrO,EAAAorO,UAAA,KACAprO,EAAAqrO,eAAA,KACArrO,EAAAsrO,oBAAA,KACAtrO,EAAAurO,oBAAA,KACAvrO,EAAAwrO,UAAA,KACAxrO,EAAAyrO,oBAAA,MACAzrO,EAAA0rO,SAAA,KACA1rO,EAAA2rO,UAAA,KACA3rO,EAAA4rO,SAAA,KACA5rO,EAAA6rO,KAAA,IACA7rO,EAAA8rO,IAAA,KACA9rO,EAAA+rO,UAAA,MACA/rO,EAAAgsO,gBAAA,MACAhsO,EAAAisO,UAAA,KACAjsO,EAAAksO,cAAA,KACAlsO,EAAAmsO,YAAA,KACAnsO,EAAAosO,gBAAA,KACApsO,EAAAqsO,WAAA,KACArsO,EAAAssO,QAAA,KACAtsO,EAAAusO,YAAA,KACAvsO,EAAAwsO,YAAA,KACAxsO,EAAAysO,WAAA,KACAzsO,EAAA0sO,gBAAA,MACA1sO,EAAA2sO,uBAAA,MACA3sO,EAAA4sO,wBAAA,MACA5sO,EAAA6sO,gBAAA,KACA7sO,EAAA8sO,yBAAA,MACA9sO,EAAA+sO,WAAA,KACA/sO,EAAAgtO,gBAAA,MACAhtO,EAAAitO,kBAAA,MACAjtO,EAAAktO,iBAAA,MACAltO,EAAAmtO,YAAA,KACAntO,EAAAotO,UAAA,KACAptO,EAAAqtO,MAAA,IACArtO,EAAAstO,OAAA,IACAttO,EAAAutO,iBAAA,IACAvtO,EAAAwtO,qBAAA,MACAxtO,EAAAytO,oBAAA,MACAztO,EAAA0tO,oBAAA,MACA1tO,EAAA2tO,cAAA,MACA3tO,EAAA4tO,mBAAA,MACA5tO,EAAA6tO,eAAA,KACA7tO,EAAA8tO,cAAA,KACA9tO,EAAA+tO,eAAA,KACA/tO,EAAAguO,kBAAA,KACAhuO,EAAAiuO,MAAA,IACAjuO,EAAAkuO,eAAA,KACAluO,EAAAmuO,MAAA,IACAnuO,EAAAouO,cAAA,KACApuO,EAAAquO,YAAA,KACAruO,EAAAsuO,aAAA,KACAtuO,EAAAuuO,aAAA,KACAvuO,EAAAwuO,iBAAA,KACAxuO,EAAAyuO,yBAAA,KACAzuO,EAAA0uO,0BAAA,KACA1uO,EAAA2uO,MAAA,GACA3uO,EAAA4uO,YAAA,KACA5uO,EAAA6uO,aAAA,KACA7uO,EAAA8uO,YAAA,KACA9uO,EAAA+uO,4BAAA,MACA/uO,EAAAgvO,UAAA,KACAhvO,EAAAivO,aAAA,KACAjvO,EAAAkvO,cAAA,KACAlvO,EAAAmvO,cAAA,KACAnvO,EAAAovO,gBAAA,KACApvO,EAAAqvO,cAAA,MACArvO,EAAAsvO,sBAAA,MACAtvO,EAAAuvO,cAAA,KACAvvO,EAAAwvO,eAAA,MACAxvO,EAAAyvO,sBAAA,KACAzvO,EAAA0vO,cAAA,MACA1vO,EAAA2vO,WAAA,KACA3vO,EAAA4vO,YAAA,KACA5vO,EAAA6vO,aAAA,KACA7vO,EAAA8vO,cAAA,IACA9vO,EAAA+vO,oBAAA,MACA/vO,EAAAgwO,WAAA,KACAhwO,EAAAiwO,cAAA,IACAjwO,EAAAkwO,UAAA,KACAlwO,EAAAmwO,UAAA,MACAnwO,EAAAowO,WAAA,MACApwO,EAAAqwO,WAAA,MACArwO,EAAAswO,oBAAA,MACAtwO,EAAAuwO,oBAAA,MACAvwO,EAAAwwO,mBAAA,MACAxwO,EAAAywO,mBAAA,MACAzwO,EAAA0wO,aAAA,MACA1wO,EAAA2wO,kBAAA,MACA3wO,EAAA4wO,MAAA,IACA5wO,EAAA6wO,cAAA,IACA7wO,EAAA8wO,SAAA,IACA9wO,EAAA+wO,UAAA,IACA/wO,EAAAgxO,eAAA,IACAhxO,EAAAixO,cAAA,KACAjxO,EAAAkxO,gBAAA,IACAlxO,EAAAmxO,iBAAA,IACAnxO,EAAAoxO,YAAA,KACApxO,EAAAqxO,aAAA,KACArxO,EAAAsxO,iBAAA,KACAtxO,EAAAuxO,cAAA,KACAvxO,EAAAwxO,iBAAA,KACAxxO,EAAAyxO,aAAA,KACAzxO,EAAA0xO,WAAA,KACA1xO,EAAA2xO,WAAA,MACA3xO,EAAA4xO,WAAA,KACA5xO,EAAA6xO,WAAA,MACA7xO,EAAA8xO,WAAA,MACA9xO,EAAA+xO,oBAAA,MACA/xO,EAAAgyO,oBAAA,IACAhyO,EAAAiyO,mBAAA,IACAjyO,EAAAkyO,eAAA,IACAlyO,EAAAmyO,cAAA,IACAnyO,EAAAoyO,cAAA,IACApyO,EAAAqyO,SAAA,IACAryO,EAAAsyO,QAAA,IACAtyO,EAAAuyO,QAAA,IACAvyO,EAAAwyO,MAAA,IACAxyO,EAAAyyO,UAAA,MACAzyO,EAAA0yO,YAAA,KACA1yO,EAAA2yO,yBAAA,MACA3yO,EAAA4yO,8BAAA,MACA5yO,EAAA6yO,iCAAA,MACA7yO,EAAA8yO,0BAAA,MACA9yO,EAAA+yO,+BAAA,MACA/yO,EAAAgzO,kCAAA,MACAhzO,EAAAizO,UAAA,KACAjzO,EAAAkzO,aAAA,IACAlzO,EAAAmzO,OAAA,KACAnzO,EAAAozO,UAAA,KACApzO,EAAAqzO,cAAA,MACArzO,EAAAszO,eAAA,MACAtzO,EAAAuzO,eAAA,IACAvzO,EAAAwzO,QAAA,KACAxzO,EAAAyzO,QAAA,KACAzzO,EAAA0zO,QAAA,KACA1zO,EAAA2zO,QAAA,KACA3zO,EAAA4zO,GAAA,IACA5zO,EAAA6zO,MAAA,KACA7zO,EAAA8zO,YAAA,MACA9zO,EAAA+zO,kBAAA,MACA/zO,EAAAg0O,YAAA,KACAh0O,EAAAi0O,YAAA,KACAj0O,EAAAk0O,MAAA,KACAl0O,EAAAm0O,QAAA,KACAn0O,EAAAo0O,QAAA,KACAp0O,EAAAq0O,QAAA,KACAr0O,EAAAs0O,YAAA,KACAt0O,EAAAu0O,kBAAA,KACAv0O,EAAAw0O,mBAAA,KACAx0O,EAAAy0O,gBAAA,KACAz0O,EAAA00O,aAAA,KACA10O,EAAA20O,UAAA,MACA30O,EAAA40O,WAAA,KACA50O,EAAA60O,QAAA,KACA70O,EAAA80O,YAAA,KACA90O,EAAA+0O,YAAA,KACA/0O,EAAAg1O,WAAA,KACAh1O,EAAAi1O,gBAAA,MACAj1O,EAAAk1O,kBAAA,MACAl1O,EAAAm1O,iBAAA,MACAn1O,EAAAo1O,YAAA,KACAp1O,EAAAq1O,SAAA,KACAr1O,EAAAs1O,aAAA,KACAt1O,EAAAu1O,aAAA,KACAv1O,EAAAw1O,QAAA,IACAx1O,EAAAy1O,WAAA,MACAz1O,EAAA01O,WAAA,MACA11O,EAAA21O,oBAAA,MACA31O,EAAA41O,gBAAA,MACA51O,EAAA61O,gBAAA,MACA71O,EAAA81O,yBAAA,MACA91O,EAAA+1O,aAAA,KACA/1O,EAAAg2O,YAAA,KACAh2O,EAAAi2O,aAAA,KACAj2O,EAAAk2O,YAAA,KACAl2O,EAAAm2O,aAAA,KACAn2O,EAAAo2O,eAAA,MACAp2O,EAAAq2O,YAAA,KACAr2O,EAAAs2O,aAAA,KACAt2O,EAAAu2O,IAAA,GACAv2O,EAAAw2O,UAAA,KACAx2O,EAAAy2O,WAAA,KACAz2O,EAAA02O,UAAA,KACA12O,EAAA22O,0BAAA,MACA32O,EAAA42O,QAAA,KACA52O,EAAA62O,eAAA,KACA72O,EAAA82O,aAAA,KACA92O,EAAA+2O,qBAAA,MACA/2O,EAAAg3O,YAAA,KACAh3O,EAAAi3O,YAAA,KACAj3O,EAAAk3O,cAAA,KACAl3O,EAAAm3O,YAAA,MACAn3O,EAAAo3O,oBAAA,MACAp3O,EAAAq3O,YAAA,KACAr3O,EAAAs3O,aAAA,MACAt3O,EAAAu3O,oBAAA,KACAv3O,EAAAw3O,YAAA,MACAx3O,EAAAy3O,SAAA,KACAz3O,EAAA03O,UAAA,KACA13O,EAAA23O,WAAA,KACA33O,EAAA43O,SAAA,KACA53O,EAAA63O,UAAA,IACA73O,EAAA83O,YAAA,IACA93O,EAAA+3O,QAAA,KACA/3O,EAAAg4O,UAAA,KACAh4O,EAAAitE,EAAA,IACAjtE,EAAAi4O,OAAA,IACAj4O,EAAAk4O,KAAA,IACAl4O,EAAAm4O,SAAA,KACAn4O,EAAAo4O,UAAA,MACAp4O,EAAAq4O,OAAA,IACAr4O,EAAAs4O,OAAA,IACAt4O,EAAAu4O,QAAA,KACAv4O,EAAAw4O,YAAA,IACAx4O,EAAAy4O,iBAAA,KACAz4O,EAAA04O,UAAA,KACA14O,EAAA24O,WAAA,KACA34O,EAAA44O,UAAA,IACA54O,EAAA64O,UAAA,IACA74O,EAAA84O,MAAA,KACA94O,EAAA+4O,UAAA,IACA/4O,EAAAg5O,eAAA,IACAh5O,EAAAi5O,eAAA,KACAj5O,EAAAk5O,eAAA,IACAl5O,EAAAm5O,kBAAA,KACAn5O,EAAAo5O,eAAA,IACAp5O,EAAAq5O,gBAAA,IACAr5O,EAAAs5O,UAAA,KACAt5O,EAAAu5O,OAAA,IACAv5O,EAAAw5O,UAAA,KACAx5O,EAAAy5O,UAAA,KACAz5O,EAAA05O,UAAA,MACA15O,EAAA25O,WAAA,KACA35O,EAAA45O,MAAA,IACA55O,EAAA65O,WAAA,KACA75O,EAAA85O,cAAA,KACA95O,EAAA+5O,WAAA,KACA/5O,EAAAg6O,eAAA,KACAh6O,EAAAi6O,WAAA,KACAj6O,EAAAk6O,cAAA,IACAl6O,EAAAm6O,sBAAA,KACAn6O,EAAAo6O,eAAA,IACAp6O,EAAAq6O,UAAA,MACAr6O,EAAAs6O,mBAAA,MACAt6O,EAAAu6O,WAAA,KACAv6O,EAAAw6O,QAAA,MACAx6O,EAAAy6O,QAAA,IACAz6O,EAAA06O,gBAAA,KACA16O,EAAA26O,gBAAA,KACA36O,EAAA46O,eAAA,KACA56O,EAAA66O,WAAA,MACA76O,EAAA86O,WAAA,GACA96O,EAAA+6O,cAAA,KACA/6O,EAAAg7O,oBAAA,MACAh7O,EAAAi7O,mBAAA,MACAj7O,EAAAk7O,eAAA,MACAl7O,EAAAm7O,MAAA,KACAn7O,EAAAo7O,UAAA,KACAp7O,EAAAq7O,QAAA,IACAr7O,EAAAs7O,OAAA,KACAt7O,EAAAu7O,QAAA,KACAv7O,EAAAw7O,eAAA,KACAx7O,EAAAy7O,QAAA,IACAz7O,EAAA07O,gBAAA,IACA17O,EAAA27O,qBAAA,IACA37O,EAAA47O,aAAA,IACA57O,EAAA67O,aAAA,IACA77O,EAAA87O,eAAA,IACA97O,EAAA+7O,UAAA,IACA/7O,EAAAg8O,YAAA,KACAh8O,EAAAi8O,MAAA,IACAj8O,EAAAk8O,eAAA,KACAl8O,EAAAm8O,eAAA,MACAn8O,EAAAo8O,eAAA,MACAp8O,EAAAq8O,wBAAA,MACAr8O,EAAAs8O,kBAAA,KACAt8O,EAAAu8O,wBAAA,KACAv8O,EAAAw8O,OAAA,IACAx8O,EAAAy8O,YAAA,KACAz8O,EAAA08O,YAAA,KACA18O,EAAA28O,UAAA,KACA38O,EAAA48O,OAAA,KACA58O,EAAA68O,WAAA,KACA78O,EAAA88O,WAAA,KACA98O,EAAA+8O,gBAAA,KACA/8O,EAAAg9O,mBAAA,KACAh9O,EAAAi9O,gBAAA,KACAj9O,EAAAk9O,oBAAA,KACAl9O,EAAAm9O,kBAAA,KACAn9O,EAAAo9O,eAAA,KACAp9O,EAAAq9O,mBAAA,KACAr9O,EAAAmR,EAAA,IACAnR,EAAAs9O,OAAA,KACAt9O,EAAAu9O,WAAA,KACAv9O,EAAAw9O,WAAA,KACAx9O,EAAAy9O,WAAA,MACAz9O,EAAA09O,IAAA,KACA19O,EAAA29O,UAAA,MACA39O,EAAA49O,YAAA,MACA59O,EAAA69O,gBAAA,MACA79O,EAAA89O,UAAA,KACA99O,EAAA+9O,SAAA,MACA/9O,EAAAg+O,eAAA,MACAh+O,EAAAi+O,aAAA,KACAj+O,EAAAk+O,aAAA,KACAl+O,EAAAm+O,QAAA,KACAn+O,EAAAo+O,UAAA,KACAp+O,EAAAq+O,WAAA,KACAr+O,EAAAs+O,UAAA,KACAt+O,EAAAu+O,eAAA,MACAv+O,EAAAw+O,iBAAA,MACAx+O,EAAAy+O,gBAAA,MACAz+O,EAAA0+O,WAAA,MACA1+O,EAAA2+O,MAAA,KACA3+O,EAAA4+O,YAAA,IACA5+O,EAAA6+O,qBAAA,IACA7+O,EAAA8+O,qBAAA,IACA9+O,EAAA++O,mBAAA,IACA/+O,EAAAg/O,gBAAA,IACAh/O,EAAAi/O,YAAA,KACAj/O,EAAAk/O,MAAA,IACAl/O,EAAAm/O,WAAA,MACAn/O,EAAAo/O,cAAA,KACAp/O,EAAAq/O,WAAA,KACAr/O,EAAAs/O,eAAA,KACAt/O,EAAAu/O,eAAA,KACAv/O,EAAAw/O,YAAA,KACAx/O,EAAAy/O,gBAAA,KACAz/O,EAAA0/O,WAAA,MACA1/O,EAAA2/O,WAAA,KACA3/O,EAAA4/O,wBAAA,MACA5/O,EAAA6/O,wBAAA,MACA7/O,EAAA8/O,eAAA,MACA9/O,EAAA+/O,wBAAA,MACA//O,EAAAggP,WAAA,MACAhgP,EAAAigP,OAAA,KACAjgP,EAAAkgP,OAAA,KACAlgP,EAAAmgP,QAAA,IACAngP,EAAAogP,WAAA,MACApgP,EAAAqgP,WAAA,MACArgP,EAAA+uE,EAAA,IACA/uE,EAAAsgP,OAAA,KACAtgP,EAAAugP,UAAA,MACAvgP,EAAAwgP,WAAA,MACAxgP,EAAAygP,WAAA,MACAzgP,EAAA0gP,oBAAA,MACA1gP,EAAA2gP,SAAA,MACA3gP,EAAA4gP,gBAAA,MACA5gP,EAAA6gP,gBAAA,MACA7gP,EAAA8gP,YAAA,MACA9gP,EAAA+gP,SAAA,MACA/gP,EAAAghP,uBAAA,MACAhhP,EAAAihP,UAAA,KACAjhP,EAAAkhP,eAAA,MACAlhP,EAAAmhP,oBAAA,KACAnhP,EAAAohP,yBAAA,MACAphP,EAAAqhP,SAAA,MACArhP,EAAAshP,QAAA,KACAthP,EAAAuhP,YAAA,IACAvhP,EAAAwhP,UAAA,KACAxhP,EAAAyhP,WAAA,KACAzhP,EAAA0hP,UAAA,KACA1hP,EAAA2hP,WAAA,MACA3hP,EAAA4hP,YAAA,KACA5hP,EAAA6hP,WAAA,MACA7hP,EAAA8hP,SAAA,MACA9hP,EAAA+hP,UAAA,MACA/hP,EAAAgiP,OAAA,KACAhiP,EAAAiiP,YAAA,KACAjiP,EAAAkiP,YAAA,KACAliP,EAAAmiP,mBAAA,KACAniP,EAAAoiP,uBAAA,MACApiP,EAAAqiP,+BAAA,MACAriP,EAAAsiP,wBAAA,MACAtiP,EAAAuiP,gCAAA,MACAviP,EAAAwiP,aAAA,KACAxiP,EAAAyiP,wCAAA,KACAziP,EAAA0iP,+BAAA,KACA1iP,EAAA2iP,0BAAA,KACA3iP,EAAA4iP,+BAAA,KACA5iP,EAAA6iP,0BAAA,KACA7iP,EAAA8iP,2BAAA,MACA9iP,EAAA+iP,4BAAA,MACA/iP,EAAAgjP,gCAAA,KACAhjP,EAAAijP,2BAAA,KACAjjP,EAAAkjP,iBAAA,KACAljP,EAAAmjP,iBAAA,KACAnjP,EAAAojP,YAAA,KACApjP,EAAAqjP,UAAA,KACArjP,EAAAsjP,eAAA,KACAtjP,EAAAujP,8BAAA,MACAvjP,EAAAwjP,+BAAA,MACAxjP,EAAAyjP,6BAAA,KACAzjP,EAAA0jP,wBAAA,KACA1jP,EAAA2jP,WAAA,MACA3jP,EAAA4jP,WAAA,MACA5jP,EAAA6jP,SAAA,MACA7jP,EAAA8jP,WAAA,MACA9jP,EAAA+jP,WAAA,MACA/jP,EAAAgkP,WAAA,MACAhkP,EAAAikP,oBAAA,MACAjkP,EAAAkkP,IAAA,KACAlkP,EAAAmkP,aAAA,MACAnkP,EAAAokP,WAAA,KACApkP,EAAAqkP,OAAA,KACArkP,EAAAskP,MAAA,KACAtkP,EAAAukP,UAAA,IACAvkP,EAAAwkP,QAAA,IACAxkP,EAAAykP,KAAA,IACAzkP,EAAAmwB,EAAA,IACAnwB,EAAA0kP,UAAA,IACA1kP,EAAA2kP,UAAA,MACA3kP,EAAA4kP,QAAA,KACA5kP,EAAA6kP,UAAA,KACA7kP,EAAA8kP,WAAA,KACA9kP,EAAA+kP,YAAA,KACA/kP,EAAAglP,GAAA,IACAhlP,EAAAilP,WAAA,MACAjlP,EAAAklP,OAAA,KACAllP,EAAAmlP,UAAA,IACAnlP,EAAAm6C,EAAA,IACAn6C,EAAAolP,YAAA,MACAplP,EAAAqlP,UAAA,KACArlP,EAAAslP,OAAA,IACAtlP,EAAAulP,OAAA,KACAvlP,EAAAwlP,UAAA,MACAxlP,EAAAylP,WAAA,KACAzlP,EAAA0lP,WAAA,KACA1lP,EAAA2lP,WAAA,MACA3lP,EAAA4lP,WAAA,MACA5lP,EAAA6lP,oBAAA,MACA7lP,EAAA8lP,SAAA,MACA9lP,EAAA+lP,aAAA,KACA/lP,EAAAgmP,gBAAA,MACAhmP,EAAAimP,gBAAA,MACAjmP,EAAAkmP,yBAAA,MACAlmP,EAAAmmP,YAAA,KACAnmP,EAAAomP,QAAA,KACApmP,EAAAqmP,YAAA,IACArmP,EAAAsmP,UAAA,IACAtmP,EAAAumP,WAAA,KACAvmP,EAAAwmP,UAAA,KACAxmP,EAAAymP,UAAA,KACAzmP,EAAA0mP,gBAAA,KACA1mP,EAAA2mP,qBAAA,MACA3mP,EAAA4mP,eAAA,MACA5mP,EAAA6mP,oBAAA,KACA7mP,EAAA8mP,yBAAA,MACA9mP,EAAA+mP,2BAAA,MACA/mP,EAAAgnP,0BAAA,MACAhnP,EAAAinP,iBAAA,MACAjnP,EAAAknP,gBAAA,MACAlnP,EAAAmnP,qBAAA,MACAnnP,EAAAonP,sBAAA,MACApnP,EAAAqnP,mBAAA,MACArnP,EAAAsnP,wBAAA,KACAtnP,EAAAunP,SAAA,MACAvnP,EAAAwnP,IAAA,IACAxnP,EAAAynP,aAAA,MACAznP,EAAA0nP,UAAA,MACA1nP,EAAA2nP,kBAAA,MACA3nP,EAAA4nP,mBAAA,KACA5nP,EAAA6nP,uBAAA,KACA7nP,EAAA8nP,aAAA,KACA9nP,EAAA+nP,qBAAA,KACA/nP,EAAAgoP,eAAA,MACAhoP,EAAAioP,sBAAA,MACAjoP,EAAAkoP,mBAAA,MACAloP,EAAAmoP,YAAA,KACAnoP,EAAAooP,OAAA,KACApoP,EAAAqoP,MAAA,IACAroP,EAAAsoP,WAAA,KACAtoP,EAAAuoP,WAAA,KACAvoP,EAAAwoP,WAAA,KACAxoP,EAAAyoP,SAAA,MACAzoP,EAAA0oP,QAAA,KACA1oP,EAAA2oP,aAAA,KACA3oP,EAAA4oP,WAAA,MACA5oP,EAAA6oP,IAAA,KACA7oP,EAAA8oP,UAAA,MACA9oP,EAAA+oP,gBAAA,MACA/oP,EAAAgpP,UAAA,KACAhpP,EAAAipP,aAAA,KACAjpP,EAAAkpP,kBAAA,MACAlpP,EAAAmpP,WAAA,MACAnpP,EAAAopP,UAAA,MACAppP,EAAAqpP,WAAA,MACArpP,EAAAspP,oBAAA,MACAtpP,EAAAupP,SAAA,MACAvpP,EAAAwpP,gBAAA,MACAxpP,EAAAypP,gBAAA,MACAzpP,EAAA0pP,yBAAA,MACA1pP,EAAA2pP,SAAA,KACA3pP,EAAA4pP,YAAA,MACA5pP,EAAA6pP,WAAA,MACA7pP,EAAA8pP,UAAA,KACA9pP,EAAA+pP,WAAA,KACA/pP,EAAAgqP,OAAA,KACAhqP,EAAAiqP,cAAA,IACAjqP,EAAAkqP,sBAAA,IACAlqP,EAAAmqP,GAAA,IACAnqP,EAAAoqP,MAAA,KACApqP,EAAAqqP,UAAA,IACArqP,EAAAsqP,OAAA,KACAtqP,EAAAuqP,QAAA,IACAvqP,EAAAwqP,WAAA,MACAxqP,EAAAyqP,UAAA,MACAzqP,EAAA0qP,WAAA,MACA1qP,EAAA2qP,oBAAA,MACA3qP,EAAA4qP,SAAA,MACA5qP,EAAA6qP,eAAA,KACA7qP,EAAA8qP,uBAAA,KACA9qP,EAAA+qP,kBAAA,KACA/qP,EAAAgrP,0BAAA,KACAhrP,EAAAirP,gBAAA,MACAjrP,EAAAkrP,gBAAA,MACAlrP,EAAAmrP,yBAAA,MACAnrP,EAAAorP,WAAA,MACAprP,EAAAqrP,YAAA,MACArrP,EAAAsrP,WAAA,KACAtrP,EAAAurP,QAAA,KACAvrP,EAAAiyD,EAAA,IACAjyD,EAAAwrP,WAAA,KACAxrP,EAAAyrP,OAAA,IACAzrP,EAAA0rP,OAAA,KACA1rP,EAAA2rP,WAAA,KACA3rP,EAAA4rP,UAAA,KACA5rP,EAAA6rP,eAAA,MACA7rP,EAAA8rP,iBAAA,MACA9rP,EAAA+rP,WAAA,MACA/rP,EAAAgsP,gBAAA,MACAhsP,EAAAisP,WAAA,KACAjsP,EAAAksP,gBAAA,MACAlsP,EAAAmsP,WAAA,MACAnsP,EAAAosP,iBAAA,KACApsP,EAAAqsP,iBAAA,KACArsP,EAAAssP,YAAA,KACAtsP,EAAAusP,MAAA,KACAvsP,EAAAwsP,YAAA,MACAxsP,EAAAysP,kBAAA,MACAzsP,EAAA0sP,YAAA,KACA1sP,EAAA2sP,UAAA,MACA3sP,EAAA4sP,OAAA,IACA5sP,EAAA6sP,QAAA,KACA7sP,EAAA8sP,YAAA,KACA9sP,EAAA+sP,MAAA,IACA/sP,EAAAgtP,KAAA,IACAhtP,EAAAitP,WAAA,IACAjtP,EAAAktP,UAAA,KACAltP,EAAAmtP,WAAA,KACAntP,EAAAotP,oBAAA,KACAptP,EAAAqtP,mBAAA,KACArtP,EAAAstP,WAAA,MACAttP,EAAAutP,WAAA,MACAvtP,EAAAwtP,KAAA,GACAxtP,EAAAytP,WAAA,KACAztP,EAAA0tP,YAAA,KACA1tP,EAAA2tP,SAAA,KACA3tP,EAAA4tP,aAAA,KACA5tP,EAAA6tP,aAAA,KACA7tP,EAAA8tP,eAAA,KACA9tP,EAAA+tP,aAAA,KACA/tP,EAAAguP,cAAA,MACAhuP,EAAAiuP,aAAA,MACAjuP,EAAAkuP,YAAA,KACAluP,EAAAmuP,aAAA,KACAnuP,EAAAouP,SAAA,KACApuP,EAAAquP,gBAAA,MACAruP,EAAAsuP,mBAAA,KACAtuP,EAAAuuP,eAAA,KACAvuP,EAAAwuP,KAAA,IACAxuP,EAAAyuP,WAAA,MACAzuP,EAAA0uP,YAAA,KACA1uP,EAAA2uP,iBAAA,KACA3uP,EAAA4uP,YAAA,KACA5uP,EAAA6uP,qBAAA,KACA7uP,EAAA8uP,oBAAA,KACA9uP,EAAA+uP,WAAA,MACA/uP,EAAAgvP,WAAA,MACAhvP,EAAAivP,YAAA,KACAjvP,EAAAkvP,WAAA,KACAlvP,EAAAmvP,WAAA,MACAnvP,EAAAovP,WAAA,MACApvP,EAAAqvP,WAAA,MACArvP,EAAAsvP,OAAA,KACAtvP,EAAAuvP,eAAA,IACAvvP,EAAAwvP,QAAA,IACAxvP,EAAAyvP,WAAA,MACAzvP,EAAA0vP,WAAA,MACA1vP,EAAA,aACAA,EAAA2vP,kBAAA,KACA3vP,EAAA4vP,kBAAA,KACA5vP,EAAA6vP,mBAAA,KACA7vP,EAAA8vP,mBAAA,KACA9vP,EAAA+vP,mBAAA,KACA/vP,EAAAgwP,mBAAA,KACAhwP,EAAAiwP,oBAAA,KACAjwP,EAAAkwP,oBAAA,KACAlwP,EAAAmwP,cAAA,KACAnwP,EAAAowP,eAAA,KACApwP,EAAAqwP,iBAAA,KACArwP,EAAAswP,iBAAA,KACAtwP,EAAAuwP,eAAA,KACAvwP,EAAAwwP,eAAA,KACAxwP,EAAAywP,kBAAA,KACAzwP,EAAA0wP,kBAAA,KACA1wP,EAAA2wP,eAAA,KACA3wP,EAAA4wP,eAAA,KACA5wP,EAAA6wP,aAAA,KACA7wP,EAAA8wP,aAAA,KACA9wP,EAAA+wP,cAAA,KACA/wP,EAAAgxP,cAAA,KACAhxP,EAAAixP,OAAA,KACAjxP,EAAAkxP,kBAAA,MACAlxP,EAAAmxP,mBAAA,MACAnxP,EAAAoxP,gBAAA,MACApxP,EAAAqxP,iBAAA,MACArxP,EAAAsxP,aAAA,IACAtxP,EAAAuxP,aAAA,IACAvxP,EAAAwxP,cAAA,IACAxxP,EAAAyxP,cAAA,IACAzxP,EAAA0xP,cAAA,IACA1xP,EAAA2xP,cAAA,IACA3xP,EAAA4xP,eAAA,IACA5xP,EAAA6xP,eAAA,IACA7xP,EAAA8xP,eAAA,GACA9xP,EAAA+xP,eAAA,GACA/xP,EAAAgyP,gBAAA,GACAhyP,EAAAiyP,gBAAA,GACAjyP,EAAAkyP,gBAAA,GACAlyP,EAAAmyP,gBAAA,GACAnyP,EAAAoyP,iBAAA,GACApyP,EAAAqyP,iBAAA,GACAryP,EAAAsyP,eAAA,KACAtyP,EAAAuyP,eAAA,KACAvyP,EAAAwyP,gBAAA,KACAxyP,EAAAyyP,gBAAA,KACAzyP,EAAA0yP,gBAAA,KACA1yP,EAAA2yP,gBAAA,KACA3yP,EAAA4yP,iBAAA,KACA5yP,EAAA6yP,iBAAA,KACA7yP,EAAA8yP,iBAAA,KACA9yP,EAAA+yP,cAAA,KACA/yP,EAAAgzP,sBAAA,KACAhzP,EAAAizP,mBAAA,KACAjzP,EAAAkzP,kBAAA,KACAlzP,EAAAmzP,eAAA,KACAnzP,EAAAozP,oBAAA,KACApzP,EAAAqzP,iBAAA,KACArzP,EAAAszP,iBAAA,KACAtzP,EAAAuzP,cAAA,KACAvzP,EAAAwzP,aAAA,KACAxzP,EAAAyzP,aAAA,KACAzzP,EAAA0zP,cAAA,KACA1zP,EAAA2zP,cAAA,KACA3zP,EAAA4zP,cAAA,KACA5zP,EAAA6zP,cAAA,KACA7zP,EAAA8zP,eAAA,KACA9zP,EAAA+zP,eAAA,KACA/zP,EAAAg0P,QAAA,IACAh0P,EAAAi0P,SAAA,IACAj0P,EAAAk0P,UAAA,IACAl0P,EAAAm0P,SAAA,KACAn0P,EAAAo0P,gBAAA,KACAp0P,EAAAq0P,aAAA,KACAr0P,EAAAs0P,oBAAA,KACAt0P,EAAAu0P,iBAAA,KACAv0P,EAAAw0P,kBAAA,KACAx0P,EAAAy0P,eAAA,KACAz0P,EAAA00P,iBAAA,KACA10P,EAAA20P,cAAA,KACA30P,EAAA40P,aAAA,GACA50P,EAAA60P,aAAA,GACA70P,EAAA80P,cAAA,GACA90P,EAAA+0P,cAAA,GACA/0P,EAAAg1P,cAAA,GACAh1P,EAAAi1P,cAAA,GACAj1P,EAAAk1P,eAAA,GACAl1P,EAAAm1P,eAAA,GACAn1P,EAAAo1P,MAAA,KACAp1P,EAAAq1P,eAAA,KACAr1P,EAAAs1P,YAAA,KACAt1P,EAAAu1P,WAAA,KACAv1P,EAAAw1P,WAAA,KACAx1P,EAAAy1P,YAAA,KACAz1P,EAAA01P,YAAA,KACA11P,EAAA21P,UAAA,KACA31P,EAAA41P,UAAA,KACA51P,EAAA61P,cAAA,KACA71P,EAAA81P,SAAA,GACA91P,EAAA+1P,SAAA,GACA/1P,EAAAg2P,UAAA,GACAh2P,EAAAi2P,UAAA,GACAj2P,EAAAk2P,iBAAA,KACAl2P,EAAAm2P,cAAA,KACAn2P,EAAAo2P,UAAA,IACAp2P,EAAAq2P,WAAA,IACAr2P,EAAAs2P,YAAA,IACAt2P,EAAAu2P,aAAA,KACAv2P,EAAAw2P,kBAAA,KACAx2P,EAAAy2P,eAAA,KACAz2P,EAAA02P,eAAA,KACA12P,EAAA22P,YAAA,KACA32P,EAAA42P,UAAA,KACA52P,EAAA62P,cAAA,KACA72P,EAAA82P,cAAA,OAEAziJ,EAAAllF,EAAA,SAAAnvB,GACAA,EAAAokO,MAAA,GACApkO,EAAAu4C,GAAA,KACAv4C,EAAA+2P,GAAA,KACA/2P,EAAAg3P,KAAA,KACAh3P,EAAAi3P,GAAA,KACAj3P,EAAAk3P,GAAA,KACAl3P,EAAAm3P,GAAA,KACAn3P,EAAAo3P,KAAA,KACAp3P,EAAAq3P,KAAA,KACAr3P,EAAAs3P,KAAA,KACAt3P,EAAAu3P,IAAA,KACAv3P,EAAAw3P,IAAA,KACAx3P,EAAAy3P,IAAA,KACAz3P,EAAA03P,IAAA,KACA13P,EAAA23P,IAAA,KACA33P,EAAA43P,IAAA,KACA53P,EAAA63P,KAAA,IACA73P,EAAA83P,IAAA,MACA93P,EAAA+3P,IAAA,MACA/3P,EAAAg4P,IAAA,MACAh4P,EAAAi4P,IAAA,MACAj4P,EAAAk4P,IAAA,MACAl4P,EAAAm4P,IAAA,MACAn4P,EAAAo4P,IAAA,MACAp4P,EAAAq4P,IAAA,MACAr4P,EAAAs4P,IAAA,MACAt4P,EAAAu4P,IAAA,MACAv4P,EAAAw4P,IAAA,MACAx4P,EAAAy4P,IAAA,MACAz4P,EAAA04P,GAAA,MACA14P,EAAA24P,GAAA,MACA34P,EAAA44P,GAAA,MACA54P,EAAA64P,GAAA,MACA74P,EAAA84P,IAAA,MACA94P,EAAA+4P,IAAA,MACA/4P,EAAAg5P,IAAA,MACAh5P,EAAAi5P,IAAA,MACAj5P,EAAAk5P,IAAA,MACAl5P,EAAAm5P,IAAA,MACAn5P,EAAAo5P,IAAA,MACAp5P,EAAAq5P,IAAA,KACAr5P,EAAAs5P,IAAA,MACAt5P,EAAAu5P,IAAA,MACAv5P,EAAAw5P,IAAA,MACAx5P,EAAAy5P,IAAA,MACAz5P,EAAA05P,IAAA,MACA15P,EAAA25P,IAAA,MACA35P,EAAA45P,IAAA,MACA55P,EAAA65P,IAAA,MACA75P,EAAA85P,IAAA,MACA95P,EAAA+5P,IAAA,MACA/5P,EAAAg6P,IAAA,MACAh6P,EAAAi6P,IAAA,MACAj6P,EAAAk6P,IAAA,MACAl6P,EAAAm6P,IAAA,MACAn6P,EAAAo6P,IAAA,MACAp6P,EAAAq6P,IAAA,MACAr6P,EAAAs6P,IAAA,MACAt6P,EAAAu6P,IAAA,MACAv6P,EAAAw6P,IAAA,MACAx6P,EAAAy6P,IAAA,MACAz6P,EAAA06P,IAAA,MACA16P,EAAA26P,IAAA,MACA36P,EAAA46P,IAAA,MACA56P,EAAA66P,IAAA,MACA76P,EAAA86P,IAAA,MACA96P,EAAA+6P,IAAA,MACA/6P,EAAAg7P,IAAA,MACAh7P,EAAAi7P,IAAA,MACAj7P,EAAAk7P,IAAA,MACAl7P,EAAAm7P,IAAA,MACAn7P,EAAAo7P,IAAA,MACAp7P,EAAAq7P,IAAA,MACAr7P,EAAAs7P,IAAA,MACAt7P,EAAAu7P,IAAA,MACAv7P,EAAAw7P,IAAA,MACAx7P,EAAAy7P,IAAA,KACAz7P,EAAA07P,IAAA,MACA17P,EAAA27P,IAAA,KACA37P,EAAA47P,IAAA,MACA57P,EAAA67P,KAAA,MACA77P,EAAA87P,IAAA,MACA97P,EAAA+7P,KAAA,MACA/7P,EAAAg8P,IAAA,KACAh8P,EAAAi8P,IAAA,KACAj8P,EAAAk8P,IAAA,KACAl8P,EAAAm8P,IAAA,MACAn8P,EAAAo8P,IAAA,KACAp8P,EAAAq8P,IAAA,MACAr8P,EAAAs8P,IAAA,MACAt8P,EAAAu8P,IAAA,MACAv8P,EAAAw8P,IAAA,MACAx8P,EAAAy8P,IAAA,MACAz8P,EAAA08P,IAAA,MACA18P,EAAA28P,KAAA,MACA38P,EAAA48P,KAAA,MACA58P,EAAA68P,KAAA,MACA78P,EAAA88P,KAAA,MACA98P,EAAA+8P,KAAA,MACA/8P,EAAAg9P,KAAA,MACAh9P,EAAAi9P,KAAA,MACAj9P,EAAAk9P,KAAA,MACAl9P,EAAAm9P,KAAA,KACAn9P,EAAAo9P,KAAA,KACAp9P,EAAAq9P,KAAA,KACAr9P,EAAAs9P,KAAA,KACAt9P,EAAAu9P,KAAA,KACAv9P,EAAAw9P,KAAA,KACAx9P,EAAAy9P,KAAA,KACAz9P,EAAA09P,KAAA,KACA19P,EAAA29P,KAAA,KACA39P,EAAA49P,KAAA,KACA59P,EAAA69P,KAAA,KACA79P,EAAA89P,KAAA,KACA99P,EAAA+9P,KAAA,KACA/9P,EAAAg+P,KAAA,KACAh+P,EAAAi+P,KAAA,MACAj+P,EAAAk+P,KAAA,MACAl+P,EAAAm+P,KAAA,MACAn+P,EAAAo+P,KAAA,MACAp+P,EAAAq+P,KAAA,MACAr+P,EAAAs+P,KAAA,MACAt+P,EAAAu+P,KAAA,MACAv+P,EAAAw+P,KAAA,MACAx+P,EAAAy+P,KAAA,MACAz+P,EAAA0+P,KAAA,MACA1+P,EAAA2+P,KAAA,MACA3+P,EAAA4+P,KAAA,MACA5+P,EAAA6+P,KAAA,MACA7+P,EAAA8+P,KAAA,MACA9+P,EAAA++P,KAAA,MACA/+P,EAAAg/P,KAAA,MACAh/P,EAAAi/P,KAAA,MACAj/P,EAAAk/P,KAAA,MACAl/P,EAAAm/P,KAAA,MACAn/P,EAAAo/P,KAAA,MACAp/P,EAAAq/P,KAAA,MACAr/P,EAAAs/P,KAAA,MACAt/P,EAAAu/P,KAAA,MACAv/P,EAAAw/P,KAAA,MACAx/P,EAAAy/P,KAAA,MACAz/P,EAAA0/P,KAAA,MACA1/P,EAAA2/P,KAAA,MACA3/P,EAAA4/P,KAAA,MACA5/P,EAAA6/P,KAAA,MACA7/P,EAAA8/P,KAAA,MACA9/P,EAAA+/P,KAAA,MACA//P,EAAAggQ,KAAA,KACAhgQ,EAAAigQ,KAAA,KACAjgQ,EAAAkgQ,KAAA,KACAlgQ,EAAAmgQ,KAAA,MACAngQ,EAAAogQ,KAAA,MACApgQ,EAAAqgQ,KAAA,MACArgQ,EAAAsgQ,KAAA,MACAtgQ,EAAAugQ,KAAA,MACAvgQ,EAAAwgQ,KAAA,MACAxgQ,EAAAygQ,KAAA,MACAzgQ,EAAA0gQ,KAAA,MACA1gQ,EAAA2gQ,KAAA,MACA3gQ,EAAA4gQ,KAAA,MACA5gQ,EAAA6gQ,KAAA,MACA7gQ,EAAA8gQ,KAAA,MACA9gQ,EAAA+gQ,KAAA,MACA/gQ,EAAAghQ,KAAA,MACAhhQ,EAAAihQ,KAAA,MACAjhQ,EAAAkhQ,KAAA,MACAlhQ,EAAAmhQ,KAAA,MACAnhQ,EAAAohQ,KAAA,MACAphQ,EAAAqhQ,KAAA,MACArhQ,EAAAshQ,KAAA,MACAthQ,EAAAuhQ,KAAA,MACAvhQ,EAAAwhQ,KAAA,MACAxhQ,EAAAyhQ,KAAA,MACAzhQ,EAAA0hQ,KAAA,MACA1hQ,EAAA2hQ,KAAA,MACA3hQ,EAAA4hQ,KAAA,MACA5hQ,EAAA6hQ,KAAA,MACA7hQ,EAAA8hQ,KAAA,MACA9hQ,EAAA+hQ,KAAA,MACA/hQ,EAAAgiQ,KAAA,MACAhiQ,EAAAiiQ,KAAA,MACAjiQ,EAAAkiQ,KAAA,MACAliQ,EAAAmiQ,KAAA,MACAniQ,EAAAoiQ,KAAA,MACApiQ,EAAAqiQ,KAAA,MACAriQ,EAAAsiQ,KAAA,MACAtiQ,EAAAuiQ,KAAA,MACAviQ,EAAAwiQ,KAAA,MACAxiQ,EAAAyiQ,IAAA,MACAziQ,EAAA0iQ,IAAA,MACA1iQ,EAAA2iQ,IAAA,MACA3iQ,EAAA4iQ,IAAA,MACA5iQ,EAAA6iQ,IAAA,MACA7iQ,EAAA8iQ,IAAA,MACA9iQ,EAAA+iQ,KAAA,MACA/iQ,EAAAgjQ,IAAA,MACAhjQ,EAAAijQ,KAAA,MACAjjQ,EAAAkjQ,IAAA,MACAljQ,EAAAmjQ,IAAA,MACAnjQ,EAAAojQ,IAAA,MACApjQ,EAAAqjQ,IAAA,MACArjQ,EAAAsjQ,IAAA,MACAtjQ,EAAA,eAEApB,EAAA6+F,mBACA7+F,EAAAy1G,4BAIA,SAAAx1G,EAAAD,EAAA2F,GAEA,aAGA/E,OAAAC,eAAAb,EAAA,cACAmB,OAAA,IAEAnB,EAAAu1G,kCAAAv1G,EAAAq1G,qCAAAr1G,EAAAm1G,4BAAAn1G,EAAA2iG,gBAAA3iG,EAAAwhG,cAAAxhG,EAAA+0G,iBAAA/0G,EAAA4hG,mBAAA,EAEA,IAAAv7F,EAAAV,EAAA,GAEA,MAAAi8F,GAAA,EAAAv7F,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAAujQ,YAAA,YACAvjQ,EAAA,qCACAA,EAAA,kDACAA,EAAA,0CACAA,EAAAwjQ,WAAA,YACAxjQ,EAAA,oCACAA,EAAA,iDACAA,EAAA,yCACAA,EAAA,2BACAA,EAAA,qCACAA,EAAA,kDACAA,EAAA,0CACAA,EAAAyjQ,MAAA,YACAzjQ,EAAA,+BACAA,EAAA,4CACAA,EAAA,oCACAA,EAAA,8CACAA,EAAA,iCACAA,EAAA,sCACAA,EAAA0jQ,QAAA,YACA1jQ,EAAA,+BACAA,EAAA,4CACAA,EAAA,oCACAA,EAAA2jQ,WAAA,UACA3jQ,EAAA,kCACAA,EAAA,+CACAA,EAAA,uCACAA,EAAA,mDACAA,EAAA,sCACAA,EAAA,2CACAA,EAAA4jQ,eAAA,UACA5jQ,EAAA6jQ,UAAA,YACA7jQ,EAAA,mCACAA,EAAA,gDACAA,EAAA,iDACAA,EAAA,wCACAA,EAAA,yCACAA,EAAA,wBACAA,EAAA,8BACAA,EAAA,0BACAA,EAAA8jQ,cAAA,cACA9jQ,EAAA,mCACAA,EAAA,+CACAA,EAAA,uCACAA,EAAA+jQ,gBAAA,cACA/jQ,EAAA,qCACAA,EAAA,iDACAA,EAAA,mDACAA,EAAA,uCACAA,EAAA,yCACAA,EAAA,2CACAA,EAAAgkQ,kBAAA,cACAhkQ,EAAA,uCACAA,EAAA,mDACAA,EAAA,6CAEApB,EAAA4hG,gBACA,MAAAmT,GAAA,EAAA1uG,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAAikQ,QAAA,YACAjkQ,EAAA,iCACAA,EAAA,8CACAA,EAAA,sCACAA,EAAAkkQ,cAAA,YACAlkQ,EAAA,uCACAA,EAAA,oDACAA,EAAA,4CACAA,EAAAmkQ,YAAA,gBACAnkQ,EAAA,yCACAA,EAAA,qDACAA,EAAA,6CACAA,EAAAokQ,cAAA,UACApkQ,EAAA,qCACAA,EAAA,kDACAA,EAAA,0CACAA,EAAA,oCACAA,EAAA,yBACAA,EAAA,mCACAA,EAAA,+CACAA,EAAA,uCACAA,EAAA,yBACAA,EAAA,mCACAA,EAAA,+CACAA,EAAA,uCACAA,EAAA,2BACAA,EAAA,qCACAA,EAAA,iDACAA,EAAA,yCACAA,EAAA,2BACAA,EAAA,qCACAA,EAAA,iDACAA,EAAA,yCACAA,EAAAqkQ,cAAA,eACArkQ,EAAAskQ,cAAA,YACAtkQ,EAAAukQ,UAAA,eACAvkQ,EAAA,sCAEApB,EAAA+0G,mBACA,MAAAvT,GAAA,EAAAn7F,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAA,mBACAA,EAAA,iBACAA,EAAAwkQ,UAAA,EACAxkQ,EAAAykQ,OAAA,EACAzkQ,EAAA0kQ,YAAA,EACA1kQ,EAAA2kQ,UAAA,EACA3kQ,EAAA,0BACAA,EAAA4kQ,SAAA,EACA5kQ,EAAA6kQ,MAAA,EACA7kQ,EAAA8kQ,MAAA,EACA9kQ,EAAA+kQ,OAAA,EACA/kQ,EAAAglQ,QAAA,EACAhlQ,EAAAilQ,aAAA,EACAjlQ,EAAAklQ,MAAA,EACAllQ,EAAAmlQ,OAAA,EACAnlQ,EAAA,uBACAA,EAAAolQ,UAAA,EACAplQ,EAAA,yBACAA,EAAA,sBACAA,EAAA,oBACAA,EAAAqlQ,QAAA,EACArlQ,EAAA,mBACAA,EAAA,mBACAA,EAAAslQ,SAAA,EACAtlQ,EAAA,qBACAA,EAAA,qBACAA,EAAAulQ,SAAA,EACAvlQ,EAAAwlQ,SAAA,EACAxlQ,EAAAylQ,UAAA,EACAzlQ,EAAA0lQ,SAAA,EACA1lQ,EAAA2lQ,SAAA,EACA3lQ,EAAA4lQ,QAAA,EACA5lQ,EAAA6lQ,QAAA,EACA7lQ,EAAA8lQ,SAAA,EACA9lQ,EAAA,wBACAA,EAAA,yBACAA,EAAA+lQ,WAAA,EACA/lQ,EAAA,iBACAA,EAAAgmQ,YAAA,EACAhmQ,EAAA,kBACAA,EAAAimQ,WAAA,EACAjmQ,EAAAkmQ,WAAA,EACAlmQ,EAAAmmQ,QAAA,EACAnmQ,EAAAomQ,SAAA,EACApmQ,EAAA,sBACAA,EAAA,qBACAA,EAAAqmQ,YAAA,EACArmQ,EAAA,mBACAA,EAAAsmQ,QAAA,EACAtmQ,EAAAumQ,SAAA,EACAvmQ,EAAAwmQ,YAAA,EACAxmQ,EAAAymQ,UAAA,EACAzmQ,EAAA0mQ,WAAA,EACA1mQ,EAAA2mQ,WAAA,EACA3mQ,EAAA,eACAA,EAAA4mQ,SAAA,EACA5mQ,EAAA6mQ,WAAA,EACA7mQ,EAAA8mQ,WAAA,EACA9mQ,EAAA,oBACAA,EAAA+mQ,UAAA,EACA/mQ,EAAAgnQ,SAAA,EACAhnQ,EAAAinQ,SAAA,EACAjnQ,EAAAknQ,YAAA,EACAlnQ,EAAA,sBACAA,EAAA,uBACAA,EAAA,qBACAA,EAAAmnQ,SAAA,EACAnnQ,EAAA,wBACAA,EAAAonQ,SAAA,EACApnQ,EAAAqnQ,UAAA,EACArnQ,EAAA,sBACAA,EAAAsnQ,WAAA,EACAtnQ,EAAA,mBACAA,EAAA,mBACAA,EAAAunQ,SAAA,EACAvnQ,EAAA,kBACAA,EAAAwnQ,QAAA,EACAxnQ,EAAAynQ,QAAA,EACAznQ,EAAA0nQ,SAAA,EACA1nQ,EAAA2nQ,SAAA,EACA3nQ,EAAA,uBACAA,EAAA,sBACAA,EAAA4nQ,eAAA,EACA5nQ,EAAA6nQ,QAAA,EACA7nQ,EAAA,oBACAA,EAAA8nQ,QAAA,EACA9nQ,EAAA+nQ,SAAA,EACA/nQ,EAAAgoQ,QAAA,EACAhoQ,EAAAioQ,QAAA,EACAjoQ,EAAAkoQ,QAAA,EACAloQ,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,mBACAA,EAAA,4BACAA,EAAAqkQ,eAAA,EACArkQ,EAAAmoQ,UAAA,EACAnoQ,EAAAooQ,UAAA,EACApoQ,EAAAqoQ,SAAA,EACAroQ,EAAA,yBACAA,EAAAsoQ,UAAA,EACAtoQ,EAAA,mBACAA,EAAA,wBACAA,EAAAuoQ,SAAA,EACAvoQ,EAAAwoQ,SAAA,EACAxoQ,EAAAyoQ,UAAA,EACAzoQ,EAAA0oQ,OAAA,EACA1oQ,EAAA,kBACAA,EAAA2oQ,OAAA,EACA3oQ,EAAA4oQ,OAAA,EACA5oQ,EAAA6oQ,SAAA,EACA7oQ,EAAA8oQ,SAAA,EACA9oQ,EAAA+oQ,UAAA,EACA/oQ,EAAAgpQ,MAAA,EACAhpQ,EAAA,qBACAA,EAAA,kBACAA,EAAAipQ,SAAA,EACAjpQ,EAAAkpQ,OAAA,EACAlpQ,EAAAmpQ,QAAA,EACAnpQ,EAAA,iBACAA,EAAA,sBACAA,EAAAopQ,QAAA,EACAppQ,EAAA,gBACAA,EAAA,qBACAA,EAAA,iBACAA,EAAAqpQ,YAAA,EACArpQ,EAAAspQ,QAAA,EACAtpQ,EAAAupQ,OAAA,EACAvpQ,EAAA,iBACAA,EAAAwpQ,SAAA,EACAxpQ,EAAAypQ,MAAA,IAEA7qQ,EAAAwhG,gBACA,MAAAmB,GAAA,EAAAt8F,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAA0pQ,UAAA,EACA1pQ,EAAAH,QAAA,EACAG,EAAA2pQ,cAAA,IAEA/qQ,EAAA2iG,kBACA,MAAAwS,GAAA,EAAA9uG,EAAAkqB,uBAAA,SAAAnvaAEApB,EAAAm1G,8BACA,MAAAE,GAAA,EAAAhvG,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAA,SACAA,EAAA,SACAA,EAAA,WAEApB,EAAAq1G,uCACA,MAAAE,GAAA,EAAAlvG,EAAAkqB,uBAAA,SAAAnvB,GACAA,EAAA,MACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,OACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,WAEApB,EAAAu1G,qCAIA,SAAAt1G,EAAAD,EAAA2F,GAEA,IAAA4qB,EAAA5qB,EAAA,GAAA4qB,sBACAy6O,EAAAz6O,EAAA,SAAAnvB,GACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,cAsCA,IAAA6pQ,EAAA,CACA,CACAt/O,MAAA,EACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,KAEA,CACAD,MAAA,IACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,OACAC,IAAA,QAEA,CACAD,MAAA,OACAC,IAAA,QAEA,CACAD,MAAA,QACAC,IAAA,SAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,OACAC,IAAA,QAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,OACAC,IAAA,QAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,OACAC,IAAA,QAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,KACAC,IAAA,MAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,KACAC,IAAA,OAEA,CACAD,MAAA,MACAC,IAAA,OAEA,CACAD,MAAA,OACAC,IAAA,SAuBA,IAAA8uE,EAAAnqE,EAAA,SAAAnvB,GACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,oBACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,eACAA,EAAA,oBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,qCACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,kBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,qCACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,6CACAA,EAAA,uCACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,eACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,+BACAA,EAAA,+BACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,ymBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mBACAA,EAAA,mB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","file":"js/pdfjs/pdf_js_worker-f78eee98b222782ec336.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","require('pdfjs-dist/build/pdf.worker.js');\n","/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf.worker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf.worker\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf.worker\"] = root.pdfjsWorker = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __w_pdfjs_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__w_pdfjs_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__w_pdfjs_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__w_pdfjs_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__w_pdfjs_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__w_pdfjs_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__w_pdfjs_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __w_pdfjs_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__w_pdfjs_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __w_pdfjs_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__w_pdfjs_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__w_pdfjs_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__w_pdfjs_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __w_pdfjs_require__(__w_pdfjs_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"WorkerMessageHandler\", {\n  enumerable: true,\n  get: function () {\n    return _worker.WorkerMessageHandler;\n  }\n});\n\nvar _worker = __w_pdfjs_require__(1);\n\nconst pdfjsVersion = '2.5.207';\nconst pdfjsBuild = '0974d605';\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkerMessageHandler = exports.WorkerTask = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _pdf_manager = __w_pdfjs_require__(6);\n\nvar _is_node = __w_pdfjs_require__(4);\n\nvar _message_handler = __w_pdfjs_require__(45);\n\nvar _worker_stream = __w_pdfjs_require__(46);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar WorkerTask = function WorkerTaskClosure() {\n  function WorkerTask(name) {\n    this.name = name;\n    this.terminated = false;\n    this._capability = (0, _util.createPromiseCapability)();\n  }\n\n  WorkerTask.prototype = {\n    get finished() {\n      return this._capability.promise;\n    },\n\n    finish() {\n      this._capability.resolve();\n    },\n\n    terminate() {\n      this.terminated = true;\n    },\n\n    ensureNotTerminated() {\n      if (this.terminated) {\n        throw new Error(\"Worker task was terminated\");\n      }\n    }\n\n  };\n  return WorkerTask;\n}();\n\nexports.WorkerTask = WorkerTask;\nvar WorkerMessageHandler = {\n  setup(handler, port) {\n    var testMessageProcessed = false;\n    handler.on(\"test\", function wphSetupTest(data) {\n      if (testMessageProcessed) {\n        return;\n      }\n\n      testMessageProcessed = true;\n\n      if (!(data instanceof Uint8Array)) {\n        handler.send(\"test\", null);\n        return;\n      }\n\n      const supportTransfers = data[0] === 255;\n      handler.postMessageTransfers = supportTransfers;\n      handler.send(\"test\", {\n        supportTransfers\n      });\n    });\n    handler.on(\"configure\", function wphConfigure(data) {\n      (0, _util.setVerbosityLevel)(data.verbosity);\n    });\n    handler.on(\"GetDocRequest\", function wphSetupDoc(data) {\n      return WorkerMessageHandler.createDocumentHandler(data, port);\n    });\n  },\n\n  createDocumentHandler(docParams, port) {\n    var pdfManager;\n    var terminated = false;\n    var cancelXHRs = null;\n    var WorkerTasks = [];\n    const verbosity = (0, _util.getVerbosityLevel)();\n    const apiVersion = docParams.apiVersion;\n    const workerVersion = '2.5.207';\n\n    if (apiVersion !== workerVersion) {\n      throw new Error(`The API version \"${apiVersion}\" does not match ` + `the Worker version \"${workerVersion}\".`);\n    }\n\n    const enumerableProperties = [];\n\n    for (const property in []) {\n      enumerableProperties.push(property);\n    }\n\n    if (enumerableProperties.length) {\n      throw new Error(\"The `Array.prototype` contains unexpected enumerable properties: \" + enumerableProperties.join(\", \") + \"; thus breaking e.g. `for...in` iteration of `Array`s.\");\n    }\n\n    if (typeof ReadableStream === \"undefined\" || typeof Promise.allSettled === \"undefined\") {\n      throw new Error(\"The browser/environment lacks native support for critical \" + \"functionality used by the PDF.js library (e.g. \" + \"`ReadableStream` and/or `Promise.allSettled`); \" + \"please use an ES5-compatible build instead.\");\n    }\n\n    var docId = docParams.docId;\n    var docBaseUrl = docParams.docBaseUrl;\n    var workerHandlerName = docParams.docId + \"_worker\";\n    var handler = new _message_handler.MessageHandler(workerHandlerName, docId, port);\n    handler.postMessageTransfers = docParams.postMessageTransfers;\n\n    function ensureNotTerminated() {\n      if (terminated) {\n        throw new Error(\"Worker was terminated\");\n      }\n    }\n\n    function startWorkerTask(task) {\n      WorkerTasks.push(task);\n    }\n\n    function finishWorkerTask(task) {\n      task.finish();\n      var i = WorkerTasks.indexOf(task);\n      WorkerTasks.splice(i, 1);\n    }\n\n    async function loadDocument(recoveryMode) {\n      await pdfManager.ensureDoc(\"checkHeader\");\n      await pdfManager.ensureDoc(\"parseStartXRef\");\n      await pdfManager.ensureDoc(\"parse\", [recoveryMode]);\n\n      if (!recoveryMode) {\n        await pdfManager.ensureDoc(\"checkFirstPage\");\n      }\n\n      const [numPages, fingerprint] = await Promise.all([pdfManager.ensureDoc(\"numPages\"), pdfManager.ensureDoc(\"fingerprint\")]);\n      return {\n        numPages,\n        fingerprint\n      };\n    }\n\n    function getPdfManager(data, evaluatorOptions) {\n      var pdfManagerCapability = (0, _util.createPromiseCapability)();\n      let newPdfManager;\n      var source = data.source;\n\n      if (source.data) {\n        try {\n          newPdfManager = new _pdf_manager.LocalPdfManager(docId, source.data, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        return pdfManagerCapability.promise;\n      }\n\n      var pdfStream,\n          cachedChunks = [];\n\n      try {\n        pdfStream = new _worker_stream.PDFWorkerStream(handler);\n      } catch (ex) {\n        pdfManagerCapability.reject(ex);\n        return pdfManagerCapability.promise;\n      }\n\n      var fullRequest = pdfStream.getFullReader();\n      fullRequest.headersReady.then(function () {\n        if (!fullRequest.isRangeSupported) {\n          return;\n        }\n\n        var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;\n        newPdfManager = new _pdf_manager.NetworkPdfManager(docId, pdfStream, {\n          msgHandler: handler,\n          password: source.password,\n          length: fullRequest.contentLength,\n          disableAutoFetch,\n          rangeChunkSize: source.rangeChunkSize\n        }, evaluatorOptions, docBaseUrl);\n\n        for (let i = 0; i < cachedChunks.length; i++) {\n          newPdfManager.sendProgressiveData(cachedChunks[i]);\n        }\n\n        cachedChunks = [];\n        pdfManagerCapability.resolve(newPdfManager);\n        cancelXHRs = null;\n      }).catch(function (reason) {\n        pdfManagerCapability.reject(reason);\n        cancelXHRs = null;\n      });\n      var loaded = 0;\n\n      var flushChunks = function () {\n        var pdfFile = (0, _util.arraysToBytes)(cachedChunks);\n\n        if (source.length && pdfFile.length !== source.length) {\n          (0, _util.warn)(\"reported HTTP length is different from actual\");\n        }\n\n        try {\n          newPdfManager = new _pdf_manager.LocalPdfManager(docId, pdfFile, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        cachedChunks = [];\n      };\n\n      var readPromise = new Promise(function (resolve, reject) {\n        var readChunk = function ({\n          value,\n          done\n        }) {\n          try {\n            ensureNotTerminated();\n\n            if (done) {\n              if (!newPdfManager) {\n                flushChunks();\n              }\n\n              cancelXHRs = null;\n              return;\n            }\n\n            loaded += (0, _util.arrayByteLength)(value);\n\n            if (!fullRequest.isStreamingSupported) {\n              handler.send(\"DocProgress\", {\n                loaded,\n                total: Math.max(loaded, fullRequest.contentLength || 0)\n              });\n            }\n\n            if (newPdfManager) {\n              newPdfManager.sendProgressiveData(value);\n            } else {\n              cachedChunks.push(value);\n            }\n\n            fullRequest.read().then(readChunk, reject);\n          } catch (e) {\n            reject(e);\n          }\n        };\n\n        fullRequest.read().then(readChunk, reject);\n      });\n      readPromise.catch(function (e) {\n        pdfManagerCapability.reject(e);\n        cancelXHRs = null;\n      });\n\n      cancelXHRs = function (reason) {\n        pdfStream.cancelAllRequests(reason);\n      };\n\n      return pdfManagerCapability.promise;\n    }\n\n    function setupDoc(data) {\n      function onSuccess(doc) {\n        ensureNotTerminated();\n        handler.send(\"GetDoc\", {\n          pdfInfo: doc\n        });\n      }\n\n      function onFailure(ex) {\n        ensureNotTerminated();\n\n        if (ex instanceof _util.PasswordException) {\n          var task = new WorkerTask(`PasswordException: response ${ex.code}`);\n          startWorkerTask(task);\n          handler.sendWithPromise(\"PasswordRequest\", ex).then(function ({\n            password\n          }) {\n            finishWorkerTask(task);\n            pdfManager.updatePassword(password);\n            pdfManagerReady();\n          }).catch(function () {\n            finishWorkerTask(task);\n            handler.send(\"DocException\", ex);\n          });\n        } else if (ex instanceof _util.InvalidPDFException || ex instanceof _util.MissingPDFException || ex instanceof _util.UnexpectedResponseException || ex instanceof _util.UnknownErrorException) {\n          handler.send(\"DocException\", ex);\n        } else {\n          handler.send(\"DocException\", new _util.UnknownErrorException(ex.message, ex.toString()));\n        }\n      }\n\n      function pdfManagerReady() {\n        ensureNotTerminated();\n        loadDocument(false).then(onSuccess, function loadFailure(ex) {\n          ensureNotTerminated();\n\n          if (!(ex instanceof _core_utils.XRefParseException)) {\n            onFailure(ex);\n            return;\n          }\n\n          pdfManager.requestLoadedStream();\n          pdfManager.onLoadedStream().then(function () {\n            ensureNotTerminated();\n            loadDocument(true).then(onSuccess, onFailure);\n          });\n        }, onFailure);\n      }\n\n      ensureNotTerminated();\n      var evaluatorOptions = {\n        maxImageSize: data.maxImageSize,\n        disableFontFace: data.disableFontFace,\n        ignoreErrors: data.ignoreErrors,\n        isEvalSupported: data.isEvalSupported,\n        fontExtraProperties: data.fontExtraProperties\n      };\n      getPdfManager(data, evaluatorOptions).then(function (newPdfManager) {\n        if (terminated) {\n          newPdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n          throw new Error(\"Worker was terminated\");\n        }\n\n        pdfManager = newPdfManager;\n        pdfManager.onLoadedStream().then(function (stream) {\n          handler.send(\"DataLoaded\", {\n            length: stream.bytes.byteLength\n          });\n        });\n      }).then(pdfManagerReady, onFailure);\n    }\n\n    handler.on(\"GetPage\", function wphSetupGetPage(data) {\n      return pdfManager.getPage(data.pageIndex).then(function (page) {\n        return Promise.all([pdfManager.ensure(page, \"rotate\"), pdfManager.ensure(page, \"ref\"), pdfManager.ensure(page, \"userUnit\"), pdfManager.ensure(page, \"view\")]).then(function ([rotate, ref, userUnit, view]) {\n          return {\n            rotate,\n            ref,\n            userUnit,\n            view\n          };\n        });\n      });\n    });\n    handler.on(\"GetPageIndex\", function wphSetupGetPageIndex(data) {\n      var ref = _primitives.Ref.get(data.ref.num, data.ref.gen);\n\n      var catalog = pdfManager.pdfDocument.catalog;\n      return catalog.getPageIndex(ref);\n    });\n    handler.on(\"GetDestinations\", function wphSetupGetDestinations(data) {\n      return pdfManager.ensureCatalog(\"destinations\");\n    });\n    handler.on(\"GetDestination\", function wphSetupGetDestination(data) {\n      return pdfManager.ensureCatalog(\"getDestination\", [data.id]);\n    });\n    handler.on(\"GetPageLabels\", function wphSetupGetPageLabels(data) {\n      return pdfManager.ensureCatalog(\"pageLabels\");\n    });\n    handler.on(\"GetPageLayout\", function wphSetupGetPageLayout(data) {\n      return pdfManager.ensureCatalog(\"pageLayout\");\n    });\n    handler.on(\"GetPageMode\", function wphSetupGetPageMode(data) {\n      return pdfManager.ensureCatalog(\"pageMode\");\n    });\n    handler.on(\"GetViewerPreferences\", function (data) {\n      return pdfManager.ensureCatalog(\"viewerPreferences\");\n    });\n    handler.on(\"GetOpenAction\", function (data) {\n      return pdfManager.ensureCatalog(\"openAction\");\n    });\n    handler.on(\"GetAttachments\", function wphSetupGetAttachments(data) {\n      return pdfManager.ensureCatalog(\"attachments\");\n    });\n    handler.on(\"GetJavaScript\", function wphSetupGetJavaScript(data) {\n      return pdfManager.ensureCatalog(\"javaScript\");\n    });\n    handler.on(\"GetOutline\", function wphSetupGetOutline(data) {\n      return pdfManager.ensureCatalog(\"documentOutline\");\n    });\n    handler.on(\"GetPermissions\", function (data) {\n      return pdfManager.ensureCatalog(\"permissions\");\n    });\n    handler.on(\"GetMetadata\", function wphSetupGetMetadata(data) {\n      return Promise.all([pdfManager.ensureDoc(\"documentInfo\"), pdfManager.ensureCatalog(\"metadata\")]);\n    });\n    handler.on(\"GetData\", function wphSetupGetData(data) {\n      pdfManager.requestLoadedStream();\n      return pdfManager.onLoadedStream().then(function (stream) {\n        return stream.bytes;\n      });\n    });\n    handler.on(\"GetStats\", function wphSetupGetStats(data) {\n      return pdfManager.pdfDocument.xref.stats;\n    });\n    handler.on(\"GetAnnotations\", function ({\n      pageIndex,\n      intent\n    }) {\n      return pdfManager.getPage(pageIndex).then(function (page) {\n        return page.getAnnotationsData(intent);\n      });\n    });\n    handler.on(\"GetOperatorList\", function wphSetupRenderPage(data, sink) {\n      var pageIndex = data.pageIndex;\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(`GetOperatorList: page ${pageIndex}`);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.getOperatorList({\n          handler,\n          sink,\n          task,\n          intent: data.intent,\n          renderInteractiveForms: data.renderInteractiveForms\n        }).then(function (operatorListInfo) {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getOperatorList: time=` + `${Date.now() - start}ms, len=${operatorListInfo.length}`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n          });\n          sink.error(reason);\n        });\n      });\n    }, this);\n    handler.on(\"GetTextContent\", function wphExtractText(data, sink) {\n      var pageIndex = data.pageIndex;\n\n      sink.onPull = function (desiredSize) {};\n\n      sink.onCancel = function (reason) {};\n\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(\"GetTextContent: page \" + pageIndex);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.extractTextContent({\n          handler,\n          task,\n          sink,\n          normalizeWhitespace: data.normalizeWhitespace,\n          combineTextItems: data.combineTextItems\n        }).then(function () {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getTextContent: time=` + `${Date.now() - start}ms`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          sink.error(reason);\n        });\n      });\n    });\n    handler.on(\"FontFallback\", function (data) {\n      return pdfManager.fontFallback(data.id, handler);\n    });\n    handler.on(\"Cleanup\", function wphCleanup(data) {\n      return pdfManager.cleanup(true);\n    });\n    handler.on(\"Terminate\", function wphTerminate(data) {\n      terminated = true;\n      const waitOn = [];\n\n      if (pdfManager) {\n        pdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n        const cleanupPromise = pdfManager.cleanup();\n        waitOn.push(cleanupPromise);\n        pdfManager = null;\n      } else {\n        (0, _primitives.clearPrimitiveCaches)();\n      }\n\n      if (cancelXHRs) {\n        cancelXHRs(new _util.AbortException(\"Worker was terminated.\"));\n      }\n\n      WorkerTasks.forEach(function (task) {\n        waitOn.push(task.finished);\n        task.terminate();\n      });\n      return Promise.all(waitOn).then(function () {\n        handler.destroy();\n        handler = null;\n      });\n    });\n    handler.on(\"Ready\", function wphReady(data) {\n      setupDoc(docParams);\n      docParams = null;\n    });\n    return workerHandlerName;\n  },\n\n  initializeFromPort(port) {\n    var handler = new _message_handler.MessageHandler(\"worker\", \"main\", port);\n    WorkerMessageHandler.setup(handler, port);\n    handler.send(\"ready\", null);\n  }\n\n};\nexports.WorkerMessageHandler = WorkerMessageHandler;\n\nfunction isMessagePort(maybePort) {\n  return typeof maybePort.postMessage === \"function\" && \"onmessage\" in maybePort;\n}\n\nif (typeof window === \"undefined\" && !_is_node.isNodeJS && typeof self !== \"undefined\" && isMessagePort(self)) {\n  WorkerMessageHandler.initializeFromPort(self);\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayByteLength = arrayByteLength;\nexports.arraysToBytes = arraysToBytes;\nexports.assert = assert;\nexports.bytesToString = bytesToString;\nexports.createPromiseCapability = createPromiseCapability;\nexports.getVerbosityLevel = getVerbosityLevel;\nexports.info = info;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isArrayEqual = isArrayEqual;\nexports.isBool = isBool;\nexports.isEmptyObj = isEmptyObj;\nexports.isNum = isNum;\nexports.isString = isString;\nexports.isSameOrigin = isSameOrigin;\nexports.createValidAbsoluteUrl = createValidAbsoluteUrl;\nexports.removeNullCharacters = removeNullCharacters;\nexports.setVerbosityLevel = setVerbosityLevel;\nexports.shadow = shadow;\nexports.string32 = string32;\nexports.stringToBytes = stringToBytes;\nexports.stringToPDFString = stringToPDFString;\nexports.stringToUTF8String = stringToUTF8String;\nexports.utf8StringToString = utf8StringToString;\nexports.warn = warn;\nexports.unreachable = unreachable;\nexports.IsEvalSupportedCached = exports.IsLittleEndianCached = exports.createObjectURL = exports.FormatError = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.MissingPDFException = exports.InvalidPDFException = exports.AbortException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VerbosityLevel = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = exports.BaseException = void 0;\n\n__w_pdfjs_require__(3);\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nexports.IDENTITY_MATRIX = IDENTITY_MATRIX;\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nexports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nexports.PermissionFlag = PermissionFlag;\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nexports.TextRenderingMode = TextRenderingMode;\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nexports.ImageKind = ImageKind;\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nexports.AnnotationType = AnnotationType;\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\"\n};\nexports.AnnotationStateModelType = AnnotationStateModelType;\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\"\n};\nexports.AnnotationMarkedState = AnnotationMarkedState;\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\"\n};\nexports.AnnotationReviewState = AnnotationReviewState;\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\"\n};\nexports.AnnotationReplyType = AnnotationReplyType;\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nexports.AnnotationFlag = AnnotationFlag;\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nexports.AnnotationFieldFlag = AnnotationFieldFlag;\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nexports.AnnotationBorderStyleType = AnnotationBorderStyleType;\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\"\n};\nexports.StreamType = StreamType;\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\"\n};\nexports.FontType = FontType;\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nexports.VerbosityLevel = VerbosityLevel;\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2\n};\nexports.CMapCompressionType = CMapCompressionType;\nconst OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\nexports.OPS = OPS;\nconst UNSUPPORTED_FEATURES = {\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontGetPath: \"errorFontGetPath\"\n};\nexports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexports.PasswordResponses = PasswordResponses;\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n\n  try {\n    base = new URL(baseUrl);\n\n    if (!base.origin || base.origin === \"null\") {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {}\n\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\n\nconst BaseException = function BaseExceptionClosure() {\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\n\nexports.BaseException = BaseException;\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n\n}\n\nexports.PasswordException = PasswordException;\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n\n}\n\nexports.UnknownErrorException = UnknownErrorException;\n\nclass InvalidPDFException extends BaseException {}\n\nexports.InvalidPDFException = InvalidPDFException;\n\nclass MissingPDFException extends BaseException {}\n\nexports.MissingPDFException = MissingPDFException;\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n\n}\n\nexports.UnexpectedResponseException = UnexpectedResponseException;\n\nclass FormatError extends BaseException {}\n\nexports.FormatError = FormatError;\n\nclass AbortException extends BaseException {}\n\nexports.AbortException = AbortException;\nconst NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  const strBuf = [];\n\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return bytes;\n}\n\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n\n  let resultLength = 0;\n\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\n\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  }\n\n};\nexports.IsLittleEndianCached = IsLittleEndianCached;\n\nfunction isEvalSupported() {\n  try {\n    new Function(\"\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  }\n\n};\nexports.IsEvalSupportedCached = IsEvalSupportedCached;\nconst rgbBuf = [\"rgb(\", 0, \",\", 0, \",\", 0, \")\"];\n\nclass Util {\n  static makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join(\"\");\n  }\n\n  static transform(m1, m2) {\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n  }\n\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n\n  static apply3dTransform(m, v) {\n    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n  }\n\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  static normalizeRect(rect) {\n    const r = rect.slice(0);\n\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n\n    return r;\n  }\n\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n}\n\nexports.Util = Util;\nconst PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n        strBuf = [];\n\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (const key in obj) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    }\n\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nconst createObjectURL = function createObjectURLClosure() {\n  const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return function createObjectURL(data, contentType, forceDataSchema = false) {\n    if (!forceDataSchema && URL.createObjectURL) {\n      const blob = new Blob([data], {\n        type: contentType\n      });\n      return URL.createObjectURL(blob);\n    }\n\n    let buffer = `data:${contentType};base64,`;\n\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n            d2 = (b1 & 3) << 4 | b2 >> 4;\n      const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n\n    return buffer;\n  };\n}();\n\nexports.createObjectURL = createObjectURL;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nvar _is_node = __w_pdfjs_require__(4);\n\n;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNodeJS = void 0;\nconst isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !process.versions.electron;\nexports.isNodeJS = isNodeJS;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearPrimitiveCaches = clearPrimitiveCaches;\nexports.isEOF = isEOF;\nexports.isCmd = isCmd;\nexports.isDict = isDict;\nexports.isName = isName;\nexports.isRef = isRef;\nexports.isRefsEqual = isRefsEqual;\nexports.isStream = isStream;\nexports.RefSetCache = exports.RefSet = exports.Ref = exports.Name = exports.Dict = exports.Cmd = exports.EOF = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar EOF = {};\nexports.EOF = EOF;\n\nvar Name = function NameClosure() {\n  let nameCache = Object.create(null);\n\n  function Name(name) {\n    this.name = name;\n  }\n\n  Name.prototype = {};\n\n  Name.get = function Name_get(name) {\n    var nameValue = nameCache[name];\n    return nameValue ? nameValue : nameCache[name] = new Name(name);\n  };\n\n  Name._clearCache = function () {\n    nameCache = Object.create(null);\n  };\n\n  return Name;\n}();\n\nexports.Name = Name;\n\nvar Cmd = function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  function Cmd(cmd) {\n    this.cmd = cmd;\n  }\n\n  Cmd.prototype = {};\n\n  Cmd.get = function Cmd_get(cmd) {\n    var cmdValue = cmdCache[cmd];\n    return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd(cmd);\n  };\n\n  Cmd._clearCache = function () {\n    cmdCache = Object.create(null);\n  };\n\n  return Cmd;\n}();\n\nexports.Cmd = Cmd;\n\nvar Dict = function DictClosure() {\n  var nonSerializable = function nonSerializableClosure() {\n    return nonSerializable;\n  };\n\n  function Dict(xref) {\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable;\n  }\n\n  Dict.prototype = {\n    assignXref: function Dict_assignXref(newXref) {\n      this.xref = newXref;\n    },\n\n    get(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetch(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    async getAsync(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetchAsync(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getArray(key1, key2, key3) {\n      let value = this.get(key1, key2, key3);\n\n      if (!Array.isArray(value) || !this.xref) {\n        return value;\n      }\n\n      value = value.slice();\n\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (!(value[i] instanceof Ref)) {\n          continue;\n        }\n\n        value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getRaw: function Dict_getRaw(key) {\n      return this._map[key];\n    },\n    getKeys: function Dict_getKeys() {\n      return Object.keys(this._map);\n    },\n    set: function Dict_set(key, value) {\n      this._map[key] = value;\n    },\n    has: function Dict_has(key) {\n      return this._map[key] !== undefined;\n    },\n    forEach: function Dict_forEach(callback) {\n      for (var key in this._map) {\n        callback(key, this.get(key));\n      }\n    }\n  };\n  Dict.empty = new Dict(null);\n\n  Dict.merge = function (xref, dictArray) {\n    const mergedDict = new Dict(xref);\n\n    for (let i = 0, ii = dictArray.length; i < ii; i++) {\n      const dict = dictArray[i];\n\n      if (!isDict(dict)) {\n        continue;\n      }\n\n      for (const keyName in dict._map) {\n        if (mergedDict._map[keyName] !== undefined) {\n          continue;\n        }\n\n        mergedDict._map[keyName] = dict._map[keyName];\n      }\n    }\n\n    return mergedDict;\n  };\n\n  return Dict;\n}();\n\nexports.Dict = Dict;\n\nvar Ref = function RefClosure() {\n  let refCache = Object.create(null);\n\n  function Ref(num, gen) {\n    this.num = num;\n    this.gen = gen;\n  }\n\n  Ref.prototype = {\n    toString: function Ref_toString() {\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n\n      return `${this.num}R${this.gen}`;\n    }\n  };\n\n  Ref.get = function (num, gen) {\n    const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n    const refValue = refCache[key];\n    return refValue ? refValue : refCache[key] = new Ref(num, gen);\n  };\n\n  Ref._clearCache = function () {\n    refCache = Object.create(null);\n  };\n\n  return Ref;\n}();\n\nexports.Ref = Ref;\n\nvar RefSet = function RefSetClosure() {\n  function RefSet() {\n    this.dict = Object.create(null);\n  }\n\n  RefSet.prototype = {\n    has: function RefSet_has(ref) {\n      return ref.toString() in this.dict;\n    },\n    put: function RefSet_put(ref) {\n      this.dict[ref.toString()] = true;\n    },\n    remove: function RefSet_remove(ref) {\n      delete this.dict[ref.toString()];\n    }\n  };\n  return RefSet;\n}();\n\nexports.RefSet = RefSet;\n\nvar RefSetCache = function RefSetCacheClosure() {\n  function RefSetCache() {\n    this.dict = Object.create(null);\n  }\n\n  RefSetCache.prototype = {\n    get size() {\n      return Object.keys(this.dict).length;\n    },\n\n    get: function RefSetCache_get(ref) {\n      return this.dict[ref.toString()];\n    },\n    has: function RefSetCache_has(ref) {\n      return ref.toString() in this.dict;\n    },\n    put: function RefSetCache_put(ref, obj) {\n      this.dict[ref.toString()] = obj;\n    },\n    putAlias: function RefSetCache_putAlias(ref, aliasRef) {\n      this.dict[ref.toString()] = this.get(aliasRef);\n    },\n    forEach: function RefSetCache_forEach(callback) {\n      for (const i in this.dict) {\n        callback(this.dict[i]);\n      }\n    },\n    clear: function RefSetCache_clear() {\n      this.dict = Object.create(null);\n    }\n  };\n  return RefSetCache;\n}();\n\nexports.RefSetCache = RefSetCache;\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type));\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return typeof v === \"object\" && v !== null && v.getBytes !== undefined;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n\n  Name._clearCache();\n\n  Ref._clearCache();\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkPdfManager = exports.LocalPdfManager = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _chunked_stream = __w_pdfjs_require__(7);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _document = __w_pdfjs_require__(9);\n\nvar _stream = __w_pdfjs_require__(12);\n\nclass BasePdfManager {\n  constructor() {\n    if (this.constructor === BasePdfManager) {\n      (0, _util.unreachable)(\"Cannot initialize BasePdfManager.\");\n    }\n  }\n\n  get docId() {\n    return this._docId;\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  get docBaseUrl() {\n    let docBaseUrl = null;\n\n    if (this._docBaseUrl) {\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(this._docBaseUrl);\n\n      if (absoluteUrl) {\n        docBaseUrl = absoluteUrl.href;\n      } else {\n        (0, _util.warn)(`Invalid absolute docBaseUrl: \"${this._docBaseUrl}\".`);\n      }\n    }\n\n    return (0, _util.shadow)(this, \"docBaseUrl\", docBaseUrl);\n  }\n\n  onLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `onLoadedStream` called\");\n  }\n\n  ensureDoc(prop, args) {\n    return this.ensure(this.pdfDocument, prop, args);\n  }\n\n  ensureXRef(prop, args) {\n    return this.ensure(this.pdfDocument.xref, prop, args);\n  }\n\n  ensureCatalog(prop, args) {\n    return this.ensure(this.pdfDocument.catalog, prop, args);\n  }\n\n  getPage(pageIndex) {\n    return this.pdfDocument.getPage(pageIndex);\n  }\n\n  fontFallback(id, handler) {\n    return this.pdfDocument.fontFallback(id, handler);\n  }\n\n  cleanup(manuallyTriggered = false) {\n    return this.pdfDocument.cleanup(manuallyTriggered);\n  }\n\n  async ensure(obj, prop, args) {\n    (0, _util.unreachable)(\"Abstract method `ensure` called\");\n  }\n\n  requestRange(begin, end) {\n    (0, _util.unreachable)(\"Abstract method `requestRange` called\");\n  }\n\n  requestLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `requestLoadedStream` called\");\n  }\n\n  sendProgressiveData(chunk) {\n    (0, _util.unreachable)(\"Abstract method `sendProgressiveData` called\");\n  }\n\n  updatePassword(password) {\n    this._password = password;\n  }\n\n  terminate(reason) {\n    (0, _util.unreachable)(\"Abstract method `terminate` called\");\n  }\n\n}\n\nclass LocalPdfManager extends BasePdfManager {\n  constructor(docId, data, password, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = password;\n    this._docBaseUrl = docBaseUrl;\n    this.evaluatorOptions = evaluatorOptions;\n    const stream = new _stream.Stream(data);\n    this.pdfDocument = new _document.PDFDocument(this, stream);\n    this._loadedStreamPromise = Promise.resolve(stream);\n  }\n\n  async ensure(obj, prop, args) {\n    const value = obj[prop];\n\n    if (typeof value === \"function\") {\n      return value.apply(obj, args);\n    }\n\n    return value;\n  }\n\n  requestRange(begin, end) {\n    return Promise.resolve();\n  }\n\n  requestLoadedStream() {}\n\n  onLoadedStream() {\n    return this._loadedStreamPromise;\n  }\n\n  terminate(reason) {}\n\n}\n\nexports.LocalPdfManager = LocalPdfManager;\n\nclass NetworkPdfManager extends BasePdfManager {\n  constructor(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = args.password;\n    this._docBaseUrl = docBaseUrl;\n    this.msgHandler = args.msgHandler;\n    this.evaluatorOptions = evaluatorOptions;\n    this.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {\n      msgHandler: args.msgHandler,\n      length: args.length,\n      disableAutoFetch: args.disableAutoFetch,\n      rangeChunkSize: args.rangeChunkSize\n    });\n    this.pdfDocument = new _document.PDFDocument(this, this.streamManager.getStream());\n  }\n\n  async ensure(obj, prop, args) {\n    try {\n      const value = obj[prop];\n\n      if (typeof value === \"function\") {\n        return value.apply(obj, args);\n      }\n\n      return value;\n    } catch (ex) {\n      if (!(ex instanceof _core_utils.MissingDataException)) {\n        throw ex;\n      }\n\n      await this.requestRange(ex.begin, ex.end);\n      return this.ensure(obj, prop, args);\n    }\n  }\n\n  requestRange(begin, end) {\n    return this.streamManager.requestRange(begin, end);\n  }\n\n  requestLoadedStream() {\n    this.streamManager.requestAllChunks();\n  }\n\n  sendProgressiveData(chunk) {\n    this.streamManager.onReceiveData({\n      chunk\n    });\n  }\n\n  onLoadedStream() {\n    return this.streamManager.onLoadedStream();\n  }\n\n  terminate(reason) {\n    this.streamManager.abort(reason);\n  }\n\n}\n\nexports.NetworkPdfManager = NetworkPdfManager;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChunkedStreamManager = exports.ChunkedStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass ChunkedStream {\n  constructor(length, chunkSize, manager) {\n    this.bytes = new Uint8Array(length);\n    this.start = 0;\n    this.pos = 0;\n    this.end = length;\n    this.chunkSize = chunkSize;\n    this.loadedChunks = [];\n    this.numChunksLoaded = 0;\n    this.numChunks = Math.ceil(length / chunkSize);\n    this.manager = manager;\n    this.progressiveDataLength = 0;\n    this.lastSuccessfulEnsureByteChunk = -1;\n  }\n\n  getMissingChunks() {\n    const chunks = [];\n\n    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        chunks.push(chunk);\n      }\n    }\n\n    return chunks;\n  }\n\n  getBaseStreams() {\n    return [this];\n  }\n\n  allChunksLoaded() {\n    return this.numChunksLoaded === this.numChunks;\n  }\n\n  onReceiveData(begin, chunk) {\n    const chunkSize = this.chunkSize;\n\n    if (begin % chunkSize !== 0) {\n      throw new Error(`Bad begin offset: ${begin}`);\n    }\n\n    const end = begin + chunk.byteLength;\n\n    if (end % chunkSize !== 0 && end !== this.bytes.length) {\n      throw new Error(`Bad end offset: ${end}`);\n    }\n\n    this.bytes.set(new Uint8Array(chunk), begin);\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  onReceiveProgressiveData(data) {\n    let position = this.progressiveDataLength;\n    const beginChunk = Math.floor(position / this.chunkSize);\n    this.bytes.set(new Uint8Array(data), position);\n    position += data.byteLength;\n    this.progressiveDataLength = position;\n    const endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  ensureByte(pos) {\n    if (pos < this.progressiveDataLength) {\n      return;\n    }\n\n    const chunk = Math.floor(pos / this.chunkSize);\n\n    if (chunk === this.lastSuccessfulEnsureByteChunk) {\n      return;\n    }\n\n    if (!this.loadedChunks[chunk]) {\n      throw new _core_utils.MissingDataException(pos, pos + 1);\n    }\n\n    this.lastSuccessfulEnsureByteChunk = chunk;\n  }\n\n  ensureRange(begin, end) {\n    if (begin >= end) {\n      return;\n    }\n\n    if (end <= this.progressiveDataLength) {\n      return;\n    }\n\n    const chunkSize = this.chunkSize;\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        throw new _core_utils.MissingDataException(begin, end);\n      }\n    }\n  }\n\n  nextEmptyChunk(beginChunk) {\n    const numChunks = this.numChunks;\n\n    for (let i = 0; i < numChunks; ++i) {\n      const chunk = (beginChunk + i) % numChunks;\n\n      if (!this.loadedChunks[chunk]) {\n        return chunk;\n      }\n    }\n\n    return null;\n  }\n\n  hasChunk(chunk) {\n    return !!this.loadedChunks[chunk];\n  }\n\n  get length() {\n    return this.end - this.start;\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  getByte() {\n    const pos = this.pos;\n\n    if (pos >= this.end) {\n      return -1;\n    }\n\n    if (pos >= this.progressiveDataLength) {\n      this.ensureByte(pos);\n    }\n\n    return this.bytes[this.pos++];\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  getBytes(length, forceClamped = false) {\n    const bytes = this.bytes;\n    const pos = this.pos;\n    const strEnd = this.end;\n\n    if (!length) {\n      if (strEnd > this.progressiveDataLength) {\n        this.ensureRange(pos, strEnd);\n      }\n\n      const subarray = bytes.subarray(pos, strEnd);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n\n    let end = pos + length;\n\n    if (end > strEnd) {\n      end = strEnd;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(pos, end);\n    }\n\n    this.pos = end;\n    const subarray = bytes.subarray(pos, end);\n    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getByteRange(begin, end) {\n    if (begin < 0) {\n      begin = 0;\n    }\n\n    if (end > this.end) {\n      end = this.end;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(begin, end);\n    }\n\n    return this.bytes.subarray(begin, end);\n  }\n\n  skip(n) {\n    if (!n) {\n      n = 1;\n    }\n\n    this.pos += n;\n  }\n\n  reset() {\n    this.pos = this.start;\n  }\n\n  moveStart() {\n    this.start = this.pos;\n  }\n\n  makeSubStream(start, length, dict) {\n    if (length) {\n      if (start + length > this.progressiveDataLength) {\n        this.ensureRange(start, start + length);\n      }\n    } else {\n      if (start >= this.progressiveDataLength) {\n        this.ensureByte(start);\n      }\n    }\n\n    function ChunkedStreamSubstream() {}\n\n    ChunkedStreamSubstream.prototype = Object.create(this);\n\n    ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n      const chunkSize = this.chunkSize;\n      const beginChunk = Math.floor(this.start / chunkSize);\n      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n      const missingChunks = [];\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!this.loadedChunks[chunk]) {\n          missingChunks.push(chunk);\n        }\n      }\n\n      return missingChunks;\n    };\n\n    ChunkedStreamSubstream.prototype.allChunksLoaded = function () {\n      if (this.numChunksLoaded === this.numChunks) {\n        return true;\n      }\n\n      return this.getMissingChunks().length === 0;\n    };\n\n    const subStream = new ChunkedStreamSubstream();\n    subStream.pos = subStream.start = start;\n    subStream.end = start + length || this.end;\n    subStream.dict = dict;\n    return subStream;\n  }\n\n}\n\nexports.ChunkedStream = ChunkedStream;\n\nclass ChunkedStreamManager {\n  constructor(pdfNetworkStream, args) {\n    this.length = args.length;\n    this.chunkSize = args.rangeChunkSize;\n    this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n    this.pdfNetworkStream = pdfNetworkStream;\n    this.disableAutoFetch = args.disableAutoFetch;\n    this.msgHandler = args.msgHandler;\n    this.currRequestId = 0;\n    this.chunksNeededByRequest = Object.create(null);\n    this.requestsByChunk = Object.create(null);\n    this.promisesByRequest = Object.create(null);\n    this.progressiveDataLength = 0;\n    this.aborted = false;\n    this._loadedStreamCapability = (0, _util.createPromiseCapability)();\n  }\n\n  onLoadedStream() {\n    return this._loadedStreamCapability.promise;\n  }\n\n  sendRequest(begin, end) {\n    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n\n    if (!rangeReader.isStreamingSupported) {\n      rangeReader.onProgress = this.onProgress.bind(this);\n    }\n\n    let chunks = [],\n        loaded = 0;\n    const promise = new Promise((resolve, reject) => {\n      const readChunk = chunk => {\n        try {\n          if (!chunk.done) {\n            const data = chunk.value;\n            chunks.push(data);\n            loaded += (0, _util.arrayByteLength)(data);\n\n            if (rangeReader.isStreamingSupported) {\n              this.onProgress({\n                loaded\n              });\n            }\n\n            rangeReader.read().then(readChunk, reject);\n            return;\n          }\n\n          const chunkData = (0, _util.arraysToBytes)(chunks);\n          chunks = null;\n          resolve(chunkData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n\n      rangeReader.read().then(readChunk, reject);\n    });\n    promise.then(data => {\n      if (this.aborted) {\n        return;\n      }\n\n      this.onReceiveData({\n        chunk: data,\n        begin\n      });\n    });\n  }\n\n  requestAllChunks() {\n    const missingChunks = this.stream.getMissingChunks();\n\n    this._requestChunks(missingChunks);\n\n    return this._loadedStreamCapability.promise;\n  }\n\n  _requestChunks(chunks) {\n    const requestId = this.currRequestId++;\n    const chunksNeeded = Object.create(null);\n    this.chunksNeededByRequest[requestId] = chunksNeeded;\n\n    for (const chunk of chunks) {\n      if (!this.stream.hasChunk(chunk)) {\n        chunksNeeded[chunk] = true;\n      }\n    }\n\n    if ((0, _util.isEmptyObj)(chunksNeeded)) {\n      return Promise.resolve();\n    }\n\n    const capability = (0, _util.createPromiseCapability)();\n    this.promisesByRequest[requestId] = capability;\n    const chunksToRequest = [];\n\n    for (let chunk in chunksNeeded) {\n      chunk = chunk | 0;\n\n      if (!(chunk in this.requestsByChunk)) {\n        this.requestsByChunk[chunk] = [];\n        chunksToRequest.push(chunk);\n      }\n\n      this.requestsByChunk[chunk].push(requestId);\n    }\n\n    if (!chunksToRequest.length) {\n      return capability.promise;\n    }\n\n    const groupedChunksToRequest = this.groupChunks(chunksToRequest);\n\n    for (const groupedChunk of groupedChunksToRequest) {\n      const begin = groupedChunk.beginChunk * this.chunkSize;\n      const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n      this.sendRequest(begin, end);\n    }\n\n    return capability.promise;\n  }\n\n  getStream() {\n    return this.stream;\n  }\n\n  requestRange(begin, end) {\n    end = Math.min(end, this.length);\n    const beginChunk = this.getBeginChunk(begin);\n    const endChunk = this.getEndChunk(end);\n    const chunks = [];\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      chunks.push(chunk);\n    }\n\n    return this._requestChunks(chunks);\n  }\n\n  requestRanges(ranges = []) {\n    const chunksToRequest = [];\n\n    for (const range of ranges) {\n      const beginChunk = this.getBeginChunk(range.begin);\n      const endChunk = this.getEndChunk(range.end);\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!chunksToRequest.includes(chunk)) {\n          chunksToRequest.push(chunk);\n        }\n      }\n    }\n\n    chunksToRequest.sort(function (a, b) {\n      return a - b;\n    });\n    return this._requestChunks(chunksToRequest);\n  }\n\n  groupChunks(chunks) {\n    const groupedChunks = [];\n    let beginChunk = -1;\n    let prevChunk = -1;\n\n    for (let i = 0, ii = chunks.length; i < ii; ++i) {\n      const chunk = chunks[i];\n\n      if (beginChunk < 0) {\n        beginChunk = chunk;\n      }\n\n      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: prevChunk + 1\n        });\n        beginChunk = chunk;\n      }\n\n      if (i + 1 === chunks.length) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: chunk + 1\n        });\n      }\n\n      prevChunk = chunk;\n    }\n\n    return groupedChunks;\n  }\n\n  onProgress(args) {\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n      total: this.length\n    });\n  }\n\n  onReceiveData(args) {\n    const chunk = args.chunk;\n    const isProgressive = args.begin === undefined;\n    const begin = isProgressive ? this.progressiveDataLength : args.begin;\n    const end = begin + chunk.byteLength;\n    const beginChunk = Math.floor(begin / this.chunkSize);\n    const endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);\n\n    if (isProgressive) {\n      this.stream.onReceiveProgressiveData(chunk);\n      this.progressiveDataLength = end;\n    } else {\n      this.stream.onReceiveData(begin, chunk);\n    }\n\n    if (this.stream.allChunksLoaded()) {\n      this._loadedStreamCapability.resolve(this.stream);\n    }\n\n    const loadedRequests = [];\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      const requestIds = this.requestsByChunk[curChunk] || [];\n      delete this.requestsByChunk[curChunk];\n\n      for (const requestId of requestIds) {\n        const chunksNeeded = this.chunksNeededByRequest[requestId];\n\n        if (curChunk in chunksNeeded) {\n          delete chunksNeeded[curChunk];\n        }\n\n        if (!(0, _util.isEmptyObj)(chunksNeeded)) {\n          continue;\n        }\n\n        loadedRequests.push(requestId);\n      }\n    }\n\n    if (!this.disableAutoFetch && (0, _util.isEmptyObj)(this.requestsByChunk)) {\n      let nextEmptyChunk;\n\n      if (this.stream.numChunksLoaded === 1) {\n        const lastChunk = this.stream.numChunks - 1;\n\n        if (!this.stream.hasChunk(lastChunk)) {\n          nextEmptyChunk = lastChunk;\n        }\n      } else {\n        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n      }\n\n      if (Number.isInteger(nextEmptyChunk)) {\n        this._requestChunks([nextEmptyChunk]);\n      }\n    }\n\n    for (const requestId of loadedRequests) {\n      const capability = this.promisesByRequest[requestId];\n      delete this.promisesByRequest[requestId];\n      capability.resolve();\n    }\n\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize,\n      total: this.length\n    });\n  }\n\n  onError(err) {\n    this._loadedStreamCapability.reject(err);\n  }\n\n  getBeginChunk(begin) {\n    return Math.floor(begin / this.chunkSize);\n  }\n\n  getEndChunk(end) {\n    return Math.floor((end - 1) / this.chunkSize) + 1;\n  }\n\n  abort(reason) {\n    this.aborted = true;\n\n    if (this.pdfNetworkStream) {\n      this.pdfNetworkStream.cancelAllRequests(reason);\n    }\n\n    for (const requestId in this.promisesByRequest) {\n      this.promisesByRequest[requestId].reject(reason);\n    }\n  }\n\n}\n\nexports.ChunkedStreamManager = ChunkedStreamManager;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLookupTableFactory = getLookupTableFactory;\nexports.getInheritableProperty = getInheritableProperty;\nexports.toRomanNumerals = toRomanNumerals;\nexports.log2 = log2;\nexports.readInt8 = readInt8;\nexports.readUint16 = readUint16;\nexports.readUint32 = readUint32;\nexports.isWhiteSpace = isWhiteSpace;\nexports.XRefParseException = exports.XRefEntryException = exports.MissingDataException = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n\n    return lookup;\n  };\n}\n\nclass MissingDataException extends _util.BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n\n}\n\nexports.MissingDataException = MissingDataException;\n\nclass XRefEntryException extends _util.BaseException {}\n\nexports.XRefEntryException = XRefEntryException;\n\nclass XRefParseException extends _util.BaseException {}\n\nexports.XRefParseException = XRefParseException;\n\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true\n}) {\n  const LOOP_LIMIT = 100;\n  let loopCount = 0;\n  let values;\n\n  while (dict) {\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n\n      if (!values) {\n        values = [];\n      }\n\n      values.push(value);\n    }\n\n    if (++loopCount > LOOP_LIMIT) {\n      (0, _util.warn)(`getInheritableProperty: maximum loop count exceeded for \"${key}\"`);\n      break;\n    }\n\n    dict = dict.get(\"Parent\");\n  }\n\n  return values;\n}\n\nconst ROMAN_NUMBER_MAP = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\", \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\n\nfunction toRomanNumerals(number, lowerCase = false) {\n  (0, _util.assert)(Number.isInteger(number) && number > 0, \"The number should be a positive integer.\");\n  const romanBuf = [];\n  let pos;\n\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push(\"M\");\n  }\n\n  pos = number / 100 | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  pos = number / 10 | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n  const romanStr = romanBuf.join(\"\");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return data[offset] << 24 >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return data[offset] << 8 | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFDocument = exports.Page = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(10);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _annotation = __w_pdfjs_require__(25);\n\nvar _crypto = __w_pdfjs_require__(22);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _operator_list = __w_pdfjs_require__(26);\n\nvar _evaluator = __w_pdfjs_require__(27);\n\nvar _function = __w_pdfjs_require__(41);\n\nconst DEFAULT_USER_UNIT = 1.0;\nconst LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n\nfunction isAnnotationRenderable(annotation, intent) {\n  return intent === \"display\" && annotation.viewable || intent === \"print\" && annotation.printable;\n}\n\nclass Page {\n  constructor({\n    pdfManager,\n    xref,\n    pageIndex,\n    pageDict,\n    ref,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    pdfFunctionFactory\n  }) {\n    this.pdfManager = pdfManager;\n    this.pageIndex = pageIndex;\n    this.pageDict = pageDict;\n    this.xref = xref;\n    this.ref = ref;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.evaluatorOptions = pdfManager.evaluatorOptions;\n    this.resourcesPromise = null;\n    const idCounters = {\n      obj: 0\n    };\n    this.idFactory = {\n      createObjId() {\n        return `p${pageIndex}_${++idCounters.obj}`;\n      },\n\n      getDocId() {\n        return `g_${pdfManager.docId}`;\n      }\n\n    };\n  }\n\n  _getInheritableProperty(key, getArray = false) {\n    const value = (0, _core_utils.getInheritableProperty)({\n      dict: this.pageDict,\n      key,\n      getArray,\n      stopWhenFound: false\n    });\n\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 1 || !(0, _primitives.isDict)(value[0])) {\n      return value[0];\n    }\n\n    return _primitives.Dict.merge(this.xref, value);\n  }\n\n  get content() {\n    return this.pageDict.get(\"Contents\");\n  }\n\n  get resources() {\n    return (0, _util.shadow)(this, \"resources\", this._getInheritableProperty(\"Resources\") || _primitives.Dict.empty);\n  }\n\n  _getBoundingBox(name) {\n    const box = this._getInheritableProperty(name, true);\n\n    if (Array.isArray(box) && box.length === 4) {\n      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        return box;\n      }\n\n      (0, _util.warn)(`Empty /${name} entry.`);\n    }\n\n    return null;\n  }\n\n  get mediaBox() {\n    return (0, _util.shadow)(this, \"mediaBox\", this._getBoundingBox(\"MediaBox\") || LETTER_SIZE_MEDIABOX);\n  }\n\n  get cropBox() {\n    return (0, _util.shadow)(this, \"cropBox\", this._getBoundingBox(\"CropBox\") || this.mediaBox);\n  }\n\n  get userUnit() {\n    let obj = this.pageDict.get(\"UserUnit\");\n\n    if (!(0, _util.isNum)(obj) || obj <= 0) {\n      obj = DEFAULT_USER_UNIT;\n    }\n\n    return (0, _util.shadow)(this, \"userUnit\", obj);\n  }\n\n  get view() {\n    const {\n      cropBox,\n      mediaBox\n    } = this;\n    let view;\n\n    if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {\n      view = mediaBox;\n    } else {\n      const box = _util.Util.intersect(cropBox, mediaBox);\n\n      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        view = box;\n      } else {\n        (0, _util.warn)(\"Empty /CropBox and /MediaBox intersection.\");\n      }\n    }\n\n    return (0, _util.shadow)(this, \"view\", view || mediaBox);\n  }\n\n  get rotate() {\n    let rotate = this._getInheritableProperty(\"Rotate\") || 0;\n\n    if (rotate % 90 !== 0) {\n      rotate = 0;\n    } else if (rotate >= 360) {\n      rotate = rotate % 360;\n    } else if (rotate < 0) {\n      rotate = (rotate % 360 + 360) % 360;\n    }\n\n    return (0, _util.shadow)(this, \"rotate\", rotate);\n  }\n\n  getContentStream() {\n    const content = this.content;\n    let stream;\n\n    if (Array.isArray(content)) {\n      const xref = this.xref;\n      const streams = [];\n\n      for (const subStream of content) {\n        streams.push(xref.fetchIfRef(subStream));\n      }\n\n      stream = new _stream.StreamsSequenceStream(streams);\n    } else if ((0, _primitives.isStream)(content)) {\n      stream = content;\n    } else {\n      stream = new _stream.NullStream();\n    }\n\n    return stream;\n  }\n\n  loadResources(keys) {\n    if (!this.resourcesPromise) {\n      this.resourcesPromise = this.pdfManager.ensure(this, \"resources\");\n    }\n\n    return this.resourcesPromise.then(() => {\n      const objectLoader = new _obj.ObjectLoader(this.resources, keys, this.xref);\n      return objectLoader.load();\n    });\n  }\n\n  getOperatorList({\n    handler,\n    sink,\n    task,\n    intent,\n    renderInteractiveForms\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this.idFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions,\n      pdfFunctionFactory: this.pdfFunctionFactory\n    });\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    const pageListPromise = dataPromises.then(([contentStream]) => {\n      const opList = new _operator_list.OperatorList(intent, sink, this.pageIndex);\n      handler.send(\"StartRenderPage\", {\n        transparency: partialEvaluator.hasBlendModes(this.resources),\n        pageIndex: this.pageIndex,\n        intent\n      });\n      return partialEvaluator.getOperatorList({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        operatorList: opList\n      }).then(function () {\n        return opList;\n      });\n    });\n    return Promise.all([pageListPromise, this._parsedAnnotations]).then(function ([pageOpList, annotations]) {\n      if (annotations.length === 0) {\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      }\n\n      const opListPromises = [];\n\n      for (const annotation of annotations) {\n        if (isAnnotationRenderable(annotation, intent)) {\n          opListPromises.push(annotation.getOperatorList(partialEvaluator, task, renderInteractiveForms).catch(function (reason) {\n            (0, _util.warn)(\"getOperatorList - ignoring annotation data during \" + `\"${task.name}\" task: \"${reason}\".`);\n            return null;\n          }));\n        }\n      }\n\n      return Promise.all(opListPromises).then(function (opLists) {\n        pageOpList.addOp(_util.OPS.beginAnnotations, []);\n\n        for (const opList of opLists) {\n          pageOpList.addOpList(opList);\n        }\n\n        pageOpList.addOp(_util.OPS.endAnnotations, []);\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      });\n    });\n  }\n\n  extractTextContent({\n    handler,\n    task,\n    normalizeWhitespace,\n    sink,\n    combineTextItems\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"XObject\", \"Font\"]);\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    return dataPromises.then(([contentStream]) => {\n      const partialEvaluator = new _evaluator.PartialEvaluator({\n        xref: this.xref,\n        handler,\n        pageIndex: this.pageIndex,\n        idFactory: this.idFactory,\n        fontCache: this.fontCache,\n        builtInCMapCache: this.builtInCMapCache,\n        globalImageCache: this.globalImageCache,\n        options: this.evaluatorOptions,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      });\n      return partialEvaluator.getTextContent({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        normalizeWhitespace,\n        combineTextItems,\n        sink\n      });\n    });\n  }\n\n  getAnnotationsData(intent) {\n    return this._parsedAnnotations.then(function (annotations) {\n      const annotationsData = [];\n\n      for (let i = 0, ii = annotations.length; i < ii; i++) {\n        if (!intent || isAnnotationRenderable(annotations[i], intent)) {\n          annotationsData.push(annotations[i].data);\n        }\n      }\n\n      return annotationsData;\n    });\n  }\n\n  get annotations() {\n    return (0, _util.shadow)(this, \"annotations\", this._getInheritableProperty(\"Annots\") || []);\n  }\n\n  get _parsedAnnotations() {\n    const parsedAnnotations = this.pdfManager.ensure(this, \"annotations\").then(() => {\n      const annotationPromises = [];\n\n      for (const annotationRef of this.annotations) {\n        annotationPromises.push(_annotation.AnnotationFactory.create(this.xref, annotationRef, this.pdfManager, this.idFactory).catch(function (reason) {\n          (0, _util.warn)(`_parsedAnnotations: \"${reason}\".`);\n          return null;\n        }));\n      }\n\n      return Promise.all(annotationPromises).then(function (annotations) {\n        return annotations.filter(annotation => !!annotation);\n      });\n    });\n    return (0, _util.shadow)(this, \"_parsedAnnotations\", parsedAnnotations);\n  }\n\n}\n\nexports.Page = Page;\nconst PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\nconst STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\nconst ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\nconst FINGERPRINT_FIRST_BYTES = 1024;\nconst EMPTY_FINGERPRINT = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\nconst PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.[0-9]$/;\n\nfunction find(stream, signature, limit = 1024, backwards = false) {\n  const signatureLength = signature.length;\n  const scanBytes = stream.peekBytes(limit);\n  const scanLength = scanBytes.length - signatureLength;\n\n  if (scanLength <= 0) {\n    return false;\n  }\n\n  if (backwards) {\n    const signatureEnd = signatureLength - 1;\n    let pos = scanBytes.length - 1;\n\n    while (pos >= signatureEnd) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos - signatureEnd;\n        return true;\n      }\n\n      pos--;\n    }\n  } else {\n    let pos = 0;\n\n    while (pos <= scanLength) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos;\n        return true;\n      }\n\n      pos++;\n    }\n  }\n\n  return false;\n}\n\nclass PDFDocument {\n  constructor(pdfManager, arg) {\n    let stream;\n\n    if ((0, _primitives.isStream)(arg)) {\n      stream = arg;\n    } else if ((0, _util.isArrayBuffer)(arg)) {\n      stream = new _stream.Stream(arg);\n    } else {\n      throw new Error(\"PDFDocument: Unknown argument type\");\n    }\n\n    if (stream.length <= 0) {\n      throw new _util.InvalidPDFException(\"The PDF file is empty, i.e. its size is zero bytes.\");\n    }\n\n    this.pdfManager = pdfManager;\n    this.stream = stream;\n    this.xref = new _obj.XRef(stream, pdfManager);\n    this.pdfFunctionFactory = new _function.PDFFunctionFactory({\n      xref: this.xref,\n      isEvalSupported: pdfManager.evaluatorOptions.isEvalSupported\n    });\n    this._pagePromises = [];\n  }\n\n  parse(recoveryMode) {\n    this.setup(recoveryMode);\n    const version = this.catalog.catDict.get(\"Version\");\n\n    if ((0, _primitives.isName)(version)) {\n      this.pdfFormatVersion = version.name;\n    }\n\n    try {\n      this.acroForm = this.catalog.catDict.get(\"AcroForm\");\n\n      if (this.acroForm) {\n        this.xfa = this.acroForm.get(\"XFA\");\n        const fields = this.acroForm.get(\"Fields\");\n\n        if ((!Array.isArray(fields) || fields.length === 0) && !this.xfa) {\n          this.acroForm = null;\n        }\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch AcroForm entry; assuming no AcroForms are present\");\n      this.acroForm = null;\n    }\n\n    try {\n      const collection = this.catalog.catDict.get(\"Collection\");\n\n      if ((0, _primitives.isDict)(collection) && collection.getKeys().length > 0) {\n        this.collection = collection;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch Collection dictionary.\");\n    }\n  }\n\n  get linearization() {\n    let linearization = null;\n\n    try {\n      linearization = _parser.Linearization.create(this.stream);\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(err);\n    }\n\n    return (0, _util.shadow)(this, \"linearization\", linearization);\n  }\n\n  get startXRef() {\n    const stream = this.stream;\n    let startXRef = 0;\n\n    if (this.linearization) {\n      stream.reset();\n\n      if (find(stream, ENDOBJ_SIGNATURE)) {\n        startXRef = stream.pos + 6 - stream.start;\n      }\n    } else {\n      const step = 1024;\n      const startXRefLength = STARTXREF_SIGNATURE.length;\n      let found = false,\n          pos = stream.end;\n\n      while (!found && pos > 0) {\n        pos -= step - startXRefLength;\n\n        if (pos < 0) {\n          pos = 0;\n        }\n\n        stream.pos = pos;\n        found = find(stream, STARTXREF_SIGNATURE, step, true);\n      }\n\n      if (found) {\n        stream.skip(9);\n        let ch;\n\n        do {\n          ch = stream.getByte();\n        } while ((0, _core_utils.isWhiteSpace)(ch));\n\n        let str = \"\";\n\n        while (ch >= 0x20 && ch <= 0x39) {\n          str += String.fromCharCode(ch);\n          ch = stream.getByte();\n        }\n\n        startXRef = parseInt(str, 10);\n\n        if (isNaN(startXRef)) {\n          startXRef = 0;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"startXRef\", startXRef);\n  }\n\n  checkHeader() {\n    const stream = this.stream;\n    stream.reset();\n\n    if (!find(stream, PDF_HEADER_SIGNATURE)) {\n      return;\n    }\n\n    stream.moveStart();\n    const MAX_PDF_VERSION_LENGTH = 12;\n    let version = \"\",\n        ch;\n\n    while ((ch = stream.getByte()) > 0x20) {\n      if (version.length >= MAX_PDF_VERSION_LENGTH) {\n        break;\n      }\n\n      version += String.fromCharCode(ch);\n    }\n\n    if (!this.pdfFormatVersion) {\n      this.pdfFormatVersion = version.substring(5);\n    }\n  }\n\n  parseStartXRef() {\n    this.xref.setStartXRef(this.startXRef);\n  }\n\n  setup(recoveryMode) {\n    this.xref.parse(recoveryMode);\n    this.catalog = new _obj.Catalog(this.pdfManager, this.xref);\n  }\n\n  get numPages() {\n    const linearization = this.linearization;\n    const num = linearization ? linearization.numPages : this.catalog.numPages;\n    return (0, _util.shadow)(this, \"numPages\", num);\n  }\n\n  get documentInfo() {\n    const DocumentInfoValidators = {\n      Title: _util.isString,\n      Author: _util.isString,\n      Subject: _util.isString,\n      Keywords: _util.isString,\n      Creator: _util.isString,\n      Producer: _util.isString,\n      CreationDate: _util.isString,\n      ModDate: _util.isString,\n      Trapped: _primitives.isName\n    };\n    let version = this.pdfFormatVersion;\n\n    if (typeof version !== \"string\" || !PDF_HEADER_VERSION_REGEXP.test(version)) {\n      (0, _util.warn)(`Invalid PDF header version number: ${version}`);\n      version = null;\n    }\n\n    const docInfo = {\n      PDFFormatVersion: version,\n      IsLinearized: !!this.linearization,\n      IsAcroFormPresent: !!this.acroForm,\n      IsXFAPresent: !!this.xfa,\n      IsCollectionPresent: !!this.collection\n    };\n    let infoDict;\n\n    try {\n      infoDict = this.xref.trailer.get(\"Info\");\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(\"The document information dictionary is invalid.\");\n    }\n\n    if ((0, _primitives.isDict)(infoDict)) {\n      for (const key of infoDict.getKeys()) {\n        const value = infoDict.get(key);\n\n        if (DocumentInfoValidators[key]) {\n          if (DocumentInfoValidators[key](value)) {\n            docInfo[key] = typeof value !== \"string\" ? value : (0, _util.stringToPDFString)(value);\n          } else {\n            (0, _util.info)(`Bad value in document info for \"${key}\".`);\n          }\n        } else if (typeof key === \"string\") {\n          let customValue;\n\n          if ((0, _util.isString)(value)) {\n            customValue = (0, _util.stringToPDFString)(value);\n          } else if ((0, _primitives.isName)(value) || (0, _util.isNum)(value) || (0, _util.isBool)(value)) {\n            customValue = value;\n          } else {\n            (0, _util.info)(`Unsupported value in document info for (custom) \"${key}\".`);\n            continue;\n          }\n\n          if (!docInfo.Custom) {\n            docInfo.Custom = Object.create(null);\n          }\n\n          docInfo.Custom[key] = customValue;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"documentInfo\", docInfo);\n  }\n\n  get fingerprint() {\n    let hash;\n    const idArray = this.xref.trailer.get(\"ID\");\n\n    if (Array.isArray(idArray) && idArray[0] && (0, _util.isString)(idArray[0]) && idArray[0] !== EMPTY_FINGERPRINT) {\n      hash = (0, _util.stringToBytes)(idArray[0]);\n    } else {\n      hash = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);\n    }\n\n    const fingerprintBuf = [];\n\n    for (let i = 0, ii = hash.length; i < ii; i++) {\n      const hex = hash[i].toString(16);\n      fingerprintBuf.push(hex.padStart(2, \"0\"));\n    }\n\n    return (0, _util.shadow)(this, \"fingerprint\", fingerprintBuf.join(\"\"));\n  }\n\n  _getLinearizationPage(pageIndex) {\n    const {\n      catalog,\n      linearization\n    } = this;\n\n    const ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);\n\n    return this.xref.fetchAsync(ref).then(obj => {\n      if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Type\") && obj.has(\"Contents\")) {\n        if (ref && !catalog.pageKidsCountCache.has(ref)) {\n          catalog.pageKidsCountCache.put(ref, 1);\n        }\n\n        return [obj, ref];\n      }\n\n      throw new _util.FormatError(\"The Linearization dictionary doesn't point \" + \"to a valid Page dictionary.\");\n    }).catch(reason => {\n      (0, _util.info)(reason);\n      return catalog.getPageDict(pageIndex);\n    });\n  }\n\n  getPage(pageIndex) {\n    if (this._pagePromises[pageIndex] !== undefined) {\n      return this._pagePromises[pageIndex];\n    }\n\n    const {\n      catalog,\n      linearization\n    } = this;\n    const promise = linearization && linearization.pageFirst === pageIndex ? this._getLinearizationPage(pageIndex) : catalog.getPageDict(pageIndex);\n    return this._pagePromises[pageIndex] = promise.then(([pageDict, ref]) => {\n      return new Page({\n        pdfManager: this.pdfManager,\n        xref: this.xref,\n        pageIndex,\n        pageDict,\n        ref,\n        fontCache: catalog.fontCache,\n        builtInCMapCache: catalog.builtInCMapCache,\n        globalImageCache: catalog.globalImageCache,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      });\n    });\n  }\n\n  checkFirstPage() {\n    return this.getPage(0).catch(async reason => {\n      if (reason instanceof _core_utils.XRefEntryException) {\n        this._pagePromises.length = 0;\n        await this.cleanup();\n        throw new _core_utils.XRefParseException();\n      }\n    });\n  }\n\n  fontFallback(id, handler) {\n    return this.catalog.fontFallback(id, handler);\n  }\n\n  async cleanup(manuallyTriggered = false) {\n    return this.catalog ? this.catalog.cleanup(manuallyTriggered) : (0, _primitives.clearPrimitiveCaches)();\n  }\n\n}\n\nexports.PDFDocument = PDFDocument;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSpec = exports.XRef = exports.ObjectLoader = exports.Catalog = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _crypto = __w_pdfjs_require__(22);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _image_utils = __w_pdfjs_require__(24);\n\nfunction fetchDestination(dest) {\n  return (0, _primitives.isDict)(dest) ? dest.get(\"D\") : dest;\n}\n\nclass Catalog {\n  constructor(pdfManager, xref) {\n    this.pdfManager = pdfManager;\n    this.xref = xref;\n    this.catDict = xref.getCatalogObj();\n\n    if (!(0, _primitives.isDict)(this.catDict)) {\n      throw new _util.FormatError(\"Catalog object is not a dictionary.\");\n    }\n\n    this.fontCache = new _primitives.RefSetCache();\n    this.builtInCMapCache = new Map();\n    this.globalImageCache = new _image_utils.GlobalImageCache();\n    this.pageKidsCountCache = new _primitives.RefSetCache();\n  }\n\n  get metadata() {\n    const streamRef = this.catDict.getRaw(\"Metadata\");\n\n    if (!(0, _primitives.isRef)(streamRef)) {\n      return (0, _util.shadow)(this, \"metadata\", null);\n    }\n\n    const suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);\n    const stream = this.xref.fetch(streamRef, suppressEncryption);\n    let metadata;\n\n    if (stream && (0, _primitives.isDict)(stream.dict)) {\n      const type = stream.dict.get(\"Type\");\n      const subtype = stream.dict.get(\"Subtype\");\n\n      if ((0, _primitives.isName)(type, \"Metadata\") && (0, _primitives.isName)(subtype, \"XML\")) {\n        try {\n          metadata = (0, _util.stringToUTF8String)((0, _util.bytesToString)(stream.getBytes()));\n        } catch (e) {\n          if (e instanceof _core_utils.MissingDataException) {\n            throw e;\n          }\n\n          (0, _util.info)(\"Skipping invalid metadata.\");\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"metadata\", metadata);\n  }\n\n  get toplevelPagesDict() {\n    const pagesObj = this.catDict.get(\"Pages\");\n\n    if (!(0, _primitives.isDict)(pagesObj)) {\n      throw new _util.FormatError(\"Invalid top-level pages dictionary.\");\n    }\n\n    return (0, _util.shadow)(this, \"toplevelPagesDict\", pagesObj);\n  }\n\n  get documentOutline() {\n    let obj = null;\n\n    try {\n      obj = this._readDocumentOutline();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read document outline.\");\n    }\n\n    return (0, _util.shadow)(this, \"documentOutline\", obj);\n  }\n\n  _readDocumentOutline() {\n    let obj = this.catDict.get(\"Outlines\");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    obj = obj.getRaw(\"First\");\n\n    if (!(0, _primitives.isRef)(obj)) {\n      return null;\n    }\n\n    const root = {\n      items: []\n    };\n    const queue = [{\n      obj,\n      parent: root\n    }];\n    const processed = new _primitives.RefSet();\n    processed.put(obj);\n    const xref = this.xref,\n          blackColor = new Uint8ClampedArray(3);\n\n    while (queue.length > 0) {\n      const i = queue.shift();\n      const outlineDict = xref.fetchIfRef(i.obj);\n\n      if (outlineDict === null) {\n        continue;\n      }\n\n      if (!outlineDict.has(\"Title\")) {\n        throw new _util.FormatError(\"Invalid outline item encountered.\");\n      }\n\n      const data = {\n        url: null,\n        dest: null\n      };\n      Catalog.parseDestDictionary({\n        destDict: outlineDict,\n        resultObj: data,\n        docBaseUrl: this.pdfManager.docBaseUrl\n      });\n      const title = outlineDict.get(\"Title\");\n      const flags = outlineDict.get(\"F\") || 0;\n      const color = outlineDict.getArray(\"C\");\n      const count = outlineDict.get(\"Count\");\n      let rgbColor = blackColor;\n\n      if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {\n        rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);\n      }\n\n      const outlineItem = {\n        dest: data.dest,\n        url: data.url,\n        unsafeUrl: data.unsafeUrl,\n        newWindow: data.newWindow,\n        title: (0, _util.stringToPDFString)(title),\n        color: rgbColor,\n        count: Number.isInteger(count) ? count : undefined,\n        bold: !!(flags & 2),\n        italic: !!(flags & 1),\n        items: []\n      };\n      i.parent.items.push(outlineItem);\n      obj = outlineDict.getRaw(\"First\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: outlineItem\n        });\n        processed.put(obj);\n      }\n\n      obj = outlineDict.getRaw(\"Next\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: i.parent\n        });\n        processed.put(obj);\n      }\n    }\n\n    return root.items.length > 0 ? root.items : null;\n  }\n\n  get permissions() {\n    let permissions = null;\n\n    try {\n      permissions = this._readPermissions();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read permissions.\");\n    }\n\n    return (0, _util.shadow)(this, \"permissions\", permissions);\n  }\n\n  _readPermissions() {\n    const encrypt = this.xref.trailer.get(\"Encrypt\");\n\n    if (!(0, _primitives.isDict)(encrypt)) {\n      return null;\n    }\n\n    let flags = encrypt.get(\"P\");\n\n    if (!(0, _util.isNum)(flags)) {\n      return null;\n    }\n\n    flags += 2 ** 32;\n    const permissions = [];\n\n    for (const key in _util.PermissionFlag) {\n      const value = _util.PermissionFlag[key];\n\n      if (flags & value) {\n        permissions.push(value);\n      }\n    }\n\n    return permissions;\n  }\n\n  get numPages() {\n    const obj = this.toplevelPagesDict.get(\"Count\");\n\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Page count in top-level pages dictionary is not an integer.\");\n    }\n\n    return (0, _util.shadow)(this, \"numPages\", obj);\n  }\n\n  get destinations() {\n    const obj = this._readDests(),\n          dests = Object.create(null);\n\n    if (obj instanceof NameTree) {\n      const names = obj.getAll();\n\n      for (const name in names) {\n        dests[name] = fetchDestination(names[name]);\n      }\n    } else if (obj instanceof _primitives.Dict) {\n      obj.forEach(function (key, value) {\n        if (value) {\n          dests[key] = fetchDestination(value);\n        }\n      });\n    }\n\n    return (0, _util.shadow)(this, \"destinations\", dests);\n  }\n\n  getDestination(destinationId) {\n    const obj = this._readDests();\n\n    if (obj instanceof NameTree || obj instanceof _primitives.Dict) {\n      return fetchDestination(obj.get(destinationId) || null);\n    }\n\n    return null;\n  }\n\n  _readDests() {\n    const obj = this.catDict.get(\"Names\");\n\n    if (obj && obj.has(\"Dests\")) {\n      return new NameTree(obj.getRaw(\"Dests\"), this.xref);\n    } else if (this.catDict.has(\"Dests\")) {\n      return this.catDict.get(\"Dests\");\n    }\n\n    return undefined;\n  }\n\n  get pageLabels() {\n    let obj = null;\n\n    try {\n      obj = this._readPageLabels();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read page labels.\");\n    }\n\n    return (0, _util.shadow)(this, \"pageLabels\", obj);\n  }\n\n  _readPageLabels() {\n    const obj = this.catDict.getRaw(\"PageLabels\");\n\n    if (!obj) {\n      return null;\n    }\n\n    const pageLabels = new Array(this.numPages);\n    let style = null,\n        prefix = \"\";\n    const numberTree = new NumberTree(obj, this.xref);\n    const nums = numberTree.getAll();\n    let currentLabel = \"\",\n        currentIndex = 1;\n\n    for (let i = 0, ii = this.numPages; i < ii; i++) {\n      if (i in nums) {\n        const labelDict = nums[i];\n\n        if (!(0, _primitives.isDict)(labelDict)) {\n          throw new _util.FormatError(\"PageLabel is not a dictionary.\");\n        }\n\n        if (labelDict.has(\"Type\") && !(0, _primitives.isName)(labelDict.get(\"Type\"), \"PageLabel\")) {\n          throw new _util.FormatError(\"Invalid type in PageLabel dictionary.\");\n        }\n\n        if (labelDict.has(\"S\")) {\n          const s = labelDict.get(\"S\");\n\n          if (!(0, _primitives.isName)(s)) {\n            throw new _util.FormatError(\"Invalid style in PageLabel dictionary.\");\n          }\n\n          style = s.name;\n        } else {\n          style = null;\n        }\n\n        if (labelDict.has(\"P\")) {\n          const p = labelDict.get(\"P\");\n\n          if (!(0, _util.isString)(p)) {\n            throw new _util.FormatError(\"Invalid prefix in PageLabel dictionary.\");\n          }\n\n          prefix = (0, _util.stringToPDFString)(p);\n        } else {\n          prefix = \"\";\n        }\n\n        if (labelDict.has(\"St\")) {\n          const st = labelDict.get(\"St\");\n\n          if (!(Number.isInteger(st) && st >= 1)) {\n            throw new _util.FormatError(\"Invalid start in PageLabel dictionary.\");\n          }\n\n          currentIndex = st;\n        } else {\n          currentIndex = 1;\n        }\n      }\n\n      switch (style) {\n        case \"D\":\n          currentLabel = currentIndex;\n          break;\n\n        case \"R\":\n        case \"r\":\n          currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === \"r\");\n          break;\n\n        case \"A\":\n        case \"a\":\n          const LIMIT = 26;\n          const A_UPPER_CASE = 0x41,\n                A_LOWER_CASE = 0x61;\n          const baseCharCode = style === \"a\" ? A_LOWER_CASE : A_UPPER_CASE;\n          const letterIndex = currentIndex - 1;\n          const character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);\n          const charBuf = [];\n\n          for (let j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {\n            charBuf.push(character);\n          }\n\n          currentLabel = charBuf.join(\"\");\n          break;\n\n        default:\n          if (style) {\n            throw new _util.FormatError(`Invalid style \"${style}\" in PageLabel dictionary.`);\n          }\n\n          currentLabel = \"\";\n      }\n\n      pageLabels[i] = prefix + currentLabel;\n      currentIndex++;\n    }\n\n    return pageLabels;\n  }\n\n  get pageLayout() {\n    const obj = this.catDict.get(\"PageLayout\");\n    let pageLayout = \"\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"SinglePage\":\n        case \"OneColumn\":\n        case \"TwoColumnLeft\":\n        case \"TwoColumnRight\":\n        case \"TwoPageLeft\":\n        case \"TwoPageRight\":\n          pageLayout = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageLayout\", pageLayout);\n  }\n\n  get pageMode() {\n    const obj = this.catDict.get(\"PageMode\");\n    let pageMode = \"UseNone\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"UseNone\":\n        case \"UseOutlines\":\n        case \"UseThumbs\":\n        case \"FullScreen\":\n        case \"UseOC\":\n        case \"UseAttachments\":\n          pageMode = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageMode\", pageMode);\n  }\n\n  get viewerPreferences() {\n    const ViewerPreferencesValidators = {\n      HideToolbar: _util.isBool,\n      HideMenubar: _util.isBool,\n      HideWindowUI: _util.isBool,\n      FitWindow: _util.isBool,\n      CenterWindow: _util.isBool,\n      DisplayDocTitle: _util.isBool,\n      NonFullScreenPageMode: _primitives.isName,\n      Direction: _primitives.isName,\n      ViewArea: _primitives.isName,\n      ViewClip: _primitives.isName,\n      PrintArea: _primitives.isName,\n      PrintClip: _primitives.isName,\n      PrintScaling: _primitives.isName,\n      Duplex: _primitives.isName,\n      PickTrayByPDFSize: _util.isBool,\n      PrintPageRange: Array.isArray,\n      NumCopies: Number.isInteger\n    };\n    const obj = this.catDict.get(\"ViewerPreferences\");\n    let prefs = null;\n\n    if ((0, _primitives.isDict)(obj)) {\n      for (const key in ViewerPreferencesValidators) {\n        if (!obj.has(key)) {\n          continue;\n        }\n\n        const value = obj.get(key);\n\n        if (!ViewerPreferencesValidators[key](value)) {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n          continue;\n        }\n\n        let prefValue;\n\n        switch (key) {\n          case \"NonFullScreenPageMode\":\n            switch (value.name) {\n              case \"UseNone\":\n              case \"UseOutlines\":\n              case \"UseThumbs\":\n              case \"UseOC\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"UseNone\";\n            }\n\n            break;\n\n          case \"Direction\":\n            switch (value.name) {\n              case \"L2R\":\n              case \"R2L\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"L2R\";\n            }\n\n            break;\n\n          case \"ViewArea\":\n          case \"ViewClip\":\n          case \"PrintArea\":\n          case \"PrintClip\":\n            switch (value.name) {\n              case \"MediaBox\":\n              case \"CropBox\":\n              case \"BleedBox\":\n              case \"TrimBox\":\n              case \"ArtBox\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"CropBox\";\n            }\n\n            break;\n\n          case \"PrintScaling\":\n            switch (value.name) {\n              case \"None\":\n              case \"AppDefault\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"AppDefault\";\n            }\n\n            break;\n\n          case \"Duplex\":\n            switch (value.name) {\n              case \"Simplex\":\n              case \"DuplexFlipShortEdge\":\n              case \"DuplexFlipLongEdge\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"None\";\n            }\n\n            break;\n\n          case \"PrintPageRange\":\n            const length = value.length;\n\n            if (length % 2 !== 0) {\n              break;\n            }\n\n            const isValid = value.every((page, i, arr) => {\n              return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= this.numPages;\n            });\n\n            if (isValid) {\n              prefValue = value;\n            }\n\n            break;\n\n          case \"NumCopies\":\n            if (value > 0) {\n              prefValue = value;\n            }\n\n            break;\n\n          default:\n            if (typeof value !== \"boolean\") {\n              throw new _util.FormatError(`viewerPreferences - expected a boolean value for: ${key}`);\n            }\n\n            prefValue = value;\n        }\n\n        if (prefValue !== undefined) {\n          if (!prefs) {\n            prefs = Object.create(null);\n          }\n\n          prefs[key] = prefValue;\n        } else {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"viewerPreferences\", prefs);\n  }\n\n  get openAction() {\n    const obj = this.catDict.get(\"OpenAction\");\n    let openAction = null;\n\n    if ((0, _primitives.isDict)(obj)) {\n      const destDict = new _primitives.Dict(this.xref);\n      destDict.set(\"A\", obj);\n      const resultObj = {\n        url: null,\n        dest: null,\n        action: null\n      };\n      Catalog.parseDestDictionary({\n        destDict,\n        resultObj\n      });\n\n      if (Array.isArray(resultObj.dest)) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n\n        openAction.dest = resultObj.dest;\n      } else if (resultObj.action) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n\n        openAction.action = resultObj.action;\n      }\n    } else if (Array.isArray(obj)) {\n      if (!openAction) {\n        openAction = Object.create(null);\n      }\n\n      openAction.dest = obj;\n    }\n\n    return (0, _util.shadow)(this, \"openAction\", openAction);\n  }\n\n  get attachments() {\n    const obj = this.catDict.get(\"Names\");\n    let attachments = null;\n\n    if (obj && obj.has(\"EmbeddedFiles\")) {\n      const nameTree = new NameTree(obj.getRaw(\"EmbeddedFiles\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const fs = new FileSpec(names[name], this.xref);\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        }\n\n        attachments[(0, _util.stringToPDFString)(name)] = fs.serializable;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"attachments\", attachments);\n  }\n\n  get javaScript() {\n    const obj = this.catDict.get(\"Names\");\n    let javaScript = null;\n\n    function appendIfJavaScriptDict(jsDict) {\n      const type = jsDict.get(\"S\");\n\n      if (!(0, _primitives.isName)(type, \"JavaScript\")) {\n        return;\n      }\n\n      let js = jsDict.get(\"JS\");\n\n      if ((0, _primitives.isStream)(js)) {\n        js = (0, _util.bytesToString)(js.getBytes());\n      } else if (!(0, _util.isString)(js)) {\n        return;\n      }\n\n      if (!javaScript) {\n        javaScript = [];\n      }\n\n      javaScript.push((0, _util.stringToPDFString)(js));\n    }\n\n    if (obj && obj.has(\"JavaScript\")) {\n      const nameTree = new NameTree(obj.getRaw(\"JavaScript\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const jsDict = names[name];\n\n        if ((0, _primitives.isDict)(jsDict)) {\n          appendIfJavaScriptDict(jsDict);\n        }\n      }\n    }\n\n    const openAction = this.catDict.get(\"OpenAction\");\n\n    if ((0, _primitives.isDict)(openAction) && (0, _primitives.isName)(openAction.get(\"S\"), \"JavaScript\")) {\n      appendIfJavaScriptDict(openAction);\n    }\n\n    return (0, _util.shadow)(this, \"javaScript\", javaScript);\n  }\n\n  fontFallback(id, handler) {\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const translatedFont of translatedFonts) {\n        if (translatedFont.loadedName === id) {\n          translatedFont.fallback(handler);\n          return;\n        }\n      }\n    });\n  }\n\n  cleanup(manuallyTriggered = false) {\n    (0, _primitives.clearPrimitiveCaches)();\n    this.globalImageCache.clear(manuallyTriggered);\n    this.pageKidsCountCache.clear();\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const {\n        dict\n      } of translatedFonts) {\n        delete dict.translated;\n      }\n\n      this.fontCache.clear();\n      this.builtInCMapCache.clear();\n    });\n  }\n\n  getPageDict(pageIndex) {\n    const capability = (0, _util.createPromiseCapability)();\n    const nodesToVisit = [this.catDict.getRaw(\"Pages\")];\n    const visitedNodes = new _primitives.RefSet();\n    const xref = this.xref,\n          pageKidsCountCache = this.pageKidsCountCache;\n    let count,\n        currentPageIndex = 0;\n\n    function next() {\n      while (nodesToVisit.length) {\n        const currentNode = nodesToVisit.pop();\n\n        if ((0, _primitives.isRef)(currentNode)) {\n          count = pageKidsCountCache.get(currentNode);\n\n          if (count > 0 && currentPageIndex + count < pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n\n          if (visitedNodes.has(currentNode)) {\n            capability.reject(new _util.FormatError(\"Pages tree contains circular reference.\"));\n            return;\n          }\n\n          visitedNodes.put(currentNode);\n          xref.fetchAsync(currentNode).then(function (obj) {\n            if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Kids\")) {\n              if (pageIndex === currentPageIndex) {\n                if (currentNode && !pageKidsCountCache.has(currentNode)) {\n                  pageKidsCountCache.put(currentNode, 1);\n                }\n\n                capability.resolve([obj, currentNode]);\n              } else {\n                currentPageIndex++;\n                next();\n              }\n\n              return;\n            }\n\n            nodesToVisit.push(obj);\n            next();\n          }, capability.reject);\n          return;\n        }\n\n        if (!(0, _primitives.isDict)(currentNode)) {\n          capability.reject(new _util.FormatError(\"Page dictionary kid reference points to wrong type of object.\"));\n          return;\n        }\n\n        count = currentNode.get(\"Count\");\n\n        if (Number.isInteger(count) && count >= 0) {\n          const objId = currentNode.objId;\n\n          if (objId && !pageKidsCountCache.has(objId)) {\n            pageKidsCountCache.put(objId, count);\n          }\n\n          if (currentPageIndex + count <= pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n        }\n\n        const kids = currentNode.get(\"Kids\");\n\n        if (!Array.isArray(kids)) {\n          if ((0, _primitives.isName)(currentNode.get(\"Type\"), \"Page\") || !currentNode.has(\"Type\") && currentNode.has(\"Contents\")) {\n            if (currentPageIndex === pageIndex) {\n              capability.resolve([currentNode, null]);\n              return;\n            }\n\n            currentPageIndex++;\n            continue;\n          }\n\n          capability.reject(new _util.FormatError(\"Page dictionary kids object is not an array.\"));\n          return;\n        }\n\n        for (let last = kids.length - 1; last >= 0; last--) {\n          nodesToVisit.push(kids[last]);\n        }\n      }\n\n      capability.reject(new Error(`Page index ${pageIndex} not found.`));\n    }\n\n    next();\n    return capability.promise;\n  }\n\n  getPageIndex(pageRef) {\n    const xref = this.xref;\n\n    function pagesBeforeRef(kidRef) {\n      let total = 0,\n          parentRef;\n      return xref.fetchAsync(kidRef).then(function (node) {\n        if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, \"Page\") && !((0, _primitives.isDict)(node) && !node.has(\"Type\") && node.has(\"Contents\"))) {\n          throw new _util.FormatError(\"The reference does not point to a /Page dictionary.\");\n        }\n\n        if (!node) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(node)) {\n          throw new _util.FormatError(\"Node must be a dictionary.\");\n        }\n\n        parentRef = node.getRaw(\"Parent\");\n        return node.getAsync(\"Parent\");\n      }).then(function (parent) {\n        if (!parent) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(parent)) {\n          throw new _util.FormatError(\"Parent must be a dictionary.\");\n        }\n\n        return parent.getAsync(\"Kids\");\n      }).then(function (kids) {\n        if (!kids) {\n          return null;\n        }\n\n        const kidPromises = [];\n        let found = false;\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (!(0, _primitives.isRef)(kid)) {\n            throw new _util.FormatError(\"Kid must be a reference.\");\n          }\n\n          if ((0, _primitives.isRefsEqual)(kid, kidRef)) {\n            found = true;\n            break;\n          }\n\n          kidPromises.push(xref.fetchAsync(kid).then(function (obj) {\n            if (!(0, _primitives.isDict)(obj)) {\n              throw new _util.FormatError(\"Kid node must be a dictionary.\");\n            }\n\n            if (obj.has(\"Count\")) {\n              total += obj.get(\"Count\");\n            } else {\n              total++;\n            }\n          }));\n        }\n\n        if (!found) {\n          throw new _util.FormatError(\"Kid reference not found in parent's kids.\");\n        }\n\n        return Promise.all(kidPromises).then(function () {\n          return [total, parentRef];\n        });\n      });\n    }\n\n    let total = 0;\n\n    function next(ref) {\n      return pagesBeforeRef(ref).then(function (args) {\n        if (!args) {\n          return total;\n        }\n\n        const [count, parentRef] = args;\n        total += count;\n        return next(parentRef);\n      });\n    }\n\n    return next(pageRef);\n  }\n\n  static parseDestDictionary(params) {\n    function addDefaultProtocolToUrl(url) {\n      return url.startsWith(\"www.\") ? `http://${url}` : url;\n    }\n\n    function tryConvertUrlEncoding(url) {\n      try {\n        return (0, _util.stringToUTF8String)(url);\n      } catch (e) {\n        return url;\n      }\n    }\n\n    const destDict = params.destDict;\n\n    if (!(0, _primitives.isDict)(destDict)) {\n      (0, _util.warn)(\"parseDestDictionary: `destDict` must be a dictionary.\");\n      return;\n    }\n\n    const resultObj = params.resultObj;\n\n    if (typeof resultObj !== \"object\") {\n      (0, _util.warn)(\"parseDestDictionary: `resultObj` must be an object.\");\n      return;\n    }\n\n    const docBaseUrl = params.docBaseUrl || null;\n    let action = destDict.get(\"A\"),\n        url,\n        dest;\n\n    if (!(0, _primitives.isDict)(action) && destDict.has(\"Dest\")) {\n      action = destDict.get(\"Dest\");\n    }\n\n    if ((0, _primitives.isDict)(action)) {\n      const actionType = action.get(\"S\");\n\n      if (!(0, _primitives.isName)(actionType)) {\n        (0, _util.warn)(\"parseDestDictionary: Invalid type in Action dictionary.\");\n        return;\n      }\n\n      const actionName = actionType.name;\n\n      switch (actionName) {\n        case \"URI\":\n          url = action.get(\"URI\");\n\n          if ((0, _primitives.isName)(url)) {\n            url = \"/\" + url.name;\n          } else if ((0, _util.isString)(url)) {\n            url = addDefaultProtocolToUrl(url);\n          }\n\n          break;\n\n        case \"GoTo\":\n          dest = action.get(\"D\");\n          break;\n\n        case \"Launch\":\n        case \"GoToR\":\n          const urlDict = action.get(\"F\");\n\n          if ((0, _primitives.isDict)(urlDict)) {\n            url = urlDict.get(\"F\") || null;\n          } else if ((0, _util.isString)(urlDict)) {\n            url = urlDict;\n          }\n\n          let remoteDest = action.get(\"D\");\n\n          if (remoteDest) {\n            if ((0, _primitives.isName)(remoteDest)) {\n              remoteDest = remoteDest.name;\n            }\n\n            if ((0, _util.isString)(url)) {\n              const baseUrl = url.split(\"#\")[0];\n\n              if ((0, _util.isString)(remoteDest)) {\n                url = baseUrl + \"#\" + remoteDest;\n              } else if (Array.isArray(remoteDest)) {\n                url = baseUrl + \"#\" + JSON.stringify(remoteDest);\n              }\n            }\n          }\n\n          const newWindow = action.get(\"NewWindow\");\n\n          if ((0, _util.isBool)(newWindow)) {\n            resultObj.newWindow = newWindow;\n          }\n\n          break;\n\n        case \"Named\":\n          const namedAction = action.get(\"N\");\n\n          if ((0, _primitives.isName)(namedAction)) {\n            resultObj.action = namedAction.name;\n          }\n\n          break;\n\n        case \"JavaScript\":\n          const jsAction = action.get(\"JS\");\n          let js;\n\n          if ((0, _primitives.isStream)(jsAction)) {\n            js = (0, _util.bytesToString)(jsAction.getBytes());\n          } else if ((0, _util.isString)(jsAction)) {\n            js = jsAction;\n          }\n\n          if (js) {\n            const URL_OPEN_METHODS = [\"app.launchURL\", \"window.open\"];\n            const regex = new RegExp(\"^\\\\s*(\" + URL_OPEN_METHODS.join(\"|\").split(\".\").join(\"\\\\.\") + \")\\\\((?:'|\\\")([^'\\\"]*)(?:'|\\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))\", \"i\");\n            const jsUrl = regex.exec((0, _util.stringToPDFString)(js));\n\n            if (jsUrl && jsUrl[2]) {\n              url = jsUrl[2];\n\n              if (jsUrl[3] === \"true\" && jsUrl[1] === \"app.launchURL\") {\n                resultObj.newWindow = true;\n              }\n\n              break;\n            }\n          }\n\n        default:\n          (0, _util.warn)(`parseDestDictionary: unsupported action type \"${actionName}\".`);\n          break;\n      }\n    } else if (destDict.has(\"Dest\")) {\n      dest = destDict.get(\"Dest\");\n    }\n\n    if ((0, _util.isString)(url)) {\n      url = tryConvertUrlEncoding(url);\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl);\n\n      if (absoluteUrl) {\n        resultObj.url = absoluteUrl.href;\n      }\n\n      resultObj.unsafeUrl = url;\n    }\n\n    if (dest) {\n      if ((0, _primitives.isName)(dest)) {\n        dest = dest.name;\n      }\n\n      if ((0, _util.isString)(dest) || Array.isArray(dest)) {\n        resultObj.dest = dest;\n      }\n    }\n  }\n\n}\n\nexports.Catalog = Catalog;\n\nvar XRef = function XRefClosure() {\n  function XRef(stream, pdfManager) {\n    this.stream = stream;\n    this.pdfManager = pdfManager;\n    this.entries = [];\n    this.xrefstms = Object.create(null);\n    this._cacheMap = new Map();\n    this.stats = {\n      streamTypes: Object.create(null),\n      fontTypes: Object.create(null)\n    };\n  }\n\n  XRef.prototype = {\n    setStartXRef: function XRef_setStartXRef(startXRef) {\n      this.startXRefQueue = [startXRef];\n    },\n    parse: function XRef_parse(recoveryMode) {\n      var trailerDict;\n\n      if (!recoveryMode) {\n        trailerDict = this.readXRef();\n      } else {\n        (0, _util.warn)(\"Indexing all PDF objects\");\n        trailerDict = this.indexObjects();\n      }\n\n      trailerDict.assignXref(this);\n      this.trailer = trailerDict;\n      let encrypt;\n\n      try {\n        encrypt = trailerDict.get(\"Encrypt\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Encrypt\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(encrypt)) {\n        var ids = trailerDict.get(\"ID\");\n        var fileId = ids && ids.length ? ids[0] : \"\";\n        encrypt.suppressEncryption = true;\n        this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);\n      }\n\n      let root;\n\n      try {\n        root = trailerDict.get(\"Root\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Root\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(root) && root.has(\"Pages\")) {\n        this.root = root;\n      } else {\n        if (!recoveryMode) {\n          throw new _core_utils.XRefParseException();\n        }\n\n        throw new _util.FormatError(\"Invalid root reference\");\n      }\n    },\n    processXRefTable: function XRef_processXRefTable(parser) {\n      if (!(\"tableState\" in this)) {\n        this.tableState = {\n          entryNum: 0,\n          streamPos: parser.lexer.stream.pos,\n          parserBuf1: parser.buf1,\n          parserBuf2: parser.buf2\n        };\n      }\n\n      var obj = this.readXRefTable(parser);\n\n      if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n        throw new _util.FormatError(\"Invalid XRef table: could not find trailer dictionary\");\n      }\n\n      var dict = parser.getObj();\n\n      if (!(0, _primitives.isDict)(dict) && dict.dict) {\n        dict = dict.dict;\n      }\n\n      if (!(0, _primitives.isDict)(dict)) {\n        throw new _util.FormatError(\"Invalid XRef table: could not parse trailer dictionary\");\n      }\n\n      delete this.tableState;\n      return dict;\n    },\n    readXRefTable: function XRef_readXRefTable(parser) {\n      var stream = parser.lexer.stream;\n      var tableState = this.tableState;\n      stream.pos = tableState.streamPos;\n      parser.buf1 = tableState.parserBuf1;\n      parser.buf2 = tableState.parserBuf2;\n      var obj;\n\n      while (true) {\n        if (!(\"firstEntryNum\" in tableState) || !(\"entryCount\" in tableState)) {\n          if ((0, _primitives.isCmd)(obj = parser.getObj(), \"trailer\")) {\n            break;\n          }\n\n          tableState.firstEntryNum = obj;\n          tableState.entryCount = parser.getObj();\n        }\n\n        var first = tableState.firstEntryNum;\n        var count = tableState.entryCount;\n\n        if (!Number.isInteger(first) || !Number.isInteger(count)) {\n          throw new _util.FormatError(\"Invalid XRef table: wrong types in subsection header\");\n        }\n\n        for (var i = tableState.entryNum; i < count; i++) {\n          tableState.streamPos = stream.pos;\n          tableState.entryNum = i;\n          tableState.parserBuf1 = parser.buf1;\n          tableState.parserBuf2 = parser.buf2;\n          var entry = {};\n          entry.offset = parser.getObj();\n          entry.gen = parser.getObj();\n          var type = parser.getObj();\n\n          if (type instanceof _primitives.Cmd) {\n            switch (type.cmd) {\n              case \"f\":\n                entry.free = true;\n                break;\n\n              case \"n\":\n                entry.uncompressed = true;\n                break;\n            }\n          }\n\n          if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {\n            throw new _util.FormatError(`Invalid entry in XRef subsection: ${first}, ${count}`);\n          }\n\n          if (i === 0 && entry.free && first === 1) {\n            first = 0;\n          }\n\n          if (!this.entries[i + first]) {\n            this.entries[i + first] = entry;\n          }\n        }\n\n        tableState.entryNum = 0;\n        tableState.streamPos = stream.pos;\n        tableState.parserBuf1 = parser.buf1;\n        tableState.parserBuf2 = parser.buf2;\n        delete tableState.firstEntryNum;\n        delete tableState.entryCount;\n      }\n\n      if (this.entries[0] && !this.entries[0].free) {\n        throw new _util.FormatError(\"Invalid XRef table: unexpected first object\");\n      }\n\n      return obj;\n    },\n    processXRefStream: function XRef_processXRefStream(stream) {\n      if (!(\"streamState\" in this)) {\n        var streamParameters = stream.dict;\n        var byteWidths = streamParameters.get(\"W\");\n        var range = streamParameters.get(\"Index\");\n\n        if (!range) {\n          range = [0, streamParameters.get(\"Size\")];\n        }\n\n        this.streamState = {\n          entryRanges: range,\n          byteWidths,\n          entryNum: 0,\n          streamPos: stream.pos\n        };\n      }\n\n      this.readXRefStream(stream);\n      delete this.streamState;\n      return stream.dict;\n    },\n    readXRefStream: function XRef_readXRefStream(stream) {\n      var i, j;\n      var streamState = this.streamState;\n      stream.pos = streamState.streamPos;\n      var byteWidths = streamState.byteWidths;\n      var typeFieldWidth = byteWidths[0];\n      var offsetFieldWidth = byteWidths[1];\n      var generationFieldWidth = byteWidths[2];\n      var entryRanges = streamState.entryRanges;\n\n      while (entryRanges.length > 0) {\n        var first = entryRanges[0];\n        var n = entryRanges[1];\n\n        if (!Number.isInteger(first) || !Number.isInteger(n)) {\n          throw new _util.FormatError(`Invalid XRef range fields: ${first}, ${n}`);\n        }\n\n        if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {\n          throw new _util.FormatError(`Invalid XRef entry fields length: ${first}, ${n}`);\n        }\n\n        for (i = streamState.entryNum; i < n; ++i) {\n          streamState.entryNum = i;\n          streamState.streamPos = stream.pos;\n          var type = 0,\n              offset = 0,\n              generation = 0;\n\n          for (j = 0; j < typeFieldWidth; ++j) {\n            type = type << 8 | stream.getByte();\n          }\n\n          if (typeFieldWidth === 0) {\n            type = 1;\n          }\n\n          for (j = 0; j < offsetFieldWidth; ++j) {\n            offset = offset << 8 | stream.getByte();\n          }\n\n          for (j = 0; j < generationFieldWidth; ++j) {\n            generation = generation << 8 | stream.getByte();\n          }\n\n          var entry = {};\n          entry.offset = offset;\n          entry.gen = generation;\n\n          switch (type) {\n            case 0:\n              entry.free = true;\n              break;\n\n            case 1:\n              entry.uncompressed = true;\n              break;\n\n            case 2:\n              break;\n\n            default:\n              throw new _util.FormatError(`Invalid XRef entry type: ${type}`);\n          }\n\n          if (!this.entries[first + i]) {\n            this.entries[first + i] = entry;\n          }\n        }\n\n        streamState.entryNum = 0;\n        streamState.streamPos = stream.pos;\n        entryRanges.splice(0, 2);\n      }\n    },\n    indexObjects: function XRef_indexObjects() {\n      var TAB = 0x9,\n          LF = 0xa,\n          CR = 0xd,\n          SPACE = 0x20;\n      var PERCENT = 0x25,\n          LT = 0x3c;\n\n      function readToken(data, offset) {\n        var token = \"\",\n            ch = data[offset];\n\n        while (ch !== LF && ch !== CR && ch !== LT) {\n          if (++offset >= data.length) {\n            break;\n          }\n\n          token += String.fromCharCode(ch);\n          ch = data[offset];\n        }\n\n        return token;\n      }\n\n      function skipUntil(data, offset, what) {\n        var length = what.length,\n            dataLength = data.length;\n        var skipped = 0;\n\n        while (offset < dataLength) {\n          var i = 0;\n\n          while (i < length && data[offset + i] === what[i]) {\n            ++i;\n          }\n\n          if (i >= length) {\n            break;\n          }\n\n          offset++;\n          skipped++;\n        }\n\n        return skipped;\n      }\n\n      var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n      const endobjRegExp = /\\bendobj[\\b\\s]$/;\n      const nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n      const CHECK_CONTENT_LENGTH = 25;\n      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);\n      const objBytes = new Uint8Array([111, 98, 106]);\n      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n      this.entries.length = 0;\n      var stream = this.stream;\n      stream.pos = 0;\n      var buffer = stream.getBytes();\n      var position = stream.start,\n          length = buffer.length;\n      var trailers = [],\n          xrefStms = [];\n\n      while (position < length) {\n        var ch = buffer[position];\n\n        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n          ++position;\n          continue;\n        }\n\n        if (ch === PERCENT) {\n          do {\n            ++position;\n\n            if (position >= length) {\n              break;\n            }\n\n            ch = buffer[position];\n          } while (ch !== LF && ch !== CR);\n\n          continue;\n        }\n\n        var token = readToken(buffer, position);\n        var m;\n\n        if (token.startsWith(\"xref\") && (token.length === 4 || /\\s/.test(token[4]))) {\n          position += skipUntil(buffer, position, trailerBytes);\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else if (m = objRegExp.exec(token)) {\n          const num = m[1] | 0,\n                gen = m[2] | 0;\n\n          if (!this.entries[num] || this.entries[num].gen === gen) {\n            this.entries[num] = {\n              offset: position - stream.start,\n              gen,\n              uncompressed: true\n            };\n          }\n\n          let contentLength,\n              startPos = position + token.length;\n\n          while (startPos < buffer.length) {\n            const endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n            contentLength = endPos - position;\n            const checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n            const tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));\n\n            if (endobjRegExp.test(tokenStr)) {\n              break;\n            } else {\n              const objToken = nestedObjRegExp.exec(tokenStr);\n\n              if (objToken && objToken[1]) {\n                (0, _util.warn)('indexObjects: Found new \"obj\" inside of another \"obj\", ' + 'caused by missing \"endobj\" -- trying to recover.');\n                contentLength -= objToken[1].length;\n                break;\n              }\n            }\n\n            startPos = endPos;\n          }\n\n          const content = buffer.subarray(position, position + contentLength);\n          var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n\n          if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {\n            xrefStms.push(position - stream.start);\n            this.xrefstms[position - stream.start] = 1;\n          }\n\n          position += contentLength;\n        } else if (token.startsWith(\"trailer\") && (token.length === 7 || /\\s/.test(token[7]))) {\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else {\n          position += token.length + 1;\n        }\n      }\n\n      var i, ii;\n\n      for (i = 0, ii = xrefStms.length; i < ii; ++i) {\n        this.startXRefQueue.push(xrefStms[i]);\n        this.readXRef(true);\n      }\n\n      let trailerDict;\n\n      for (i = 0, ii = trailers.length; i < ii; ++i) {\n        stream.pos = trailers[i];\n        const parser = new _parser.Parser({\n          lexer: new _parser.Lexer(stream),\n          xref: this,\n          allowStreams: true,\n          recoveryMode: true\n        });\n        var obj = parser.getObj();\n\n        if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n          continue;\n        }\n\n        const dict = parser.getObj();\n\n        if (!(0, _primitives.isDict)(dict)) {\n          continue;\n        }\n\n        let rootDict;\n\n        try {\n          rootDict = dict.get(\"Root\");\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n\n          continue;\n        }\n\n        if (!(0, _primitives.isDict)(rootDict) || !rootDict.has(\"Pages\")) {\n          continue;\n        }\n\n        if (dict.has(\"ID\")) {\n          return dict;\n        }\n\n        trailerDict = dict;\n      }\n\n      if (trailerDict) {\n        return trailerDict;\n      }\n\n      throw new _util.InvalidPDFException(\"Invalid PDF structure.\");\n    },\n    readXRef: function XRef_readXRef(recoveryMode) {\n      var stream = this.stream;\n      const startXRefParsedCache = Object.create(null);\n\n      try {\n        while (this.startXRefQueue.length) {\n          var startXRef = this.startXRefQueue[0];\n\n          if (startXRefParsedCache[startXRef]) {\n            (0, _util.warn)(\"readXRef - skipping XRef table since it was already parsed.\");\n            this.startXRefQueue.shift();\n            continue;\n          }\n\n          startXRefParsedCache[startXRef] = true;\n          stream.pos = startXRef + stream.start;\n          const parser = new _parser.Parser({\n            lexer: new _parser.Lexer(stream),\n            xref: this,\n            allowStreams: true\n          });\n          var obj = parser.getObj();\n          var dict;\n\n          if ((0, _primitives.isCmd)(obj, \"xref\")) {\n            dict = this.processXRefTable(parser);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            obj = dict.get(\"XRefStm\");\n\n            if (Number.isInteger(obj)) {\n              var pos = obj;\n\n              if (!(pos in this.xrefstms)) {\n                this.xrefstms[pos] = 1;\n                this.startXRefQueue.push(pos);\n              }\n            }\n          } else if (Number.isInteger(obj)) {\n            if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), \"obj\") || !(0, _primitives.isStream)(obj = parser.getObj())) {\n              throw new _util.FormatError(\"Invalid XRef stream\");\n            }\n\n            dict = this.processXRefStream(obj);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            if (!dict) {\n              throw new _util.FormatError(\"Failed to read XRef stream\");\n            }\n          } else {\n            throw new _util.FormatError(\"Invalid XRef stream header\");\n          }\n\n          obj = dict.get(\"Prev\");\n\n          if (Number.isInteger(obj)) {\n            this.startXRefQueue.push(obj);\n          } else if ((0, _primitives.isRef)(obj)) {\n            this.startXRefQueue.push(obj.num);\n          }\n\n          this.startXRefQueue.shift();\n        }\n\n        return this.topDict;\n      } catch (e) {\n        if (e instanceof _core_utils.MissingDataException) {\n          throw e;\n        }\n\n        (0, _util.info)(\"(while reading XRef): \" + e);\n      }\n\n      if (recoveryMode) {\n        return undefined;\n      }\n\n      throw new _core_utils.XRefParseException();\n    },\n    getEntry: function XRef_getEntry(i) {\n      var xrefEntry = this.entries[i];\n\n      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n        return xrefEntry;\n      }\n\n      return null;\n    },\n    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetch(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n    fetch: function XRef_fetch(ref, suppressEncryption) {\n      if (!(ref instanceof _primitives.Ref)) {\n        throw new Error(\"ref object is not a reference\");\n      }\n\n      const num = ref.num;\n\n      const cacheEntry = this._cacheMap.get(num);\n\n      if (cacheEntry !== undefined) {\n        if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {\n          cacheEntry.objId = ref.toString();\n        }\n\n        return cacheEntry;\n      }\n\n      let xrefEntry = this.getEntry(num);\n\n      if (xrefEntry === null) {\n        this._cacheMap.set(num, xrefEntry);\n\n        return xrefEntry;\n      }\n\n      if (xrefEntry.uncompressed) {\n        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n      } else {\n        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n      }\n\n      if ((0, _primitives.isDict)(xrefEntry)) {\n        xrefEntry.objId = ref.toString();\n      } else if ((0, _primitives.isStream)(xrefEntry)) {\n        xrefEntry.dict.objId = ref.toString();\n      }\n\n      return xrefEntry;\n    },\n\n    fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {\n      var gen = ref.gen;\n      var num = ref.num;\n\n      if (xrefEntry.gen !== gen) {\n        throw new _core_utils.XRefEntryException(`Inconsistent generation in XRef: ${ref}`);\n      }\n\n      var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      var obj1 = parser.getObj();\n      var obj2 = parser.getObj();\n      var obj3 = parser.getObj();\n\n      if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (obj3.cmd !== \"obj\") {\n        if (obj3.cmd.startsWith(\"obj\")) {\n          num = parseInt(obj3.cmd.substring(3), 10);\n\n          if (!Number.isNaN(num)) {\n            return num;\n          }\n        }\n\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (this.encrypt && !suppressEncryption) {\n        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n      } else {\n        xrefEntry = parser.getObj();\n      }\n\n      if (!(0, _primitives.isStream)(xrefEntry)) {\n        this._cacheMap.set(num, xrefEntry);\n      }\n\n      return xrefEntry;\n    },\n\n    fetchCompressed(ref, xrefEntry, suppressEncryption = false) {\n      const tableOffset = xrefEntry.offset;\n      const stream = this.fetch(_primitives.Ref.get(tableOffset, 0));\n\n      if (!(0, _primitives.isStream)(stream)) {\n        throw new _util.FormatError(\"bad ObjStm stream\");\n      }\n\n      const first = stream.dict.get(\"First\");\n      const n = stream.dict.get(\"N\");\n\n      if (!Number.isInteger(first) || !Number.isInteger(n)) {\n        throw new _util.FormatError(\"invalid first and n parameters for ObjStm stream\");\n      }\n\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      const nums = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const num = parser.getObj();\n\n        if (!Number.isInteger(num)) {\n          throw new _util.FormatError(`invalid object number in the ObjStm stream: ${num}`);\n        }\n\n        const offset = parser.getObj();\n\n        if (!Number.isInteger(offset)) {\n          throw new _util.FormatError(`invalid object offset in the ObjStm stream: ${offset}`);\n        }\n\n        nums[i] = num;\n      }\n\n      const entries = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const obj = parser.getObj();\n        entries[i] = obj;\n\n        if (parser.buf1 instanceof _primitives.Cmd && parser.buf1.cmd === \"endobj\") {\n          parser.shift();\n        }\n\n        if ((0, _primitives.isStream)(obj)) {\n          continue;\n        }\n\n        const num = nums[i],\n              entry = this.entries[num];\n\n        if (entry && entry.offset === tableOffset && entry.gen === i) {\n          this._cacheMap.set(num, obj);\n        }\n      }\n\n      xrefEntry = entries[xrefEntry.gen];\n\n      if (xrefEntry === undefined) {\n        throw new _core_utils.XRefEntryException(`Bad (compressed) XRef entry: ${ref}`);\n      }\n\n      return xrefEntry;\n    },\n\n    async fetchIfRefAsync(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetchAsync(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n\n    async fetchAsync(ref, suppressEncryption) {\n      try {\n        return this.fetch(ref, suppressEncryption);\n      } catch (ex) {\n        if (!(ex instanceof _core_utils.MissingDataException)) {\n          throw ex;\n        }\n\n        await this.pdfManager.requestRange(ex.begin, ex.end);\n        return this.fetchAsync(ref, suppressEncryption);\n      }\n    },\n\n    getCatalogObj: function XRef_getCatalogObj() {\n      return this.root;\n    }\n  };\n  return XRef;\n}();\n\nexports.XRef = XRef;\n\nclass NameOrNumberTree {\n  constructor(root, xref, type) {\n    if (this.constructor === NameOrNumberTree) {\n      (0, _util.unreachable)(\"Cannot initialize NameOrNumberTree.\");\n    }\n\n    this.root = root;\n    this.xref = xref;\n    this._type = type;\n  }\n\n  getAll() {\n    const dict = Object.create(null);\n\n    if (!this.root) {\n      return dict;\n    }\n\n    const xref = this.xref;\n    const processed = new _primitives.RefSet();\n    processed.put(this.root);\n    const queue = [this.root];\n\n    while (queue.length > 0) {\n      const obj = xref.fetchIfRef(queue.shift());\n\n      if (!(0, _primitives.isDict)(obj)) {\n        continue;\n      }\n\n      if (obj.has(\"Kids\")) {\n        const kids = obj.get(\"Kids\");\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (processed.has(kid)) {\n            throw new _util.FormatError(`Duplicate entry in \"${this._type}\" tree.`);\n          }\n\n          queue.push(kid);\n          processed.put(kid);\n        }\n\n        continue;\n      }\n\n      const entries = obj.get(this._type);\n\n      if (Array.isArray(entries)) {\n        for (let i = 0, ii = entries.length; i < ii; i += 2) {\n          dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);\n        }\n      }\n    }\n\n    return dict;\n  }\n\n  get(key) {\n    if (!this.root) {\n      return null;\n    }\n\n    const xref = this.xref;\n    let kidsOrEntries = xref.fetchIfRef(this.root);\n    let loopCount = 0;\n    const MAX_LEVELS = 10;\n\n    while (kidsOrEntries.has(\"Kids\")) {\n      if (++loopCount > MAX_LEVELS) {\n        (0, _util.warn)(`Search depth limit reached for \"${this._type}\" tree.`);\n        return null;\n      }\n\n      const kids = kidsOrEntries.get(\"Kids\");\n\n      if (!Array.isArray(kids)) {\n        return null;\n      }\n\n      let l = 0,\n          r = kids.length - 1;\n\n      while (l <= r) {\n        const m = l + r >> 1;\n        const kid = xref.fetchIfRef(kids[m]);\n        const limits = kid.get(\"Limits\");\n\n        if (key < xref.fetchIfRef(limits[0])) {\n          r = m - 1;\n        } else if (key > xref.fetchIfRef(limits[1])) {\n          l = m + 1;\n        } else {\n          kidsOrEntries = xref.fetchIfRef(kids[m]);\n          break;\n        }\n      }\n\n      if (l > r) {\n        return null;\n      }\n    }\n\n    const entries = kidsOrEntries.get(this._type);\n\n    if (Array.isArray(entries)) {\n      let l = 0,\n          r = entries.length - 2;\n\n      while (l <= r) {\n        const tmp = l + r >> 1,\n              m = tmp + (tmp & 1);\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (key < currentKey) {\n          r = m - 2;\n        } else if (key > currentKey) {\n          l = m + 2;\n        } else {\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n\n      (0, _util.info)(`Falling back to an exhaustive search, for key \"${key}\", ` + `in \"${this._type}\" tree.`);\n\n      for (let m = 0, mm = entries.length; m < mm; m += 2) {\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (currentKey === key) {\n          (0, _util.warn)(`The \"${key}\" key was found at an incorrect, ` + `i.e. out-of-order, position in \"${this._type}\" tree.`);\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n    }\n\n    return null;\n  }\n\n}\n\nclass NameTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Names\");\n  }\n\n}\n\nclass NumberTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Nums\");\n  }\n\n}\n\nvar FileSpec = function FileSpecClosure() {\n  function FileSpec(root, xref) {\n    if (!root || !(0, _primitives.isDict)(root)) {\n      return;\n    }\n\n    this.xref = xref;\n    this.root = root;\n\n    if (root.has(\"FS\")) {\n      this.fs = root.get(\"FS\");\n    }\n\n    this.description = root.has(\"Desc\") ? (0, _util.stringToPDFString)(root.get(\"Desc\")) : \"\";\n\n    if (root.has(\"RF\")) {\n      (0, _util.warn)(\"Related file specifications are not supported\");\n    }\n\n    this.contentAvailable = true;\n\n    if (!root.has(\"EF\")) {\n      this.contentAvailable = false;\n      (0, _util.warn)(\"Non-embedded file specifications are not supported\");\n    }\n  }\n\n  function pickPlatformItem(dict) {\n    if (dict.has(\"UF\")) {\n      return dict.get(\"UF\");\n    } else if (dict.has(\"F\")) {\n      return dict.get(\"F\");\n    } else if (dict.has(\"Unix\")) {\n      return dict.get(\"Unix\");\n    } else if (dict.has(\"Mac\")) {\n      return dict.get(\"Mac\");\n    } else if (dict.has(\"DOS\")) {\n      return dict.get(\"DOS\");\n    }\n\n    return null;\n  }\n\n  FileSpec.prototype = {\n    get filename() {\n      if (!this._filename && this.root) {\n        var filename = pickPlatformItem(this.root) || \"unnamed\";\n        this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\\//g, \"/\").replace(/\\\\/g, \"/\");\n      }\n\n      return this._filename;\n    },\n\n    get content() {\n      if (!this.contentAvailable) {\n        return null;\n      }\n\n      if (!this.contentRef && this.root) {\n        this.contentRef = pickPlatformItem(this.root.get(\"EF\"));\n      }\n\n      var content = null;\n\n      if (this.contentRef) {\n        var xref = this.xref;\n        var fileObj = xref.fetchIfRef(this.contentRef);\n\n        if (fileObj && (0, _primitives.isStream)(fileObj)) {\n          content = fileObj.getBytes();\n        } else {\n          (0, _util.warn)(\"Embedded file specification points to non-existing/invalid \" + \"content\");\n        }\n      } else {\n        (0, _util.warn)(\"Embedded file specification does not have a content\");\n      }\n\n      return content;\n    },\n\n    get serializable() {\n      return {\n        filename: this.filename,\n        content: this.content\n      };\n    }\n\n  };\n  return FileSpec;\n}();\n\nexports.FileSpec = FileSpec;\n\nconst ObjectLoader = function () {\n  function mayHaveChildren(value) {\n    return value instanceof _primitives.Ref || value instanceof _primitives.Dict || Array.isArray(value) || (0, _primitives.isStream)(value);\n  }\n\n  function addChildren(node, nodesToVisit) {\n    if (node instanceof _primitives.Dict || (0, _primitives.isStream)(node)) {\n      const dict = node instanceof _primitives.Dict ? node : node.dict;\n      const dictKeys = dict.getKeys();\n\n      for (let i = 0, ii = dictKeys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(dictKeys[i]);\n\n        if (mayHaveChildren(rawValue)) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n    } else if (Array.isArray(node)) {\n      for (let i = 0, ii = node.length; i < ii; i++) {\n        const value = node[i];\n\n        if (mayHaveChildren(value)) {\n          nodesToVisit.push(value);\n        }\n      }\n    }\n  }\n\n  function ObjectLoader(dict, keys, xref) {\n    this.dict = dict;\n    this.keys = keys;\n    this.xref = xref;\n    this.refSet = null;\n  }\n\n  ObjectLoader.prototype = {\n    async load() {\n      if (!this.xref.stream.allChunksLoaded || this.xref.stream.allChunksLoaded()) {\n        return undefined;\n      }\n\n      const {\n        keys,\n        dict\n      } = this;\n      this.refSet = new _primitives.RefSet();\n      const nodesToVisit = [];\n\n      for (let i = 0, ii = keys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(keys[i]);\n\n        if (rawValue !== undefined) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n\n      return this._walk(nodesToVisit);\n    },\n\n    async _walk(nodesToVisit) {\n      const nodesToRevisit = [];\n      const pendingRequests = [];\n\n      while (nodesToVisit.length) {\n        let currentNode = nodesToVisit.pop();\n\n        if (currentNode instanceof _primitives.Ref) {\n          if (this.refSet.has(currentNode)) {\n            continue;\n          }\n\n          try {\n            this.refSet.put(currentNode);\n            currentNode = this.xref.fetch(currentNode);\n          } catch (ex) {\n            if (!(ex instanceof _core_utils.MissingDataException)) {\n              throw ex;\n            }\n\n            nodesToRevisit.push(currentNode);\n            pendingRequests.push({\n              begin: ex.begin,\n              end: ex.end\n            });\n          }\n        }\n\n        if (currentNode && currentNode.getBaseStreams) {\n          const baseStreams = currentNode.getBaseStreams();\n          let foundMissingData = false;\n\n          for (let i = 0, ii = baseStreams.length; i < ii; i++) {\n            const stream = baseStreams[i];\n\n            if (stream.allChunksLoaded && !stream.allChunksLoaded()) {\n              foundMissingData = true;\n              pendingRequests.push({\n                begin: stream.start,\n                end: stream.end\n              });\n            }\n          }\n\n          if (foundMissingData) {\n            nodesToRevisit.push(currentNode);\n          }\n        }\n\n        addChildren(currentNode, nodesToVisit);\n      }\n\n      if (pendingRequests.length) {\n        await this.xref.stream.manager.requestRanges(pendingRequests);\n\n        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {\n          const node = nodesToRevisit[i];\n\n          if (node instanceof _primitives.Ref) {\n            this.refSet.remove(node);\n          }\n        }\n\n        return this._walk(nodesToRevisit);\n      }\n\n      this.refSet = null;\n      return undefined;\n    }\n\n  };\n  return ObjectLoader;\n}();\n\nexports.ObjectLoader = ObjectLoader;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = exports.Linearization = exports.Lexer = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _ccitt_stream = __w_pdfjs_require__(13);\n\nvar _jbig2_stream = __w_pdfjs_require__(15);\n\nvar _jpeg_stream = __w_pdfjs_require__(18);\n\nvar _jpx_stream = __w_pdfjs_require__(20);\n\nconst MAX_LENGTH_TO_CACHE = 1000;\nconst MAX_ADLER32_LENGTH = 5552;\n\nfunction computeAdler32(bytes) {\n  const bytesLength = bytes.length;\n  let a = 1,\n      b = 0;\n\n  for (let i = 0; i < bytesLength; ++i) {\n    a += bytes[i] & 0xff;\n    b += a;\n  }\n\n  return b % 65521 << 16 | a % 65521;\n}\n\nclass Parser {\n  constructor({\n    lexer,\n    xref,\n    allowStreams = false,\n    recoveryMode = false\n  }) {\n    this.lexer = lexer;\n    this.xref = xref;\n    this.allowStreams = allowStreams;\n    this.recoveryMode = recoveryMode;\n    this.imageCache = Object.create(null);\n    this.refill();\n  }\n\n  refill() {\n    this.buf1 = this.lexer.getObj();\n    this.buf2 = this.lexer.getObj();\n  }\n\n  shift() {\n    if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === \"ID\") {\n      this.buf1 = this.buf2;\n      this.buf2 = null;\n    } else {\n      this.buf1 = this.buf2;\n      this.buf2 = this.lexer.getObj();\n    }\n  }\n\n  tryShift() {\n    try {\n      this.shift();\n      return true;\n    } catch (e) {\n      if (e instanceof _core_utils.MissingDataException) {\n        throw e;\n      }\n\n      return false;\n    }\n  }\n\n  getObj(cipherTransform = null) {\n    const buf1 = this.buf1;\n    this.shift();\n\n    if (buf1 instanceof _primitives.Cmd) {\n      switch (buf1.cmd) {\n        case \"BI\":\n          return this.makeInlineImage(cipherTransform);\n\n        case \"[\":\n          const array = [];\n\n          while (!(0, _primitives.isCmd)(this.buf1, \"]\") && !(0, _primitives.isEOF)(this.buf1)) {\n            array.push(this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside array\");\n            }\n\n            return array;\n          }\n\n          this.shift();\n          return array;\n\n        case \"<<\":\n          const dict = new _primitives.Dict(this.xref);\n\n          while (!(0, _primitives.isCmd)(this.buf1, \">>\") && !(0, _primitives.isEOF)(this.buf1)) {\n            if (!(0, _primitives.isName)(this.buf1)) {\n              (0, _util.info)(\"Malformed dictionary: key must be a name object\");\n              this.shift();\n              continue;\n            }\n\n            const key = this.buf1.name;\n            this.shift();\n\n            if ((0, _primitives.isEOF)(this.buf1)) {\n              break;\n            }\n\n            dict.set(key, this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside dictionary\");\n            }\n\n            return dict;\n          }\n\n          if ((0, _primitives.isCmd)(this.buf2, \"stream\")) {\n            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;\n          }\n\n          this.shift();\n          return dict;\n\n        default:\n          return buf1;\n      }\n    }\n\n    if (Number.isInteger(buf1)) {\n      if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, \"R\")) {\n        const ref = _primitives.Ref.get(buf1, this.buf1);\n\n        this.shift();\n        this.shift();\n        return ref;\n      }\n\n      return buf1;\n    }\n\n    if (typeof buf1 === \"string\") {\n      if (cipherTransform) {\n        return cipherTransform.decryptString(buf1);\n      }\n\n      return buf1;\n    }\n\n    return buf1;\n  }\n\n  findDefaultInlineStreamEnd(stream) {\n    const E = 0x45,\n          I = 0x49,\n          SPACE = 0x20,\n          LF = 0xa,\n          CR = 0xd;\n    const n = 10,\n          NUL = 0x0;\n    const startPos = stream.pos;\n    let state = 0,\n        ch,\n        maybeEIPos;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else {\n        (0, _util.assert)(state === 2, \"findDefaultInlineStreamEnd - invalid state.\");\n\n        if (ch === SPACE || ch === LF || ch === CR) {\n          maybeEIPos = stream.pos;\n          const followingBytes = stream.peekBytes(n);\n\n          for (let i = 0, ii = followingBytes.length; i < ii; i++) {\n            ch = followingBytes[i];\n\n            if (ch === NUL && followingBytes[i + 1] !== NUL) {\n              continue;\n            }\n\n            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n              state = 0;\n              break;\n            }\n          }\n\n          if (state === 2) {\n            break;\n          }\n        } else {\n          state = 0;\n        }\n      }\n    }\n\n    if (ch === -1) {\n      (0, _util.warn)(\"findDefaultInlineStreamEnd: \" + \"Reached the end of the stream without finding a valid EI marker\");\n\n      if (maybeEIPos) {\n        (0, _util.warn)('... trying to recover by using the last \"EI\" occurrence.');\n        stream.skip(-(stream.pos - maybeEIPos));\n      }\n    }\n\n    let endOffset = 4;\n    stream.skip(-endOffset);\n    ch = stream.peekByte();\n    stream.skip(endOffset);\n\n    if (!(0, _core_utils.isWhiteSpace)(ch)) {\n      endOffset--;\n    }\n\n    return stream.pos - endOffset - startPos;\n  }\n\n  findDCTDecodeInlineStreamEnd(stream) {\n    const startPos = stream.pos;\n    let foundEOI = false,\n        b,\n        markerLength;\n\n    while ((b = stream.getByte()) !== -1) {\n      if (b !== 0xff) {\n        continue;\n      }\n\n      switch (stream.getByte()) {\n        case 0x00:\n          break;\n\n        case 0xff:\n          stream.skip(-1);\n          break;\n\n        case 0xd9:\n          foundEOI = true;\n          break;\n\n        case 0xc0:\n        case 0xc1:\n        case 0xc2:\n        case 0xc3:\n        case 0xc5:\n        case 0xc6:\n        case 0xc7:\n        case 0xc9:\n        case 0xca:\n        case 0xcb:\n        case 0xcd:\n        case 0xce:\n        case 0xcf:\n        case 0xc4:\n        case 0xcc:\n        case 0xda:\n        case 0xdb:\n        case 0xdc:\n        case 0xdd:\n        case 0xde:\n        case 0xdf:\n        case 0xe0:\n        case 0xe1:\n        case 0xe2:\n        case 0xe3:\n        case 0xe4:\n        case 0xe5:\n        case 0xe6:\n        case 0xe7:\n        case 0xe8:\n        case 0xe9:\n        case 0xea:\n        case 0xeb:\n        case 0xec:\n        case 0xed:\n        case 0xee:\n        case 0xef:\n        case 0xfe:\n          markerLength = stream.getUint16();\n\n          if (markerLength > 2) {\n            stream.skip(markerLength - 2);\n          } else {\n            stream.skip(-2);\n          }\n\n          break;\n      }\n\n      if (foundEOI) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (b === -1) {\n      (0, _util.warn)(\"Inline DCTDecode image stream: \" + \"EOI marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCII85DecodeInlineStreamEnd(stream) {\n    const TILDE = 0x7e,\n          GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === TILDE) {\n        const tildePos = stream.pos;\n        ch = stream.peekByte();\n\n        while ((0, _core_utils.isWhiteSpace)(ch)) {\n          stream.skip();\n          ch = stream.peekByte();\n        }\n\n        if (ch === GT) {\n          stream.skip();\n          break;\n        }\n\n        if (stream.pos > tildePos) {\n          const maybeEI = stream.peekBytes(2);\n\n          if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {\n            break;\n          }\n        }\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCII85Decode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCIIHexDecodeInlineStreamEnd(stream) {\n    const GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === GT) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCIIHexDecode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  inlineStreamSkipEI(stream) {\n    const E = 0x45,\n          I = 0x49;\n    let state = 0,\n        ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else if (state === 2) {\n        break;\n      }\n    }\n  }\n\n  makeInlineImage(cipherTransform) {\n    const lexer = this.lexer;\n    const stream = lexer.stream;\n    const dict = new _primitives.Dict(this.xref);\n    let dictLength;\n\n    while (!(0, _primitives.isCmd)(this.buf1, \"ID\") && !(0, _primitives.isEOF)(this.buf1)) {\n      if (!(0, _primitives.isName)(this.buf1)) {\n        throw new _util.FormatError(\"Dictionary key must be a name object\");\n      }\n\n      const key = this.buf1.name;\n      this.shift();\n\n      if ((0, _primitives.isEOF)(this.buf1)) {\n        break;\n      }\n\n      dict.set(key, this.getObj(cipherTransform));\n    }\n\n    if (lexer.beginInlineImagePos !== -1) {\n      dictLength = stream.pos - lexer.beginInlineImagePos;\n    }\n\n    const filter = dict.get(\"Filter\", \"F\");\n    let filterName;\n\n    if ((0, _primitives.isName)(filter)) {\n      filterName = filter.name;\n    } else if (Array.isArray(filter)) {\n      const filterZero = this.xref.fetchIfRef(filter[0]);\n\n      if ((0, _primitives.isName)(filterZero)) {\n        filterName = filterZero.name;\n      }\n    }\n\n    const startPos = stream.pos;\n    let length;\n\n    if (filterName === \"DCTDecode\" || filterName === \"DCT\") {\n      length = this.findDCTDecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCII85Decode\" || filterName === \"A85\") {\n      length = this.findASCII85DecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCIIHexDecode\" || filterName === \"AHx\") {\n      length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n    } else {\n      length = this.findDefaultInlineStreamEnd(stream);\n    }\n\n    let imageStream = stream.makeSubStream(startPos, length, dict);\n    let cacheKey;\n\n    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n      const imageBytes = imageStream.getBytes();\n      imageStream.reset();\n      const initialStreamPos = stream.pos;\n      stream.pos = lexer.beginInlineImagePos;\n      const dictBytes = stream.getBytes(dictLength);\n      stream.pos = initialStreamPos;\n      cacheKey = computeAdler32(imageBytes) + \"_\" + computeAdler32(dictBytes);\n      const cacheEntry = this.imageCache[cacheKey];\n\n      if (cacheEntry !== undefined) {\n        this.buf2 = _primitives.Cmd.get(\"EI\");\n        this.shift();\n        cacheEntry.reset();\n        return cacheEntry;\n      }\n    }\n\n    if (cipherTransform) {\n      imageStream = cipherTransform.createStream(imageStream, length);\n    }\n\n    imageStream = this.filter(imageStream, dict, length);\n    imageStream.dict = dict;\n\n    if (cacheKey !== undefined) {\n      imageStream.cacheKey = `inline_${length}_${cacheKey}`;\n      this.imageCache[cacheKey] = imageStream;\n    }\n\n    this.buf2 = _primitives.Cmd.get(\"EI\");\n    this.shift();\n    return imageStream;\n  }\n\n  _findStreamLength(startPos, signature) {\n    const {\n      stream\n    } = this.lexer;\n    stream.pos = startPos;\n    const SCAN_BLOCK_LENGTH = 2048;\n    const signatureLength = signature.length;\n\n    while (stream.pos < stream.end) {\n      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      const scanLength = scanBytes.length - signatureLength;\n\n      if (scanLength <= 0) {\n        break;\n      }\n\n      let pos = 0;\n\n      while (pos < scanLength) {\n        let j = 0;\n\n        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n          j++;\n        }\n\n        if (j >= signatureLength) {\n          stream.pos += pos;\n          return stream.pos - startPos;\n        }\n\n        pos++;\n      }\n\n      stream.pos += scanLength;\n    }\n\n    return -1;\n  }\n\n  makeStream(dict, cipherTransform) {\n    const lexer = this.lexer;\n    let stream = lexer.stream;\n    lexer.skipToNextLine();\n    const startPos = stream.pos - 1;\n    let length = dict.get(\"Length\");\n\n    if (!Number.isInteger(length)) {\n      (0, _util.info)(`Bad length \"${length}\" in stream`);\n      length = 0;\n    }\n\n    stream.pos = startPos + length;\n    lexer.nextChar();\n\n    if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, \"endstream\")) {\n      this.shift();\n    } else {\n      const ENDSTREAM_SIGNATURE = new Uint8Array([0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D]);\n\n      let actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n\n      if (actualLength < 0) {\n        const MAX_TRUNCATION = 1;\n\n        for (let i = 1; i <= MAX_TRUNCATION; i++) {\n          const end = ENDSTREAM_SIGNATURE.length - i;\n          const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n\n          const maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);\n\n          if (maybeLength >= 0) {\n            const lastByte = stream.peekBytes(end + 1)[end];\n\n            if (!(0, _core_utils.isWhiteSpace)(lastByte)) {\n              break;\n            }\n\n            (0, _util.info)(`Found \"${(0, _util.bytesToString)(TRUNCATED_SIGNATURE)}\" when ` + \"searching for endstream command.\");\n            actualLength = maybeLength;\n            break;\n          }\n        }\n\n        if (actualLength < 0) {\n          throw new _util.FormatError(\"Missing endstream command.\");\n        }\n      }\n\n      length = actualLength;\n      lexer.nextChar();\n      this.shift();\n      this.shift();\n    }\n\n    this.shift();\n    stream = stream.makeSubStream(startPos, length, dict);\n\n    if (cipherTransform) {\n      stream = cipherTransform.createStream(stream, length);\n    }\n\n    stream = this.filter(stream, dict, length);\n    stream.dict = dict;\n    return stream;\n  }\n\n  filter(stream, dict, length) {\n    let filter = dict.get(\"Filter\", \"F\");\n    let params = dict.get(\"DecodeParms\", \"DP\");\n\n    if ((0, _primitives.isName)(filter)) {\n      if (Array.isArray(params)) {\n        (0, _util.warn)(\"/DecodeParms should not contain an Array, \" + \"when /Filter contains a Name.\");\n      }\n\n      return this.makeFilter(stream, filter.name, length, params);\n    }\n\n    let maybeLength = length;\n\n    if (Array.isArray(filter)) {\n      const filterArray = filter;\n      const paramsArray = params;\n\n      for (let i = 0, ii = filterArray.length; i < ii; ++i) {\n        filter = this.xref.fetchIfRef(filterArray[i]);\n\n        if (!(0, _primitives.isName)(filter)) {\n          throw new _util.FormatError(`Bad filter name \"${filter}\"`);\n        }\n\n        params = null;\n\n        if (Array.isArray(paramsArray) && i in paramsArray) {\n          params = this.xref.fetchIfRef(paramsArray[i]);\n        }\n\n        stream = this.makeFilter(stream, filter.name, maybeLength, params);\n        maybeLength = null;\n      }\n    }\n\n    return stream;\n  }\n\n  makeFilter(stream, name, maybeLength, params) {\n    if (maybeLength === 0) {\n      (0, _util.warn)(`Empty \"${name}\" stream.`);\n      return new _stream.NullStream();\n    }\n\n    try {\n      const xrefStreamStats = this.xref.stats.streamTypes;\n\n      if (name === \"FlateDecode\" || name === \"Fl\") {\n        xrefStreamStats[_util.StreamType.FLATE] = true;\n\n        if (params) {\n          return new _stream.PredictorStream(new _stream.FlateStream(stream, maybeLength), maybeLength, params);\n        }\n\n        return new _stream.FlateStream(stream, maybeLength);\n      }\n\n      if (name === \"LZWDecode\" || name === \"LZW\") {\n        xrefStreamStats[_util.StreamType.LZW] = true;\n        let earlyChange = 1;\n\n        if (params) {\n          if (params.has(\"EarlyChange\")) {\n            earlyChange = params.get(\"EarlyChange\");\n          }\n\n          return new _stream.PredictorStream(new _stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);\n        }\n\n        return new _stream.LZWStream(stream, maybeLength, earlyChange);\n      }\n\n      if (name === \"DCTDecode\" || name === \"DCT\") {\n        xrefStreamStats[_util.StreamType.DCT] = true;\n        return new _jpeg_stream.JpegStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"JPXDecode\" || name === \"JPX\") {\n        xrefStreamStats[_util.StreamType.JPX] = true;\n        return new _jpx_stream.JpxStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"ASCII85Decode\" || name === \"A85\") {\n        xrefStreamStats[_util.StreamType.A85] = true;\n        return new _stream.Ascii85Stream(stream, maybeLength);\n      }\n\n      if (name === \"ASCIIHexDecode\" || name === \"AHx\") {\n        xrefStreamStats[_util.StreamType.AHX] = true;\n        return new _stream.AsciiHexStream(stream, maybeLength);\n      }\n\n      if (name === \"CCITTFaxDecode\" || name === \"CCF\") {\n        xrefStreamStats[_util.StreamType.CCF] = true;\n        return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);\n      }\n\n      if (name === \"RunLengthDecode\" || name === \"RL\") {\n        xrefStreamStats[_util.StreamType.RLX] = true;\n        return new _stream.RunLengthStream(stream, maybeLength);\n      }\n\n      if (name === \"JBIG2Decode\") {\n        xrefStreamStats[_util.StreamType.JBIG] = true;\n        return new _jbig2_stream.Jbig2Stream(stream, maybeLength, stream.dict, params);\n      }\n\n      (0, _util.warn)(`Filter \"${name}\" is not supported.`);\n      return stream;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Invalid stream: \"${ex}\"`);\n      return new _stream.NullStream();\n    }\n  }\n\n}\n\nexports.Parser = Parser;\nconst specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction toHexDigit(ch) {\n  if (ch >= 0x30 && ch <= 0x39) {\n    return ch & 0x0f;\n  }\n\n  if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n    return (ch & 0x0f) + 9;\n  }\n\n  return -1;\n}\n\nclass Lexer {\n  constructor(stream, knownCommands = null) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n    this.knownCommands = knownCommands;\n    this._hexStringNumWarn = 0;\n    this.beginInlineImagePos = -1;\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  peekChar() {\n    return this.stream.peekByte();\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    let eNotation = false;\n    let divideBy = 0;\n    let sign = 0;\n\n    if (ch === 0x2d) {\n      sign = -1;\n      ch = this.nextChar();\n\n      if (ch === 0x2d) {\n        ch = this.nextChar();\n      }\n    } else if (ch === 0x2b) {\n      sign = 1;\n      ch = this.nextChar();\n    }\n\n    if (ch === 0x0a || ch === 0x0d) {\n      do {\n        ch = this.nextChar();\n      } while (ch === 0x0a || ch === 0x0d);\n    }\n\n    if (ch === 0x2e) {\n      divideBy = 10;\n      ch = this.nextChar();\n    }\n\n    if (ch < 0x30 || ch > 0x39) {\n      if (divideBy === 10 && sign === 0 && ((0, _core_utils.isWhiteSpace)(ch) || ch === -1)) {\n        (0, _util.warn)(\"Lexer.getNumber - treating a single decimal point as zero.\");\n        return 0;\n      }\n\n      throw new _util.FormatError(`Invalid number: ${String.fromCharCode(ch)} (charCode ${ch})`);\n    }\n\n    sign = sign || 1;\n    let baseValue = ch - 0x30;\n    let powerValue = 0;\n    let powerValueSign = 1;\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39) {\n        const currentDigit = ch - 0x30;\n\n        if (eNotation) {\n          powerValue = powerValue * 10 + currentDigit;\n        } else {\n          if (divideBy !== 0) {\n            divideBy *= 10;\n          }\n\n          baseValue = baseValue * 10 + currentDigit;\n        }\n      } else if (ch === 0x2e) {\n        if (divideBy === 0) {\n          divideBy = 1;\n        } else {\n          break;\n        }\n      } else if (ch === 0x2d) {\n        (0, _util.warn)(\"Badly formatted number: minus sign in the middle\");\n      } else if (ch === 0x45 || ch === 0x65) {\n        ch = this.peekChar();\n\n        if (ch === 0x2b || ch === 0x2d) {\n          powerValueSign = ch === 0x2d ? -1 : 1;\n          this.nextChar();\n        } else if (ch < 0x30 || ch > 0x39) {\n          break;\n        }\n\n        eNotation = true;\n      } else {\n        break;\n      }\n    }\n\n    if (divideBy !== 0) {\n      baseValue /= divideBy;\n    }\n\n    if (eNotation) {\n      baseValue *= 10 ** (powerValueSign * powerValue);\n    }\n\n    return sign * baseValue;\n  }\n\n  getString() {\n    let numParen = 1;\n    let done = false;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.nextChar();\n\n    while (true) {\n      let charBuffered = false;\n\n      switch (ch | 0) {\n        case -1:\n          (0, _util.warn)(\"Unterminated string\");\n          done = true;\n          break;\n\n        case 0x28:\n          ++numParen;\n          strBuf.push(\"(\");\n          break;\n\n        case 0x29:\n          if (--numParen === 0) {\n            this.nextChar();\n            done = true;\n          } else {\n            strBuf.push(\")\");\n          }\n\n          break;\n\n        case 0x5c:\n          ch = this.nextChar();\n\n          switch (ch) {\n            case -1:\n              (0, _util.warn)(\"Unterminated string\");\n              done = true;\n              break;\n\n            case 0x6e:\n              strBuf.push(\"\\n\");\n              break;\n\n            case 0x72:\n              strBuf.push(\"\\r\");\n              break;\n\n            case 0x74:\n              strBuf.push(\"\\t\");\n              break;\n\n            case 0x62:\n              strBuf.push(\"\\b\");\n              break;\n\n            case 0x66:\n              strBuf.push(\"\\f\");\n              break;\n\n            case 0x5c:\n            case 0x28:\n            case 0x29:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n              let x = ch & 0x0f;\n              ch = this.nextChar();\n              charBuffered = true;\n\n              if (ch >= 0x30 && ch <= 0x37) {\n                x = (x << 3) + (ch & 0x0f);\n                ch = this.nextChar();\n\n                if (ch >= 0x30 && ch <= 0x37) {\n                  charBuffered = false;\n                  x = (x << 3) + (ch & 0x0f);\n                }\n              }\n\n              strBuf.push(String.fromCharCode(x));\n              break;\n\n            case 0x0d:\n              if (this.peekChar() === 0x0a) {\n                this.nextChar();\n              }\n\n              break;\n\n            case 0x0a:\n              break;\n\n            default:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n          }\n\n          break;\n\n        default:\n          strBuf.push(String.fromCharCode(ch));\n          break;\n      }\n\n      if (done) {\n        break;\n      }\n\n      if (!charBuffered) {\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getName() {\n    let ch, previousCh;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      if (ch === 0x23) {\n        ch = this.nextChar();\n\n        if (specialChars[ch]) {\n          (0, _util.warn)(\"Lexer_getName: \" + \"NUMBER SIGN (#) should be followed by a hexadecimal number.\");\n          strBuf.push(\"#\");\n          break;\n        }\n\n        const x = toHexDigit(ch);\n\n        if (x !== -1) {\n          previousCh = ch;\n          ch = this.nextChar();\n          const x2 = toHexDigit(ch);\n\n          if (x2 === -1) {\n            (0, _util.warn)(`Lexer_getName: Illegal digit (${String.fromCharCode(ch)}) ` + \"in hexadecimal number.\");\n            strBuf.push(\"#\", String.fromCharCode(previousCh));\n\n            if (specialChars[ch]) {\n              break;\n            }\n\n            strBuf.push(String.fromCharCode(ch));\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(x << 4 | x2));\n        } else {\n          strBuf.push(\"#\", String.fromCharCode(ch));\n        }\n      } else {\n        strBuf.push(String.fromCharCode(ch));\n      }\n    }\n\n    if (strBuf.length > 127) {\n      (0, _util.warn)(`Name token is longer than allowed by the spec: ${strBuf.length}`);\n    }\n\n    return _primitives.Name.get(strBuf.join(\"\"));\n  }\n\n  _hexStringWarn(ch) {\n    const MAX_HEX_STRING_NUM_WARN = 5;\n\n    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n      (0, _util.warn)(\"getHexString - ignoring additional invalid characters.\");\n      return;\n    }\n\n    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n      return;\n    }\n\n    (0, _util.warn)(`getHexString - ignoring invalid character: ${ch}`);\n  }\n\n  getHexString() {\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.currentChar;\n    let isFirstHex = true;\n    let firstDigit, secondDigit;\n    this._hexStringNumWarn = 0;\n\n    while (true) {\n      if (ch < 0) {\n        (0, _util.warn)(\"Unterminated hex string\");\n        break;\n      } else if (ch === 0x3e) {\n        this.nextChar();\n        break;\n      } else if (specialChars[ch] === 1) {\n        ch = this.nextChar();\n        continue;\n      } else {\n        if (isFirstHex) {\n          firstDigit = toHexDigit(ch);\n\n          if (firstDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n        } else {\n          secondDigit = toHexDigit(ch);\n\n          if (secondDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));\n        }\n\n        isFirstHex = !isFirstHex;\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getObj() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (specialChars[ch] !== 1) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return this.getNumber();\n\n      case 0x28:\n        return this.getString();\n\n      case 0x2f:\n        return this.getName();\n\n      case 0x5b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"[\");\n\n      case 0x5d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"]\");\n\n      case 0x3c:\n        ch = this.nextChar();\n\n        if (ch === 0x3c) {\n          this.nextChar();\n          return _primitives.Cmd.get(\"<<\");\n        }\n\n        return this.getHexString();\n\n      case 0x3e:\n        ch = this.nextChar();\n\n        if (ch === 0x3e) {\n          this.nextChar();\n          return _primitives.Cmd.get(\">>\");\n        }\n\n        return _primitives.Cmd.get(\">\");\n\n      case 0x7b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"{\");\n\n      case 0x7d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"}\");\n\n      case 0x29:\n        this.nextChar();\n        throw new _util.FormatError(`Illegal character: ${ch}`);\n    }\n\n    let str = String.fromCharCode(ch);\n    const knownCommands = this.knownCommands;\n    let knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      const possibleCommand = str + String.fromCharCode(ch);\n\n      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n        break;\n      }\n\n      if (str.length === 128) {\n        throw new _util.FormatError(`Command token too long: ${str.length}`);\n      }\n\n      str = possibleCommand;\n      knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    }\n\n    if (str === \"true\") {\n      return true;\n    }\n\n    if (str === \"false\") {\n      return false;\n    }\n\n    if (str === \"null\") {\n      return null;\n    }\n\n    if (str === \"BI\") {\n      this.beginInlineImagePos = this.stream.pos;\n    }\n\n    return _primitives.Cmd.get(str);\n  }\n\n  skipToNextLine() {\n    let ch = this.currentChar;\n\n    while (ch >= 0) {\n      if (ch === 0x0d) {\n        ch = this.nextChar();\n\n        if (ch === 0x0a) {\n          this.nextChar();\n        }\n\n        break;\n      } else if (ch === 0x0a) {\n        this.nextChar();\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n  }\n\n}\n\nexports.Lexer = Lexer;\n\nclass Linearization {\n  static create(stream) {\n    function getInt(linDict, name, allowZeroValue = false) {\n      const obj = linDict.get(name);\n\n      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n        return obj;\n      }\n\n      throw new Error(`The \"${name}\" parameter in the linearization ` + \"dictionary is invalid.\");\n    }\n\n    function getHints(linDict) {\n      const hints = linDict.get(\"H\");\n      let hintsLength;\n\n      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {\n        for (let index = 0; index < hintsLength; index++) {\n          const hint = hints[index];\n\n          if (!(Number.isInteger(hint) && hint > 0)) {\n            throw new Error(`Hint (${index}) in the linearization dictionary is invalid.`);\n          }\n        }\n\n        return hints;\n      }\n\n      throw new Error(\"Hint array in the linearization dictionary is invalid.\");\n    }\n\n    const parser = new Parser({\n      lexer: new Lexer(stream),\n      xref: null\n    });\n    const obj1 = parser.getObj();\n    const obj2 = parser.getObj();\n    const obj3 = parser.getObj();\n    const linDict = parser.getObj();\n    let obj, length;\n\n    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, \"obj\") && (0, _primitives.isDict)(linDict) && (0, _util.isNum)(obj = linDict.get(\"Linearized\")) && obj > 0)) {\n      return null;\n    } else if ((length = getInt(linDict, \"L\")) !== stream.length) {\n      throw new Error('The \"L\" parameter in the linearization dictionary ' + \"does not equal the stream length.\");\n    }\n\n    return {\n      length,\n      hints: getHints(linDict),\n      objectNumberFirst: getInt(linDict, \"O\"),\n      endFirst: getInt(linDict, \"E\"),\n      numPages: getInt(linDict, \"N\"),\n      mainXRefEntriesOffset: getInt(linDict, \"T\"),\n      pageFirst: linDict.has(\"P\") ? getInt(linDict, \"P\", true) : 0\n    };\n  }\n\n}\n\nexports.Linearization = Linearization;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LZWStream = exports.StringStream = exports.StreamsSequenceStream = exports.Stream = exports.RunLengthStream = exports.PredictorStream = exports.NullStream = exports.FlateStream = exports.DecodeStream = exports.DecryptStream = exports.AsciiHexStream = exports.Ascii85Stream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar Stream = function StreamClosure() {\n  function Stream(arrayBuffer, start, length, dict) {\n    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = start + length || this.bytes.length;\n    this.dict = dict;\n  }\n\n  Stream.prototype = {\n    get length() {\n      return this.end - this.start;\n    },\n\n    get isEmpty() {\n      return this.length === 0;\n    },\n\n    getByte: function Stream_getByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.bytes[this.pos++];\n    },\n    getUint16: function Stream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function Stream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var bytes = this.bytes;\n      var pos = this.pos;\n      var strEnd = this.end;\n\n      if (!length) {\n        const subarray = bytes.subarray(pos, strEnd);\n        return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n      }\n\n      var end = pos + length;\n\n      if (end > strEnd) {\n        end = strEnd;\n      }\n\n      this.pos = end;\n      const subarray = bytes.subarray(pos, end);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function Stream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    getByteRange(begin, end) {\n      if (begin < 0) {\n        begin = 0;\n      }\n\n      if (end > this.end) {\n        end = this.end;\n      }\n\n      return this.bytes.subarray(begin, end);\n    },\n\n    skip: function Stream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function Stream_reset() {\n      this.pos = this.start;\n    },\n    moveStart: function Stream_moveStart() {\n      this.start = this.pos;\n    },\n    makeSubStream: function Stream_makeSubStream(start, length, dict) {\n      return new Stream(this.bytes.buffer, start, length, dict);\n    }\n  };\n  return Stream;\n}();\n\nexports.Stream = Stream;\n\nvar StringStream = function StringStreamClosure() {\n  function StringStream(str) {\n    const bytes = (0, _util.stringToBytes)(str);\n    Stream.call(this, bytes);\n  }\n\n  StringStream.prototype = Stream.prototype;\n  return StringStream;\n}();\n\nexports.StringStream = StringStream;\n\nvar DecodeStream = function DecodeStreamClosure() {\n  var emptyBuffer = new Uint8Array(0);\n\n  function DecodeStream(maybeMinBufferLength) {\n    this._rawMinBufferLength = maybeMinBufferLength || 0;\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n\n    if (maybeMinBufferLength) {\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n\n  DecodeStream.prototype = {\n    get isEmpty() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n\n      return this.bufferLength === 0;\n    },\n\n    ensureBuffer: function DecodeStream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n\n      if (requested <= buffer.byteLength) {\n        return buffer;\n      }\n\n      var size = this.minBufferLength;\n\n      while (size < requested) {\n        size *= 2;\n      }\n\n      var buffer2 = new Uint8Array(size);\n      buffer2.set(buffer);\n      return this.buffer = buffer2;\n    },\n    getByte: function DecodeStream_getByte() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) {\n          return -1;\n        }\n\n        this.readBlock();\n      }\n\n      return this.buffer[this.pos++];\n    },\n    getUint16: function DecodeStream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function DecodeStream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var end,\n          pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n\n        var bufEnd = this.bufferLength;\n\n        if (end > bufEnd) {\n          end = bufEnd;\n        }\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n\n        end = this.bufferLength;\n      }\n\n      this.pos = end;\n      const subarray = this.buffer.subarray(pos, end);\n      return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function DecodeStream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\n      var end = start + length;\n\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n\n      return new Stream(this.buffer, start, length, dict);\n    },\n\n    getByteRange(begin, end) {\n      (0, _util.unreachable)(\"Should not call DecodeStream.getByteRange\");\n    },\n\n    skip: function DecodeStream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function DecodeStream_reset() {\n      this.pos = 0;\n    },\n    getBaseStreams: function DecodeStream_getBaseStreams() {\n      if (this.str && this.str.getBaseStreams) {\n        return this.str.getBaseStreams();\n      }\n\n      return [];\n    }\n  };\n  return DecodeStream;\n}();\n\nexports.DecodeStream = DecodeStream;\n\nvar StreamsSequenceStream = function StreamsSequenceStreamClosure() {\n  function StreamsSequenceStream(streams) {\n    this.streams = streams;\n    let maybeLength = 0;\n\n    for (let i = 0, ii = streams.length; i < ii; i++) {\n      const stream = streams[i];\n\n      if (stream instanceof DecodeStream) {\n        maybeLength += stream._rawMinBufferLength;\n      } else {\n        maybeLength += stream.length;\n      }\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);\n\n  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {\n    var streams = this.streams;\n\n    if (streams.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    var stream = streams.shift();\n    var chunk = stream.getBytes();\n    var bufferLength = this.bufferLength;\n    var newLength = bufferLength + chunk.length;\n    var buffer = this.ensureBuffer(newLength);\n    buffer.set(chunk, bufferLength);\n    this.bufferLength = newLength;\n  };\n\n  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {\n    var baseStreams = [];\n\n    for (var i = 0, ii = this.streams.length; i < ii; i++) {\n      var stream = this.streams[i];\n\n      if (stream.getBaseStreams) {\n        baseStreams.push(...stream.getBaseStreams());\n      }\n    }\n\n    return baseStreams;\n  };\n\n  return StreamsSequenceStream;\n}();\n\nexports.StreamsSequenceStream = StreamsSequenceStream;\n\nvar FlateStream = function FlateStreamClosure() {\n  var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n  var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n  var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n  var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n  var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n\n  function FlateStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    var cmf = str.getByte();\n    var flg = str.getByte();\n\n    if (cmf === -1 || flg === -1) {\n      throw new _util.FormatError(`Invalid header in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new _util.FormatError(`Unknown compression method in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new _util.FormatError(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (flg & 0x20) {\n      throw new _util.FormatError(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\n    }\n\n    this.codeSize = 0;\n    this.codeBuf = 0;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  FlateStream.prototype = Object.create(DecodeStream.prototype);\n\n  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {\n    var str = this.str;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad encoding in flate stream\");\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    return b;\n  };\n\n  FlateStream.prototype.getCode = function FlateStream_getCode(table) {\n    var str = this.str;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        break;\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new _util.FormatError(\"Bad encoding in flate stream\");\n    }\n\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n\n  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {\n    var n = lengths.length;\n    var maxLen = 0;\n    var i;\n\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          var code2 = 0;\n          var t = code;\n\n          for (i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          }\n\n          for (i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  FlateStream.prototype.readBlock = function FlateStream_readBlock() {\n    var buffer, len;\n    var str = this.str;\n    var hdr = this.getBits(3);\n\n    if (hdr & 1) {\n      this.eof = true;\n    }\n\n    hdr >>= 1;\n\n    if (hdr === 0) {\n      var b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var blockLen = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      blockLen |= b << 8;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var check = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      check |= b << 8;\n\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        throw new _util.FormatError(\"Bad uncompressed block length in flate stream\");\n      }\n\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      const bufferLength = this.bufferLength,\n            end = bufferLength + blockLen;\n      buffer = this.ensureBuffer(end);\n      this.bufferLength = end;\n\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        const block = str.getBytes(blockLen);\n        buffer.set(block, bufferLength);\n\n        if (block.length < blockLen) {\n          this.eof = true;\n        }\n      }\n\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n\n    if (hdr === 1) {\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n      var i;\n\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength, bitsOffset, what;\n\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n    } else {\n      throw new _util.FormatError(\"Unknown block type in flate stream\");\n    }\n\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n\n        buffer[pos++] = code1;\n        continue;\n      }\n\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      var dist = (code1 & 0xffff) + code2;\n\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return FlateStream;\n}();\n\nexports.FlateStream = FlateStream;\n\nvar PredictorStream = function PredictorStreamClosure() {\n  function PredictorStream(str, maybeLength, params) {\n    if (!(0, _primitives.isDict)(params)) {\n      return str;\n    }\n\n    var predictor = this.predictor = params.get(\"Predictor\") || 1;\n\n    if (predictor <= 1) {\n      return str;\n    }\n\n    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n      throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    if (predictor === 2) {\n      this.readBlock = this.readBlockTiff;\n    } else {\n      this.readBlock = this.readBlockPng;\n    }\n\n    this.str = str;\n    this.dict = str.dict;\n    var colors = this.colors = params.get(\"Colors\") || 1;\n    var bits = this.bits = params.get(\"BitsPerComponent\") || 8;\n    var columns = this.columns = params.get(\"Columns\") || 1;\n    this.pixBytes = colors * bits + 7 >> 3;\n    this.rowBytes = columns * colors * bits + 7 >> 3;\n    DecodeStream.call(this, maybeLength);\n    return this;\n  }\n\n  PredictorStream.prototype = Object.create(DecodeStream.prototype);\n\n  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {\n    var rowBytes = this.rowBytes;\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var bits = this.bits;\n    var colors = this.colors;\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var inbuf = 0,\n        outbuf = 0;\n    var inbits = 0,\n        outbits = 0;\n    var pos = bufferLength;\n    var i;\n\n    if (bits === 1 && colors === 1) {\n      for (i = 0; i < rowBytes; ++i) {\n        var c = rawBytes[i] ^ inbuf;\n        c ^= c >> 1;\n        c ^= c >> 2;\n        c ^= c >> 4;\n        inbuf = (c & 1) << 7;\n        buffer[pos++] = c;\n      }\n    } else if (bits === 8) {\n      for (i = 0; i < colors; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; ++i) {\n        buffer[pos] = buffer[pos - colors] + rawBytes[i];\n        pos++;\n      }\n    } else if (bits === 16) {\n      var bytesPerPixel = colors * 2;\n\n      for (i = 0; i < bytesPerPixel; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; i += 2) {\n        var sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);\n        buffer[pos++] = sum >> 8 & 0xff;\n        buffer[pos++] = sum & 0xff;\n      }\n    } else {\n      var compArray = new Uint8Array(colors + 1);\n      var bitMask = (1 << bits) - 1;\n      var j = 0,\n          k = bufferLength;\n      var columns = this.columns;\n\n      for (i = 0; i < columns; ++i) {\n        for (var kk = 0; kk < colors; ++kk) {\n          if (inbits < bits) {\n            inbuf = inbuf << 8 | rawBytes[j++] & 0xff;\n            inbits += 8;\n          }\n\n          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\n          inbits -= bits;\n          outbuf = outbuf << bits | compArray[kk];\n          outbits += bits;\n\n          if (outbits >= 8) {\n            buffer[k++] = outbuf >> outbits - 8 & 0xff;\n            outbits -= 8;\n          }\n        }\n      }\n\n      if (outbits > 0) {\n        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\n      }\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {\n    var rowBytes = this.rowBytes;\n    var pixBytes = this.pixBytes;\n    var predictor = this.str.getByte();\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n\n    if (prevRow.length === 0) {\n      prevRow = new Uint8Array(rowBytes);\n    }\n\n    var i,\n        j = bufferLength,\n        up,\n        c;\n\n    switch (predictor) {\n      case 0:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        break;\n\n      case 1:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 2:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;\n        }\n\n        break;\n\n      case 3:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 4:\n        for (i = 0; i < pixBytes; ++i) {\n          up = prevRow[i];\n          c = rawBytes[i];\n          buffer[j++] = up + c;\n        }\n\n        for (; i < rowBytes; ++i) {\n          up = prevRow[i];\n          var upLeft = prevRow[i - pixBytes];\n          var left = buffer[j - pixBytes];\n          var p = left + up - upLeft;\n          var pa = p - left;\n\n          if (pa < 0) {\n            pa = -pa;\n          }\n\n          var pb = p - up;\n\n          if (pb < 0) {\n            pb = -pb;\n          }\n\n          var pc = p - upLeft;\n\n          if (pc < 0) {\n            pc = -pc;\n          }\n\n          c = rawBytes[i];\n\n          if (pa <= pb && pa <= pc) {\n            buffer[j++] = left + c;\n          } else if (pb <= pc) {\n            buffer[j++] = up + c;\n          } else {\n            buffer[j++] = upLeft + c;\n          }\n        }\n\n        break;\n\n      default:\n        throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  return PredictorStream;\n}();\n\nexports.PredictorStream = PredictorStream;\n\nvar DecryptStream = function DecryptStreamClosure() {\n  function DecryptStream(str, maybeLength, decrypt) {\n    this.str = str;\n    this.dict = str.dict;\n    this.decrypt = decrypt;\n    this.nextChunk = null;\n    this.initialized = false;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  var chunkSize = 512;\n  DecryptStream.prototype = Object.create(DecodeStream.prototype);\n\n  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {\n    var chunk;\n\n    if (this.initialized) {\n      chunk = this.nextChunk;\n    } else {\n      chunk = this.str.getBytes(chunkSize);\n      this.initialized = true;\n    }\n\n    if (!chunk || chunk.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    this.nextChunk = this.str.getBytes(chunkSize);\n    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n    var decrypt = this.decrypt;\n    chunk = decrypt(chunk, !hasMoreData);\n    var bufferLength = this.bufferLength;\n    var i,\n        n = chunk.length;\n    var buffer = this.ensureBuffer(bufferLength + n);\n\n    for (i = 0; i < n; i++) {\n      buffer[bufferLength++] = chunk[i];\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return DecryptStream;\n}();\n\nexports.DecryptStream = DecryptStream;\n\nvar Ascii85Stream = function Ascii85StreamClosure() {\n  function Ascii85Stream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.input = new Uint8Array(5);\n\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {\n    var TILDA_CHAR = 0x7e;\n    var Z_LOWER_CHAR = 0x7a;\n    var EOF = -1;\n    var str = this.str;\n    var c = str.getByte();\n\n    while ((0, _core_utils.isWhiteSpace)(c)) {\n      c = str.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength,\n        buffer;\n    var i;\n\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n\n      for (i = 1; i < 5; ++i) {\n        c = str.getByte();\n\n        while ((0, _core_utils.isWhiteSpace)(c)) {\n          c = str.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n\n        this.eof = true;\n      }\n\n      var t = 0;\n\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n}();\n\nexports.Ascii85Stream = Ascii85Stream;\n\nvar AsciiHexStream = function AsciiHexStreamClosure() {\n  function AsciiHexStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.firstDigit = -1;\n\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);\n\n  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i],\n          digit;\n\n      if (ch >= 0x30 && ch <= 0x39) {\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        this.eof = true;\n        break;\n      } else {\n        continue;\n      }\n\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n\n    if (firstDigit >= 0 && this.eof) {\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n}();\n\nexports.AsciiHexStream = AsciiHexStream;\n\nvar RunLengthStream = function RunLengthStreamClosure() {\n  function RunLengthStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  RunLengthStream.prototype = Object.create(DecodeStream.prototype);\n\n  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {\n    var repeatHeader = this.str.getBytes(2);\n\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n\n    if (n < 128) {\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n\n      if (n > 0) {\n        var source = this.str.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return RunLengthStream;\n}();\n\nexports.RunLengthStream = RunLengthStream;\n\nvar LZWStream = function LZWStreamClosure() {\n  function LZWStream(str, maybeLength, earlyChange) {\n    this.str = str;\n    this.dict = str.dict;\n    this.cachedData = 0;\n    this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n\n    this.lzwState = lzwState;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  LZWStream.prototype = Object.create(DecodeStream.prototype);\n\n  LZWStream.prototype.readBits = function LZWStream_readBits(n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n\n    while (bitsCached < n) {\n      var c = this.str.getByte();\n\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    this.lastCode = null;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n\n  LZWStream.prototype.readBlock = function LZWStream_readBlock() {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2,\n        decodedSizeDelta = blockSize;\n    var i, j, q;\n    var lzwState = this.lzwState;\n\n    if (!lzwState) {\n      return;\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n\n      if (code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n\n  return LZWStream;\n}();\n\nexports.LZWStream = LZWStream;\n\nvar NullStream = function NullStreamClosure() {\n  function NullStream() {\n    Stream.call(this, new Uint8Array(0));\n  }\n\n  NullStream.prototype = Stream.prototype;\n  return NullStream;\n}();\n\nexports.NullStream = NullStream;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CCITTFaxStream = void 0;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _ccitt = __w_pdfjs_require__(14);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar CCITTFaxStream = function CCITTFaxStreamClosure() {\n  function CCITTFaxStream(str, maybeLength, params) {\n    this.str = str;\n    this.dict = str.dict;\n\n    if (!(0, _primitives.isDict)(params)) {\n      params = _primitives.Dict.empty;\n    }\n\n    const source = {\n      next() {\n        return str.getByte();\n      }\n\n    };\n    this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {\n      K: params.get(\"K\"),\n      EndOfLine: params.get(\"EndOfLine\"),\n      EncodedByteAlign: params.get(\"EncodedByteAlign\"),\n      Columns: params.get(\"Columns\"),\n      Rows: params.get(\"Rows\"),\n      EndOfBlock: params.get(\"EndOfBlock\"),\n      BlackIs1: params.get(\"BlackIs1\")\n    });\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  CCITTFaxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n\n  CCITTFaxStream.prototype.readBlock = function () {\n    while (!this.eof) {\n      const c = this.ccittFaxDecoder.readNextChar();\n\n      if (c === -1) {\n        this.eof = true;\n        return;\n      }\n\n      this.ensureBuffer(this.bufferLength + 1);\n      this.buffer[this.bufferLength++] = c;\n    }\n  };\n\n  return CCITTFaxStream;\n}();\n\nexports.CCITTFaxStream = CCITTFaxStream;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CCITTFaxDecoder = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CCITTFaxDecoder = function CCITTFaxDecoder() {\n  const ccittEOL = -2;\n  const ccittEOF = -1;\n  const twoDimPass = 0;\n  const twoDimHoriz = 1;\n  const twoDimVert0 = 2;\n  const twoDimVertR1 = 3;\n  const twoDimVertL1 = 4;\n  const twoDimVertR2 = 5;\n  const twoDimVertL2 = 6;\n  const twoDimVertR3 = 7;\n  const twoDimVertL3 = 8;\n  const twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];\n  const whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];\n  const whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];\n  const blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];\n  const blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];\n  const blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];\n\n  function CCITTFaxDecoder(source, options = {}) {\n    if (!source || typeof source.next !== \"function\") {\n      throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n    }\n\n    this.source = source;\n    this.eof = false;\n    this.encoding = options.K || 0;\n    this.eoline = options.EndOfLine || false;\n    this.byteAlign = options.EncodedByteAlign || false;\n    this.columns = options.Columns || 1728;\n    this.rows = options.Rows || 0;\n    let eoblock = options.EndOfBlock;\n\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n\n    this.eoblock = eoblock;\n    this.black = options.BlackIs1 || false;\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n    let code1;\n\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n\n      this._eatBits(1);\n    }\n  }\n\n  CCITTFaxDecoder.prototype = {\n    readNextChar() {\n      if (this.eof) {\n        return -1;\n      }\n\n      const refLine = this.refLine;\n      const codingLine = this.codingLine;\n      const columns = this.columns;\n      let refPos, blackPixels, bits, i;\n\n      if (this.outputBits === 0) {\n        if (this.rowsDone) {\n          this.eof = true;\n        }\n\n        if (this.eof) {\n          return -1;\n        }\n\n        this.err = false;\n        let code1, code2, code3;\n\n        if (this.nextLine2D) {\n          for (i = 0; codingLine[i] < columns; ++i) {\n            refLine[i] = codingLine[i];\n          }\n\n          refLine[i++] = columns;\n          refLine[i] = columns;\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          refPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = this._getTwoDimCode();\n\n            switch (code1) {\n              case twoDimPass:\n                this._addPixels(refLine[refPos + 1], blackPixels);\n\n                if (refLine[refPos + 1] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimHoriz:\n                code1 = code2 = 0;\n\n                if (blackPixels) {\n                  do {\n                    code1 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                } else {\n                  do {\n                    code1 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                }\n\n                this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n                if (codingLine[this.codingPos] < columns) {\n                  this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);\n                }\n\n                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimVertR3:\n                this._addPixels(refLine[refPos] + 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR2:\n                this._addPixels(refLine[refPos] + 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR1:\n                this._addPixels(refLine[refPos] + 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVert0:\n                this._addPixels(refLine[refPos], blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL3:\n                this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL2:\n                this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL1:\n                this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case ccittEOF:\n                this._addPixels(columns, 0);\n\n                this.eof = true;\n                break;\n\n              default:\n                (0, _util.info)(\"bad 2d code\");\n\n                this._addPixels(columns, 0);\n\n                this.err = true;\n            }\n          }\n        } else {\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = 0;\n\n            if (blackPixels) {\n              do {\n                code1 += code3 = this._getBlackCode();\n              } while (code3 >= 64);\n            } else {\n              do {\n                code1 += code3 = this._getWhiteCode();\n              } while (code3 >= 64);\n            }\n\n            this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n            blackPixels ^= 1;\n          }\n        }\n\n        let gotEOL = false;\n\n        if (this.byteAlign) {\n          this.inputBits &= ~7;\n        }\n\n        if (!this.eoblock && this.row === this.rows - 1) {\n          this.rowsDone = true;\n        } else {\n          code1 = this._lookBits(12);\n\n          if (this.eoline) {\n            while (code1 !== ccittEOF && code1 !== 1) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          } else {\n            while (code1 === 0) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          }\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            gotEOL = true;\n          } else if (code1 === ccittEOF) {\n            this.eof = true;\n          }\n        }\n\n        if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n          this.nextLine2D = !this._lookBits(1);\n\n          this._eatBits(1);\n        }\n\n        if (this.eoblock && gotEOL && this.byteAlign) {\n          code1 = this._lookBits(12);\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            if (this.encoding > 0) {\n              this._lookBits(1);\n\n              this._eatBits(1);\n            }\n\n            if (this.encoding >= 0) {\n              for (i = 0; i < 4; ++i) {\n                code1 = this._lookBits(12);\n\n                if (code1 !== 1) {\n                  (0, _util.info)(\"bad rtc code: \" + code1);\n                }\n\n                this._eatBits(12);\n\n                if (this.encoding > 0) {\n                  this._lookBits(1);\n\n                  this._eatBits(1);\n                }\n              }\n            }\n\n            this.eof = true;\n          }\n        } else if (this.err && this.eoline) {\n          while (true) {\n            code1 = this._lookBits(13);\n\n            if (code1 === ccittEOF) {\n              this.eof = true;\n              return -1;\n            }\n\n            if (code1 >> 1 === 1) {\n              break;\n            }\n\n            this._eatBits(1);\n          }\n\n          this._eatBits(12);\n\n          if (this.encoding > 0) {\n            this._eatBits(1);\n\n            this.nextLine2D = !(code1 & 1);\n          }\n        }\n\n        if (codingLine[0] > 0) {\n          this.outputBits = codingLine[this.codingPos = 0];\n        } else {\n          this.outputBits = codingLine[this.codingPos = 1];\n        }\n\n        this.row++;\n      }\n\n      let c;\n\n      if (this.outputBits >= 8) {\n        c = this.codingPos & 1 ? 0 : 0xff;\n        this.outputBits -= 8;\n\n        if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n          this.codingPos++;\n          this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n        }\n      } else {\n        bits = 8;\n        c = 0;\n\n        do {\n          if (this.outputBits > bits) {\n            c <<= bits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - bits;\n            }\n\n            this.outputBits -= bits;\n            bits = 0;\n          } else {\n            c <<= this.outputBits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - this.outputBits;\n            }\n\n            bits -= this.outputBits;\n            this.outputBits = 0;\n\n            if (codingLine[this.codingPos] < columns) {\n              this.codingPos++;\n              this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n            } else if (bits > 0) {\n              c <<= bits;\n              bits = 0;\n            }\n          }\n        } while (bits);\n      }\n\n      if (this.black) {\n        c ^= 0xff;\n      }\n\n      return c;\n    },\n\n    _addPixels(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _addPixelsNeg(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      } else if (a1 < codingLine[codingPos]) {\n        if (a1 < 0) {\n          (0, _util.info)(\"invalid code\");\n          this.err = true;\n          a1 = 0;\n        }\n\n        while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n          --codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _findTableCode(start, end, table, limit) {\n      const limitValue = limit || 0;\n\n      for (let i = start; i <= end; ++i) {\n        let code = this._lookBits(i);\n\n        if (code === ccittEOF) {\n          return [true, 1, false];\n        }\n\n        if (i < end) {\n          code <<= end - i;\n        }\n\n        if (!limitValue || code >= limitValue) {\n          const p = table[code - limitValue];\n\n          if (p[0] === i) {\n            this._eatBits(i);\n\n            return [true, p[1], true];\n          }\n        }\n      }\n\n      return [false, 0, false];\n    },\n\n    _getTwoDimCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(7);\n        p = twoDimTable[code];\n\n        if (p && p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        const result = this._findTableCode(1, 7, twoDimTable);\n\n        if (result[0] && result[2]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"Bad two dim code\");\n      return ccittEOF;\n    },\n\n    _getWhiteCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(12);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 5 === 0) {\n          p = whiteTable1[code];\n        } else {\n          p = whiteTable2[code >> 3];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(1, 9, whiteTable2);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(11, 12, whiteTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad white code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _getBlackCode() {\n      let code, p;\n\n      if (this.eoblock) {\n        code = this._lookBits(13);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 7 === 0) {\n          p = blackTable1[code];\n        } else if (code >> 9 === 0 && code >> 7 !== 0) {\n          p = blackTable2[(code >> 1) - 64];\n        } else {\n          p = blackTable3[code >> 7];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(2, 6, blackTable3);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(7, 12, blackTable2, 64);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(10, 13, blackTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad black code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _lookBits(n) {\n      let c;\n\n      while (this.inputBits < n) {\n        if ((c = this.source.next()) === -1) {\n          if (this.inputBits === 0) {\n            return ccittEOF;\n          }\n\n          return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;\n        }\n\n        this.inputBuf = this.inputBuf << 8 | c;\n        this.inputBits += 8;\n      }\n\n      return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;\n    },\n\n    _eatBits(n) {\n      if ((this.inputBits -= n) < 0) {\n        this.inputBits = 0;\n      }\n    }\n\n  };\n  return CCITTFaxDecoder;\n}();\n\nexports.CCITTFaxDecoder = CCITTFaxDecoder;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Jbig2Stream = void 0;\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jbig = __w_pdfjs_require__(16);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst Jbig2Stream = function Jbig2StreamClosure() {\n  function Jbig2Stream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  Jbig2Stream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(Jbig2Stream.prototype, \"bytes\", {\n    get() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n\n    configurable: true\n  });\n\n  Jbig2Stream.prototype.ensureBuffer = function (requested) {};\n\n  Jbig2Stream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jbig2Image = new _jbig.Jbig2Image();\n    const chunks = [];\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const globalsStream = this.params.get(\"JBIG2Globals\");\n\n      if ((0, _primitives.isStream)(globalsStream)) {\n        const globals = globalsStream.getBytes();\n        chunks.push({\n          data: globals,\n          start: 0,\n          end: globals.length\n        });\n      }\n    }\n\n    chunks.push({\n      data: this.bytes,\n      start: 0,\n      end: this.bytes.length\n    });\n    const data = jbig2Image.parseChunks(chunks);\n    const dataLength = data.length;\n\n    for (let i = 0; i < dataLength; i++) {\n      data[i] ^= 0xff;\n    }\n\n    this.buffer = data;\n    this.bufferLength = dataLength;\n    this.eof = true;\n  };\n\n  return Jbig2Stream;\n}();\n\nexports.Jbig2Stream = Jbig2Stream;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Jbig2Image = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(17);\n\nvar _ccitt = __w_pdfjs_require__(14);\n\nclass Jbig2Error extends _util.BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n\n}\n\nvar Jbig2Image = function Jbig2ImageClosure() {\n  function ContextCache() {}\n\n  ContextCache.prototype = {\n    getContexts(id) {\n      if (id in this) {\n        return this[id];\n      }\n\n      return this[id] = new Int8Array(1 << 16);\n    }\n\n  };\n\n  function DecodingContext(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  DecodingContext.prototype = {\n    get decoder() {\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);\n      return (0, _util.shadow)(this, \"decoder\", decoder);\n    },\n\n    get contextCache() {\n      var cache = new ContextCache();\n      return (0, _util.shadow)(this, \"contextCache\", cache);\n    }\n\n  };\n\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n    var prev = 1;\n\n    function readBits(length) {\n      var v = 0;\n\n      for (var i = 0; i < length; i++) {\n        var bit = decoder.readBit(contexts, prev);\n        prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n        v = v << 1 | bit;\n      }\n\n      return v >>> 0;\n    }\n\n    var sign = readBits(1);\n    var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n\n    if (sign === 0) {\n      return value;\n    } else if (value > 0) {\n      return -value;\n    }\n\n    return null;\n  }\n\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts(\"IAID\");\n    var prev = 1;\n\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = prev << 1 | bit;\n    }\n\n    if (codeLength < 31) {\n      return prev & (1 << codeLength) - 1;\n    }\n\n    return prev & 0x7fffffff;\n  }\n\n  var SegmentTypes = [\"SymbolDictionary\", null, null, null, \"IntermediateTextRegion\", null, \"ImmediateTextRegion\", \"ImmediateLosslessTextRegion\", null, null, null, null, null, null, null, null, \"PatternDictionary\", null, null, null, \"IntermediateHalftoneRegion\", null, \"ImmediateHalftoneRegion\", \"ImmediateLosslessHalftoneRegion\", null, null, null, null, null, null, null, null, null, null, null, null, \"IntermediateGenericRegion\", null, \"ImmediateGenericRegion\", \"ImmediateLosslessGenericRegion\", \"IntermediateGenericRefinementRegion\", null, \"ImmediateGenericRefinementRegion\", \"ImmediateLosslessGenericRefinementRegion\", null, null, null, null, \"PageInformation\", \"EndOfPage\", \"EndOfStripe\", \"EndOfFile\", \"Profiles\", \"Tables\", null, null, null, null, null, null, null, null, \"Extension\"];\n  var CodingTemplates = [[{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: 2,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -3,\n    y: -1\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }]];\n  var RefinementTemplates = [{\n    coding: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: -1,\n      y: 1\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    coding: [{\n      x: -1,\n      y: -1\n    }, {\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }];\n  var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];\n  var RefinementReusedContexts = [0x0020, 0x0008];\n\n  function decodeBitmapTemplate0(width, height, decodingContext) {\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var contextLabel,\n        i,\n        j,\n        pixel,\n        row,\n        row1,\n        row2,\n        bitmap = [];\n    var OLD_PIXEL_MASK = 0x7bf7;\n\n    for (i = 0; i < height; i++) {\n      row = bitmap[i] = new Uint8Array(width);\n      row1 = i < 1 ? row : bitmap[i - 1];\n      row2 = i < 2 ? row : bitmap[i - 2];\n      contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n\n      for (j = 0; j < width; j++) {\n        row[j] = pixel = decoder.readBit(contexts, contextLabel);\n        contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n    if (mmr) {\n      const input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n      return decodeMMRBitmap(input, width, height, false);\n    }\n\n    if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n      return decodeBitmapTemplate0(width, height, decodingContext);\n    }\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n    template.sort(function (a, b) {\n      return a.y - b.y || a.x - b.x;\n    });\n    var templateLength = template.length;\n    var templateX = new Int8Array(templateLength);\n    var templateY = new Int8Array(templateLength);\n    var changingTemplateEntries = [];\n    var reuseMask = 0,\n        minX = 0,\n        maxX = 0,\n        minY = 0;\n    var c, k;\n\n    for (k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n      minX = Math.min(minX, template[k].x);\n      maxX = Math.max(maxX, template[k].x);\n      minY = Math.min(minY, template[k].y);\n\n      if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n        reuseMask |= 1 << templateLength - 1 - k;\n      } else {\n        changingTemplateEntries.push(k);\n      }\n    }\n\n    var changingEntriesLength = changingTemplateEntries.length;\n    var changingTemplateX = new Int8Array(changingEntriesLength);\n    var changingTemplateY = new Int8Array(changingEntriesLength);\n    var changingTemplateBit = new Uint16Array(changingEntriesLength);\n\n    for (c = 0; c < changingEntriesLength; c++) {\n      k = changingTemplateEntries[c];\n      changingTemplateX[c] = template[k].x;\n      changingTemplateY[c] = template[k].y;\n      changingTemplateBit[c] = 1 << templateLength - 1 - k;\n    }\n\n    var sbb_left = -minX;\n    var sbb_top = -minY;\n    var sbb_right = width - maxX;\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var row = new Uint8Array(width);\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var ltp = 0,\n        j,\n        i0,\n        j0,\n        contextLabel = 0,\n        bit,\n        shift;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          bitmap.push(row);\n          continue;\n        }\n      }\n\n      row = new Uint8Array(row);\n      bitmap.push(row);\n\n      for (j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n\n        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n          contextLabel = contextLabel << 1 & reuseMask;\n\n          for (k = 0; k < changingEntriesLength; k++) {\n            i0 = i + changingTemplateY[k];\n            j0 = j + changingTemplateX[k];\n            bit = bitmap[i0][j0];\n\n            if (bit) {\n              bit = changingTemplateBit[k];\n              contextLabel |= bit;\n            }\n          }\n        } else {\n          contextLabel = 0;\n          shift = templateLength - 1;\n\n          for (k = 0; k < templateLength; k++, shift--) {\n            j0 = j + templateX[k];\n\n            if (j0 >= 0 && j0 < width) {\n              i0 = i + templateY[k];\n\n              if (i0 >= 0) {\n                bit = bitmap[i0][j0];\n\n                if (bit) {\n                  contextLabel |= bit << shift;\n                }\n              }\n            }\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n\n    if (templateIndex === 0) {\n      codingTemplate = codingTemplate.concat([at[0]]);\n    }\n\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    var k;\n\n    for (k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n\n    if (templateIndex === 0) {\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    }\n\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n\n    for (k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GR\");\n    var ltp = 0;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          throw new Jbig2Error(\"prediction is not supported\");\n        }\n      }\n\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (var j = 0; j < width; j++) {\n        var i0, j0;\n        var contextLabel = 0;\n\n        for (k = 0; k < codingTemplateLength; k++) {\n          i0 = i + codingTemplateY[k];\n          j0 = j + codingTemplateX[k];\n\n          if (i0 < 0 || j0 < 0 || j0 >= width) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | bitmap[i0][j0];\n          }\n        }\n\n        for (k = 0; k < referenceTemplateLength; k++) {\n          i0 = i + referenceTemplateY[k] - offsetY;\n          j0 = j + referenceTemplateX[k] - offsetX;\n\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n    }\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    let tableB1, symbolWidths;\n\n    if (huffman) {\n      tableB1 = getStandardTable(1);\n      symbolWidths = [];\n      symbolCodeLength = Math.max(symbolCodeLength, 1);\n    }\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, \"IADH\", decoder);\n      currentHeight += deltaHeight;\n      let currentWidth = 0,\n          totalWidth = 0;\n      const firstSymbol = huffman ? symbolWidths.length : 0;\n\n      while (true) {\n        var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, \"IADW\", decoder);\n\n        if (deltaWidth === null) {\n          break;\n        }\n\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n\n        if (refinement) {\n          var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n\n          if (numberOfInstances > 1) {\n            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);\n          } else {\n            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n            var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n            var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n          }\n\n          newSymbols.push(bitmap);\n        } else if (huffman) {\n          symbolWidths.push(currentWidth);\n        } else {\n          bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n          newSymbols.push(bitmap);\n        }\n      }\n\n      if (huffman && !refinement) {\n        const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n        huffmanInput.byteAlign();\n        let collectiveBitmap;\n\n        if (bitmapSize === 0) {\n          collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);\n        } else {\n          const originalEnd = huffmanInput.end;\n          const bitmapEnd = huffmanInput.position + bitmapSize;\n          huffmanInput.end = bitmapEnd;\n          collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);\n          huffmanInput.end = originalEnd;\n          huffmanInput.position = bitmapEnd;\n        }\n\n        const numberOfSymbolsDecoded = symbolWidths.length;\n\n        if (firstSymbol === numberOfSymbolsDecoded - 1) {\n          newSymbols.push(collectiveBitmap);\n        } else {\n          let i,\n              y,\n              xMin = 0,\n              xMax,\n              bitmapWidth,\n              symbolBitmap;\n\n          for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n            bitmapWidth = symbolWidths[i];\n            xMax = xMin + bitmapWidth;\n            symbolBitmap = [];\n\n            for (y = 0; y < currentHeight; y++) {\n              symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n\n            newSymbols.push(symbolBitmap);\n            xMin = xMax;\n          }\n        }\n      }\n    }\n\n    var exportedSymbols = [];\n    var flags = [],\n        currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n\n    while (flags.length < totalSymbolsLength) {\n      var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, \"IAEX\", decoder);\n\n      while (runLength--) {\n        flags.push(currentFlag);\n      }\n\n      currentFlag = !currentFlag;\n    }\n\n    for (var i = 0, ii = symbols.length; i < ii; i++) {\n      if (flags[i]) {\n        exportedSymbols.push(symbols[i]);\n      }\n    }\n\n    for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n      if (flags[i]) {\n        exportedSymbols.push(newSymbols[j]);\n      }\n    }\n\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    var bitmap = [];\n    var i, row;\n\n    for (i = 0; i < height; i++) {\n      row = new Uint8Array(width);\n\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, \"IADT\", decoder);\n    var firstS = 0;\n    i = 0;\n\n    while (i < numberOfSymbolInstances) {\n      var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, \"IADT\", decoder);\n      stripT += deltaT;\n      var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, \"IAFS\", decoder);\n      firstS += deltaFirstS;\n      var currentS = firstS;\n\n      do {\n        let currentT = 0;\n\n        if (stripSize > 1) {\n          currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, \"IAIT\", decoder);\n        }\n\n        var t = stripSize * stripT + currentT;\n        var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, \"IARI\", decoder));\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, \"IARDW\", decoder);\n          var rdh = decodeInteger(contextCache, \"IARDH\", decoder);\n          var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n          var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n        }\n\n        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n        var s2, t2, symbolRow;\n\n        if (transposed) {\n          for (s2 = 0; s2 < symbolHeight; s2++) {\n            row = bitmap[offsetS + s2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[s2];\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n\n            switch (combinationOperator) {\n              case 0:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n\n                break;\n\n              case 2:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolHeight - 1;\n        } else {\n          for (t2 = 0; t2 < symbolHeight; t2++) {\n            row = bitmap[offsetT + t2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[t2];\n\n            switch (combinationOperator) {\n              case 0:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n\n                break;\n\n              case 2:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolWidth - 1;\n        }\n\n        i++;\n        var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, \"IADS\", decoder);\n\n        if (deltaS === null) {\n          break;\n        }\n\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n\n    return bitmap;\n  }\n\n  function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: -patternWidth,\n        y: 0\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n    const collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);\n    const patterns = [];\n\n    for (let i = 0; i <= maxPatternIndex; i++) {\n      const patternBitmap = [];\n      const xMin = patternWidth * i;\n      const xMax = xMin + patternWidth;\n\n      for (let y = 0; y < patternHeight; y++) {\n        patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n      }\n\n      patterns.push(patternBitmap);\n    }\n\n    return patterns;\n  }\n\n  function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {\n    const skip = null;\n\n    if (enableSkip) {\n      throw new Jbig2Error(\"skip is not supported\");\n    }\n\n    if (combinationOperator !== 0) {\n      throw new Jbig2Error(\"operator \" + combinationOperator + \" is not supported in halftone region\");\n    }\n\n    const regionBitmap = [];\n    let i, j, row;\n\n    for (i = 0; i < regionHeight; i++) {\n      row = new Uint8Array(regionWidth);\n\n      if (defaultPixelValue) {\n        for (j = 0; j < regionWidth; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      regionBitmap.push(row);\n    }\n\n    const numberOfPatterns = patterns.length;\n    const pattern0 = patterns[0];\n    const patternWidth = pattern0[0].length,\n          patternHeight = pattern0.length;\n    const bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: template <= 1 ? 3 : 2,\n        y: -1\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const grayScaleBitPlanes = [];\n    let mmrInput, bitmap;\n\n    if (mmr) {\n      mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n    }\n\n    for (i = bitsPerValue - 1; i >= 0; i--) {\n      if (mmr) {\n        bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n      } else {\n        bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);\n      }\n\n      grayScaleBitPlanes[i] = bitmap;\n    }\n\n    let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n\n    for (mg = 0; mg < gridHeight; mg++) {\n      for (ng = 0; ng < gridWidth; ng++) {\n        bit = 0;\n        patternIndex = 0;\n\n        for (j = bitsPerValue - 1; j >= 0; j--) {\n          bit = grayScaleBitPlanes[j][mg][ng] ^ bit;\n          patternIndex |= bit << j;\n        }\n\n        patternBitmap = patterns[patternIndex];\n        x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;\n        y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;\n\n        if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {\n          for (i = 0; i < patternHeight; i++) {\n            regionRow = regionBitmap[y + i];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionRow[x + j] |= patternRow[j];\n            }\n          }\n        } else {\n          let regionX, regionY;\n\n          for (i = 0; i < patternHeight; i++) {\n            regionY = y + i;\n\n            if (regionY < 0 || regionY >= regionHeight) {\n              continue;\n            }\n\n            regionRow = regionBitmap[regionY];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionX = x + j;\n\n              if (regionX >= 0 && regionX < regionWidth) {\n                regionRow[regionX] |= patternRow[j];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return regionBitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = (0, _core_utils.readUint32)(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3f;\n\n    if (!SegmentTypes[segmentType]) {\n      throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n    }\n\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = referredFlags >> 5 & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n\n    if (referredFlags === 7) {\n      referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;\n      position += 3;\n      var bytes = referredToCount + 7 >> 3;\n      retainBits[0] = data[position++];\n\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags === 5 || referredFlags === 6) {\n      throw new Jbig2Error(\"invalid referred-to flags\");\n    }\n\n    segmentHeader.retainBits = retainBits;\n    let referredToSegmentNumberSize = 4;\n\n    if (segmentHeader.number <= 256) {\n      referredToSegmentNumberSize = 1;\n    } else if (segmentHeader.number <= 65536) {\n      referredToSegmentNumberSize = 2;\n    }\n\n    var referredTo = [];\n    var i, ii;\n\n    for (i = 0; i < referredToCount; i++) {\n      let number;\n\n      if (referredToSegmentNumberSize === 1) {\n        number = data[position];\n      } else if (referredToSegmentNumberSize === 2) {\n        number = (0, _core_utils.readUint16)(data, position);\n      } else {\n        number = (0, _core_utils.readUint32)(data, position);\n      }\n\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n\n    segmentHeader.referredTo = referredTo;\n\n    if (!pageAssociationFieldSize) {\n      segmentHeader.pageAssociation = data[position++];\n    } else {\n      segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    segmentHeader.length = (0, _core_utils.readUint32)(data, position);\n    position += 4;\n\n    if (segmentHeader.length === 0xffffffff) {\n      if (segmentType === 38) {\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xff;\n          searchPattern[1] = 0xac;\n        }\n\n        searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;\n        searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;\n        searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;\n        searchPattern[5] = genericRegionInfo.height & 0xff;\n\n        for (i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n\n          if (j === searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n\n        if (segmentHeader.length === 0xffffffff) {\n          throw new Jbig2Error(\"segment end was not found\");\n        }\n      } else {\n        throw new Jbig2Error(\"invalid unknown segment length\");\n      }\n    }\n\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data\n      };\n\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n\n      segments.push(segment);\n\n      if (segmentHeader.type === 51) {\n        break;\n      }\n    }\n\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n\n    return segments;\n  }\n\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: (0, _core_utils.readUint32)(data, start),\n      height: (0, _core_utils.readUint32)(data, start + 4),\n      x: (0, _core_utils.readUint32)(data, start + 8),\n      y: (0, _core_utils.readUint32)(data, start + 12),\n      combinationOperator: data[start + 16] & 7\n    };\n  }\n\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n    var data = segment.data,\n        position = segment.start,\n        end = segment.end;\n    var args, at, i, atLength;\n\n    switch (header.type) {\n      case 0:\n        var dictionary = {};\n        var dictionaryFlags = (0, _core_utils.readUint16)(data, position);\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n        dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n        dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n        dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = dictionaryFlags >> 10 & 3;\n        dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n        position += 2;\n\n        if (!dictionary.huffman) {\n          atLength = dictionary.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.at = at;\n        }\n\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.refinementAt = at;\n        }\n\n        dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [dictionary, header.number, header.referredTo, data, position, end];\n        break;\n\n      case 6:\n      case 7:\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;\n        textRegion.stripSize = 1 << textRegion.logStripSize;\n        textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n        textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n        textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n        textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n          textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n          textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n          textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n          textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n          textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n          textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n          textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);\n        }\n\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          textRegion.refinementAt = at;\n        }\n\n        textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n\n      case 16:\n        const patternDictionary = {};\n        const patternDictionaryFlags = data[position++];\n        patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n        patternDictionary.template = patternDictionaryFlags >> 1 & 3;\n        patternDictionary.patternWidth = data[position++];\n        patternDictionary.patternHeight = data[position++];\n        patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [patternDictionary, header.number, data, position, end];\n        break;\n\n      case 22:\n      case 23:\n        const halftoneRegion = {};\n        halftoneRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        const halftoneRegionFlags = data[position++];\n        halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n        halftoneRegion.template = halftoneRegionFlags >> 1 & 3;\n        halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n        halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;\n        halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;\n        halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        args = [halftoneRegion, header.referredTo, data, position, end];\n        break;\n\n      case 38:\n      case 39:\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n\n        if (!genericRegion.mmr) {\n          atLength = genericRegion.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          genericRegion.at = at;\n        }\n\n        args = [genericRegion, data, position, end];\n        break;\n\n      case 48:\n        var pageInfo = {\n          width: (0, _core_utils.readUint32)(data, position),\n          height: (0, _core_utils.readUint32)(data, position + 4),\n          resolutionX: (0, _core_utils.readUint32)(data, position + 8),\n          resolutionY: (0, _core_utils.readUint32)(data, position + 12)\n        };\n\n        if (pageInfo.height === 0xffffffff) {\n          delete pageInfo.height;\n        }\n\n        var pageSegmentFlags = data[position + 16];\n        (0, _core_utils.readUint16)(data, position + 17);\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n        pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n\n      case 49:\n        break;\n\n      case 50:\n        break;\n\n      case 51:\n        break;\n\n      case 53:\n        args = [header.number, data, position, end];\n        break;\n\n      case 62:\n        break;\n\n      default:\n        throw new Jbig2Error(`segment type ${header.typeName}(${header.type})` + \" is not implemented\");\n    }\n\n    var callbackName = \"on\" + header.typeName;\n\n    if (callbackName in visitor) {\n      visitor[callbackName].apply(visitor, args);\n    }\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++) {\n      processSegment(segments[i], visitor);\n    }\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n\n    return visitor.buffer;\n  }\n\n  function parseJbig2(data) {\n    const end = data.length;\n    let position = 0;\n\n    if (data[position] !== 0x97 || data[position + 1] !== 0x4a || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0d || data[position + 5] !== 0x0a || data[position + 6] !== 0x1a || data[position + 7] !== 0x0a) {\n      throw new Jbig2Error(\"parseJbig2 - invalid header.\");\n    }\n\n    const header = Object.create(null);\n    position += 8;\n    const flags = data[position++];\n    header.randomAccess = !(flags & 1);\n\n    if (!(flags & 2)) {\n      header.numberOfPages = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    const segments = readSegments(header, data, position, end);\n    const visitor = new SimpleSegmentVisitor();\n    processSegments(segments, visitor);\n    const {\n      width,\n      height\n    } = visitor.currentPageInfo;\n    const bitPacked = visitor.buffer;\n    const imgData = new Uint8ClampedArray(width * height);\n    let q = 0,\n        k = 0;\n\n    for (let i = 0; i < height; i++) {\n      let mask = 0,\n          buffer;\n\n      for (let j = 0; j < width; j++) {\n        if (!mask) {\n          mask = 128;\n          buffer = bitPacked[k++];\n        }\n\n        imgData[q++] = buffer & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    return {\n      imgData,\n      width,\n      height\n    };\n  }\n\n  function SimpleSegmentVisitor() {}\n\n  SimpleSegmentVisitor.prototype = {\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = info.width + 7 >> 3;\n      var buffer = new Uint8ClampedArray(rowSize * info.height);\n\n      if (info.defaultPixelValue) {\n        for (var i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = 0xff;\n        }\n      }\n\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width,\n          height = regionInfo.height;\n      var rowSize = pageInfo.width + 7 >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      var mask0 = 128 >> (regionInfo.x & 7);\n      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n      var i, j, mask, offset;\n\n      switch (combinationOperator) {\n        case 0:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] |= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        case 2:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] ^= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        default:\n          throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n      }\n    },\n    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n      let huffmanTables, huffmanInput;\n\n      if (dictionary.huffman) {\n        huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);\n        huffmanInput = new Reader(data, start, end);\n      }\n\n      var symbols = this.symbols;\n\n      if (!symbols) {\n        this.symbols = symbols = {};\n      }\n\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);\n    },\n    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {\n      var regionInfo = region.info;\n      let huffmanTables, huffmanInput;\n      var symbols = this.symbols;\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);\n\n      if (region.huffman) {\n        huffmanInput = new Reader(data, start, end);\n        huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n      this.onImmediateTextRegion.apply(this, arguments);\n    },\n\n    onPatternDictionary(dictionary, currentSegment, data, start, end) {\n      let patterns = this.patterns;\n\n      if (!patterns) {\n        this.patterns = patterns = {};\n      }\n\n      const decodingContext = new DecodingContext(data, start, end);\n      patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);\n    },\n\n    onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n      const patterns = this.patterns[referredSegments[0]];\n      const regionInfo = region.info;\n      const decodingContext = new DecodingContext(data, start, end);\n      const bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n\n    onImmediateLosslessHalftoneRegion() {\n      this.onImmediateHalftoneRegion.apply(this, arguments);\n    },\n\n    onTables(currentSegment, data, start, end) {\n      let customTables = this.customTables;\n\n      if (!customTables) {\n        this.customTables = customTables = {};\n      }\n\n      customTables[currentSegment] = decodeTablesSegment(data, start, end);\n    }\n\n  };\n\n  function HuffmanLine(lineData) {\n    if (lineData.length === 2) {\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === \"lower\";\n    }\n  }\n\n  function HuffmanTreeNode(line) {\n    this.children = [];\n\n    if (line) {\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      this.isLeaf = false;\n    }\n  }\n\n  HuffmanTreeNode.prototype = {\n    buildTree(line, shift) {\n      const bit = line.prefixCode >> shift & 1;\n\n      if (shift <= 0) {\n        this.children[bit] = new HuffmanTreeNode(line);\n      } else {\n        let node = this.children[bit];\n\n        if (!node) {\n          this.children[bit] = node = new HuffmanTreeNode(null);\n        }\n\n        node.buildTree(line, shift - 1);\n      }\n    },\n\n    decodeNode(reader) {\n      if (this.isLeaf) {\n        if (this.isOOB) {\n          return null;\n        }\n\n        const htOffset = reader.readBits(this.rangeLength);\n        return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n      }\n\n      const node = this.children[reader.readBit()];\n\n      if (!node) {\n        throw new Jbig2Error(\"invalid Huffman data\");\n      }\n\n      return node.decodeNode(reader);\n    }\n\n  };\n\n  function HuffmanTable(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n\n    this.rootNode = new HuffmanTreeNode(null);\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  HuffmanTable.prototype = {\n    decode(reader) {\n      return this.rootNode.decodeNode(reader);\n    },\n\n    assignPrefixCodes(lines) {\n      const linesLength = lines.length;\n      let prefixLengthMax = 0;\n\n      for (let i = 0; i < linesLength; i++) {\n        prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n      }\n\n      const histogram = new Uint32Array(prefixLengthMax + 1);\n\n      for (let i = 0; i < linesLength; i++) {\n        histogram[lines[i].prefixLength]++;\n      }\n\n      let currentLength = 1,\n          firstCode = 0,\n          currentCode,\n          currentTemp,\n          line;\n      histogram[0] = 0;\n\n      while (currentLength <= prefixLengthMax) {\n        firstCode = firstCode + histogram[currentLength - 1] << 1;\n        currentCode = firstCode;\n        currentTemp = 0;\n\n        while (currentTemp < linesLength) {\n          line = lines[currentTemp];\n\n          if (line.prefixLength === currentLength) {\n            line.prefixCode = currentCode;\n            currentCode++;\n          }\n\n          currentTemp++;\n        }\n\n        currentLength++;\n      }\n    }\n\n  };\n\n  function decodeTablesSegment(data, start, end) {\n    const flags = data[start];\n    const lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;\n    const highestValue = (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;\n    const reader = new Reader(data, start + 9, end);\n    const prefixSizeBits = (flags >> 1 & 7) + 1;\n    const rangeSizeBits = (flags >> 4 & 7) + 1;\n    const lines = [];\n    let prefixLength,\n        rangeLength,\n        currentRangeLow = lowestValue;\n\n    do {\n      prefixLength = reader.readBits(prefixSizeBits);\n      rangeLength = reader.readBits(rangeSizeBits);\n      lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));\n      currentRangeLow += 1 << rangeLength;\n    } while (currentRangeLow < highestValue);\n\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"]));\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n    if (flags & 1) {\n      prefixLength = reader.readBits(prefixSizeBits);\n      lines.push(new HuffmanLine([prefixLength, 0]));\n    }\n\n    return new HuffmanTable(lines, false);\n  }\n\n  const standardTablesCache = {};\n\n  function getStandardTable(number) {\n    let table = standardTablesCache[number];\n\n    if (table) {\n      return table;\n    }\n\n    let lines;\n\n    switch (number) {\n      case 1:\n        lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];\n        break;\n\n      case 2:\n        lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];\n        break;\n\n      case 3:\n        lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, \"lower\"], [75, 7, 32, 0x7e], [6, 0x3e]];\n        break;\n\n      case 4:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];\n        break;\n\n      case 5:\n        lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, \"lower\"], [76, 6, 32, 0x3e]];\n        break;\n\n      case 6:\n        lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, \"lower\"], [2048, 6, 32, 0x3f]];\n        break;\n\n      case 7:\n        lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, \"lower\"], [2048, 5, 32, 0x1f]];\n        break;\n\n      case 8:\n        lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, \"lower\"], [1670, 9, 32, 0x1ff], [2, 0x1]];\n        break;\n\n      case 9:\n        lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, \"lower\"], [3339, 9, 32, 0x1ff], [2, 0x0]];\n        break;\n\n      case 10:\n        lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, \"lower\"], [4166, 8, 32, 0xff], [2, 0x2]];\n        break;\n\n      case 11:\n        lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 12:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];\n        break;\n\n      case 13:\n        lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 14:\n        lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];\n        break;\n\n      case 15:\n        lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, \"lower\"], [25, 7, 32, 0x7f]];\n        break;\n\n      default:\n        throw new Jbig2Error(`standard table B.${number} does not exist`);\n    }\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      lines[i] = new HuffmanLine(lines[i]);\n    }\n\n    table = new HuffmanTable(lines, true);\n    standardTablesCache[number] = table;\n    return table;\n  }\n\n  function Reader(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  Reader.prototype = {\n    readBit() {\n      if (this.shift < 0) {\n        if (this.position >= this.end) {\n          throw new Jbig2Error(\"end of data while reading bit\");\n        }\n\n        this.currentByte = this.data[this.position++];\n        this.shift = 7;\n      }\n\n      const bit = this.currentByte >> this.shift & 1;\n      this.shift--;\n      return bit;\n    },\n\n    readBits(numBits) {\n      let result = 0,\n          i;\n\n      for (i = numBits - 1; i >= 0; i--) {\n        result |= this.readBit() << i;\n      }\n\n      return result;\n    },\n\n    byteAlign() {\n      this.shift = -1;\n    },\n\n    next() {\n      if (this.position >= this.end) {\n        return -1;\n      }\n\n      return this.data[this.position++];\n    }\n\n  };\n\n  function getCustomHuffmanTable(index, referredTo, customTables) {\n    let currentIndex = 0;\n\n    for (let i = 0, ii = referredTo.length; i < ii; i++) {\n      const table = customTables[referredTo[i]];\n\n      if (table) {\n        if (index === currentIndex) {\n          return table;\n        }\n\n        currentIndex++;\n      }\n    }\n\n    throw new Jbig2Error(\"can't find custom Huffman table\");\n  }\n\n  function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {\n    const codes = [];\n\n    for (let i = 0; i <= 34; i++) {\n      const codeLength = reader.readBits(4);\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n    }\n\n    const runCodesTable = new HuffmanTable(codes, false);\n    codes.length = 0;\n\n    for (let i = 0; i < numberOfSymbols;) {\n      const codeLength = runCodesTable.decode(reader);\n\n      if (codeLength >= 32) {\n        let repeatedLength, numberOfRepeats, j;\n\n        switch (codeLength) {\n          case 32:\n            if (i === 0) {\n              throw new Jbig2Error(\"no previous value in symbol ID table\");\n            }\n\n            numberOfRepeats = reader.readBits(2) + 3;\n            repeatedLength = codes[i - 1].prefixLength;\n            break;\n\n          case 33:\n            numberOfRepeats = reader.readBits(3) + 3;\n            repeatedLength = 0;\n            break;\n\n          case 34:\n            numberOfRepeats = reader.readBits(7) + 11;\n            repeatedLength = 0;\n            break;\n\n          default:\n            throw new Jbig2Error(\"invalid code length in symbol ID table\");\n        }\n\n        for (j = 0; j < numberOfRepeats; j++) {\n          codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n          i++;\n        }\n      } else {\n        codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n        i++;\n      }\n    }\n\n    reader.byteAlign();\n    const symbolIDTable = new HuffmanTable(codes, false);\n    let customIndex = 0,\n        tableFirstS,\n        tableDeltaS,\n        tableDeltaT;\n\n    switch (textRegion.huffmanFS) {\n      case 0:\n      case 1:\n        tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n        break;\n\n      case 3:\n        tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman FS selector\");\n    }\n\n    switch (textRegion.huffmanDS) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n        break;\n\n      case 3:\n        tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DS selector\");\n    }\n\n    switch (textRegion.huffmanDT) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n        break;\n\n      case 3:\n        tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DT selector\");\n    }\n\n    if (textRegion.refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    return {\n      symbolIDTable,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT\n    };\n  }\n\n  function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {\n    let customIndex = 0,\n        tableDeltaHeight,\n        tableDeltaWidth;\n\n    switch (dictionary.huffmanDHSelector) {\n      case 0:\n      case 1:\n        tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n        break;\n\n      case 3:\n        tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DH selector\");\n    }\n\n    switch (dictionary.huffmanDWSelector) {\n      case 0:\n      case 1:\n        tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n        break;\n\n      case 3:\n        tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DW selector\");\n    }\n\n    let tableBitmapSize, tableAggregateInstances;\n\n    if (dictionary.bitmapSizeSelector) {\n      tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);\n      customIndex++;\n    } else {\n      tableBitmapSize = getStandardTable(1);\n    }\n\n    if (dictionary.aggregationInstancesSelector) {\n      tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);\n    } else {\n      tableAggregateInstances = getStandardTable(1);\n    }\n\n    return {\n      tableDeltaHeight,\n      tableDeltaWidth,\n      tableBitmapSize,\n      tableAggregateInstances\n    };\n  }\n\n  function readUncompressedBitmap(reader, width, height) {\n    const bitmap = [];\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (let x = 0; x < width; x++) {\n        row[x] = reader.readBit();\n      }\n\n      reader.byteAlign();\n    }\n\n    return bitmap;\n  }\n\n  function decodeMMRBitmap(input, width, height, endOfBlock) {\n    const params = {\n      K: -1,\n      Columns: width,\n      Rows: height,\n      BlackIs1: true,\n      EndOfBlock: endOfBlock\n    };\n    const decoder = new _ccitt.CCITTFaxDecoder(input, params);\n    const bitmap = [];\n    let currentByte,\n        eof = false;\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      let shift = -1;\n\n      for (let x = 0; x < width; x++) {\n        if (shift < 0) {\n          currentByte = decoder.readNextChar();\n\n          if (currentByte === -1) {\n            currentByte = 0;\n            eof = true;\n          }\n\n          shift = 7;\n        }\n\n        row[x] = currentByte >> shift & 1;\n        shift--;\n      }\n    }\n\n    if (endOfBlock && !eof) {\n      const lookForEOFLimit = 5;\n\n      for (let i = 0; i < lookForEOFLimit; i++) {\n        if (decoder.readNextChar() === -1) {\n          break;\n        }\n      }\n    }\n\n    return bitmap;\n  }\n\n  function Jbig2Image() {}\n\n  Jbig2Image.prototype = {\n    parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    },\n\n    parse(data) {\n      const {\n        imgData,\n        width,\n        height\n      } = parseJbig2(data);\n      this.width = width;\n      this.height = height;\n      return imgData;\n    }\n\n  };\n  return Jbig2Image;\n}();\n\nexports.Jbig2Image = Jbig2Image;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArithmeticDecoder = void 0;\nconst QeTable = [{\n  qe: 0x5601,\n  nmps: 1,\n  nlps: 1,\n  switchFlag: 1\n}, {\n  qe: 0x3401,\n  nmps: 2,\n  nlps: 6,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 3,\n  nlps: 9,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 4,\n  nlps: 12,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 5,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 38,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 7,\n  nlps: 6,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 8,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 9,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 10,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 11,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 12,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 13,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 29,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 15,\n  nlps: 14,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 16,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x5101,\n  nmps: 17,\n  nlps: 15,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 18,\n  nlps: 16,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 19,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x3401,\n  nmps: 20,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 21,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2801,\n  nmps: 22,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 23,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x2201,\n  nmps: 24,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 25,\n  nlps: 22,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 26,\n  nlps: 23,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 27,\n  nlps: 24,\n  switchFlag: 0\n}, {\n  qe: 0x1401,\n  nmps: 28,\n  nlps: 25,\n  switchFlag: 0\n}, {\n  qe: 0x1201,\n  nmps: 29,\n  nlps: 26,\n  switchFlag: 0\n}, {\n  qe: 0x1101,\n  nmps: 30,\n  nlps: 27,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 31,\n  nlps: 28,\n  switchFlag: 0\n}, {\n  qe: 0x09c1,\n  nmps: 32,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x08a1,\n  nmps: 33,\n  nlps: 30,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 34,\n  nlps: 31,\n  switchFlag: 0\n}, {\n  qe: 0x0441,\n  nmps: 35,\n  nlps: 32,\n  switchFlag: 0\n}, {\n  qe: 0x02a1,\n  nmps: 36,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 37,\n  nlps: 34,\n  switchFlag: 0\n}, {\n  qe: 0x0141,\n  nmps: 38,\n  nlps: 35,\n  switchFlag: 0\n}, {\n  qe: 0x0111,\n  nmps: 39,\n  nlps: 36,\n  switchFlag: 0\n}, {\n  qe: 0x0085,\n  nmps: 40,\n  nlps: 37,\n  switchFlag: 0\n}, {\n  qe: 0x0049,\n  nmps: 41,\n  nlps: 38,\n  switchFlag: 0\n}, {\n  qe: 0x0025,\n  nmps: 42,\n  nlps: 39,\n  switchFlag: 0\n}, {\n  qe: 0x0015,\n  nmps: 43,\n  nlps: 40,\n  switchFlag: 0\n}, {\n  qe: 0x0009,\n  nmps: 44,\n  nlps: 41,\n  switchFlag: 0\n}, {\n  qe: 0x0005,\n  nmps: 45,\n  nlps: 42,\n  switchFlag: 0\n}, {\n  qe: 0x0001,\n  nmps: 45,\n  nlps: 43,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 46,\n  nlps: 46,\n  switchFlag: 0\n}];\n\nclass ArithmeticDecoder {\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n    this.chigh = data[start];\n    this.clow = 0;\n    this.byteIn();\n    this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;\n    this.clow = this.clow << 7 & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  readBit(contexts, pos) {\n    let cx_index = contexts[pos] >> 1,\n        cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;\n      this.clow = this.clow << 1 & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n\n    this.a = a;\n    contexts[pos] = cx_index << 1 | cx_mps;\n    return d;\n  }\n\n}\n\nexports.ArithmeticDecoder = ArithmeticDecoder;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpegStream = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _jpg = __w_pdfjs_require__(19);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst JpegStream = function JpegStreamClosure() {\n  function JpegStream(stream, maybeLength, dict, params) {\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === 0xff) {\n        stream.skip(-1);\n        break;\n      }\n    }\n\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpegStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpegStream.prototype, \"bytes\", {\n    get: function JpegStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpegStream.prototype.ensureBuffer = function (requested) {};\n\n  JpegStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpegOptions = {\n      decodeTransform: undefined,\n      colorTransform: undefined\n    };\n    const decodeArr = this.dict.getArray(\"Decode\", \"D\");\n\n    if (this.forceRGB && Array.isArray(decodeArr)) {\n      const bitsPerComponent = this.dict.get(\"BitsPerComponent\") || 8;\n      const decodeArrLength = decodeArr.length;\n      const transform = new Int32Array(decodeArrLength);\n      let transformNeeded = false;\n      const maxValue = (1 << bitsPerComponent) - 1;\n\n      for (let i = 0; i < decodeArrLength; i += 2) {\n        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\n        transform[i + 1] = decodeArr[i] * maxValue | 0;\n\n        if (transform[i] !== 256 || transform[i + 1] !== 0) {\n          transformNeeded = true;\n        }\n      }\n\n      if (transformNeeded) {\n        jpegOptions.decodeTransform = transform;\n      }\n    }\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const colorTransform = this.params.get(\"ColorTransform\");\n\n      if (Number.isInteger(colorTransform)) {\n        jpegOptions.colorTransform = colorTransform;\n      }\n    }\n\n    const jpegImage = new _jpg.JpegImage(jpegOptions);\n    jpegImage.parse(this.bytes);\n    const data = jpegImage.getData({\n      width: this.drawWidth,\n      height: this.drawHeight,\n      forceRGB: this.forceRGB,\n      isSourcePDF: true\n    });\n    this.buffer = data;\n    this.bufferLength = data.length;\n    this.eof = true;\n  };\n\n  return JpegStream;\n}();\n\nexports.JpegStream = JpegStream;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpegImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass JpegError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n\n}\n\nclass DNLMarkerError extends _util.BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n\n}\n\nclass EOIMarkerError extends _util.BaseException {}\n\nvar JpegImage = function JpegImageClosure() {\n  var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);\n  var dctCos1 = 4017;\n  var dctSin1 = 799;\n  var dctCos3 = 3406;\n  var dctSin3 = 2276;\n  var dctCos6 = 1567;\n  var dctSin6 = 3784;\n  var dctSqrt2 = 5793;\n  var dctSqrt1d2 = 2896;\n\n  function JpegImage({\n    decodeTransform = null,\n    colorTransform = -1\n  } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0,\n        code = [],\n        i,\n        j,\n        length = 16;\n\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n\n    code.push({\n      children: [],\n      index: 0\n    });\n    var p = code[0],\n        q;\n\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n\n        while (p.index > 0) {\n          p = code.pop();\n        }\n\n        p.index++;\n        code.push(p);\n\n        while (code.length <= i) {\n          code.push(q = {\n            children: [],\n            index: 0\n          });\n          p.children[p.index] = q.children;\n          p = q;\n        }\n\n        k++;\n      }\n\n      if (i + 1 < length) {\n        code.push(q = {\n          children: [],\n          index: 0\n        });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    const startOffset = offset;\n    let bitsData = 0,\n        bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return bitsData >> bitsCount & 1;\n      }\n\n      bitsData = data[offset++];\n\n      if (bitsData === 0xff) {\n        var nextByte = data[offset++];\n\n        if (nextByte) {\n          if (nextByte === 0xdc && parseDNLMarker) {\n            offset += 2;\n            const scanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            if (scanLines > 0 && scanLines !== frame.scanLines) {\n              throw new DNLMarkerError(\"Found DNL marker (0xFFDC) while parsing scan data\", scanLines);\n            }\n          } else if (nextByte === 0xd9) {\n            if (parseDNLMarker) {\n              const maybeScanLines = blockRow * 8;\n\n              if (maybeScanLines > 0 && maybeScanLines < frame.scanLines / 10) {\n                throw new DNLMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data, \" + \"possibly caused by incorrect `scanLines` parameter\", maybeScanLines);\n              }\n            }\n\n            throw new EOIMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data\");\n          }\n\n          throw new JpegError(`unexpected marker ${(bitsData << 8 | nextByte).toString(16)}`);\n        }\n      }\n\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n\n      while (true) {\n        node = node[readBit()];\n\n        switch (typeof node) {\n          case \"number\":\n            return node;\n\n          case \"object\":\n            continue;\n        }\n\n        throw new JpegError(\"invalid huffman sequence\");\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n\n      while (length > 0) {\n        n = n << 1 | readBit();\n        length--;\n      }\n\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n\n      var n = receive(length);\n\n      if (n >= 1 << length - 1) {\n        return n;\n      }\n\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[blockOffset] = component.pred += diff;\n      var k = 1;\n\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n      component.blockData[blockOffset] = component.pred += diff;\n    }\n\n    function decodeDCSuccessive(component, blockOffset) {\n      component.blockData[blockOffset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n\n    function decodeACFirst(component, blockOffset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n\n      var k = spectralStart,\n          e = spectralEnd;\n\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0,\n        successiveACNextValue;\n\n    function decodeACSuccessive(component, blockOffset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n\n      while (k <= e) {\n        const offsetZ = blockOffset + dctZigZag[k];\n        const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n\n        switch (successiveACState) {\n          case 0:\n            rs = decodeHuffman(component.huffmanTableAC);\n            s = rs & 15;\n            r = rs >> 4;\n\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1) {\n                throw new JpegError(\"invalid ACn encoding\");\n              }\n\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n\n            continue;\n\n          case 1:\n          case 2:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              r--;\n\n              if (r === 0) {\n                successiveACState = successiveACState === 2 ? 3 : 0;\n              }\n            }\n\n            break;\n\n          case 3:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              component.blockData[offsetZ] = successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n\n            break;\n\n          case 4:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            }\n\n            break;\n        }\n\n        k++;\n      }\n\n      if (successiveACState === 4) {\n        eobrun--;\n\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    let blockRow = 0;\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = mcu / mcusPerLine | 0;\n      var mcuCol = mcu % mcusPerLine;\n      blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      blockRow = mcu / component.blocksPerLine | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0,\n        fileMarker;\n    var mcuExpected;\n\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n\n    var h, v;\n\n    while (mcu <= mcuExpected) {\n      var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\n\n      if (mcuToRead > 0) {\n        for (i = 0; i < componentsLength; i++) {\n          components[i].pred = 0;\n        }\n\n        eobrun = 0;\n\n        if (componentsLength === 1) {\n          component = components[0];\n\n          for (n = 0; n < mcuToRead; n++) {\n            decodeBlock(component, decodeFn, mcu);\n            mcu++;\n          }\n        } else {\n          for (n = 0; n < mcuToRead; n++) {\n            for (i = 0; i < componentsLength; i++) {\n              component = components[i];\n              h = component.h;\n              v = component.v;\n\n              for (j = 0; j < v; j++) {\n                for (k = 0; k < h; k++) {\n                  decodeMcu(component, decodeFn, mcu, j, k);\n                }\n              }\n            }\n\n            mcu++;\n          }\n        }\n      }\n\n      bitsCount = 0;\n      fileMarker = findNextFileMarker(data, offset);\n\n      if (!fileMarker) {\n        break;\n      }\n\n      if (fileMarker.invalid) {\n        const partialMsg = mcuToRead > 0 ? \"unexpected\" : \"excessive\";\n        (0, _util.warn)(`decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`);\n        offset = fileMarker.offset;\n      }\n\n      if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable,\n        blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    if (!qt) {\n      throw new JpegError(\"missing required Quantization Table.\");\n    }\n\n    for (var row = 0; row < 64; row += 8) {\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n      p0 *= qt[row];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 512 >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n      v0 = dctSqrt2 * p0 + 128 >> 8;\n      v1 = dctSqrt2 * p4 + 128 >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n      v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n      v0 = v0 + v1 + 1 >> 1;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col + 8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 8192 >> 14;\n\n        if (t < -2040) {\n          t = 0;\n        } else if (t >= 2024) {\n          t = 255;\n        } else {\n          t = t + 2056 >> 4;\n        }\n\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col + 8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      v0 = dctSqrt2 * p0 + 2048 >> 12;\n      v1 = dctSqrt2 * p4 + 2048 >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n      v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n      v5 = p3;\n      v6 = p5;\n      v0 = (v0 + v1 + 1 >> 1) + 4112;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      if (p0 < 16) {\n        p0 = 0;\n      } else if (p0 >= 4080) {\n        p0 = 255;\n      } else {\n        p0 >>= 4;\n      }\n\n      if (p1 < 16) {\n        p1 = 0;\n      } else if (p1 >= 4080) {\n        p1 = 255;\n      } else {\n        p1 >>= 4;\n      }\n\n      if (p2 < 16) {\n        p2 = 0;\n      } else if (p2 >= 4080) {\n        p2 = 255;\n      } else {\n        p2 >>= 4;\n      }\n\n      if (p3 < 16) {\n        p3 = 0;\n      } else if (p3 >= 4080) {\n        p3 = 255;\n      } else {\n        p3 >>= 4;\n      }\n\n      if (p4 < 16) {\n        p4 = 0;\n      } else if (p4 >= 4080) {\n        p4 = 255;\n      } else {\n        p4 >>= 4;\n      }\n\n      if (p5 < 16) {\n        p5 = 0;\n      } else if (p5 >= 4080) {\n        p5 = 255;\n      } else {\n        p5 >>= 4;\n      }\n\n      if (p6 < 16) {\n        p6 = 0;\n      } else if (p6 >= 4080) {\n        p6 = 255;\n      } else {\n        p6 >>= 4;\n      }\n\n      if (p7 < 16) {\n        p7 = 0;\n      } else if (p7 >= 4080) {\n        p7 = 255;\n      } else {\n        p7 >>= 4;\n      }\n\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col + 8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var computationBuffer = new Int16Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n\n    return component.blockData;\n  }\n\n  function findNextFileMarker(data, currentPos, startPos = currentPos) {\n    const maxPos = data.length - 1;\n    var newPos = startPos < currentPos ? startPos : currentPos;\n\n    if (currentPos >= maxPos) {\n      return null;\n    }\n\n    var currentMarker = (0, _core_utils.readUint16)(data, currentPos);\n\n    if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n      return {\n        invalid: null,\n        marker: currentMarker,\n        offset: currentPos\n      };\n    }\n\n    var newMarker = (0, _core_utils.readUint16)(data, newPos);\n\n    while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n      if (++newPos >= maxPos) {\n        return null;\n      }\n\n      newMarker = (0, _core_utils.readUint16)(data, newPos);\n    }\n\n    return {\n      invalid: currentMarker.toString(16),\n      marker: newMarker,\n      offset: newPos\n    };\n  }\n\n  JpegImage.prototype = {\n    parse(data, {\n      dnlScanLines = null\n    } = {}) {\n      function readDataBlock() {\n        const length = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n        let endOffset = offset + length - 2;\n        var fileMarker = findNextFileMarker(data, endOffset, offset);\n\n        if (fileMarker && fileMarker.invalid) {\n          (0, _util.warn)(\"readDataBlock - incorrect length, current marker is: \" + fileMarker.invalid);\n          endOffset = fileMarker.offset;\n        }\n\n        var array = data.subarray(offset, endOffset);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      let numSOSMarkers = 0;\n      var quantizationTables = [];\n      var huffmanTablesAC = [],\n          huffmanTablesDC = [];\n      let fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      if (fileMarker !== 0xffd8) {\n        throw new JpegError(\"SOI not found\");\n      }\n\n      fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      markerLoop: while (fileMarker !== 0xffd9) {\n        var i, j, l;\n\n        switch (fileMarker) {\n          case 0xffe0:\n          case 0xffe1:\n          case 0xffe2:\n          case 0xffe3:\n          case 0xffe4:\n          case 0xffe5:\n          case 0xffe6:\n          case 0xffe7:\n          case 0xffe8:\n          case 0xffe9:\n          case 0xffea:\n          case 0xffeb:\n          case 0xffec:\n          case 0xffed:\n          case 0xffee:\n          case 0xffef:\n          case 0xfffe:\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xffe0) {\n              if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                jfif = {\n                  version: {\n                    major: appData[5],\n                    minor: appData[6]\n                  },\n                  densityUnits: appData[7],\n                  xDensity: appData[8] << 8 | appData[9],\n                  yDensity: appData[10] << 8 | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n\n            if (fileMarker === 0xffee) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {\n                adobe = {\n                  version: appData[5] << 8 | appData[6],\n                  flags0: appData[7] << 8 | appData[8],\n                  flags1: appData[9] << 8 | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n\n            break;\n\n          case 0xffdb:\n            const quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n\n              if (quantizationTableSpec >> 4 === 0) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if (quantizationTableSpec >> 4 === 1) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = (0, _core_utils.readUint16)(data, offset);\n                  offset += 2;\n                }\n              } else {\n                throw new JpegError(\"DQT - invalid table spec\");\n              }\n\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n\n            break;\n\n          case 0xffc0:\n          case 0xffc1:\n          case 0xffc2:\n            if (frame) {\n              throw new JpegError(\"Only single frame JPEGs supported\");\n            }\n\n            offset += 2;\n            frame = {};\n            frame.extended = fileMarker === 0xffc1;\n            frame.progressive = fileMarker === 0xffc2;\n            frame.precision = data[offset++];\n            const sofScanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.scanLines = dnlScanLines || sofScanLines;\n            frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++],\n                componentId;\n            var maxH = 0,\n                maxV = 0;\n\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n\n              if (maxH < h) {\n                maxH = h;\n              }\n\n              if (maxV < v) {\n                maxV = v;\n              }\n\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h,\n                v,\n                quantizationId: qId,\n                quantizationTable: null\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xffc4:\n            const huffmanLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += codeLengths[j] = data[offset];\n              }\n\n              var huffmanValues = new Uint8Array(codeLengthSum);\n\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n\n              i += 17 + codeLengthSum;\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n            }\n\n            break;\n\n          case 0xffdd:\n            offset += 2;\n            resetInterval = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            break;\n\n          case 0xffda:\n            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n            offset += 2;\n            var selectorsCount = data[offset++];\n            var components = [],\n                component;\n\n            for (i = 0; i < selectorsCount; i++) {\n              var componentIndex = frame.componentIds[data[offset++]];\n              component = frame.components[componentIndex];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n\n            try {\n              var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\n              offset += processed;\n            } catch (ex) {\n              if (ex instanceof DNLMarkerError) {\n                (0, _util.warn)(`${ex.message} -- attempting to re-parse the JPEG image.`);\n                return this.parse(data, {\n                  dnlScanLines: ex.scanLines\n                });\n              } else if (ex instanceof EOIMarkerError) {\n                (0, _util.warn)(`${ex.message} -- ignoring the rest of the image data.`);\n                break markerLoop;\n              }\n\n              throw ex;\n            }\n\n            break;\n\n          case 0xffdc:\n            offset += 4;\n            break;\n\n          case 0xffff:\n            if (data[offset] !== 0xff) {\n              offset--;\n            }\n\n            break;\n\n          default:\n            const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\n\n            if (nextFileMarker && nextFileMarker.invalid) {\n              (0, _util.warn)(\"JpegImage.parse - unexpected data, current marker is: \" + nextFileMarker.invalid);\n              offset = nextFileMarker.offset;\n              break;\n            }\n\n            if (offset >= data.length - 1) {\n              (0, _util.warn)(\"JpegImage.parse - reached the end of the image data \" + \"without finding an EOI marker (0xFFD9).\");\n              break markerLoop;\n            }\n\n            throw new JpegError(\"JpegImage.parse - unknown marker: \" + fileMarker.toString(16));\n        }\n\n        fileMarker = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n        var quantizationTable = quantizationTables[component.quantizationId];\n\n        if (quantizationTable) {\n          component.quantizationTable = quantizationTable;\n        }\n\n        this.components.push({\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn\n        });\n      }\n\n      this.numComponents = this.components.length;\n      return undefined;\n    },\n\n    _getLinearizedBlockData(width, height, isSourcePDF = false) {\n      var scaleX = this.width / width,\n          scaleY = this.height / height;\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8ClampedArray(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8;\n      let lastComponentScaleX;\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = component.blocksPerLine + 1 << 3;\n\n        if (componentScaleX !== lastComponentScaleX) {\n          for (x = 0; x < width; x++) {\n            j = 0 | x * componentScaleX;\n            xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n          }\n\n          lastComponentScaleX = componentScaleX;\n        }\n\n        for (y = 0; y < height; y++) {\n          j = 0 | y * componentScaleY;\n          index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      let transform = this._decodeTransform;\n\n      if (!isSourcePDF && numComponents === 4 && !transform) {\n        transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n      }\n\n      if (transform) {\n        for (i = 0; i < dataLength;) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n          }\n        }\n      }\n\n      return data;\n    },\n\n    get _isColorConversionNeeded() {\n      if (this.adobe) {\n        return !!this.adobe.transformCode;\n      }\n\n      if (this.numComponents === 3) {\n        if (this._colorTransform === 0) {\n          return false;\n        }\n\n        return true;\n      }\n\n      if (this._colorTransform === 1) {\n        return true;\n      }\n\n      return false;\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = Y - 179.456 + 1.402 * Cr;\n        data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n        data[i + 2] = Y - 226.816 + 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\n        data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\n        data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\n      }\n\n      return data.subarray(0, offset);\n    },\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = 434.456 - Y - 1.402 * Cr;\n        data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n        data[i + 2] = 481.816 - Y - 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\n        data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.00031891311758832814 * k + 0.7364883807733168);\n        data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\n      }\n\n      return data.subarray(0, offset);\n    },\n\n    getData({\n      width,\n      height,\n      forceRGB = false,\n      isSourcePDF = false\n    }) {\n      if (this.numComponents > 4) {\n        throw new JpegError(\"Unsupported color mode\");\n      }\n\n      var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n      if (this.numComponents === 1 && forceRGB) {\n        var dataLength = data.length;\n        var rgbData = new Uint8ClampedArray(dataLength * 3);\n        var offset = 0;\n\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n\n        return rgbData;\n      } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded) {\n          if (forceRGB) {\n            return this._convertYcckToRgb(data);\n          }\n\n          return this._convertYcckToCmyk(data);\n        } else if (forceRGB) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n\n      return data;\n    }\n\n  };\n  return JpegImage;\n}();\n\nexports.JpegImage = JpegImage;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpxStream = void 0;\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jpx = __w_pdfjs_require__(21);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst JpxStream = function JpxStreamClosure() {\n  function JpxStream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpxStream.prototype, \"bytes\", {\n    get: function JpxStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpxStream.prototype.ensureBuffer = function (requested) {};\n\n  JpxStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpxImage = new _jpx.JpxImage();\n    jpxImage.parse(this.bytes);\n    const width = jpxImage.width;\n    const height = jpxImage.height;\n    const componentsCount = jpxImage.componentsCount;\n    const tileCount = jpxImage.tiles.length;\n\n    if (tileCount === 1) {\n      this.buffer = jpxImage.tiles[0].items;\n    } else {\n      const data = new Uint8ClampedArray(width * height * componentsCount);\n\n      for (let k = 0; k < tileCount; k++) {\n        const tileComponents = jpxImage.tiles[k];\n        const tileWidth = tileComponents.width;\n        const tileHeight = tileComponents.height;\n        const tileLeft = tileComponents.left;\n        const tileTop = tileComponents.top;\n        const src = tileComponents.items;\n        let srcPosition = 0;\n        let dataPosition = (width * tileTop + tileLeft) * componentsCount;\n        const imgRowSize = width * componentsCount;\n        const tileRowSize = tileWidth * componentsCount;\n\n        for (let j = 0; j < tileHeight; j++) {\n          const rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n          data.set(rowBytes, dataPosition);\n          srcPosition += tileRowSize;\n          dataPosition += imgRowSize;\n        }\n      }\n\n      this.buffer = data;\n    }\n\n    this.bufferLength = this.buffer.length;\n    this.eof = true;\n  };\n\n  return JpxStream;\n}();\n\nexports.JpxStream = JpxStream;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpxImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(17);\n\nclass JpxError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n\n}\n\nvar JpxImage = function JpxImageClosure() {\n  var SubbandsGainLog2 = {\n    LL: 0,\n    LH: 1,\n    HL: 1,\n    HH: 2\n  };\n\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n      var head = (0, _core_utils.readUint16)(data, 0);\n\n      if (head === 0xff4f) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0,\n          length = data.length;\n\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = (0, _core_utils.readUint32)(data, position);\n        var tbox = (0, _core_utils.readUint32)(data, position + 4);\n        position += headerSize;\n\n        if (lbox === 1) {\n          lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n\n        if (lbox < headerSize) {\n          throw new JpxError(\"Invalid box field size\");\n        }\n\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n\n        switch (tbox) {\n          case 0x6a703268:\n            jumpDataLength = false;\n            break;\n\n          case 0x636f6c72:\n            var method = data[position];\n\n            if (method === 1) {\n              var colorspace = (0, _core_utils.readUint32)(data, position + 3);\n\n              switch (colorspace) {\n                case 16:\n                case 17:\n                case 18:\n                  break;\n\n                default:\n                  (0, _util.warn)(\"Unknown colorspace \" + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              (0, _util.info)(\"ICC profile not supported\");\n            }\n\n            break;\n\n          case 0x6a703263:\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n\n          case 0x6a502020:\n            if ((0, _core_utils.readUint32)(data, position) !== 0x0d0a870a) {\n              (0, _util.warn)(\"Invalid JP2 signature\");\n            }\n\n            break;\n\n          case 0x6a501a1a:\n          case 0x66747970:\n          case 0x72726571:\n          case 0x72657320:\n          case 0x69686472:\n            break;\n\n          default:\n            var headerType = String.fromCharCode(tbox >> 24 & 0xff, tbox >> 16 & 0xff, tbox >> 8 & 0xff, tbox & 0xff);\n            (0, _util.warn)(\"Unsupported header type \" + tbox + \" (\" + headerType + \")\");\n            break;\n        }\n\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = oldByte << 8 | newByte;\n\n        if (code === 0xff51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0;\n          var Ysiz = stream.getInt32() >>> 0;\n          var XOsiz = stream.getInt32() >>> 0;\n          var YOsiz = stream.getInt32() >>> 0;\n          stream.skip(16);\n          var Csiz = stream.getUint16();\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n\n      throw new JpxError(\"No size marker found in JPX stream\");\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      var doNotRecover = false;\n\n      try {\n        var position = start;\n\n        while (position + 1 < end) {\n          var code = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          var length = 0,\n              j,\n              sqcd,\n              spqcds,\n              spqcdSize,\n              scalarExpounded,\n              tile;\n\n          switch (code) {\n            case 0xff4f:\n              context.mainHeader = true;\n              break;\n\n            case 0xffd9:\n              break;\n\n            case 0xff51:\n              length = (0, _core_utils.readUint16)(data, position);\n              var siz = {};\n              siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);\n              siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);\n              siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);\n              siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);\n              siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);\n              siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);\n              siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);\n              siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);\n              var componentsCount = (0, _core_utils.readUint16)(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7f) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 2]\n                };\n                j += 3;\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n\n            case 0xff5c:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcd.noQuantization = spqcdSize === 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                var spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcd.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n\n              break;\n\n            case 0xff5d:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = (0, _core_utils.readUint16)(data, j);\n                j += 2;\n              }\n\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcc.noQuantization = spqcdSize === 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcc.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n\n              break;\n\n            case 0xff52:\n              length = (0, _core_utils.readUint16)(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = (0, _core_utils.readUint16)(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xf) + 2;\n              cod.ycb = (data[j++] & 0xf) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticallyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xf,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n\n                cod.precinctsSizes = precinctsSizes;\n              }\n\n              var unsupported = [];\n\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push(\"selectiveArithmeticCodingBypass\");\n              }\n\n              if (cod.resetContextProbabilities) {\n                unsupported.push(\"resetContextProbabilities\");\n              }\n\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push(\"terminationOnEachCodingPass\");\n              }\n\n              if (cod.verticallyStripe) {\n                unsupported.push(\"verticallyStripe\");\n              }\n\n              if (cod.predictableTermination) {\n                unsupported.push(\"predictableTermination\");\n              }\n\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error(\"Unsupported COD options (\" + unsupported.join(\", \") + \")\");\n              }\n\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n\n              break;\n\n            case 0xff90:\n              length = (0, _core_utils.readUint16)(data, position);\n              tile = {};\n              tile.index = (0, _core_utils.readUint16)(data, position + 2);\n              tile.length = (0, _core_utils.readUint32)(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n              context.mainHeader = false;\n\n              if (tile.partIndex === 0) {\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0);\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0);\n              }\n\n              context.currentTile = tile;\n              break;\n\n            case 0xff93:\n              tile = context.currentTile;\n\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n\n            case 0xff55:\n            case 0xff57:\n            case 0xff58:\n            case 0xff64:\n              length = (0, _core_utils.readUint16)(data, position);\n              break;\n\n            case 0xff53:\n              throw new Error(\"Codestream code 0xFF53 (COC) is not implemented\");\n\n            default:\n              throw new Error(\"Unknown codestream code: \" + code.toString(16));\n          }\n\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw new JpxError(e.message);\n        } else {\n          (0, _util.warn)(\"JPX: Trying to recover from: \" + e.message);\n        }\n      }\n\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n\n  function calculateComponentDimensions(component, siz) {\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    var tile,\n        tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n\n    context.tiles = tiles;\n    var componentsCount = siz.Csiz;\n\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n\n    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n\n  function buildPrecincts(context, resolution, dimensions) {\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n    resolution.precinctParameters = {\n      precinctWidth,\n      precinctHeight,\n      numprecinctswide,\n      numprecinctshigh,\n      numprecincts,\n      precinctWidthInSubband,\n      precinctHeightInSubband\n    };\n  }\n\n  function buildCodeblocks(context, subband, dimensions) {\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n\n        codeblocks.push(codeblock);\n        var precinct = precincts[precinctNumber];\n\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n\n        codeblock.precinct = precinct;\n      }\n    }\n\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    var subbands = resolution.subbands;\n\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n\n    return {\n      layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0,\n        r = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        r = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0,\n        l = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        l = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n\n    for (c = 0; c < componentsCount; c++) {\n      const component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            const component = tile.components[c];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            if (p >= numprecincts) {\n              continue;\n            }\n\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n\n            l = 0;\n          }\n\n          c = 0;\n        }\n\n        p = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          c = 0;\n        }\n\n        px = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          px = 0;\n        }\n\n        py = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n\n    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n\n    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n    return posX / sizeInImageScale.height + startPrecinctRowIndex;\n  }\n\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n\n    return {\n      components: sizePerComponent,\n      minWidth,\n      minHeight,\n      maxNumWide,\n      maxNumHigh\n    };\n  }\n\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var resolutions = [];\n      var subbands = [];\n\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << decompositionLevelsCount - r;\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n        var subband;\n\n        if (r === 0) {\n          subband = {};\n          subband.type = \"LL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << decompositionLevelsCount - r + 1;\n          var resolutionSubbands = [];\n          subband = {};\n          subband.type = \"HL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"LH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"HH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n        break;\n\n      case 1:\n        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n        break;\n\n      case 2:\n        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n        break;\n\n      case 3:\n        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n        break;\n\n      case 4:\n        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n        break;\n\n      default:\n        throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n    }\n  }\n\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer,\n        bufferSize = 0,\n        skipNextBit = false;\n\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n\n        if (skipNextBit) {\n          buffer = buffer << 7 | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = buffer << 8 | b;\n          bufferSize += 8;\n        }\n\n        if (b === 0xff) {\n          skipNextBit = true;\n        }\n      }\n\n      bufferSize -= count;\n      return buffer >>> bufferSize & (1 << count) - 1;\n    }\n\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xff && data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xff && data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n\n      return false;\n    }\n\n    function skipBytes(count) {\n      position += count;\n    }\n\n    function alignToByte() {\n      bufferSize = 0;\n\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n\n      if (readBits(1) === 0) {\n        return 2;\n      }\n\n      var value = readBits(2);\n\n      if (value < 3) {\n        return value + 3;\n      }\n\n      value = readBits(5);\n\n      if (value < 31) {\n        return value + 6;\n      }\n\n      value = readBits(7);\n      return value + 37;\n    }\n\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n\n    while (position < dataLength) {\n      alignToByte();\n\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        skipBytes(4);\n      }\n\n      var packet = packetsIterator.nextPacket();\n\n      if (!readBits(1)) {\n        continue;\n      }\n\n      var layerNumber = packet.layerNumber;\n      var queue = [],\n          codeblock;\n\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n\n        if (codeblock.included !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n\n          if (precinct.inclusionTree !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                valueReady = !inclusionTree.nextLevel();\n\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n\n        if (!codeblockIncluded) {\n          continue;\n        }\n\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n\n        var codingpasses = readCodingpasses();\n\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n\n        var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);\n        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock,\n          codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n\n      alignToByte();\n\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n\n        if (codeblock.data === undefined) {\n          codeblock.data = [];\n        }\n\n        codeblock.data.push({\n          data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n\n    return position;\n  }\n\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n    var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n\n      if (codeblock.data === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2;\n      var data = codeblock.data,\n          totalLength = 0,\n          codingpasses = 0;\n      var j, jj, dataItem;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n\n      var encodedData = new Uint8Array(totalLength);\n      var position = 0;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropagationPass();\n            break;\n\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n\n          case 2:\n            bitModel.runCleanupPass();\n\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n\n            break;\n        }\n\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      var interleave = subband.type !== \"LL\";\n\n      for (j = 0; j < blockHeight; j++) {\n        var row = offset / width | 0;\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n\n            nb = bitsDecoded[position];\n            var pos = interleave ? levelOffset + (offset << 1) : offset;\n\n            if (reversible && nb >= mb) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << mb - nb);\n            }\n          }\n\n          offset++;\n          position++;\n        }\n\n        offset += width - blockWidth;\n      }\n    }\n  }\n\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n    var subbandCoefficients = [];\n    var b = 0;\n\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n\n        if (!scalarExpounded) {\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n        var delta = reversible ? 1 : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n        var mb = guardBits + epsilon - 1;\n        copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);\n      }\n\n      subbandCoefficients.push({\n        width,\n        height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n\n      var tile0 = transformedTiles[0];\n      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n      var shift, offset;\n      var pos = 0,\n          j,\n          jj,\n          y0,\n          y1,\n          y2;\n\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            out[pos++] = y0 + 1.402 * y2 >> shift;\n            out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;\n            out[pos++] = y0 + 1.772 * y1 >> shift;\n          }\n        } else {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            const g = y0 - (y2 + y1 >> 2);\n            out[pos++] = g + y2 >> shift;\n            out[pos++] = g >> shift;\n            out[pos++] = g + y1 >> shift;\n          }\n        }\n\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            out[pos] = y3items[j] + offset >> shift;\n          }\n        }\n      } else {\n        for (c = 0; c < componentsCount; c++) {\n          var items = transformedTiles[c].items;\n          shift = components[c].precision - 8;\n          offset = (128 << shift) + 0.5;\n\n          for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n            out[pos] = items[j] + offset >> shift;\n            pos += componentsCount;\n          }\n        }\n      }\n\n      resultImages.push(result);\n    }\n\n    return resultImages;\n  }\n\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  var TagTree = function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width,\n          height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0,\n            value = 0,\n            level;\n\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  }();\n\n  var InclusionTree = function InclusionTreeClosure() {\n    function InclusionTree(width, height, defaultValue) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = defaultValue;\n        }\n\n        var level = {\n          width,\n          height,\n          items\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value === 0xff) {\n            break;\n          }\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n\n        while (--levelIndex >= 0) {\n          level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xff;\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return InclusionTree;\n  }();\n\n  var BitModel = function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);\n    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);\n    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n      let contextLabelTable;\n\n      if (subband === \"HH\") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === \"HL\") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n\n      this.contextLabelTable = contextLabelTable;\n      var coefficientCount = width * height;\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n      var bitsDecoded = new Uint8Array(coefficientCount);\n\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n\n      this.bitsDecoded = bitsDecoded;\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        this.contexts = new Int8Array(19);\n        this.contexts[0] = 4 << 1 | 0;\n        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n      },\n      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width,\n            height = this.height;\n        var left = column > 0;\n        var right = column + 1 < width;\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n\n              if (i >= height) {\n                break;\n              }\n\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n\n        var horizontalContribution = 3 * contribution;\n        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n\n        return decoded;\n      },\n      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                var significance = neighborsSignificance[index] & 127;\n                contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0,\n                index = index0;\n            var i = i0,\n                sign;\n\n            if (allEmpty) {\n              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue;\n              }\n\n              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n              index = index0;\n\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n        if (symbol !== 0xa) {\n          throw new JpxError(\"Invalid segmentation symbol\");\n        }\n      }\n    };\n    return BitModel;\n  }();\n\n  var Transform = function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n\n      return ll;\n    };\n\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      var i1 = offset - 1,\n          j1 = offset + 1;\n      var i2 = offset + size - 2,\n          j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {\n      var llWidth = ll.width,\n          llHeight = ll.height,\n          llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n\n      llItems = ll.items = null;\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      if (width === 1) {\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n        }\n      }\n\n      var numBuffers = 16;\n      var colBuffers = [];\n\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n\n      var b,\n          currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      if (height === 1) {\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width,\n        height,\n        items\n      };\n    };\n\n    return Transform;\n  }();\n\n  var IrreversibleTransform = function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n\n    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n      j = offset - 3;\n\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      j = offset - 2;\n      current = delta * x[j - 1];\n\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset - 1;\n      current = gamma * x[j - 1];\n\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset;\n      current = beta * x[j - 1];\n\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  }();\n\n  var ReversibleTransform = function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n\n    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += x[j - 1] + x[j + 1] >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  }();\n\n  return JpxImage;\n}();\n\nexports.JpxImage = JpxImage;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateSHA512 = exports.calculateSHA384 = exports.calculateSHA256 = exports.calculateMD5 = exports.PDF20 = exports.PDF17 = exports.CipherTransformFactory = exports.ARCFourCipher = exports.AES256Cipher = exports.AES128Cipher = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar ARCFourCipher = function ARCFourCipherClosure() {\n  function ARCFourCipher(key) {\n    this.a = 0;\n    this.b = 0;\n    var s = new Uint8Array(256);\n    var i,\n        j = 0,\n        tmp,\n        keyLength = key.length;\n\n    for (i = 0; i < 256; ++i) {\n      s[i] = i;\n    }\n\n    for (i = 0; i < 256; ++i) {\n      tmp = s[i];\n      j = j + tmp + key[i % keyLength] & 0xff;\n      s[i] = s[j];\n      s[j] = tmp;\n    }\n\n    this.s = s;\n  }\n\n  ARCFourCipher.prototype = {\n    encryptBlock: function ARCFourCipher_encryptBlock(data) {\n      var i,\n          n = data.length,\n          tmp,\n          tmp2;\n      var a = this.a,\n          b = this.b,\n          s = this.s;\n      var output = new Uint8Array(n);\n\n      for (i = 0; i < n; ++i) {\n        a = a + 1 & 0xff;\n        tmp = s[a];\n        b = b + tmp & 0xff;\n        tmp2 = s[b];\n        s[a] = tmp2;\n        s[b] = tmp;\n        output[i] = data[i] ^ s[tmp + tmp2 & 0xff];\n      }\n\n      this.a = a;\n      this.b = b;\n      return output;\n    }\n  };\n  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;\n  return ARCFourCipher;\n}();\n\nexports.ARCFourCipher = ARCFourCipher;\n\nvar calculateMD5 = function calculateMD5Closure() {\n  var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n  var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);\n\n  function hash(data, offset, length) {\n    var h0 = 1732584193,\n        h1 = -271733879,\n        h2 = -1732584194,\n        h3 = 271733878;\n    var paddedLength = length + 72 & ~63;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = length << 3 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    var w = new Int32Array(16);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j, i += 4) {\n        w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          f,\n          g;\n\n      for (j = 0; j < 64; ++j) {\n        if (j < 16) {\n          f = b & c | ~b & d;\n          g = j;\n        } else if (j < 32) {\n          f = d & b | ~d & c;\n          g = 5 * j + 1 & 15;\n        } else if (j < 48) {\n          f = b ^ c ^ d;\n          g = 3 * j + 5 & 15;\n        } else {\n          f = c ^ (b | ~d);\n          g = 7 * j & 15;\n        }\n\n        var tmp = d,\n            rotateArg = a + f + k[j] + w[g] | 0,\n            rotate = r[j];\n        d = c;\n        c = b;\n        b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;\n        a = tmp;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n    }\n\n    return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateMD5 = calculateMD5;\n\nvar Word64 = function Word64Closure() {\n  function Word64(highInteger, lowInteger) {\n    this.high = highInteger | 0;\n    this.low = lowInteger | 0;\n  }\n\n  Word64.prototype = {\n    and: function Word64_and(word) {\n      this.high &= word.high;\n      this.low &= word.low;\n    },\n    xor: function Word64_xor(word) {\n      this.high ^= word.high;\n      this.low ^= word.low;\n    },\n    or: function Word64_or(word) {\n      this.high |= word.high;\n      this.low |= word.low;\n    },\n    shiftRight: function Word64_shiftRight(places) {\n      if (places >= 32) {\n        this.low = this.high >>> places - 32 | 0;\n        this.high = 0;\n      } else {\n        this.low = this.low >>> places | this.high << 32 - places;\n        this.high = this.high >>> places | 0;\n      }\n    },\n    shiftLeft: function Word64_shiftLeft(places) {\n      if (places >= 32) {\n        this.high = this.low << places - 32;\n        this.low = 0;\n      } else {\n        this.high = this.high << places | this.low >>> 32 - places;\n        this.low = this.low << places;\n      }\n    },\n    rotateRight: function Word64_rotateRight(places) {\n      var low, high;\n\n      if (places & 32) {\n        high = this.low;\n        low = this.high;\n      } else {\n        low = this.low;\n        high = this.high;\n      }\n\n      places &= 31;\n      this.low = low >>> places | high << 32 - places;\n      this.high = high >>> places | low << 32 - places;\n    },\n    not: function Word64_not() {\n      this.high = ~this.high;\n      this.low = ~this.low;\n    },\n    add: function Word64_add(word) {\n      var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n      var highAdd = (this.high >>> 0) + (word.high >>> 0);\n\n      if (lowAdd > 0xffffffff) {\n        highAdd += 1;\n      }\n\n      this.low = lowAdd | 0;\n      this.high = highAdd | 0;\n    },\n    copyTo: function Word64_copyTo(bytes, offset) {\n      bytes[offset] = this.high >>> 24 & 0xff;\n      bytes[offset + 1] = this.high >> 16 & 0xff;\n      bytes[offset + 2] = this.high >> 8 & 0xff;\n      bytes[offset + 3] = this.high & 0xff;\n      bytes[offset + 4] = this.low >>> 24 & 0xff;\n      bytes[offset + 5] = this.low >> 16 & 0xff;\n      bytes[offset + 6] = this.low >> 8 & 0xff;\n      bytes[offset + 7] = this.low & 0xff;\n    },\n    assign: function Word64_assign(word) {\n      this.high = word.high;\n      this.low = word.low;\n    }\n  };\n  return Word64;\n}();\n\nvar calculateSHA256 = function calculateSHA256Closure() {\n  function rotr(x, n) {\n    return x >>> n | x << 32 - n;\n  }\n\n  function ch(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  function maj(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  function sigma(x) {\n    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n  }\n\n  function sigmaPrime(x) {\n    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n  }\n\n  function littleSigma(x) {\n    return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;\n  }\n\n  function littleSigmaPrime(x) {\n    return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;\n  }\n\n  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function hash(data, offset, length) {\n    var h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a,\n        h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19;\n    var paddedLength = Math.ceil((length + 9) / 64) * 64;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Uint32Array(64);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        i += 4;\n      }\n\n      for (j = 16; j < 64; ++j) {\n        w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          e = h4,\n          f = h5,\n          g = h6,\n          h = h7,\n          t1,\n          t2;\n\n      for (j = 0; j < 64; ++j) {\n        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n        t2 = sigma(a) + maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n      h4 = h4 + e | 0;\n      h5 = h5 + f | 0;\n      h6 = h6 + g | 0;\n      h7 = h7 + h | 0;\n    }\n\n    return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA256 = calculateSHA256;\n\nvar calculateSHA512 = function calculateSHA512Closure() {\n  function ch(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.not();\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function maj(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.and(z);\n    result.xor(tmp);\n    tmp.assign(y);\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function sigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(28);\n    tmp.assign(x);\n    tmp.rotateRight(34);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(39);\n    result.xor(tmp);\n  }\n\n  function sigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(14);\n    tmp.assign(x);\n    tmp.rotateRight(18);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(41);\n    result.xor(tmp);\n  }\n\n  function littleSigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(1);\n    tmp.assign(x);\n    tmp.rotateRight(8);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(7);\n    result.xor(tmp);\n  }\n\n  function littleSigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(19);\n    tmp.assign(x);\n    tmp.rotateRight(61);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(6);\n    result.xor(tmp);\n  }\n\n  var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n\n  function hash(data, offset, length, mode384) {\n    mode384 = !!mode384;\n    var h0, h1, h2, h3, h4, h5, h6, h7;\n\n    if (!mode384) {\n      h0 = new Word64(0x6a09e667, 0xf3bcc908);\n      h1 = new Word64(0xbb67ae85, 0x84caa73b);\n      h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n      h4 = new Word64(0x510e527f, 0xade682d1);\n      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n      h7 = new Word64(0x5be0cd19, 0x137e2179);\n    } else {\n      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n      h1 = new Word64(0x629a292a, 0x367cd507);\n      h2 = new Word64(0x9159015a, 0x3070dd17);\n      h3 = new Word64(0x152fecd8, 0xf70e5939);\n      h4 = new Word64(0x67332667, 0xffc00b31);\n      h5 = new Word64(0x8eb44a87, 0x68581511);\n      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n      h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n    }\n\n    var paddedLength = Math.ceil((length + 17) / 128) * 128;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 16;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Array(80);\n\n    for (i = 0; i < 80; i++) {\n      w[i] = new Word64(0, 0);\n    }\n\n    var a = new Word64(0, 0),\n        b = new Word64(0, 0),\n        c = new Word64(0, 0);\n    var d = new Word64(0, 0),\n        e = new Word64(0, 0),\n        f = new Word64(0, 0);\n    var g = new Word64(0, 0),\n        h = new Word64(0, 0);\n    var t1 = new Word64(0, 0),\n        t2 = new Word64(0, 0);\n    var tmp1 = new Word64(0, 0),\n        tmp2 = new Word64(0, 0),\n        tmp3;\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];\n        i += 8;\n      }\n\n      for (j = 16; j < 80; ++j) {\n        tmp3 = w[j];\n        littleSigmaPrime(tmp3, w[j - 2], tmp2);\n        tmp3.add(w[j - 7]);\n        littleSigma(tmp1, w[j - 15], tmp2);\n        tmp3.add(tmp1);\n        tmp3.add(w[j - 16]);\n      }\n\n      a.assign(h0);\n      b.assign(h1);\n      c.assign(h2);\n      d.assign(h3);\n      e.assign(h4);\n      f.assign(h5);\n      g.assign(h6);\n      h.assign(h7);\n\n      for (j = 0; j < 80; ++j) {\n        t1.assign(h);\n        sigmaPrime(tmp1, e, tmp2);\n        t1.add(tmp1);\n        ch(tmp1, e, f, g, tmp2);\n        t1.add(tmp1);\n        t1.add(k[j]);\n        t1.add(w[j]);\n        sigma(t2, a, tmp2);\n        maj(tmp1, a, b, c, tmp2);\n        t2.add(tmp1);\n        tmp3 = h;\n        h = g;\n        g = f;\n        f = e;\n        d.add(t1);\n        e = d;\n        d = c;\n        c = b;\n        b = a;\n        tmp3.assign(t1);\n        tmp3.add(t2);\n        a = tmp3;\n      }\n\n      h0.add(a);\n      h1.add(b);\n      h2.add(c);\n      h3.add(d);\n      h4.add(e);\n      h5.add(f);\n      h6.add(g);\n      h7.add(h);\n    }\n\n    var result;\n\n    if (!mode384) {\n      result = new Uint8Array(64);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n      h6.copyTo(result, 48);\n      h7.copyTo(result, 56);\n    } else {\n      result = new Uint8Array(48);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n    }\n\n    return result;\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA512 = calculateSHA512;\n\nvar calculateSHA384 = function calculateSHA384Closure() {\n  function hash(data, offset, length) {\n    return calculateSHA512(data, offset, length, true);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA384 = calculateSHA384;\n\nvar NullCipher = function NullCipherClosure() {\n  function NullCipher() {}\n\n  NullCipher.prototype = {\n    decryptBlock: function NullCipher_decryptBlock(data) {\n      return data;\n    }\n  };\n  return NullCipher;\n}();\n\nclass AESBaseCipher {\n  constructor() {\n    if (this.constructor === AESBaseCipher) {\n      (0, _util.unreachable)(\"Cannot initialize AESBaseCipher.\");\n    }\n\n    this._s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n    this._inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n    this._mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);\n    this._mixCol = new Uint8Array(256);\n\n    for (let i = 0; i < 256; i++) {\n      if (i < 128) {\n        this._mixCol[i] = i << 1;\n      } else {\n        this._mixCol[i] = i << 1 ^ 0x1b;\n      }\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferPosition = 0;\n  }\n\n  _expandKey(cipherKey) {\n    (0, _util.unreachable)(\"Cannot call `_expandKey` on the base class\");\n  }\n\n  _decrypt(input, key) {\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n      t = state[13];\n      state[13] = state[9];\n      state[9] = state[5];\n      state[5] = state[1];\n      state[1] = t;\n      t = state[14];\n      u = state[10];\n      state[14] = state[6];\n      state[10] = state[2];\n      state[6] = t;\n      state[2] = u;\n      t = state[15];\n      u = state[11];\n      v = state[7];\n      state[15] = state[3];\n      state[11] = t;\n      state[7] = u;\n      state[3] = v;\n\n      for (let j = 0; j < 16; ++j) {\n        state[j] = this._inv_s[state[j]];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = this._mix[state[j]];\n        const s1 = this._mix[state[j + 1]];\n        const s2 = this._mix[state[j + 2]];\n        const s3 = this._mix[state[j + 3]];\n        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;\n        state[j] = t >>> 24 & 0xff;\n        state[j + 1] = t >> 16 & 0xff;\n        state[j + 2] = t >> 8 & 0xff;\n        state[j + 3] = t & 0xff;\n      }\n    }\n\n    t = state[13];\n    state[13] = state[9];\n    state[9] = state[5];\n    state[5] = state[1];\n    state[1] = t;\n    t = state[14];\n    u = state[10];\n    state[14] = state[6];\n    state[10] = state[2];\n    state[6] = t;\n    state[2] = u;\n    t = state[15];\n    u = state[11];\n    v = state[7];\n    state[15] = state[3];\n    state[11] = t;\n    state[7] = u;\n    state[3] = v;\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = this._inv_s[state[j]];\n      state[j] ^= key[j];\n    }\n\n    return state;\n  }\n\n  _encrypt(input, key) {\n    const s = this._s;\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] ^= key[j];\n    }\n\n    for (let i = 1; i < this._cyclesOfRepetition; i++) {\n      for (let j = 0; j < 16; ++j) {\n        state[j] = s[state[j]];\n      }\n\n      v = state[1];\n      state[1] = state[5];\n      state[5] = state[9];\n      state[9] = state[13];\n      state[13] = v;\n      v = state[2];\n      u = state[6];\n      state[2] = state[10];\n      state[6] = state[14];\n      state[10] = v;\n      state[14] = u;\n      v = state[3];\n      u = state[7];\n      t = state[11];\n      state[3] = state[15];\n      state[7] = v;\n      state[11] = u;\n      state[15] = t;\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = state[j + 0];\n        const s1 = state[j + 1];\n        const s2 = state[j + 2];\n        const s3 = state[j + 3];\n        t = s0 ^ s1 ^ s2 ^ s3;\n        state[j + 0] ^= t ^ this._mixCol[s0 ^ s1];\n        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];\n        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];\n        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n    }\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = s[state[j]];\n    }\n\n    v = state[1];\n    state[1] = state[5];\n    state[5] = state[9];\n    state[9] = state[13];\n    state[13] = v;\n    v = state[2];\n    u = state[6];\n    state[2] = state[10];\n    state[6] = state[14];\n    state[10] = v;\n    state[14] = u;\n    v = state[3];\n    u = state[7];\n    t = state[11];\n    state[3] = state[15];\n    state[7] = v;\n    state[11] = u;\n    state[15] = t;\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    return state;\n  }\n\n  _decryptBlock2(data, finalize) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n    let iv = this.iv;\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      const plain = this._decrypt(buffer, this._key);\n\n      for (let j = 0; j < 16; ++j) {\n        plain[j] ^= iv[j];\n      }\n\n      iv = buffer;\n      result.push(plain);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    let outputLength = 16 * result.length;\n\n    if (finalize) {\n      const lastBlock = result[result.length - 1];\n      let psLen = lastBlock[15];\n\n      if (psLen <= 16) {\n        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {\n          if (lastBlock[i] !== psLen) {\n            psLen = 0;\n            break;\n          }\n        }\n\n        outputLength -= psLen;\n        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n      }\n    }\n\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n  decryptBlock(data, finalize, iv = null) {\n    const sourceLength = data.length;\n    const buffer = this.buffer;\n    let bufferLength = this.bufferPosition;\n\n    if (iv) {\n      this.iv = iv;\n    } else {\n      for (let i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {\n        buffer[bufferLength] = data[i];\n      }\n\n      if (bufferLength < 16) {\n        this.bufferLength = bufferLength;\n        return new Uint8Array(0);\n      }\n\n      this.iv = buffer;\n      data = data.subarray(16);\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferLength = 0;\n    this.decryptBlock = this._decryptBlock2;\n    return this.decryptBlock(data, finalize);\n  }\n\n  encrypt(data, iv) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n\n    if (!iv) {\n      iv = new Uint8Array(16);\n    }\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      for (let j = 0; j < 16; ++j) {\n        buffer[j] ^= iv[j];\n      }\n\n      const cipher = this._encrypt(buffer, this._key);\n\n      iv = cipher;\n      result.push(cipher);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    const outputLength = 16 * result.length;\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n}\n\nclass AES128Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 10;\n    this._keySize = 160;\n    this._rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 176;\n    const s = this._s;\n    const rcon = this._rcon;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    for (let j = 16, i = 1; j < b; ++i) {\n      let t1 = result[j - 3];\n      let t2 = result[j - 2];\n      let t3 = result[j - 1];\n      let t4 = result[j - 4];\n      t1 = s[t1];\n      t2 = s[t2];\n      t3 = s[t3];\n      t4 = s[t4];\n      t1 = t1 ^ rcon[i];\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 16];\n        j++;\n        result[j] = t2 ^= result[j - 16];\n        j++;\n        result[j] = t3 ^= result[j - 16];\n        j++;\n        result[j] = t4 ^= result[j - 16];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES128Cipher = AES128Cipher;\n\nclass AES256Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 14;\n    this._keySize = 224;\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 240;\n    const s = this._s;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n    let r = 1;\n    let t1, t2, t3, t4;\n\n    for (let j = 32, i = 1; j < b; ++i) {\n      if (j % 32 === 16) {\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n      } else if (j % 32 === 0) {\n        t1 = result[j - 3];\n        t2 = result[j - 2];\n        t3 = result[j - 1];\n        t4 = result[j - 4];\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n        t1 = t1 ^ r;\n\n        if ((r <<= 1) >= 256) {\n          r = (r ^ 0x1b) & 0xff;\n        }\n      }\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 32];\n        j++;\n        result[j] = t2 ^= result[j - 32];\n        j++;\n        result[j] = t3 ^= result[j - 32];\n        j++;\n        result[j] = t4 ^= result[j - 32];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES256Cipher = AES256Cipher;\n\nvar PDF17 = function PDF17Closure() {\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function PDF17() {}\n\n  PDF17.prototype = {\n    checkOwnerPassword: function PDF17_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF17_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF17_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF17_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF17;\n}();\n\nexports.PDF17 = PDF17;\n\nvar PDF20 = function PDF20Closure() {\n  function concatArrays(array1, array2) {\n    var t = new Uint8Array(array1.length + array2.length);\n    t.set(array1, 0);\n    t.set(array2, array1.length);\n    return t;\n  }\n\n  function calculatePDF20Hash(password, input, userBytes) {\n    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n    var e = [0];\n    var i = 0;\n\n    while (i < 64 || e[e.length - 1] > i - 32) {\n      var arrayLength = password.length + k.length + userBytes.length;\n      var k1 = new Uint8Array(arrayLength * 64);\n      var array = concatArrays(password, k);\n      array = concatArrays(array, userBytes);\n\n      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {\n        k1.set(array, pos);\n      }\n\n      var cipher = new AES128Cipher(k.subarray(0, 16));\n      e = cipher.encrypt(k1, k.subarray(16, 32));\n      var remainder = 0;\n\n      for (var z = 0; z < 16; z++) {\n        remainder *= 256 % 3;\n        remainder %= 3;\n        remainder += (e[z] >>> 0) % 3;\n        remainder %= 3;\n      }\n\n      if (remainder === 0) {\n        k = calculateSHA256(e, 0, e.length);\n      } else if (remainder === 1) {\n        k = calculateSHA384(e, 0, e.length);\n      } else if (remainder === 2) {\n        k = calculateSHA512(e, 0, e.length);\n      }\n\n      i++;\n    }\n\n    return k.subarray(0, 32);\n  }\n\n  function PDF20() {}\n\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  PDF20.prototype = {\n    hash: function PDF20_hash(password, concatBytes, userBytes) {\n      return calculatePDF20Hash(password, concatBytes, userBytes);\n    },\n    checkOwnerPassword: function PDF20_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculatePDF20Hash(password, hashData, userBytes);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF20_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculatePDF20Hash(password, hashData, []);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF20_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculatePDF20Hash(password, hashData, userBytes);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF20_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculatePDF20Hash(password, hashData, []);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF20;\n}();\n\nexports.PDF20 = PDF20;\n\nvar CipherTransform = function CipherTransformClosure() {\n  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n    this.StringCipherConstructor = stringCipherConstructor;\n    this.StreamCipherConstructor = streamCipherConstructor;\n  }\n\n  CipherTransform.prototype = {\n    createStream: function CipherTransform_createStream(stream, length) {\n      var cipher = new this.StreamCipherConstructor();\n      return new _stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {\n        return cipher.decryptBlock(data, finalize);\n      });\n    },\n    decryptString: function CipherTransform_decryptString(s) {\n      var cipher = new this.StringCipherConstructor();\n      var data = (0, _util.stringToBytes)(s);\n      data = cipher.decryptBlock(data, true);\n      return (0, _util.bytesToString)(data);\n    }\n  };\n  return CipherTransform;\n}();\n\nvar CipherTransformFactory = function CipherTransformFactoryClosure() {\n  var defaultPasswordBytes = new Uint8Array([0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41, 0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08, 0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80, 0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);\n\n  function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {\n    if (password) {\n      var passwordLength = Math.min(127, password.length);\n      password = password.subarray(0, passwordLength);\n    } else {\n      password = [];\n    }\n\n    var pdfAlgorithm;\n\n    if (revision === 6) {\n      pdfAlgorithm = new PDF20();\n    } else {\n      pdfAlgorithm = new PDF17();\n    }\n\n    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {\n      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {\n      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n    }\n\n    return null;\n  }\n\n  function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {\n    var hashDataSize = 40 + ownerPassword.length + fileId.length;\n    var hashData = new Uint8Array(hashDataSize),\n        i = 0,\n        j,\n        n;\n\n    if (password) {\n      n = Math.min(32, password.length);\n\n      for (; i < n; ++i) {\n        hashData[i] = password[i];\n      }\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    for (j = 0, n = ownerPassword.length; j < n; ++j) {\n      hashData[i++] = ownerPassword[j];\n    }\n\n    hashData[i++] = flags & 0xff;\n    hashData[i++] = flags >> 8 & 0xff;\n    hashData[i++] = flags >> 16 & 0xff;\n    hashData[i++] = flags >>> 24 & 0xff;\n\n    for (j = 0, n = fileId.length; j < n; ++j) {\n      hashData[i++] = fileId[j];\n    }\n\n    if (revision >= 4 && !encryptMetadata) {\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, keyLengthInBytes);\n      }\n    }\n\n    var encryptionKey = hash.subarray(0, keyLengthInBytes);\n    var cipher, checkData;\n\n    if (revision >= 3) {\n      for (i = 0; i < 32; ++i) {\n        hashData[i] = defaultPasswordBytes[i];\n      }\n\n      for (j = 0, n = fileId.length; j < n; ++j) {\n        hashData[i++] = fileId[j];\n      }\n\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n      n = encryptionKey.length;\n      var derivedKey = new Uint8Array(n),\n          k;\n\n      for (j = 1; j <= 19; ++j) {\n        for (k = 0; k < n; ++k) {\n          derivedKey[k] = encryptionKey[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        checkData = cipher.encryptBlock(checkData);\n      }\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    } else {\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(defaultPasswordBytes);\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    }\n\n    return encryptionKey;\n  }\n\n  function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n    var hashData = new Uint8Array(32),\n        i = 0,\n        j,\n        n;\n    n = Math.min(32, password.length);\n\n    for (; i < n; ++i) {\n      hashData[i] = password[i];\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, hash.length);\n      }\n    }\n\n    var cipher, userPassword;\n\n    if (revision >= 3) {\n      userPassword = ownerPassword;\n      var derivedKey = new Uint8Array(keyLengthInBytes),\n          k;\n\n      for (j = 19; j >= 0; j--) {\n        for (k = 0; k < keyLengthInBytes; ++k) {\n          derivedKey[k] = hash[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        userPassword = cipher.encryptBlock(userPassword);\n      }\n    } else {\n      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n      userPassword = cipher.encryptBlock(ownerPassword);\n    }\n\n    return userPassword;\n  }\n\n  var identityName = _primitives.Name.get(\"Identity\");\n\n  function CipherTransformFactory(dict, fileId, password) {\n    var filter = dict.get(\"Filter\");\n\n    if (!(0, _primitives.isName)(filter, \"Standard\")) {\n      throw new _util.FormatError(\"unknown encryption method\");\n    }\n\n    this.dict = dict;\n    var algorithm = dict.get(\"V\");\n\n    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {\n      throw new _util.FormatError(\"unsupported encryption algorithm\");\n    }\n\n    this.algorithm = algorithm;\n    var keyLength = dict.get(\"Length\");\n\n    if (!keyLength) {\n      if (algorithm <= 3) {\n        keyLength = 40;\n      } else {\n        var cfDict = dict.get(\"CF\");\n        var streamCryptoName = dict.get(\"StmF\");\n\n        if ((0, _primitives.isDict)(cfDict) && (0, _primitives.isName)(streamCryptoName)) {\n          cfDict.suppressEncryption = true;\n          var handlerDict = cfDict.get(streamCryptoName.name);\n          keyLength = handlerDict && handlerDict.get(\"Length\") || 128;\n\n          if (keyLength < 40) {\n            keyLength <<= 3;\n          }\n        }\n      }\n    }\n\n    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n      throw new _util.FormatError(\"invalid key length\");\n    }\n\n    var ownerPassword = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(0, 32);\n    var userPassword = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 32);\n    var flags = dict.get(\"P\");\n    var revision = dict.get(\"R\");\n    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get(\"EncryptMetadata\") !== false;\n    this.encryptMetadata = encryptMetadata;\n    var fileIdBytes = (0, _util.stringToBytes)(fileId);\n    var passwordBytes;\n\n    if (password) {\n      if (revision === 6) {\n        try {\n          password = (0, _util.utf8StringToString)(password);\n        } catch (ex) {\n          (0, _util.warn)(\"CipherTransformFactory: \" + \"Unable to convert UTF8 encoded password.\");\n        }\n      }\n\n      passwordBytes = (0, _util.stringToBytes)(password);\n    }\n\n    var encryptionKey;\n\n    if (algorithm !== 5) {\n      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    } else {\n      var ownerValidationSalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(32, 40);\n      var ownerKeySalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(40, 48);\n      var uBytes = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 48);\n      var userValidationSalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(32, 40);\n      var userKeySalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(40, 48);\n      var ownerEncryption = (0, _util.stringToBytes)(dict.get(\"OE\"));\n      var userEncryption = (0, _util.stringToBytes)(dict.get(\"UE\"));\n      var perms = (0, _util.stringToBytes)(dict.get(\"Perms\"));\n      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);\n    }\n\n    if (!encryptionKey && !password) {\n      throw new _util.PasswordException(\"No password given\", _util.PasswordResponses.NEED_PASSWORD);\n    } else if (!encryptionKey && password) {\n      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);\n      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    }\n\n    if (!encryptionKey) {\n      throw new _util.PasswordException(\"Incorrect Password\", _util.PasswordResponses.INCORRECT_PASSWORD);\n    }\n\n    this.encryptionKey = encryptionKey;\n\n    if (algorithm >= 4) {\n      var cf = dict.get(\"CF\");\n\n      if ((0, _primitives.isDict)(cf)) {\n        cf.suppressEncryption = true;\n      }\n\n      this.cf = cf;\n      this.stmf = dict.get(\"StmF\") || identityName;\n      this.strf = dict.get(\"StrF\") || identityName;\n      this.eff = dict.get(\"EFF\") || this.stmf;\n    }\n  }\n\n  function buildObjectKey(num, gen, encryptionKey, isAes) {\n    var key = new Uint8Array(encryptionKey.length + 9),\n        i,\n        n;\n\n    for (i = 0, n = encryptionKey.length; i < n; ++i) {\n      key[i] = encryptionKey[i];\n    }\n\n    key[i++] = num & 0xff;\n    key[i++] = num >> 8 & 0xff;\n    key[i++] = num >> 16 & 0xff;\n    key[i++] = gen & 0xff;\n    key[i++] = gen >> 8 & 0xff;\n\n    if (isAes) {\n      key[i++] = 0x73;\n      key[i++] = 0x41;\n      key[i++] = 0x6c;\n      key[i++] = 0x54;\n    }\n\n    var hash = calculateMD5(key, 0, i);\n    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n  }\n\n  function buildCipherConstructor(cf, name, num, gen, key) {\n    if (!(0, _primitives.isName)(name)) {\n      throw new _util.FormatError(\"Invalid crypt filter name.\");\n    }\n\n    var cryptFilter = cf.get(name.name);\n    var cfm;\n\n    if (cryptFilter !== null && cryptFilter !== undefined) {\n      cfm = cryptFilter.get(\"CFM\");\n    }\n\n    if (!cfm || cfm.name === \"None\") {\n      return function cipherTransformFactoryBuildCipherConstructorNone() {\n        return new NullCipher();\n      };\n    }\n\n    if (cfm.name === \"V2\") {\n      return function cipherTransformFactoryBuildCipherConstructorV2() {\n        return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n      };\n    }\n\n    if (cfm.name === \"AESV2\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n        return new AES128Cipher(buildObjectKey(num, gen, key, true));\n      };\n    }\n\n    if (cfm.name === \"AESV3\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n        return new AES256Cipher(key);\n      };\n    }\n\n    throw new _util.FormatError(\"Unknown crypto method\");\n  }\n\n  CipherTransformFactory.prototype = {\n    createCipherTransform: function CipherTransformFactory_createCipherTransform(num, gen) {\n      if (this.algorithm === 4 || this.algorithm === 5) {\n        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));\n      }\n\n      var key = buildObjectKey(num, gen, this.encryptionKey, false);\n\n      var cipherConstructor = function buildCipherCipherConstructor() {\n        return new ARCFourCipher(key);\n      };\n\n      return new CipherTransform(cipherConstructor, cipherConstructor);\n    }\n  };\n  return CipherTransformFactory;\n}();\n\nexports.CipherTransformFactory = CipherTransformFactory;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorSpace = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nfunction resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n  const COMPONENTS = 3;\n  alpha01 = alpha01 !== 1 ? 0 : alpha01;\n  const xRatio = w1 / w2;\n  const yRatio = h1 / h2;\n  let newIndex = 0,\n      oldIndex;\n  const xScaled = new Uint16Array(w2);\n  const w1Scanline = w1 * COMPONENTS;\n\n  for (let i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n  }\n\n  for (let i = 0; i < h2; i++) {\n    const py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (let j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      newIndex += alpha01;\n    }\n  }\n}\n\nclass ColorSpace {\n  constructor(name, numComps) {\n    if (this.constructor === ColorSpace) {\n      (0, _util.unreachable)(\"Cannot initialize ColorSpace.\");\n    }\n\n    this.name = name;\n    this.numComps = numComps;\n  }\n\n  getRgb(src, srcOffset) {\n    const rgb = new Uint8ClampedArray(3);\n    this.getRgbItem(src, srcOffset, rgb, 0);\n    return rgb;\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbItem\");\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbBuffer\");\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getOutputLength\");\n  }\n\n  isPassthrough(bits) {\n    return false;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n  }\n\n  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {\n    const count = originalWidth * originalHeight;\n    let rgbBuf = null;\n    const numComponentColors = 1 << bpc;\n    const needsResizing = originalHeight !== height || originalWidth !== width;\n\n    if (this.isPassthrough(bpc)) {\n      rgbBuf = comps;\n    } else if (this.numComps === 1 && count > numComponentColors && this.name !== \"DeviceGray\" && this.name !== \"DeviceRGB\") {\n      const allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);\n\n      for (let i = 0; i < numComponentColors; i++) {\n        allColors[i] = i;\n      }\n\n      const colorMap = new Uint8ClampedArray(numComponentColors * 3);\n      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);\n\n      if (!needsResizing) {\n        let destPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          dest[destPos++] = colorMap[key];\n          dest[destPos++] = colorMap[key + 1];\n          dest[destPos++] = colorMap[key + 2];\n          destPos += alpha01;\n        }\n      } else {\n        rgbBuf = new Uint8Array(count * 3);\n        let rgbPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          rgbBuf[rgbPos++] = colorMap[key];\n          rgbBuf[rgbPos++] = colorMap[key + 1];\n          rgbBuf[rgbPos++] = colorMap[key + 2];\n        }\n      }\n    } else {\n      if (!needsResizing) {\n        this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);\n      } else {\n        rgbBuf = new Uint8ClampedArray(count * 3);\n        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);\n      }\n    }\n\n    if (rgbBuf) {\n      if (needsResizing) {\n        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);\n      } else {\n        let destPos = 0,\n            rgbPos = 0;\n\n        for (let i = 0, ii = width * actualHeight; i < ii; i++) {\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          destPos += alpha01;\n        }\n      }\n    }\n  }\n\n  get usesZeroToOneRange() {\n    return (0, _util.shadow)(this, \"usesZeroToOneRange\", true);\n  }\n\n  static parse(cs, xref, res, pdfFunctionFactory) {\n    const IR = this.parseToIR(cs, xref, res, pdfFunctionFactory);\n    return this.fromIR(IR);\n  }\n\n  static fromIR(IR) {\n    const name = Array.isArray(IR) ? IR[0] : IR;\n    let whitePoint, blackPoint, gamma;\n\n    switch (name) {\n      case \"DeviceGrayCS\":\n        return this.singletons.gray;\n\n      case \"DeviceRgbCS\":\n        return this.singletons.rgb;\n\n      case \"DeviceCmykCS\":\n        return this.singletons.cmyk;\n\n      case \"CalGrayCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        return new CalGrayCS(whitePoint, blackPoint, gamma);\n\n      case \"CalRGBCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        const matrix = IR[4];\n        return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n\n      case \"PatternCS\":\n        let basePatternCS = IR[1];\n\n        if (basePatternCS) {\n          basePatternCS = this.fromIR(basePatternCS);\n        }\n\n        return new PatternCS(basePatternCS);\n\n      case \"IndexedCS\":\n        const baseIndexedCS = IR[1];\n        const hiVal = IR[2];\n        const lookup = IR[3];\n        return new IndexedCS(this.fromIR(baseIndexedCS), hiVal, lookup);\n\n      case \"AlternateCS\":\n        const numComps = IR[1];\n        const alt = IR[2];\n        const tintFn = IR[3];\n        return new AlternateCS(numComps, this.fromIR(alt), tintFn);\n\n      case \"LabCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        const range = IR[3];\n        return new LabCS(whitePoint, blackPoint, range);\n\n      default:\n        throw new _util.FormatError(`Unknown colorspace name: ${name}`);\n    }\n  }\n\n  static parseToIR(cs, xref, res = null, pdfFunctionFactory) {\n    cs = xref.fetchIfRef(cs);\n\n    if ((0, _primitives.isName)(cs)) {\n      switch (cs.name) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n\n        case \"Pattern\":\n          return [\"PatternCS\", null];\n\n        default:\n          if ((0, _primitives.isDict)(res)) {\n            const colorSpaces = res.get(\"ColorSpace\");\n\n            if ((0, _primitives.isDict)(colorSpaces)) {\n              const resCS = colorSpaces.get(cs.name);\n\n              if (resCS) {\n                if ((0, _primitives.isName)(resCS)) {\n                  return this.parseToIR(resCS, xref, res, pdfFunctionFactory);\n                }\n\n                cs = resCS;\n                break;\n              }\n            }\n          }\n\n          throw new _util.FormatError(`unrecognized colorspace ${cs.name}`);\n      }\n    }\n\n    if (Array.isArray(cs)) {\n      const mode = xref.fetchIfRef(cs[0]).name;\n      let numComps, params, alt, whitePoint, blackPoint, gamma;\n\n      switch (mode) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n\n        case \"CalGray\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.get(\"Gamma\");\n          return [\"CalGrayCS\", whitePoint, blackPoint, gamma];\n\n        case \"CalRGB\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.getArray(\"Gamma\");\n          const matrix = params.getArray(\"Matrix\");\n          return [\"CalRGBCS\", whitePoint, blackPoint, gamma, matrix];\n\n        case \"ICCBased\":\n          const stream = xref.fetchIfRef(cs[1]);\n          const dict = stream.dict;\n          numComps = dict.get(\"N\");\n          alt = dict.get(\"Alternate\");\n\n          if (alt) {\n            const altIR = this.parseToIR(alt, xref, res, pdfFunctionFactory);\n            const altCS = this.fromIR(altIR, pdfFunctionFactory);\n\n            if (altCS.numComps === numComps) {\n              return altIR;\n            }\n\n            (0, _util.warn)(\"ICCBased color space: Ignoring incorrect /Alternate entry.\");\n          }\n\n          if (numComps === 1) {\n            return \"DeviceGrayCS\";\n          } else if (numComps === 3) {\n            return \"DeviceRgbCS\";\n          } else if (numComps === 4) {\n            return \"DeviceCmykCS\";\n          }\n\n          break;\n\n        case \"Pattern\":\n          let basePatternCS = cs[1] || null;\n\n          if (basePatternCS) {\n            basePatternCS = this.parseToIR(basePatternCS, xref, res, pdfFunctionFactory);\n          }\n\n          return [\"PatternCS\", basePatternCS];\n\n        case \"Indexed\":\n        case \"I\":\n          const baseIndexedCS = this.parseToIR(cs[1], xref, res, pdfFunctionFactory);\n          const hiVal = xref.fetchIfRef(cs[2]) + 1;\n          let lookup = xref.fetchIfRef(cs[3]);\n\n          if ((0, _primitives.isStream)(lookup)) {\n            lookup = lookup.getBytes();\n          }\n\n          return [\"IndexedCS\", baseIndexedCS, hiVal, lookup];\n\n        case \"Separation\":\n        case \"DeviceN\":\n          const name = xref.fetchIfRef(cs[1]);\n          numComps = Array.isArray(name) ? name.length : 1;\n          alt = this.parseToIR(cs[2], xref, res, pdfFunctionFactory);\n          const tintFn = pdfFunctionFactory.create(xref.fetchIfRef(cs[3]));\n          return [\"AlternateCS\", numComps, alt, tintFn];\n\n        case \"Lab\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          const range = params.getArray(\"Range\");\n          return [\"LabCS\", whitePoint, blackPoint, range];\n\n        default:\n          throw new _util.FormatError(`unimplemented color space object \"${mode}\"`);\n      }\n    }\n\n    throw new _util.FormatError(`unrecognized color space object: \"${cs}\"`);\n  }\n\n  static isDefaultDecode(decode, numComps) {\n    if (!Array.isArray(decode)) {\n      return true;\n    }\n\n    if (numComps * 2 !== decode.length) {\n      (0, _util.warn)(\"The decode map is not the correct length\");\n      return true;\n    }\n\n    for (let i = 0, ii = decode.length; i < ii; i += 2) {\n      if (decode[i] !== 0 || decode[i + 1] !== 1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static get singletons() {\n    return (0, _util.shadow)(this, \"singletons\", {\n      get gray() {\n        return (0, _util.shadow)(this, \"gray\", new DeviceGrayCS());\n      },\n\n      get rgb() {\n        return (0, _util.shadow)(this, \"rgb\", new DeviceRgbCS());\n      },\n\n      get cmyk() {\n        return (0, _util.shadow)(this, \"cmyk\", new DeviceCmykCS());\n      }\n\n    });\n  }\n\n}\n\nexports.ColorSpace = ColorSpace;\n\nclass AlternateCS extends ColorSpace {\n  constructor(numComps, base, tintFn) {\n    super(\"Alternate\", numComps);\n    this.base = base;\n    this.tintFn = tintFn;\n    this.tmpBuf = new Float32Array(base.numComps);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const tmpBuf = this.tmpBuf;\n    this.tintFn(src, srcOffset, tmpBuf, 0);\n    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const tintFn = this.tintFn;\n    const base = this.base;\n    const scale = 1 / ((1 << bits) - 1);\n    const baseNumComps = base.numComps;\n    const usesZeroToOneRange = base.usesZeroToOneRange;\n    const isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n    let pos = isPassthrough ? destOffset : 0;\n    const baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);\n    const numComps = this.numComps;\n    const scaled = new Float32Array(numComps);\n    const tinted = new Float32Array(baseNumComps);\n    let i, j;\n\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < numComps; j++) {\n        scaled[j] = src[srcOffset++] * scale;\n      }\n\n      tintFn(scaled, 0, tinted, 0);\n\n      if (usesZeroToOneRange) {\n        for (j = 0; j < baseNumComps; j++) {\n          baseBuf[pos++] = tinted[j] * 255;\n        }\n      } else {\n        base.getRgbItem(tinted, 0, baseBuf, pos);\n        pos += baseNumComps;\n      }\n    }\n\n    if (!isPassthrough) {\n      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);\n  }\n\n}\n\nclass PatternCS extends ColorSpace {\n  constructor(baseCS) {\n    super(\"Pattern\", null);\n    this.base = baseCS;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    (0, _util.unreachable)(\"Should not call PatternCS.isDefaultDecode\");\n  }\n\n}\n\nclass IndexedCS extends ColorSpace {\n  constructor(base, highVal, lookup) {\n    super(\"Indexed\", 1);\n    this.base = base;\n    this.highVal = highVal;\n    const baseNumComps = base.numComps;\n    const length = baseNumComps * highVal;\n\n    if ((0, _primitives.isStream)(lookup)) {\n      this.lookup = new Uint8Array(length);\n      const bytes = lookup.getBytes(length);\n      this.lookup.set(bytes);\n    } else if ((0, _util.isString)(lookup)) {\n      this.lookup = new Uint8Array(length);\n\n      for (let i = 0; i < length; ++i) {\n        this.lookup[i] = lookup.charCodeAt(i);\n      }\n    } else if (lookup instanceof Uint8Array) {\n      this.lookup = lookup;\n    } else {\n      throw new _util.FormatError(`Unrecognized lookup table: ${lookup}`);\n    }\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const numComps = this.base.numComps;\n    const start = src[srcOffset] * numComps;\n    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const base = this.base;\n    const numComps = base.numComps;\n    const outputDelta = base.getOutputLength(numComps, alpha01);\n    const lookup = this.lookup;\n\n    for (let i = 0; i < count; ++i) {\n      const lookupPos = src[srcOffset++] * numComps;\n      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n      destOffset += outputDelta;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    if (!Array.isArray(decodeMap)) {\n      return true;\n    }\n\n    if (decodeMap.length !== 2) {\n      (0, _util.warn)(\"Decode map length is not correct\");\n      return true;\n    }\n\n    if (!Number.isInteger(bpc) || bpc < 1) {\n      (0, _util.warn)(\"Bits per component is not correct\");\n      return true;\n    }\n\n    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n  }\n\n}\n\nclass DeviceGrayCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceGray\", 1);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const c = src[srcOffset] * 255;\n    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      const c = scale * src[j++];\n      dest[q++] = c;\n      dest[q++] = c;\n      dest[q++] = c;\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01);\n  }\n\n}\n\nclass DeviceRgbCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceRGB\", 3);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    dest[destOffset] = src[srcOffset] * 255;\n    dest[destOffset + 1] = src[srcOffset + 1] * 255;\n    dest[destOffset + 2] = src[srcOffset + 2] * 255;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (bits === 8 && alpha01 === 0) {\n      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n      return;\n    }\n\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01) / 3 | 0;\n  }\n\n  isPassthrough(bits) {\n    return bits === 8;\n  }\n\n}\n\nconst DeviceCmykCS = function DeviceCmykCSClosure() {\n  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n    const c = src[srcOffset] * srcScale;\n    const m = src[srcOffset + 1] * srcScale;\n    const y = src[srcOffset + 2] * srcScale;\n    const k = src[srcOffset + 3] * srcScale;\n    dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);\n    dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);\n    dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);\n  }\n\n  class DeviceCmykCS extends ColorSpace {\n    constructor() {\n      super(\"DeviceCMYK\", 4);\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(src, srcOffset, 1, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(src, srcOffset, scale, dest, destOffset);\n        srcOffset += 4;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength / 4 * (3 + alpha01) | 0;\n    }\n\n  }\n\n  return DeviceCmykCS;\n}();\n\nconst CalGrayCS = function CalGrayCSClosure() {\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = src[srcOffset] * scale;\n    const AG = A ** cs.G;\n    const L = cs.YW * AG;\n    const val = Math.max(295.8 * L ** 0.333333333333333333 - 40.8, 0);\n    dest[destOffset] = val;\n    dest[destOffset + 1] = val;\n    dest[destOffset + 2] = val;\n  }\n\n  class CalGrayCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma) {\n      super(\"CalGray\", 1);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalGray\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      gamma = gamma || 1;\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n      this.G = gamma;\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name}, falling back to default.`);\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {\n        (0, _util.warn)(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` + `ZB: ${this.ZB}, only default values are supported.`);\n      }\n\n      if (this.G < 1) {\n        (0, _util.info)(`Invalid Gamma: ${this.G} for ${this.name}, ` + \"falling back to default.\");\n        this.G = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 1;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01);\n    }\n\n  }\n\n  return CalGrayCS;\n}();\n\nconst CalRGBCS = function CalRGBCSClosure() {\n  const BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);\n  const BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);\n  const SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);\n  const FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n  const tempNormalizeMatrix = new Float32Array(3);\n  const tempConvertMatrix1 = new Float32Array(3);\n  const tempConvertMatrix2 = new Float32Array(3);\n  const DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;\n\n  function matrixProduct(a, b, result) {\n    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n  }\n\n  function convertToFlat(sourceWhitePoint, LMS, result) {\n    result[0] = LMS[0] * 1 / sourceWhitePoint[0];\n    result[1] = LMS[1] * 1 / sourceWhitePoint[1];\n    result[2] = LMS[2] * 1 / sourceWhitePoint[2];\n  }\n\n  function convertToD65(sourceWhitePoint, LMS, result) {\n    const D65X = 0.95047;\n    const D65Y = 1;\n    const D65Z = 1.08883;\n    result[0] = LMS[0] * D65X / sourceWhitePoint[0];\n    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];\n    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];\n  }\n\n  function sRGBTransferFunction(color) {\n    if (color <= 0.0031308) {\n      return adjustToRange(0, 1, 12.92 * color);\n    }\n\n    return adjustToRange(0, 1, (1 + 0.055) * color ** (1 / 2.4) - 0.055);\n  }\n\n  function adjustToRange(min, max, value) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  function decodeL(L) {\n    if (L < 0) {\n      return -decodeL(-L);\n    }\n\n    if (L > 8.0) {\n      return ((L + 16) / 116) ** 3;\n    }\n\n    return L * DECODE_L_CONSTANT;\n  }\n\n  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {\n      result[0] = XYZ_Flat[0];\n      result[1] = XYZ_Flat[1];\n      result[2] = XYZ_Flat[2];\n      return;\n    }\n\n    const zeroDecodeL = decodeL(0);\n    const X_DST = zeroDecodeL;\n    const X_SRC = decodeL(sourceBlackPoint[0]);\n    const Y_DST = zeroDecodeL;\n    const Y_SRC = decodeL(sourceBlackPoint[1]);\n    const Z_DST = zeroDecodeL;\n    const Z_SRC = decodeL(sourceBlackPoint[2]);\n    const X_Scale = (1 - X_DST) / (1 - X_SRC);\n    const X_Offset = 1 - X_Scale;\n    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n    const Y_Offset = 1 - Y_Scale;\n    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n    const Z_Offset = 1 - Z_Scale;\n    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n  }\n\n  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n      result[0] = XYZ_In[0];\n      result[1] = XYZ_In[1];\n      result[2] = XYZ_In[2];\n      return;\n    }\n\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_Flat = tempNormalizeMatrix;\n    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n  }\n\n  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_D65 = tempNormalizeMatrix;\n    convertToD65(sourceWhitePoint, LMS, LMS_D65);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n  }\n\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = adjustToRange(0, 1, src[srcOffset] * scale);\n    const B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n    const C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n    const AGR = A ** cs.GR;\n    const BGG = B ** cs.GG;\n    const CGB = C ** cs.GB;\n    const X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n    const Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n    const Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n    const XYZ = tempConvertMatrix1;\n    XYZ[0] = X;\n    XYZ[1] = Y;\n    XYZ[2] = Z;\n    const XYZ_Flat = tempConvertMatrix2;\n    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n    const XYZ_Black = tempConvertMatrix1;\n    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n    const XYZ_D65 = tempConvertMatrix2;\n    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n    const SRGB = tempConvertMatrix1;\n    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n    dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n    dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n    dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n  }\n\n  class CalRGBCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma, matrix) {\n      super(\"CalRGB\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalRGB\");\n      }\n\n      blackPoint = blackPoint || new Float32Array(3);\n      gamma = gamma || new Float32Array([1, 1, 1]);\n      matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const XW = whitePoint[0];\n      const YW = whitePoint[1];\n      const ZW = whitePoint[2];\n      this.whitePoint = whitePoint;\n      const XB = blackPoint[0];\n      const YB = blackPoint[1];\n      const ZB = blackPoint[2];\n      this.blackPoint = blackPoint;\n      this.GR = gamma[0];\n      this.GG = gamma[1];\n      this.GB = gamma[2];\n      this.MXA = matrix[0];\n      this.MYA = matrix[1];\n      this.MZA = matrix[2];\n      this.MXB = matrix[3];\n      this.MYB = matrix[4];\n      this.MZB = matrix[5];\n      this.MXC = matrix[6];\n      this.MYC = matrix[7];\n      this.MZC = matrix[8];\n\n      if (XW < 0 || ZW < 0 || YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (XB < 0 || YB < 0 || ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` + \"falling back to default.\");\n        this.blackPoint = new Float32Array(3);\n      }\n\n      if (this.GR < 0 || this.GG < 0 || this.GB < 0) {\n        (0, _util.info)(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` + `${this.name}, falling back to default.`);\n        this.GR = this.GG = this.GB = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n  }\n\n  return CalRGBCS;\n}();\n\nconst LabCS = function LabCSClosure() {\n  function fn_g(x) {\n    let result;\n\n    if (x >= 6 / 29) {\n      result = x * x * x;\n    } else {\n      result = 108 / 841 * (x - 4 / 29);\n    }\n\n    return result;\n  }\n\n  function decode(value, high1, low2, high2) {\n    return low2 + value * (high2 - low2) / high1;\n  }\n\n  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n    let Ls = src[srcOffset];\n    let as = src[srcOffset + 1];\n    let bs = src[srcOffset + 2];\n\n    if (maxVal !== false) {\n      Ls = decode(Ls, maxVal, 0, 100);\n      as = decode(as, maxVal, cs.amin, cs.amax);\n      bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n    }\n\n    if (as > cs.amax) {\n      as = cs.amax;\n    } else if (as < cs.amin) {\n      as = cs.amin;\n    }\n\n    if (bs > cs.bmax) {\n      bs = cs.bmax;\n    } else if (bs < cs.bmin) {\n      bs = cs.bmin;\n    }\n\n    const M = (Ls + 16) / 116;\n    const L = M + as / 500;\n    const N = M - bs / 200;\n    const X = cs.XW * fn_g(L);\n    const Y = cs.YW * fn_g(M);\n    const Z = cs.ZW * fn_g(N);\n    let r, g, b;\n\n    if (cs.ZW < 1) {\n      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n      b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n    } else {\n      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n      b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n    }\n\n    dest[destOffset] = Math.sqrt(r) * 255;\n    dest[destOffset + 1] = Math.sqrt(g) * 255;\n    dest[destOffset + 2] = Math.sqrt(b) * 255;\n  }\n\n  class LabCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, range) {\n      super(\"Lab\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space Lab\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      range = range || [-100, 100, -100, 100];\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.amin = range[0];\n      this.amax = range[1];\n      this.bmin = range[2];\n      this.bmax = range[3];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(\"Invalid WhitePoint components, no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(\"Invalid BlackPoint, falling back to default\");\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.amin > this.amax || this.bmin > this.bmax) {\n        (0, _util.info)(\"Invalid Range, falling back to defaults\");\n        this.amin = -100;\n        this.amax = 100;\n        this.bmin = -100;\n        this.bmax = 100;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, false, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const maxVal = (1 << bits) - 1;\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n    isDefaultDecode(decodeMap, bpc) {\n      return true;\n    }\n\n    get usesZeroToOneRange() {\n      return (0, _util.shadow)(this, \"usesZeroToOneRange\", false);\n    }\n\n  }\n\n  return LabCS;\n}();\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GlobalImageCache = exports.LocalImageCache = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nclass LocalImageCache {\n  constructor() {\n    this._nameRefMap = new Map();\n    this._imageMap = new Map();\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  getByName(name) {\n    const ref = this._nameRefMap.get(name);\n\n    if (ref) {\n      return this.getByRef(ref);\n    }\n\n    return this._imageMap.get(name) || null;\n  }\n\n  getByRef(ref) {\n    return this._imageCache.get(ref) || null;\n  }\n\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error('LocalImageCache.set - expected \"name\" argument.');\n    }\n\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n\n      this._nameRefMap.set(name, ref);\n\n      this._imageCache.put(ref, data);\n\n      return;\n    }\n\n    if (this._imageMap.has(name)) {\n      return;\n    }\n\n    this._imageMap.set(name, data);\n  }\n\n}\n\nexports.LocalImageCache = LocalImageCache;\n\nclass GlobalImageCache {\n  static get NUM_PAGES_THRESHOLD() {\n    return (0, _util.shadow)(this, \"NUM_PAGES_THRESHOLD\", 2);\n  }\n\n  static get MAX_IMAGES_TO_CACHE() {\n    return (0, _util.shadow)(this, \"MAX_IMAGES_TO_CACHE\", 10);\n  }\n\n  constructor() {\n    this._refCache = new _primitives.RefSetCache();\n    this._imageCache = new _primitives.RefSetCache();\n  }\n\n  shouldCache(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n\n    const numPages = pageIndexSet ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1) : 1;\n\n    if (numPages < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return false;\n    }\n\n    if (!this._imageCache.has(ref) && this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      return false;\n    }\n\n    return true;\n  }\n\n  addPageIndex(ref, pageIndex) {\n    let pageIndexSet = this._refCache.get(ref);\n\n    if (!pageIndexSet) {\n      pageIndexSet = new Set();\n\n      this._refCache.put(ref, pageIndexSet);\n    }\n\n    pageIndexSet.add(pageIndex);\n  }\n\n  getData(ref, pageIndex) {\n    if (!this._refCache.has(ref)) {\n      return null;\n    }\n\n    const pageIndexSet = this._refCache.get(ref);\n\n    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return null;\n    }\n\n    if (!this._imageCache.has(ref)) {\n      return null;\n    }\n\n    pageIndexSet.add(pageIndex);\n    return this._imageCache.get(ref);\n  }\n\n  setData(ref, data) {\n    if (!this._refCache.has(ref)) {\n      throw new Error('GlobalImageCache.setData - expected \"addPageIndex\" to have been called.');\n    }\n\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n\n    if (this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      (0, _util.info)(\"GlobalImageCache.setData - ignoring image above MAX_IMAGES_TO_CACHE.\");\n      return;\n    }\n\n    this._imageCache.put(ref, data);\n  }\n\n  clear(onlyData = false) {\n    if (!onlyData) {\n      this._refCache.clear();\n    }\n\n    this._imageCache.clear();\n  }\n\n}\n\nexports.GlobalImageCache = GlobalImageCache;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQuadPoints = getQuadPoints;\nexports.MarkupAnnotation = exports.AnnotationFactory = exports.AnnotationBorderStyle = exports.Annotation = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(10);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _operator_list = __w_pdfjs_require__(26);\n\nvar _stream = __w_pdfjs_require__(12);\n\nclass AnnotationFactory {\n  static create(xref, ref, pdfManager, idFactory) {\n    return pdfManager.ensure(this, \"_create\", [xref, ref, pdfManager, idFactory]);\n  }\n\n  static _create(xref, ref, pdfManager, idFactory) {\n    const dict = xref.fetchIfRef(ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return undefined;\n    }\n\n    const id = (0, _primitives.isRef)(ref) ? ref.toString() : `annot_${idFactory.createObjId()}`;\n    let subtype = dict.get(\"Subtype\");\n    subtype = (0, _primitives.isName)(subtype) ? subtype.name : null;\n    const parameters = {\n      xref,\n      dict,\n      subtype,\n      id,\n      pdfManager\n    };\n\n    switch (subtype) {\n      case \"Link\":\n        return new LinkAnnotation(parameters);\n\n      case \"Text\":\n        return new TextAnnotation(parameters);\n\n      case \"Widget\":\n        let fieldType = (0, _core_utils.getInheritableProperty)({\n          dict,\n          key: \"FT\"\n        });\n        fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotation(parameters);\n\n          case \"Btn\":\n            return new ButtonWidgetAnnotation(parameters);\n\n          case \"Ch\":\n            return new ChoiceWidgetAnnotation(parameters);\n        }\n\n        (0, _util.warn)('Unimplemented widget field type \"' + fieldType + '\", ' + \"falling back to base field type.\");\n        return new WidgetAnnotation(parameters);\n\n      case \"Popup\":\n        return new PopupAnnotation(parameters);\n\n      case \"FreeText\":\n        return new FreeTextAnnotation(parameters);\n\n      case \"Line\":\n        return new LineAnnotation(parameters);\n\n      case \"Square\":\n        return new SquareAnnotation(parameters);\n\n      case \"Circle\":\n        return new CircleAnnotation(parameters);\n\n      case \"PolyLine\":\n        return new PolylineAnnotation(parameters);\n\n      case \"Polygon\":\n        return new PolygonAnnotation(parameters);\n\n      case \"Caret\":\n        return new CaretAnnotation(parameters);\n\n      case \"Ink\":\n        return new InkAnnotation(parameters);\n\n      case \"Highlight\":\n        return new HighlightAnnotation(parameters);\n\n      case \"Underline\":\n        return new UnderlineAnnotation(parameters);\n\n      case \"Squiggly\":\n        return new SquigglyAnnotation(parameters);\n\n      case \"StrikeOut\":\n        return new StrikeOutAnnotation(parameters);\n\n      case \"Stamp\":\n        return new StampAnnotation(parameters);\n\n      case \"FileAttachment\":\n        return new FileAttachmentAnnotation(parameters);\n\n      default:\n        if (!subtype) {\n          (0, _util.warn)(\"Annotation is missing the required /Subtype.\");\n        } else {\n          (0, _util.warn)('Unimplemented annotation type \"' + subtype + '\", ' + \"falling back to base annotation.\");\n        }\n\n        return new Annotation(parameters);\n    }\n  }\n\n}\n\nexports.AnnotationFactory = AnnotationFactory;\n\nfunction getQuadPoints(dict, rect) {\n  if (!dict.has(\"QuadPoints\")) {\n    return null;\n  }\n\n  const quadPoints = dict.getArray(\"QuadPoints\");\n\n  if (!Array.isArray(quadPoints) || quadPoints.length % 8 > 0) {\n    return null;\n  }\n\n  const quadPointsLists = [];\n\n  for (let i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n    quadPointsLists.push([]);\n\n    for (let j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n      const x = quadPoints[j];\n      const y = quadPoints[j + 1];\n\n      if (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3]) {\n        return null;\n      }\n\n      quadPointsLists[i].push({\n        x,\n        y\n      });\n    }\n  }\n\n  return quadPointsLists;\n}\n\nfunction getTransformMatrix(rect, bbox, matrix) {\n  const [minX, minY, maxX, maxY] = _util.Util.getAxialAlignedBoundingBox(bbox, matrix);\n\n  if (minX === maxX || minY === maxY) {\n    return [1, 0, 0, 1, rect[0], rect[1]];\n  }\n\n  const xRatio = (rect[2] - rect[0]) / (maxX - minX);\n  const yRatio = (rect[3] - rect[1]) / (maxY - minY);\n  return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];\n}\n\nclass Annotation {\n  constructor(params) {\n    const dict = params.dict;\n    this.setContents(dict.get(\"Contents\"));\n    this.setModificationDate(dict.get(\"M\"));\n    this.setFlags(dict.get(\"F\"));\n    this.setRectangle(dict.getArray(\"Rect\"));\n    this.setColor(dict.getArray(\"C\"));\n    this.setBorderStyle(dict);\n    this.setAppearance(dict);\n    this.data = {\n      annotationFlags: this.flags,\n      borderStyle: this.borderStyle,\n      color: this.color,\n      contents: this.contents,\n      hasAppearance: !!this.appearance,\n      id: params.id,\n      modificationDate: this.modificationDate,\n      rect: this.rectangle,\n      subtype: params.subtype\n    };\n  }\n\n  _hasFlag(flags, flag) {\n    return !!(flags & flag);\n  }\n\n  _isViewable(flags) {\n    return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.HIDDEN) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);\n  }\n\n  _isPrintable(flags) {\n    return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.HIDDEN);\n  }\n\n  get viewable() {\n    if (this.flags === 0) {\n      return true;\n    }\n\n    return this._isViewable(this.flags);\n  }\n\n  get printable() {\n    if (this.flags === 0) {\n      return false;\n    }\n\n    return this._isPrintable(this.flags);\n  }\n\n  setContents(contents) {\n    this.contents = (0, _util.stringToPDFString)(contents || \"\");\n  }\n\n  setModificationDate(modificationDate) {\n    this.modificationDate = (0, _util.isString)(modificationDate) ? modificationDate : null;\n  }\n\n  setFlags(flags) {\n    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n  }\n\n  hasFlag(flag) {\n    return this._hasFlag(this.flags, flag);\n  }\n\n  setRectangle(rectangle) {\n    if (Array.isArray(rectangle) && rectangle.length === 4) {\n      this.rectangle = _util.Util.normalizeRect(rectangle);\n    } else {\n      this.rectangle = [0, 0, 0, 0];\n    }\n  }\n\n  setColor(color) {\n    const rgbColor = new Uint8ClampedArray(3);\n\n    if (!Array.isArray(color)) {\n      this.color = rgbColor;\n      return;\n    }\n\n    switch (color.length) {\n      case 0:\n        this.color = null;\n        break;\n\n      case 1:\n        _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 3:\n        _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 4:\n        _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      default:\n        this.color = rgbColor;\n        break;\n    }\n  }\n\n  setBorderStyle(borderStyle) {\n    this.borderStyle = new AnnotationBorderStyle();\n\n    if (!(0, _primitives.isDict)(borderStyle)) {\n      return;\n    }\n\n    if (borderStyle.has(\"BS\")) {\n      const dict = borderStyle.get(\"BS\");\n      const dictType = dict.get(\"Type\");\n\n      if (!dictType || (0, _primitives.isName)(dictType, \"Border\")) {\n        this.borderStyle.setWidth(dict.get(\"W\"), this.rectangle);\n        this.borderStyle.setStyle(dict.get(\"S\"));\n        this.borderStyle.setDashArray(dict.getArray(\"D\"));\n      }\n    } else if (borderStyle.has(\"Border\")) {\n      const array = borderStyle.getArray(\"Border\");\n\n      if (Array.isArray(array) && array.length >= 3) {\n        this.borderStyle.setHorizontalCornerRadius(array[0]);\n        this.borderStyle.setVerticalCornerRadius(array[1]);\n        this.borderStyle.setWidth(array[2], this.rectangle);\n\n        if (array.length === 4) {\n          this.borderStyle.setDashArray(array[3]);\n        }\n      }\n    } else {\n      this.borderStyle.setWidth(0);\n    }\n  }\n\n  setAppearance(dict) {\n    this.appearance = null;\n    const appearanceStates = dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get(\"N\");\n\n    if ((0, _primitives.isStream)(normalAppearanceState)) {\n      this.appearance = normalAppearanceState;\n      return;\n    }\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    const as = dict.get(\"AS\");\n\n    if (!(0, _primitives.isName)(as) || !normalAppearanceState.has(as.name)) {\n      return;\n    }\n\n    this.appearance = normalAppearanceState.get(as.name);\n  }\n\n  loadResources(keys) {\n    return this.appearance.dict.getAsync(\"Resources\").then(resources => {\n      if (!resources) {\n        return undefined;\n      }\n\n      const objectLoader = new _obj.ObjectLoader(resources, keys, resources.xref);\n      return objectLoader.load().then(function () {\n        return resources;\n      });\n    });\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (!this.appearance) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    const data = this.data;\n    const appearanceDict = this.appearance.dict;\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const bbox = appearanceDict.getArray(\"BBox\") || [0, 0, 1, 1];\n    const matrix = appearanceDict.getArray(\"Matrix\") || [1, 0, 0, 1, 0, 0];\n    const transform = getTransformMatrix(data.rect, bbox, matrix);\n    return resourcesPromise.then(resources => {\n      const opList = new _operator_list.OperatorList();\n      opList.addOp(_util.OPS.beginAnnotation, [data.rect, transform, matrix]);\n      return evaluator.getOperatorList({\n        stream: this.appearance,\n        task,\n        resources,\n        operatorList: opList\n      }).then(() => {\n        opList.addOp(_util.OPS.endAnnotation, []);\n        this.appearance.reset();\n        return opList;\n      });\n    });\n  }\n\n}\n\nexports.Annotation = Annotation;\n\nclass AnnotationBorderStyle {\n  constructor() {\n    this.width = 1;\n    this.style = _util.AnnotationBorderStyleType.SOLID;\n    this.dashArray = [3];\n    this.horizontalCornerRadius = 0;\n    this.verticalCornerRadius = 0;\n  }\n\n  setWidth(width, rect = [0, 0, 0, 0]) {\n    if ((0, _primitives.isName)(width)) {\n      this.width = 0;\n      return;\n    }\n\n    if (Number.isInteger(width)) {\n      if (width > 0) {\n        const maxWidth = (rect[2] - rect[0]) / 2;\n        const maxHeight = (rect[3] - rect[1]) / 2;\n\n        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {\n          (0, _util.warn)(`AnnotationBorderStyle.setWidth - ignoring width: ${width}`);\n          width = 1;\n        }\n      }\n\n      this.width = width;\n    }\n  }\n\n  setStyle(style) {\n    if (!(0, _primitives.isName)(style)) {\n      return;\n    }\n\n    switch (style.name) {\n      case \"S\":\n        this.style = _util.AnnotationBorderStyleType.SOLID;\n        break;\n\n      case \"D\":\n        this.style = _util.AnnotationBorderStyleType.DASHED;\n        break;\n\n      case \"B\":\n        this.style = _util.AnnotationBorderStyleType.BEVELED;\n        break;\n\n      case \"I\":\n        this.style = _util.AnnotationBorderStyleType.INSET;\n        break;\n\n      case \"U\":\n        this.style = _util.AnnotationBorderStyleType.UNDERLINE;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setDashArray(dashArray) {\n    if (Array.isArray(dashArray) && dashArray.length > 0) {\n      let isValid = true;\n      let allZeros = true;\n\n      for (const element of dashArray) {\n        const validNumber = +element >= 0;\n\n        if (!validNumber) {\n          isValid = false;\n          break;\n        } else if (element > 0) {\n          allZeros = false;\n        }\n      }\n\n      if (isValid && !allZeros) {\n        this.dashArray = dashArray;\n      } else {\n        this.width = 0;\n      }\n    } else if (dashArray) {\n      this.width = 0;\n    }\n  }\n\n  setHorizontalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.horizontalCornerRadius = radius;\n    }\n  }\n\n  setVerticalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.verticalCornerRadius = radius;\n    }\n  }\n\n}\n\nexports.AnnotationBorderStyle = AnnotationBorderStyle;\n\nclass MarkupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    const dict = parameters.dict;\n\n    if (dict.has(\"IRT\")) {\n      const rawIRT = dict.getRaw(\"IRT\");\n      this.data.inReplyTo = (0, _primitives.isRef)(rawIRT) ? rawIRT.toString() : null;\n      const rt = dict.get(\"RT\");\n      this.data.replyType = (0, _primitives.isName)(rt) ? rt.name : _util.AnnotationReplyType.REPLY;\n    }\n\n    if (this.data.replyType === _util.AnnotationReplyType.GROUP) {\n      const parent = dict.get(\"IRT\");\n      this.data.title = (0, _util.stringToPDFString)(parent.get(\"T\") || \"\");\n      this.setContents(parent.get(\"Contents\"));\n      this.data.contents = this.contents;\n\n      if (!parent.has(\"CreationDate\")) {\n        this.data.creationDate = null;\n      } else {\n        this.setCreationDate(parent.get(\"CreationDate\"));\n        this.data.creationDate = this.creationDate;\n      }\n\n      if (!parent.has(\"M\")) {\n        this.data.modificationDate = null;\n      } else {\n        this.setModificationDate(parent.get(\"M\"));\n        this.data.modificationDate = this.modificationDate;\n      }\n\n      this.data.hasPopup = parent.has(\"Popup\");\n\n      if (!parent.has(\"C\")) {\n        this.data.color = null;\n      } else {\n        this.setColor(parent.getArray(\"C\"));\n        this.data.color = this.color;\n      }\n    } else {\n      this.data.title = (0, _util.stringToPDFString)(dict.get(\"T\") || \"\");\n      this.setCreationDate(dict.get(\"CreationDate\"));\n      this.data.creationDate = this.creationDate;\n      this.data.hasPopup = dict.has(\"Popup\");\n\n      if (!dict.has(\"C\")) {\n        this.data.color = null;\n      }\n    }\n  }\n\n  setCreationDate(creationDate) {\n    this.creationDate = (0, _util.isString)(creationDate) ? creationDate : null;\n  }\n\n}\n\nexports.MarkupAnnotation = MarkupAnnotation;\n\nclass WidgetAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    const data = this.data;\n    data.annotationType = _util.AnnotationType.WIDGET;\n    data.fieldName = this._constructFieldName(dict);\n    data.fieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"V\",\n      getArray: true\n    });\n    data.alternativeText = (0, _util.stringToPDFString)(dict.get(\"TU\") || \"\");\n    data.defaultAppearance = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DA\"\n    }) || \"\";\n    const fieldType = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"FT\"\n    });\n    data.fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n    this.fieldResources = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DR\"\n    }) || _primitives.Dict.empty;\n    data.fieldFlags = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Ff\"\n    });\n\n    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n      data.fieldFlags = 0;\n    }\n\n    data.readOnly = this.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);\n\n    if (data.fieldType === \"Sig\") {\n      data.fieldValue = null;\n      this.setFlags(_util.AnnotationFlag.HIDDEN);\n    }\n  }\n\n  _constructFieldName(dict) {\n    if (!dict.has(\"T\") && !dict.has(\"Parent\")) {\n      (0, _util.warn)(\"Unknown field name, falling back to empty field name.\");\n      return \"\";\n    }\n\n    if (!dict.has(\"Parent\")) {\n      return (0, _util.stringToPDFString)(dict.get(\"T\"));\n    }\n\n    const fieldName = [];\n\n    if (dict.has(\"T\")) {\n      fieldName.unshift((0, _util.stringToPDFString)(dict.get(\"T\")));\n    }\n\n    let loopDict = dict;\n\n    while (loopDict.has(\"Parent\")) {\n      loopDict = loopDict.get(\"Parent\");\n\n      if (!(0, _primitives.isDict)(loopDict)) {\n        break;\n      }\n\n      if (loopDict.has(\"T\")) {\n        fieldName.unshift((0, _util.stringToPDFString)(loopDict.get(\"T\")));\n      }\n    }\n\n    return fieldName.join(\".\");\n  }\n\n  hasFieldFlag(flag) {\n    return !!(this.data.fieldFlags & flag);\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (renderForms) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    return super.getOperatorList(evaluator, task, renderForms);\n  }\n\n}\n\nclass TextWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    this.data.fieldValue = (0, _util.stringToPDFString)(this.data.fieldValue || \"\");\n    let alignment = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Q\"\n    });\n\n    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n      alignment = null;\n    }\n\n    this.data.textAlignment = alignment;\n    let maximumLength = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"MaxLen\"\n    });\n\n    if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n      maximumLength = null;\n    }\n\n    this.data.maxLen = maximumLength;\n    this.data.multiLine = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);\n    this.data.comb = this.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !this.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== null;\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (renderForms || this.appearance) {\n      return super.getOperatorList(evaluator, task, renderForms);\n    }\n\n    const operatorList = new _operator_list.OperatorList();\n\n    if (!this.data.defaultAppearance) {\n      return Promise.resolve(operatorList);\n    }\n\n    const stream = new _stream.Stream((0, _util.stringToBytes)(this.data.defaultAppearance));\n    return evaluator.getOperatorList({\n      stream,\n      task,\n      resources: this.fieldResources,\n      operatorList\n    }).then(function () {\n      return operatorList;\n    });\n  }\n\n}\n\nclass ButtonWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.checkBox = !this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.radioButton = this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.pushButton = this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n\n    if (this.data.checkBox) {\n      this._processCheckBox(params);\n    } else if (this.data.radioButton) {\n      this._processRadioButton(params);\n    } else if (this.data.pushButton) {\n      this._processPushButton(params);\n    } else {\n      (0, _util.warn)(\"Invalid field flags for button widget annotation\");\n    }\n  }\n\n  _processCheckBox(params) {\n    if ((0, _primitives.isName)(this.data.fieldValue)) {\n      this.data.fieldValue = this.data.fieldValue.name;\n    }\n\n    const customAppearance = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(customAppearance)) {\n      return;\n    }\n\n    const exportValueOptionsDict = customAppearance.get(\"D\");\n\n    if (!(0, _primitives.isDict)(exportValueOptionsDict)) {\n      return;\n    }\n\n    const exportValues = exportValueOptionsDict.getKeys();\n    const hasCorrectOptionCount = exportValues.length === 2;\n\n    if (!hasCorrectOptionCount) {\n      return;\n    }\n\n    this.data.exportValue = exportValues[0] === \"Off\" ? exportValues[1] : exportValues[0];\n  }\n\n  _processRadioButton(params) {\n    this.data.fieldValue = this.data.buttonValue = null;\n    const fieldParent = params.dict.get(\"Parent\");\n\n    if ((0, _primitives.isDict)(fieldParent) && fieldParent.has(\"V\")) {\n      const fieldParentValue = fieldParent.get(\"V\");\n\n      if ((0, _primitives.isName)(fieldParentValue)) {\n        this.data.fieldValue = fieldParentValue.name;\n      }\n    }\n\n    const appearanceStates = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get(\"N\");\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    for (const key of normalAppearanceState.getKeys()) {\n      if (key !== \"Off\") {\n        this.data.buttonValue = key;\n        break;\n      }\n    }\n  }\n\n  _processPushButton(params) {\n    if (!params.dict.has(\"A\")) {\n      (0, _util.warn)(\"Push buttons without action dictionaries are not supported\");\n      return;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass ChoiceWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.options = [];\n    const options = (0, _core_utils.getInheritableProperty)({\n      dict: params.dict,\n      key: \"Opt\"\n    });\n\n    if (Array.isArray(options)) {\n      const xref = params.xref;\n\n      for (let i = 0, ii = options.length; i < ii; i++) {\n        const option = xref.fetchIfRef(options[i]);\n        const isOptionArray = Array.isArray(option);\n        this.data.options[i] = {\n          exportValue: isOptionArray ? xref.fetchIfRef(option[0]) : option,\n          displayValue: (0, _util.stringToPDFString)(isOptionArray ? xref.fetchIfRef(option[1]) : option)\n        };\n      }\n    }\n\n    if (!Array.isArray(this.data.fieldValue)) {\n      this.data.fieldValue = [this.data.fieldValue];\n    }\n\n    this.data.combo = this.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);\n    this.data.multiSelect = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);\n  }\n\n}\n\nclass TextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    const DEFAULT_ICON_SIZE = 22;\n    super(parameters);\n    const dict = parameters.dict;\n    this.data.annotationType = _util.AnnotationType.TEXT;\n\n    if (this.data.hasAppearance) {\n      this.data.name = \"NoIcon\";\n    } else {\n      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;\n      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;\n      this.data.name = dict.has(\"Name\") ? dict.get(\"Name\").name : \"Note\";\n    }\n\n    if (dict.has(\"State\")) {\n      this.data.state = dict.get(\"State\") || null;\n      this.data.stateModel = dict.get(\"StateModel\") || null;\n    } else {\n      this.data.state = null;\n      this.data.stateModel = null;\n    }\n  }\n\n}\n\nclass LinkAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    this.data.annotationType = _util.AnnotationType.LINK;\n    const quadPoints = getQuadPoints(params.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass PopupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POPUP;\n    let parentItem = parameters.dict.get(\"Parent\");\n\n    if (!parentItem) {\n      (0, _util.warn)(\"Popup annotation has a missing or invalid parent annotation.\");\n      return;\n    }\n\n    const parentSubtype = parentItem.get(\"Subtype\");\n    this.data.parentType = (0, _primitives.isName)(parentSubtype) ? parentSubtype.name : null;\n    const rawParent = parameters.dict.getRaw(\"Parent\");\n    this.data.parentId = (0, _primitives.isRef)(rawParent) ? rawParent.toString() : null;\n    const rt = parentItem.get(\"RT\");\n\n    if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {\n      parentItem = parentItem.get(\"IRT\");\n    }\n\n    if (!parentItem.has(\"M\")) {\n      this.data.modificationDate = null;\n    } else {\n      this.setModificationDate(parentItem.get(\"M\"));\n      this.data.modificationDate = this.modificationDate;\n    }\n\n    if (!parentItem.has(\"C\")) {\n      this.data.color = null;\n    } else {\n      this.setColor(parentItem.getArray(\"C\"));\n      this.data.color = this.color;\n    }\n\n    if (!this.viewable) {\n      const parentFlags = parentItem.get(\"F\");\n\n      if (this._isViewable(parentFlags)) {\n        this.setFlags(parentFlags);\n      }\n    }\n\n    this.data.title = (0, _util.stringToPDFString)(parentItem.get(\"T\") || \"\");\n    this.data.contents = (0, _util.stringToPDFString)(parentItem.get(\"Contents\") || \"\");\n  }\n\n}\n\nclass FreeTextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.FREETEXT;\n  }\n\n}\n\nclass LineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.LINE;\n    this.data.lineCoordinates = _util.Util.normalizeRect(parameters.dict.getArray(\"L\"));\n  }\n\n}\n\nclass SquareAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUARE;\n  }\n\n}\n\nclass CircleAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CIRCLE;\n  }\n\n}\n\nclass PolylineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYLINE;\n    const rawVertices = parameters.dict.getArray(\"Vertices\");\n    this.data.vertices = [];\n\n    for (let i = 0, ii = rawVertices.length; i < ii; i += 2) {\n      this.data.vertices.push({\n        x: rawVertices[i],\n        y: rawVertices[i + 1]\n      });\n    }\n  }\n\n}\n\nclass PolygonAnnotation extends PolylineAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYGON;\n  }\n\n}\n\nclass CaretAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CARET;\n  }\n\n}\n\nclass InkAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.INK;\n    const xref = parameters.xref;\n    const originalInkLists = parameters.dict.getArray(\"InkList\");\n    this.data.inkLists = [];\n\n    for (let i = 0, ii = originalInkLists.length; i < ii; ++i) {\n      this.data.inkLists.push([]);\n\n      for (let j = 0, jj = originalInkLists[i].length; j < jj; j += 2) {\n        this.data.inkLists[i].push({\n          x: xref.fetchIfRef(originalInkLists[i][j]),\n          y: xref.fetchIfRef(originalInkLists[i][j + 1])\n        });\n      }\n    }\n  }\n\n}\n\nclass HighlightAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.HIGHLIGHT;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass UnderlineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.UNDERLINE;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass SquigglyAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUIGGLY;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass StrikeOutAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STRIKEOUT;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass StampAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STAMP;\n  }\n\n}\n\nclass FileAttachmentAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    const file = new _obj.FileSpec(parameters.dict.get(\"FS\"), parameters.xref);\n    this.data.annotationType = _util.AnnotationType.FILEATTACHMENT;\n    this.data.file = file.serializable;\n  }\n\n}\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperatorList = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar QueueOptimizer = function QueueOptimizerClosure() {\n  function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n    var state = parentState;\n\n    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n      var item = pattern[i];\n      state = state[item] || (state[item] = []);\n    }\n\n    state[pattern[pattern.length - 1]] = {\n      checkFn,\n      iterateFn,\n      processFn\n    };\n  }\n\n  function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {\n    var iFirstPIMXO = iFirstSave + 2;\n\n    for (var i = 0; i < count; i++) {\n      var arg = argsArray[iFirstPIMXO + 4 * i];\n      var imageMask = arg.length === 1 && arg[0];\n\n      if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {\n        fnArray[iFirstPIMXO + 4 * i] = _util.OPS.paintSolidColorImageMask;\n        continue;\n      }\n\n      break;\n    }\n\n    return count - i;\n  }\n\n  var InitialState = [];\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintInlineImageXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateInlineImageGroup - invalid pos: ${pos}`);\n  }, function foundInlineImageGroup(context, i) {\n    var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n    var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n    var MAX_WIDTH = 1000;\n    var IMAGE_PADDING = 1;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIIXO = curr - 1;\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);\n\n    if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var maxX = 0;\n    var map = [],\n        maxLineHeight = 0;\n    var currentX = IMAGE_PADDING,\n        currentY = IMAGE_PADDING;\n    var q;\n\n    for (q = 0; q < count; q++) {\n      var transform = argsArray[iFirstTransform + (q << 2)];\n      var img = argsArray[iFirstPIIXO + (q << 2)][0];\n\n      if (currentX + img.width > MAX_WIDTH) {\n        maxX = Math.max(maxX, currentX);\n        currentY += maxLineHeight + 2 * IMAGE_PADDING;\n        currentX = 0;\n        maxLineHeight = 0;\n      }\n\n      map.push({\n        transform,\n        x: currentX,\n        y: currentY,\n        w: img.width,\n        h: img.height\n      });\n      currentX += img.width + 2 * IMAGE_PADDING;\n      maxLineHeight = Math.max(maxLineHeight, img.height);\n    }\n\n    var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n    var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n    var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n    var imgRowSize = imgWidth << 2;\n\n    for (q = 0; q < count; q++) {\n      var data = argsArray[iFirstPIIXO + (q << 2)][0].data;\n      var rowSize = map[q].w << 2;\n      var dataOffset = 0;\n      var offset = map[q].x + map[q].y * imgWidth << 2;\n      imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n\n      for (var k = 0, kk = map[q].h; k < kk; k++) {\n        imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n        dataOffset += rowSize;\n        offset += imgRowSize;\n      }\n\n      imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n\n      while (offset >= 0) {\n        data[offset - 4] = data[offset];\n        data[offset - 3] = data[offset + 1];\n        data[offset - 2] = data[offset + 2];\n        data[offset - 1] = data[offset + 3];\n        data[offset + rowSize] = data[offset + rowSize - 4];\n        data[offset + rowSize + 1] = data[offset + rowSize - 3];\n        data[offset + rowSize + 2] = data[offset + rowSize - 2];\n        data[offset + rowSize + 3] = data[offset + rowSize - 1];\n        offset -= imgRowSize;\n      }\n    }\n\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);\n    argsArray.splice(iFirstSave, count * 4, [{\n      width: imgWidth,\n      height: imgHeight,\n      kind: _util.ImageKind.RGBA_32BPP,\n      data: imgData\n    }, map]);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintImageMaskXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageMaskGroup - invalid pos: ${pos}`);\n  }, function foundImageMaskGroup(context, i) {\n    var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n    var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n    var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIMXO = curr - 1;\n    var count = Math.floor((i - iFirstSave) / 4);\n    count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);\n\n    if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var q;\n    var isSameImage = false;\n    var iTransform, transformArgs;\n    var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n\n    if (argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0) {\n      isSameImage = true;\n      var firstTransformArg0 = argsArray[iFirstTransform][0];\n      var firstTransformArg3 = argsArray[iFirstTransform][3];\n      iTransform = iFirstTransform + 4;\n      var iPIMXO = iFirstPIMXO + 4;\n\n      for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n        transformArgs = argsArray[iTransform];\n\n        if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== 0 || transformArgs[2] !== 0 || transformArgs[3] !== firstTransformArg3) {\n          if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n            isSameImage = false;\n          } else {\n            count = q;\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (isSameImage) {\n      count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n      var positions = new Float32Array(count * 2);\n      iTransform = iFirstTransform;\n\n      for (q = 0; q < count; q++, iTransform += 4) {\n        transformArgs = argsArray[iTransform];\n        positions[q << 1] = transformArgs[4];\n        positions[(q << 1) + 1] = transformArgs[5];\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);\n      argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg3, positions]);\n    } else {\n      count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n      var images = [];\n\n      for (q = 0; q < count; q++) {\n        transformArgs = argsArray[iFirstTransform + (q << 2)];\n        var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];\n        images.push({\n          data: maskParams.data,\n          width: maskParams.width,\n          height: maskParams.height,\n          transform: transformArgs\n        });\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);\n      argsArray.splice(iFirstSave, count * 4, [images]);\n    }\n\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function (context) {\n    var argsArray = context.argsArray;\n    var iFirstTransform = context.iCurr - 2;\n    return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;\n  }, function iterateImageGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        if (fnArray[i] !== _util.OPS.transform) {\n          return false;\n        }\n\n        var iFirstTransform = context.iCurr - 2;\n        var firstTransformArg0 = argsArray[iFirstTransform][0];\n        var firstTransformArg3 = argsArray[iFirstTransform][3];\n\n        if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {\n          return false;\n        }\n\n        return true;\n\n      case 2:\n        if (fnArray[i] !== _util.OPS.paintImageXObject) {\n          return false;\n        }\n\n        var iFirstPIXO = context.iCurr - 1;\n        var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n\n        if (argsArray[i][0] !== firstPIXOArg0) {\n          return false;\n        }\n\n        return true;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_IMAGES_IN_BLOCK = 3;\n    var MAX_IMAGES_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIXO = curr - 1;\n    var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n    var firstTransformArg0 = argsArray[iFirstTransform][0];\n    var firstTransformArg3 = argsArray[iFirstTransform][3];\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);\n\n    if (count < MIN_IMAGES_IN_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var positions = new Float32Array(count * 2);\n    var iTransform = iFirstTransform;\n\n    for (var q = 0; q < count; q++, iTransform += 4) {\n      var transformArgs = argsArray[iTransform];\n      positions[q << 1] = transformArgs[4];\n      positions[(q << 1) + 1] = transformArgs[5];\n    }\n\n    var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);\n    argsArray.splice(iFirstSave, count * 4, args);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 4;\n    var pos = (i - iFirstSave) % 5;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.beginText;\n\n      case 1:\n        return fnArray[i] === _util.OPS.setFont;\n\n      case 2:\n        return fnArray[i] === _util.OPS.setTextMatrix;\n\n      case 3:\n        if (fnArray[i] !== _util.OPS.showText) {\n          return false;\n        }\n\n        var iFirstSetFont = context.iCurr - 3;\n        var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n        var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n\n        if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {\n          return false;\n        }\n\n        return true;\n\n      case 4:\n        return fnArray[i] === _util.OPS.endText;\n    }\n\n    throw new Error(`iterateShowTextGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_CHARS_IN_BLOCK = 3;\n    var MAX_CHARS_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstBeginText = curr - 4;\n    var iFirstSetFont = curr - 3;\n    var iFirstSetTextMatrix = curr - 2;\n    var iFirstShowText = curr - 1;\n    var iFirstEndText = curr;\n    var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n    var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n    var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);\n\n    if (count < MIN_CHARS_IN_BLOCK) {\n      return i - (i - iFirstBeginText) % 5;\n    }\n\n    var iFirst = iFirstBeginText;\n\n    if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {\n      count++;\n      iFirst -= 5;\n    }\n\n    var iEndText = iFirst + 4;\n\n    for (var q = 1; q < count; q++) {\n      fnArray.splice(iEndText, 3);\n      argsArray.splice(iEndText, 3);\n      iEndText += 2;\n    }\n\n    return iEndText + 1;\n  });\n\n  function QueueOptimizer(queue) {\n    this.queue = queue;\n    this.state = null;\n    this.context = {\n      iCurr: 0,\n      fnArray: queue.fnArray,\n      argsArray: queue.argsArray\n    };\n    this.match = null;\n    this.lastProcessed = 0;\n  }\n\n  QueueOptimizer.prototype = {\n    _optimize() {\n      const fnArray = this.queue.fnArray;\n      let i = this.lastProcessed,\n          ii = fnArray.length;\n      let state = this.state;\n      let match = this.match;\n\n      if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n        this.lastProcessed = ii;\n        return;\n      }\n\n      const context = this.context;\n\n      while (i < ii) {\n        if (match) {\n          const iterate = (0, match.iterateFn)(context, i);\n\n          if (iterate) {\n            i++;\n            continue;\n          }\n\n          i = (0, match.processFn)(context, i + 1);\n          ii = fnArray.length;\n          match = null;\n          state = null;\n\n          if (i >= ii) {\n            break;\n          }\n        }\n\n        state = (state || InitialState)[fnArray[i]];\n\n        if (!state || Array.isArray(state)) {\n          i++;\n          continue;\n        }\n\n        context.iCurr = i;\n        i++;\n\n        if (state.checkFn && !(0, state.checkFn)(context)) {\n          state = null;\n          continue;\n        }\n\n        match = state;\n        state = null;\n      }\n\n      this.state = state;\n      this.match = match;\n      this.lastProcessed = i;\n    },\n\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n\n      this._optimize();\n    },\n\n    flush() {\n      while (this.match) {\n        const length = this.queue.fnArray.length;\n        this.lastProcessed = (0, this.match.processFn)(this.context, length);\n        this.match = null;\n        this.state = null;\n\n        this._optimize();\n      }\n    },\n\n    reset() {\n      this.state = null;\n      this.match = null;\n      this.lastProcessed = 0;\n    }\n\n  };\n  return QueueOptimizer;\n}();\n\nvar NullOptimizer = function NullOptimizerClosure() {\n  function NullOptimizer(queue) {\n    this.queue = queue;\n  }\n\n  NullOptimizer.prototype = {\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n    },\n\n    flush() {},\n\n    reset() {}\n\n  };\n  return NullOptimizer;\n}();\n\nvar OperatorList = function OperatorListClosure() {\n  var CHUNK_SIZE = 1000;\n  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5;\n\n  function OperatorList(intent, streamSink, pageIndex) {\n    this._streamSink = streamSink;\n    this.fnArray = [];\n    this.argsArray = [];\n\n    if (streamSink && intent !== \"oplist\") {\n      this.optimizer = new QueueOptimizer(this);\n    } else {\n      this.optimizer = new NullOptimizer(this);\n    }\n\n    this.dependencies = Object.create(null);\n    this._totalLength = 0;\n    this.pageIndex = pageIndex;\n    this.intent = intent;\n    this.weight = 0;\n    this._resolved = streamSink ? null : Promise.resolve();\n  }\n\n  OperatorList.prototype = {\n    get length() {\n      return this.argsArray.length;\n    },\n\n    get ready() {\n      return this._resolved || this._streamSink.ready;\n    },\n\n    get totalLength() {\n      return this._totalLength + this.length;\n    },\n\n    addOp(fn, args) {\n      this.optimizer.push(fn, args);\n      this.weight++;\n\n      if (this._streamSink) {\n        if (this.weight >= CHUNK_SIZE) {\n          this.flush();\n        } else if (this.weight >= CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {\n          this.flush();\n        }\n      }\n    },\n\n    addDependency(dependency) {\n      if (dependency in this.dependencies) {\n        return;\n      }\n\n      this.dependencies[dependency] = true;\n      this.addOp(_util.OPS.dependency, [dependency]);\n    },\n\n    addDependencies(dependencies) {\n      for (var key in dependencies) {\n        this.addDependency(key);\n      }\n    },\n\n    addOpList(opList) {\n      if (!(opList instanceof OperatorList)) {\n        (0, _util.warn)('addOpList - ignoring invalid \"opList\" parameter.');\n        return;\n      }\n\n      Object.assign(this.dependencies, opList.dependencies);\n\n      for (var i = 0, ii = opList.length; i < ii; i++) {\n        this.addOp(opList.fnArray[i], opList.argsArray[i]);\n      }\n    },\n\n    getIR() {\n      return {\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        length: this.length\n      };\n    },\n\n    get _transfers() {\n      const transfers = [];\n      const {\n        fnArray,\n        argsArray,\n        length\n      } = this;\n\n      for (let i = 0; i < length; i++) {\n        switch (fnArray[i]) {\n          case _util.OPS.paintInlineImageXObject:\n          case _util.OPS.paintInlineImageXObjectGroup:\n          case _util.OPS.paintImageMaskXObject:\n            const arg = argsArray[i][0];\n            ;\n\n            if (!arg.cached) {\n              transfers.push(arg.data.buffer);\n            }\n\n            break;\n        }\n      }\n\n      return transfers;\n    },\n\n    flush(lastChunk = false) {\n      this.optimizer.flush();\n      const length = this.length;\n      this._totalLength += length;\n\n      this._streamSink.enqueue({\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        lastChunk,\n        length\n      }, 1, this._transfers);\n\n      this.dependencies = Object.create(null);\n      this.fnArray.length = 0;\n      this.argsArray.length = 0;\n      this.weight = 0;\n      this.optimizer.reset();\n    }\n\n  };\n  return OperatorList;\n}();\n\nexports.OperatorList = OperatorList;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartialEvaluator = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cmap = __w_pdfjs_require__(28);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _fonts = __w_pdfjs_require__(29);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _unicode = __w_pdfjs_require__(35);\n\nvar _standard_fonts = __w_pdfjs_require__(34);\n\nvar _pattern = __w_pdfjs_require__(38);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _bidi = __w_pdfjs_require__(39);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _metrics = __w_pdfjs_require__(40);\n\nvar _function = __w_pdfjs_require__(41);\n\nvar _image_utils = __w_pdfjs_require__(24);\n\nvar _murmurhash = __w_pdfjs_require__(43);\n\nvar _operator_list = __w_pdfjs_require__(26);\n\nvar _image = __w_pdfjs_require__(44);\n\nvar PartialEvaluator = function PartialEvaluatorClosure() {\n  const DefaultPartialEvaluatorOptions = {\n    maxImageSize: -1,\n    disableFontFace: false,\n    ignoreErrors: false,\n    isEvalSupported: true,\n    fontExtraProperties: false\n  };\n\n  function PartialEvaluator({\n    xref,\n    handler,\n    pageIndex,\n    idFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    options = null,\n    pdfFunctionFactory\n  }) {\n    this.xref = xref;\n    this.handler = handler;\n    this.pageIndex = pageIndex;\n    this.idFactory = idFactory;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.options = options || DefaultPartialEvaluatorOptions;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.parsingType3Font = false;\n\n    this.fetchBuiltInCMap = async name => {\n      if (this.builtInCMapCache.has(name)) {\n        return this.builtInCMapCache.get(name);\n      }\n\n      const readableStream = this.handler.sendWithStream(\"FetchBuiltInCMap\", {\n        name\n      });\n      const reader = readableStream.getReader();\n      const data = await new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              return;\n            }\n\n            resolve(value);\n            pump();\n          }, reject);\n        }\n\n        pump();\n      });\n\n      if (data.compressionType !== _util.CMapCompressionType.NONE) {\n        this.builtInCMapCache.set(name, data);\n      }\n\n      return data;\n    };\n  }\n\n  var TIME_SLOT_DURATION_MS = 20;\n  var CHECK_TIME_EVERY = 100;\n\n  function TimeSlotManager() {\n    this.reset();\n  }\n\n  TimeSlotManager.prototype = {\n    check: function TimeSlotManager_check() {\n      if (++this.checked < CHECK_TIME_EVERY) {\n        return false;\n      }\n\n      this.checked = 0;\n      return this.endTime <= Date.now();\n    },\n    reset: function TimeSlotManager_reset() {\n      this.endTime = Date.now() + TIME_SLOT_DURATION_MS;\n      this.checked = 0;\n    }\n  };\n\n  function normalizeBlendMode(value, parsingArray = false) {\n    if (Array.isArray(value)) {\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        const maybeBM = normalizeBlendMode(value[i], true);\n\n        if (maybeBM) {\n          return maybeBM;\n        }\n      }\n\n      (0, _util.warn)(`Unsupported blend mode Array: ${value}`);\n      return \"source-over\";\n    }\n\n    if (!(0, _primitives.isName)(value)) {\n      if (parsingArray) {\n        return null;\n      }\n\n      return \"source-over\";\n    }\n\n    switch (value.name) {\n      case \"Normal\":\n      case \"Compatible\":\n        return \"source-over\";\n\n      case \"Multiply\":\n        return \"multiply\";\n\n      case \"Screen\":\n        return \"screen\";\n\n      case \"Overlay\":\n        return \"overlay\";\n\n      case \"Darken\":\n        return \"darken\";\n\n      case \"Lighten\":\n        return \"lighten\";\n\n      case \"ColorDodge\":\n        return \"color-dodge\";\n\n      case \"ColorBurn\":\n        return \"color-burn\";\n\n      case \"HardLight\":\n        return \"hard-light\";\n\n      case \"SoftLight\":\n        return \"soft-light\";\n\n      case \"Difference\":\n        return \"difference\";\n\n      case \"Exclusion\":\n        return \"exclusion\";\n\n      case \"Hue\":\n        return \"hue\";\n\n      case \"Saturation\":\n        return \"saturation\";\n\n      case \"Color\":\n        return \"color\";\n\n      case \"Luminosity\":\n        return \"luminosity\";\n    }\n\n    if (parsingArray) {\n      return null;\n    }\n\n    (0, _util.warn)(`Unsupported blend mode: ${value.name}`);\n    return \"source-over\";\n  }\n\n  var deferred = Promise.resolve();\n  var TILING_PATTERN = 1,\n      SHADING_PATTERN = 2;\n  PartialEvaluator.prototype = {\n    clone(newOptions = DefaultPartialEvaluatorOptions) {\n      var newEvaluator = Object.create(this);\n      newEvaluator.options = newOptions;\n      return newEvaluator;\n    },\n\n    hasBlendModes: function PartialEvaluator_hasBlendModes(resources) {\n      if (!(resources instanceof _primitives.Dict)) {\n        return false;\n      }\n\n      var processed = Object.create(null);\n\n      if (resources.objId) {\n        processed[resources.objId] = true;\n      }\n\n      var nodes = [resources],\n          xref = this.xref;\n\n      while (nodes.length) {\n        var node = nodes.shift();\n        var graphicStates = node.get(\"ExtGState\");\n\n        if (graphicStates instanceof _primitives.Dict) {\n          var graphicStatesKeys = graphicStates.getKeys();\n\n          for (let i = 0, ii = graphicStatesKeys.length; i < ii; i++) {\n            const key = graphicStatesKeys[i];\n            let graphicState = graphicStates.getRaw(key);\n\n            if (graphicState instanceof _primitives.Ref) {\n              if (processed[graphicState.toString()]) {\n                continue;\n              }\n\n              try {\n                graphicState = xref.fetch(graphicState);\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n\n                if (this.options.ignoreErrors) {\n                  if (graphicState instanceof _primitives.Ref) {\n                    processed[graphicState.toString()] = true;\n                  }\n\n                  this.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorExtGState\n                  });\n                  (0, _util.warn)(`hasBlendModes - ignoring ExtGState: \"${ex}\".`);\n                  continue;\n                }\n\n                throw ex;\n              }\n            }\n\n            if (!(graphicState instanceof _primitives.Dict)) {\n              continue;\n            }\n\n            if (graphicState.objId) {\n              processed[graphicState.objId] = true;\n            }\n\n            const bm = graphicState.get(\"BM\");\n\n            if (bm instanceof _primitives.Name) {\n              if (bm.name !== \"Normal\") {\n                return true;\n              }\n\n              continue;\n            }\n\n            if (bm !== undefined && Array.isArray(bm)) {\n              for (let j = 0, jj = bm.length; j < jj; j++) {\n                if (bm[j] instanceof _primitives.Name && bm[j].name !== \"Normal\") {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        var xObjects = node.get(\"XObject\");\n\n        if (!(xObjects instanceof _primitives.Dict)) {\n          continue;\n        }\n\n        var xObjectsKeys = xObjects.getKeys();\n\n        for (let i = 0, ii = xObjectsKeys.length; i < ii; i++) {\n          const key = xObjectsKeys[i];\n          var xObject = xObjects.getRaw(key);\n\n          if (xObject instanceof _primitives.Ref) {\n            if (processed[xObject.toString()]) {\n              continue;\n            }\n\n            try {\n              xObject = xref.fetch(xObject);\n            } catch (ex) {\n              if (ex instanceof _core_utils.MissingDataException) {\n                throw ex;\n              }\n\n              if (this.options.ignoreErrors) {\n                if (xObject instanceof _primitives.Ref) {\n                  processed[xObject.toString()] = true;\n                }\n\n                this.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.errorXObject\n                });\n                (0, _util.warn)(`hasBlendModes - ignoring XObject: \"${ex}\".`);\n                continue;\n              }\n\n              throw ex;\n            }\n          }\n\n          if (!(0, _primitives.isStream)(xObject)) {\n            continue;\n          }\n\n          if (xObject.dict.objId) {\n            if (processed[xObject.dict.objId]) {\n              continue;\n            }\n\n            processed[xObject.dict.objId] = true;\n          }\n\n          var xResources = xObject.dict.get(\"Resources\");\n\n          if (xResources instanceof _primitives.Dict && (!xResources.objId || !processed[xResources.objId])) {\n            nodes.push(xResources);\n\n            if (xResources.objId) {\n              processed[xResources.objId] = true;\n            }\n          }\n        }\n      }\n\n      return false;\n    },\n\n    async buildFormXObject(resources, xobj, smask, operatorList, task, initialState) {\n      var dict = xobj.dict;\n      var matrix = dict.getArray(\"Matrix\");\n      var bbox = dict.getArray(\"BBox\");\n\n      if (Array.isArray(bbox) && bbox.length === 4) {\n        bbox = _util.Util.normalizeRect(bbox);\n      } else {\n        bbox = null;\n      }\n\n      var group = dict.get(\"Group\");\n\n      if (group) {\n        var groupOptions = {\n          matrix,\n          bbox,\n          smask,\n          isolated: false,\n          knockout: false\n        };\n        var groupSubtype = group.get(\"S\");\n        var colorSpace = null;\n\n        if ((0, _primitives.isName)(groupSubtype, \"Transparency\")) {\n          groupOptions.isolated = group.get(\"I\") || false;\n          groupOptions.knockout = group.get(\"K\") || false;\n\n          if (group.has(\"CS\")) {\n            colorSpace = await this.parseColorSpace({\n              cs: group.get(\"CS\"),\n              resources\n            });\n          }\n        }\n\n        if (smask && smask.backdrop) {\n          colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;\n          smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n        }\n\n        operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);\n      }\n\n      operatorList.addOp(_util.OPS.paintFormXObjectBegin, [matrix, bbox]);\n      return this.getOperatorList({\n        stream: xobj,\n        task,\n        resources: dict.get(\"Resources\") || resources,\n        operatorList,\n        initialState\n      }).then(function () {\n        operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);\n\n        if (group) {\n          operatorList.addOp(_util.OPS.endGroup, [groupOptions]);\n        }\n      });\n    },\n\n    async buildPaintImageXObject({\n      resources,\n      image,\n      isInline = false,\n      operatorList,\n      cacheKey,\n      localImageCache\n    }) {\n      var dict = image.dict;\n      const imageRef = dict.objId;\n      var w = dict.get(\"Width\", \"W\");\n      var h = dict.get(\"Height\", \"H\");\n\n      if (!(w && (0, _util.isNum)(w)) || !(h && (0, _util.isNum)(h))) {\n        (0, _util.warn)(\"Image dimensions are missing, or not numbers.\");\n        return undefined;\n      }\n\n      var maxImageSize = this.options.maxImageSize;\n\n      if (maxImageSize !== -1 && w * h > maxImageSize) {\n        (0, _util.warn)(\"Image exceeded maximum allowed size and was removed.\");\n        return undefined;\n      }\n\n      var imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n      var imgData, args;\n\n      if (imageMask) {\n        var width = dict.get(\"Width\", \"W\");\n        var height = dict.get(\"Height\", \"H\");\n        var bitStrideLength = width + 7 >> 3;\n        var imgArray = image.getBytes(bitStrideLength * height, true);\n        var decode = dict.getArray(\"Decode\", \"D\");\n        imgData = _image.PDFImage.createMask({\n          imgArray,\n          width,\n          height,\n          imageIsFromDecodeStream: image instanceof _stream.DecodeStream,\n          inverseDecode: !!decode && decode[0] > 0\n        });\n        imgData.cached = !!cacheKey;\n        args = [imgData];\n        operatorList.addOp(_util.OPS.paintImageMaskXObject, args);\n\n        if (cacheKey) {\n          localImageCache.set(cacheKey, imageRef, {\n            fn: _util.OPS.paintImageMaskXObject,\n            args\n          });\n        }\n\n        return undefined;\n      }\n\n      var softMask = dict.get(\"SMask\", \"SM\") || false;\n      var mask = dict.get(\"Mask\") || false;\n      var SMALL_IMAGE_DIMENSIONS = 200;\n\n      if (isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS) {\n        const imageObj = new _image.PDFImage({\n          xref: this.xref,\n          res: resources,\n          image,\n          isInline,\n          pdfFunctionFactory: this.pdfFunctionFactory\n        });\n        imgData = imageObj.createImageData(true);\n        operatorList.addOp(_util.OPS.paintInlineImageXObject, [imgData]);\n        return undefined;\n      }\n\n      let objId = `img_${this.idFactory.createObjId()}`,\n          cacheGlobally = false;\n\n      if (this.parsingType3Font) {\n        objId = `${this.idFactory.getDocId()}_type3res_${objId}`;\n      } else if (imageRef) {\n        cacheGlobally = this.globalImageCache.shouldCache(imageRef, this.pageIndex);\n\n        if (cacheGlobally) {\n          objId = `${this.idFactory.getDocId()}_${objId}`;\n        }\n      }\n\n      operatorList.addDependency(objId);\n      args = [objId, w, h];\n\n      const imgPromise = _image.PDFImage.buildImage({\n        xref: this.xref,\n        res: resources,\n        image,\n        isInline,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      }).then(imageObj => {\n        imgData = imageObj.createImageData(false);\n\n        if (this.parsingType3Font) {\n          return this.handler.sendWithPromise(\"commonobj\", [objId, \"FontType3Res\", imgData], [imgData.data.buffer]);\n        } else if (cacheGlobally) {\n          this.handler.send(\"commonobj\", [objId, \"Image\", imgData], [imgData.data.buffer]);\n          return undefined;\n        }\n\n        this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", imgData], [imgData.data.buffer]);\n        return undefined;\n      }).catch(reason => {\n        (0, _util.warn)(\"Unable to decode image: \" + reason);\n\n        if (this.parsingType3Font) {\n          return this.handler.sendWithPromise(\"commonobj\", [objId, \"FontType3Res\", null]);\n        } else if (cacheGlobally) {\n          this.handler.send(\"commonobj\", [objId, \"Image\", null]);\n          return undefined;\n        }\n\n        this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", null]);\n        return undefined;\n      });\n\n      if (this.parsingType3Font) {\n        await imgPromise;\n      }\n\n      operatorList.addOp(_util.OPS.paintImageXObject, args);\n\n      if (cacheKey) {\n        localImageCache.set(cacheKey, imageRef, {\n          fn: _util.OPS.paintImageXObject,\n          args\n        });\n\n        if (imageRef) {\n          (0, _util.assert)(!isInline, \"Cannot cache an inline image globally.\");\n          this.globalImageCache.addPageIndex(imageRef, this.pageIndex);\n\n          if (cacheGlobally) {\n            this.globalImageCache.setData(imageRef, {\n              objId,\n              fn: _util.OPS.paintImageXObject,\n              args\n            });\n          }\n        }\n      }\n\n      return undefined;\n    },\n\n    handleSMask: function PartialEvaluator_handleSmask(smask, resources, operatorList, task, stateManager) {\n      var smaskContent = smask.get(\"G\");\n      var smaskOptions = {\n        subtype: smask.get(\"S\").name,\n        backdrop: smask.get(\"BC\")\n      };\n      var transferObj = smask.get(\"TR\");\n\n      if ((0, _function.isPDFFunction)(transferObj)) {\n        const transferFn = this.pdfFunctionFactory.create(transferObj);\n        var transferMap = new Uint8Array(256);\n        var tmp = new Float32Array(1);\n\n        for (var i = 0; i < 256; i++) {\n          tmp[0] = i / 255;\n          transferFn(tmp, 0, tmp, 0);\n          transferMap[i] = tmp[0] * 255 | 0;\n        }\n\n        smaskOptions.transferMap = transferMap;\n      }\n\n      return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone());\n    },\n\n    handleTilingType(fn, args, resources, pattern, patternDict, operatorList, task) {\n      const tilingOpList = new _operator_list.OperatorList();\n      const resourcesArray = [patternDict.get(\"Resources\"), resources];\n\n      const patternResources = _primitives.Dict.merge(this.xref, resourcesArray);\n\n      return this.getOperatorList({\n        stream: pattern,\n        task,\n        resources: patternResources,\n        operatorList: tilingOpList\n      }).then(function () {\n        return (0, _pattern.getTilingPatternIR)({\n          fnArray: tilingOpList.fnArray,\n          argsArray: tilingOpList.argsArray\n        }, patternDict, args);\n      }).then(function (tilingPatternIR) {\n        operatorList.addDependencies(tilingOpList.dependencies);\n        operatorList.addOp(fn, tilingPatternIR);\n      }, reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorTilingPattern\n          });\n          (0, _util.warn)(`handleTilingType - ignoring pattern: \"${reason}\".`);\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    handleSetFont: function PartialEvaluator_handleSetFont(resources, fontArgs, fontRef, operatorList, task, state) {\n      var fontName;\n\n      if (fontArgs) {\n        fontArgs = fontArgs.slice();\n        fontName = fontArgs[0].name;\n      }\n\n      return this.loadFont(fontName, fontRef, resources).then(translated => {\n        if (!translated.font.isType3Font) {\n          return translated;\n        }\n\n        return translated.loadType3Data(this, resources, operatorList, task).then(function () {\n          return translated;\n        }).catch(reason => {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadType3\n          });\n          return new TranslatedFont({\n            loadedName: \"g_font_error\",\n            font: new _fonts.ErrorFont(`Type3 font load error: ${reason}`),\n            dict: translated.font,\n            extraProperties: this.options.fontExtraProperties\n          });\n        });\n      }).then(translated => {\n        state.font = translated.font;\n        translated.send(this.handler);\n        return translated.loadedName;\n      });\n    },\n\n    handleText(chars, state) {\n      const font = state.font;\n      const glyphs = font.charsToGlyphs(chars);\n\n      if (font.data) {\n        const isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n\n        if (isAddToPathSet || state.fillColorSpace.name === \"Pattern\" || font.disableFontFace || this.options.disableFontFace) {\n          PartialEvaluator.buildFontPaths(font, glyphs, this.handler);\n        }\n      }\n\n      return glyphs;\n    },\n\n    ensureStateFont(state) {\n      if (state.font) {\n        return;\n      }\n\n      const reason = new _util.FormatError(\"Missing setFont (Tf) operator before text rendering operator.\");\n\n      if (this.options.ignoreErrors) {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontState\n        });\n        (0, _util.warn)(`ensureStateFont: \"${reason}\".`);\n        return;\n      }\n\n      throw reason;\n    },\n\n    setGState: function PartialEvaluator_setGState(resources, gState, operatorList, task, stateManager) {\n      var gStateObj = [];\n      var gStateKeys = gState.getKeys();\n      var promise = Promise.resolve();\n\n      for (var i = 0, ii = gStateKeys.length; i < ii; i++) {\n        const key = gStateKeys[i];\n        const value = gState.get(key);\n\n        switch (key) {\n          case \"Type\":\n            break;\n\n          case \"LW\":\n          case \"LC\":\n          case \"LJ\":\n          case \"ML\":\n          case \"D\":\n          case \"RI\":\n          case \"FL\":\n          case \"CA\":\n          case \"ca\":\n            gStateObj.push([key, value]);\n            break;\n\n          case \"Font\":\n            promise = promise.then(() => {\n              return this.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {\n                operatorList.addDependency(loadedName);\n                gStateObj.push([key, [loadedName, value[1]]]);\n              });\n            });\n            break;\n\n          case \"BM\":\n            gStateObj.push([key, normalizeBlendMode(value)]);\n            break;\n\n          case \"SMask\":\n            if ((0, _primitives.isName)(value, \"None\")) {\n              gStateObj.push([key, false]);\n              break;\n            }\n\n            if ((0, _primitives.isDict)(value)) {\n              promise = promise.then(() => {\n                return this.handleSMask(value, resources, operatorList, task, stateManager);\n              });\n              gStateObj.push([key, true]);\n            } else {\n              (0, _util.warn)(\"Unsupported SMask type\");\n            }\n\n            break;\n\n          case \"OP\":\n          case \"op\":\n          case \"OPM\":\n          case \"BG\":\n          case \"BG2\":\n          case \"UCR\":\n          case \"UCR2\":\n          case \"TR\":\n          case \"TR2\":\n          case \"HT\":\n          case \"SM\":\n          case \"SA\":\n          case \"AIS\":\n          case \"TK\":\n            (0, _util.info)(\"graphic state operator \" + key);\n            break;\n\n          default:\n            (0, _util.info)(\"Unknown graphic state operator \" + key);\n            break;\n        }\n      }\n\n      return promise.then(function () {\n        if (gStateObj.length > 0) {\n          operatorList.addOp(_util.OPS.setGState, [gStateObj]);\n        }\n      });\n    },\n    loadFont: function PartialEvaluator_loadFont(fontName, font, resources) {\n      const errorFont = () => {\n        return Promise.resolve(new TranslatedFont({\n          loadedName: \"g_font_error\",\n          font: new _fonts.ErrorFont(`Font \"${fontName}\" is not available.`),\n          dict: font,\n          extraProperties: this.options.fontExtraProperties\n        }));\n      };\n\n      var fontRef,\n          xref = this.xref;\n\n      if (font) {\n        if (!(0, _primitives.isRef)(font)) {\n          throw new _util.FormatError('The \"font\" object should be a reference.');\n        }\n\n        fontRef = font;\n      } else {\n        var fontRes = resources.get(\"Font\");\n\n        if (fontRes) {\n          fontRef = fontRes.getRaw(fontName);\n        }\n      }\n\n      if (!fontRef) {\n        const partialMsg = `Font \"${fontName || font && font.toString()}\" is not available`;\n\n        if (!this.options.ignoreErrors && !this.parsingType3Font) {\n          (0, _util.warn)(`${partialMsg}.`);\n          return errorFont();\n        }\n\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontMissing\n        });\n        (0, _util.warn)(`${partialMsg} -- attempting to fallback to a default font.`);\n        fontRef = PartialEvaluator.getFallbackFontDict();\n      }\n\n      if (this.fontCache.has(fontRef)) {\n        return this.fontCache.get(fontRef);\n      }\n\n      font = xref.fetchIfRef(fontRef);\n\n      if (!(0, _primitives.isDict)(font)) {\n        return errorFont();\n      }\n\n      if (font.translated) {\n        return font.translated;\n      }\n\n      var fontCapability = (0, _util.createPromiseCapability)();\n      var preEvaluatedFont = this.preEvaluateFont(font);\n      const {\n        descriptor,\n        hash\n      } = preEvaluatedFont;\n      var fontRefIsRef = (0, _primitives.isRef)(fontRef),\n          fontID;\n\n      if (fontRefIsRef) {\n        fontID = fontRef.toString();\n      }\n\n      if (hash && (0, _primitives.isDict)(descriptor)) {\n        if (!descriptor.fontAliases) {\n          descriptor.fontAliases = Object.create(null);\n        }\n\n        var fontAliases = descriptor.fontAliases;\n\n        if (fontAliases[hash]) {\n          var aliasFontRef = fontAliases[hash].aliasRef;\n\n          if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {\n            this.fontCache.putAlias(fontRef, aliasFontRef);\n            return this.fontCache.get(fontRef);\n          }\n        } else {\n          fontAliases[hash] = {\n            fontID: _fonts.Font.getFontID()\n          };\n        }\n\n        if (fontRefIsRef) {\n          fontAliases[hash].aliasRef = fontRef;\n        }\n\n        fontID = fontAliases[hash].fontID;\n      }\n\n      if (fontRefIsRef) {\n        this.fontCache.put(fontRef, fontCapability.promise);\n      } else {\n        if (!fontID) {\n          fontID = this.idFactory.createObjId();\n        }\n\n        this.fontCache.put(`id_${fontID}`, fontCapability.promise);\n      }\n\n      (0, _util.assert)(fontID, 'The \"fontID\" must be defined.');\n      font.loadedName = `${this.idFactory.getDocId()}_f${fontID}`;\n      font.translated = fontCapability.promise;\n      var translatedPromise;\n\n      try {\n        translatedPromise = this.translateFont(preEvaluatedFont);\n      } catch (e) {\n        translatedPromise = Promise.reject(e);\n      }\n\n      translatedPromise.then(translatedFont => {\n        if (translatedFont.fontType !== undefined) {\n          var xrefFontStats = xref.stats.fontTypes;\n          xrefFontStats[translatedFont.fontType] = true;\n        }\n\n        fontCapability.resolve(new TranslatedFont({\n          loadedName: font.loadedName,\n          font: translatedFont,\n          dict: font,\n          extraProperties: this.options.fontExtraProperties\n        }));\n      }).catch(reason => {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontTranslate\n        });\n\n        try {\n          var fontFile3 = descriptor && descriptor.get(\"FontFile3\");\n          var subtype = fontFile3 && fontFile3.get(\"Subtype\");\n          var fontType = (0, _fonts.getFontType)(preEvaluatedFont.type, subtype && subtype.name);\n          var xrefFontStats = xref.stats.fontTypes;\n          xrefFontStats[fontType] = true;\n        } catch (ex) {}\n\n        fontCapability.resolve(new TranslatedFont({\n          loadedName: font.loadedName,\n          font: new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason),\n          dict: font,\n          extraProperties: this.options.fontExtraProperties\n        }));\n      });\n      return fontCapability.promise;\n    },\n\n    buildPath(operatorList, fn, args, parsingText = false) {\n      var lastIndex = operatorList.length - 1;\n\n      if (!args) {\n        args = [];\n      }\n\n      if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {\n        if (parsingText) {\n          (0, _util.warn)(`Encountered path operator \"${fn}\" inside of a text object.`);\n          operatorList.addOp(_util.OPS.save, null);\n        }\n\n        operatorList.addOp(_util.OPS.constructPath, [[fn], args]);\n\n        if (parsingText) {\n          operatorList.addOp(_util.OPS.restore, null);\n        }\n      } else {\n        var opArgs = operatorList.argsArray[lastIndex];\n        opArgs[0].push(fn);\n        Array.prototype.push.apply(opArgs[1], args);\n      }\n    },\n\n    parseColorSpace({\n      cs,\n      resources\n    }) {\n      return new Promise(resolve => {\n        resolve(_colorspace.ColorSpace.parse(cs, this.xref, resources, this.pdfFunctionFactory));\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return null;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorColorSpace\n          });\n          (0, _util.warn)(`parseColorSpace - ignoring ColorSpace: \"${reason}\".`);\n          return null;\n        }\n\n        throw reason;\n      });\n    },\n\n    async handleColorN(operatorList, fn, args, cs, patterns, resources, task) {\n      var patternName = args[args.length - 1];\n      var pattern;\n\n      if ((0, _primitives.isName)(patternName) && (pattern = patterns.get(patternName.name))) {\n        var dict = (0, _primitives.isStream)(pattern) ? pattern.dict : pattern;\n        var typeNum = dict.get(\"PatternType\");\n\n        if (typeNum === TILING_PATTERN) {\n          var color = cs.base ? cs.base.getRgb(args, 0) : null;\n          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task);\n        } else if (typeNum === SHADING_PATTERN) {\n          var shading = dict.get(\"Shading\");\n          var matrix = dict.getArray(\"Matrix\");\n          pattern = _pattern.Pattern.parseShading(shading, matrix, this.xref, resources, this.handler, this.pdfFunctionFactory);\n          operatorList.addOp(fn, pattern.getIR());\n          return undefined;\n        }\n\n        throw new _util.FormatError(`Unknown PatternType: ${typeNum}`);\n      }\n\n      throw new _util.FormatError(`Unknown PatternName: ${patternName}`);\n    },\n\n    getOperatorList({\n      stream,\n      task,\n      resources,\n      operatorList,\n      initialState = null\n    }) {\n      resources = resources || _primitives.Dict.empty;\n      initialState = initialState || new EvalState();\n\n      if (!operatorList) {\n        throw new Error('getOperatorList: missing \"operatorList\" parameter');\n      }\n\n      var self = this;\n      var xref = this.xref;\n      let parsingText = false;\n      const localImageCache = new _image_utils.LocalImageCache();\n\n      var xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n\n      var patterns = resources.get(\"Pattern\") || _primitives.Dict.empty;\n\n      var stateManager = new StateManager(initialState);\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n      var timeSlotManager = new TimeSlotManager();\n\n      function closePendingRestoreOPS(argument) {\n        for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n          operatorList.addOp(_util.OPS.restore, []);\n        }\n      }\n\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          Promise.all([promise, operatorList.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n            operation = {},\n            i,\n            ii,\n            cs;\n\n        while (!(stop = timeSlotManager.check())) {\n          operation.args = null;\n\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n\n          var args = operation.args;\n          var fn = operation.fn;\n\n          switch (fn | 0) {\n            case _util.OPS.paintXObject:\n              var name = args[0].name;\n\n              if (name) {\n                const localImage = localImageCache.getByName(name);\n\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  args = null;\n                  continue;\n                }\n              }\n\n              next(new Promise(function (resolveXObject, rejectXObject) {\n                if (!name) {\n                  throw new _util.FormatError(\"XObject must be referred to by name.\");\n                }\n\n                let xobj = xobjs.getRaw(name);\n\n                if (xobj instanceof _primitives.Ref) {\n                  const localImage = localImageCache.getByRef(xobj);\n\n                  if (localImage) {\n                    operatorList.addOp(localImage.fn, localImage.args);\n                    resolveXObject();\n                    return;\n                  }\n\n                  const globalImage = self.globalImageCache.getData(xobj, self.pageIndex);\n\n                  if (globalImage) {\n                    operatorList.addDependency(globalImage.objId);\n                    operatorList.addOp(globalImage.fn, globalImage.args);\n                    resolveXObject();\n                    return;\n                  }\n\n                  xobj = xref.fetch(xobj);\n                }\n\n                if (!xobj) {\n                  operatorList.addOp(fn, args);\n                  resolveXObject();\n                  return;\n                }\n\n                if (!(0, _primitives.isStream)(xobj)) {\n                  throw new _util.FormatError(\"XObject should be a stream\");\n                }\n\n                const type = xobj.dict.get(\"Subtype\");\n\n                if (!(0, _primitives.isName)(type)) {\n                  throw new _util.FormatError(\"XObject should have a Name subtype\");\n                }\n\n                if (type.name === \"Form\") {\n                  stateManager.save();\n                  self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone()).then(function () {\n                    stateManager.restore();\n                    resolveXObject();\n                  }, rejectXObject);\n                  return;\n                } else if (type.name === \"Image\") {\n                  self.buildPaintImageXObject({\n                    resources,\n                    image: xobj,\n                    operatorList,\n                    cacheKey: name,\n                    localImageCache\n                  }).then(resolveXObject, rejectXObject);\n                  return;\n                } else if (type.name === \"PS\") {\n                  (0, _util.info)(\"Ignored XObject subtype PS\");\n                } else {\n                  throw new _util.FormatError(`Unhandled XObject subtype ${type.name}`);\n                }\n\n                resolveXObject();\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  self.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.errorXObject\n                  });\n                  (0, _util.warn)(`getOperatorList - ignoring XObject: \"${reason}\".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n\n            case _util.OPS.setFont:\n              var fontSize = args[1];\n              next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state).then(function (loadedName) {\n                operatorList.addDependency(loadedName);\n                operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);\n              }));\n              return;\n\n            case _util.OPS.beginText:\n              parsingText = true;\n              break;\n\n            case _util.OPS.endText:\n              parsingText = false;\n              break;\n\n            case _util.OPS.endInlineImage:\n              var cacheKey = args[0].cacheKey;\n\n              if (cacheKey) {\n                const localImage = localImageCache.getByName(cacheKey);\n\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  args = null;\n                  continue;\n                }\n              }\n\n              next(self.buildPaintImageXObject({\n                resources,\n                image: args[0],\n                isInline: true,\n                operatorList,\n                cacheKey,\n                localImageCache\n              }));\n              return;\n\n            case _util.OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              args[0] = self.handleText(args[0], stateManager.state);\n              break;\n\n            case _util.OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              var arr = args[0];\n              var combinedGlyphs = [];\n              var arrLength = arr.length;\n              var state = stateManager.state;\n\n              for (i = 0; i < arrLength; ++i) {\n                var arrItem = arr[i];\n\n                if ((0, _util.isString)(arrItem)) {\n                  Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));\n                } else if ((0, _util.isNum)(arrItem)) {\n                  combinedGlyphs.push(arrItem);\n                }\n              }\n\n              args[0] = combinedGlyphs;\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              operatorList.addOp(_util.OPS.nextLine);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              operatorList.addOp(_util.OPS.nextLine);\n              operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);\n              operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.setTextRenderingMode:\n              stateManager.state.textRenderingMode = args[0];\n              break;\n\n            case _util.OPS.setFillColorSpace:\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.fillColorSpace = colorSpace;\n                }\n              }));\n              return;\n\n            case _util.OPS.setStrokeColorSpace:\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.strokeColorSpace = colorSpace;\n                }\n              }));\n              return;\n\n            case _util.OPS.setFillColor:\n              cs = stateManager.state.fillColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeColor:\n              cs = stateManager.state.strokeColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillGray:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n              args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeGray:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n              args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillCMYKColor:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n              args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeCMYKColor:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n              args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillRGBColor:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;\n              args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n\n            case _util.OPS.setStrokeRGBColor:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;\n              args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n\n            case _util.OPS.setFillColorN:\n              cs = stateManager.state.fillColorSpace;\n\n              if (cs.name === \"Pattern\") {\n                next(self.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task));\n                return;\n              }\n\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeColorN:\n              cs = stateManager.state.strokeColorSpace;\n\n              if (cs.name === \"Pattern\") {\n                next(self.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task));\n                return;\n              }\n\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.shadingFill:\n              var shadingRes = resources.get(\"Shading\");\n\n              if (!shadingRes) {\n                throw new _util.FormatError(\"No shading resource found\");\n              }\n\n              var shading = shadingRes.get(args[0].name);\n\n              if (!shading) {\n                throw new _util.FormatError(\"No shading object found\");\n              }\n\n              var shadingFill = _pattern.Pattern.parseShading(shading, null, xref, resources, self.handler, self.pdfFunctionFactory);\n\n              var patternIR = shadingFill.getIR();\n              args = [patternIR];\n              fn = _util.OPS.shadingFill;\n              break;\n\n            case _util.OPS.setGState:\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!(0, _primitives.isDict)(extGState) || !extGState.has(dictName.name)) {\n                break;\n              }\n\n              var gState = extGState.get(dictName.name);\n              next(self.setGState(resources, gState, operatorList, task, stateManager));\n              return;\n\n            case _util.OPS.moveTo:\n            case _util.OPS.lineTo:\n            case _util.OPS.curveTo:\n            case _util.OPS.curveTo2:\n            case _util.OPS.curveTo3:\n            case _util.OPS.closePath:\n            case _util.OPS.rectangle:\n              self.buildPath(operatorList, fn, args, parsingText);\n              continue;\n\n            case _util.OPS.markPoint:\n            case _util.OPS.markPointProps:\n            case _util.OPS.beginMarkedContent:\n            case _util.OPS.beginMarkedContentProps:\n            case _util.OPS.endMarkedContent:\n            case _util.OPS.beginCompat:\n            case _util.OPS.endCompat:\n              continue;\n\n            default:\n              if (args !== null) {\n                for (i = 0, ii = args.length; i < ii; i++) {\n                  if (args[i] instanceof _primitives.Dict) {\n                    break;\n                  }\n                }\n\n                if (i < ii) {\n                  (0, _util.warn)(\"getOperatorList - ignoring operator: \" + fn);\n                  continue;\n                }\n              }\n\n          }\n\n          operatorList.addOp(fn, args);\n        }\n\n        if (stop) {\n          next(deferred);\n          return;\n        }\n\n        closePendingRestoreOPS();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.errorOperatorList\n          });\n          (0, _util.warn)(`getOperatorList - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n          closePendingRestoreOPS();\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    getTextContent({\n      stream,\n      task,\n      resources,\n      stateManager = null,\n      normalizeWhitespace = false,\n      combineTextItems = false,\n      sink,\n      seenStyles = Object.create(null)\n    }) {\n      resources = resources || _primitives.Dict.empty;\n      stateManager = stateManager || new StateManager(new TextState());\n      var WhitespaceRegexp = /\\s/g;\n      var textContent = {\n        items: [],\n        styles: Object.create(null)\n      };\n      var textContentItem = {\n        initialized: false,\n        str: [],\n        width: 0,\n        height: 0,\n        vertical: false,\n        lastAdvanceWidth: 0,\n        lastAdvanceHeight: 0,\n        textAdvanceScale: 0,\n        spaceWidth: 0,\n        fakeSpaceMin: Infinity,\n        fakeMultiSpaceMin: Infinity,\n        fakeMultiSpaceMax: -0,\n        textRunBreakAllowed: false,\n        transform: null,\n        fontName: null\n      };\n      var SPACE_FACTOR = 0.3;\n      var MULTI_SPACE_FACTOR = 1.5;\n      var MULTI_SPACE_FACTOR_MAX = 4;\n      var self = this;\n      var xref = this.xref;\n      var xobjs = null;\n      const emptyXObjectCache = new _image_utils.LocalImageCache();\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n      var textState;\n\n      function ensureTextContentItem() {\n        if (textContentItem.initialized) {\n          return textContentItem;\n        }\n\n        var font = textState.font;\n\n        if (!(font.loadedName in seenStyles)) {\n          seenStyles[font.loadedName] = true;\n          textContent.styles[font.loadedName] = {\n            fontFamily: font.fallbackName,\n            ascent: font.ascent,\n            descent: font.descent,\n            vertical: font.vertical\n          };\n        }\n\n        textContentItem.fontName = font.loadedName;\n        var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];\n\n        if (font.isType3Font && textState.fontSize <= 1 && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {\n          const glyphHeight = font.bbox[3] - font.bbox[1];\n\n          if (glyphHeight > 0) {\n            tsm[3] *= glyphHeight * textState.fontMatrix[3];\n          }\n        }\n\n        var trm = _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));\n\n        textContentItem.transform = trm;\n\n        if (!font.vertical) {\n          textContentItem.width = 0;\n          textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);\n          textContentItem.vertical = false;\n        } else {\n          textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);\n          textContentItem.height = 0;\n          textContentItem.vertical = true;\n        }\n\n        var a = textState.textLineMatrix[0];\n        var b = textState.textLineMatrix[1];\n        var scaleLineX = Math.sqrt(a * a + b * b);\n        a = textState.ctm[0];\n        b = textState.ctm[1];\n        var scaleCtmX = Math.sqrt(a * a + b * b);\n        textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n        textContentItem.lastAdvanceWidth = 0;\n        textContentItem.lastAdvanceHeight = 0;\n        var spaceWidth = font.spaceWidth / 1000 * textState.fontSize;\n\n        if (spaceWidth) {\n          textContentItem.spaceWidth = spaceWidth;\n          textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMax = spaceWidth * MULTI_SPACE_FACTOR_MAX;\n          textContentItem.textRunBreakAllowed = !font.isMonospace;\n        } else {\n          textContentItem.spaceWidth = 0;\n          textContentItem.fakeSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMax = 0;\n          textContentItem.textRunBreakAllowed = false;\n        }\n\n        textContentItem.initialized = true;\n        return textContentItem;\n      }\n\n      function replaceWhitespace(str) {\n        var i = 0,\n            ii = str.length,\n            code;\n\n        while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7f) {\n          i++;\n        }\n\n        return i < ii ? str.replace(WhitespaceRegexp, \" \") : str;\n      }\n\n      function runBidiTransform(textChunk) {\n        var str = textChunk.str.join(\"\");\n        var bidiResult = (0, _bidi.bidi)(str, -1, textChunk.vertical);\n        return {\n          str: normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str,\n          dir: bidiResult.dir,\n          width: textChunk.width,\n          height: textChunk.height,\n          transform: textChunk.transform,\n          fontName: textChunk.fontName\n        };\n      }\n\n      function handleSetFont(fontName, fontRef) {\n        return self.loadFont(fontName, fontRef, resources).then(function (translated) {\n          textState.font = translated.font;\n          textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        });\n      }\n\n      function buildTextContentItem(chars) {\n        var font = textState.font;\n        var textChunk = ensureTextContentItem();\n        var width = 0;\n        var height = 0;\n        var glyphs = font.charsToGlyphs(chars);\n\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var glyphWidth = null;\n\n          if (font.vertical && glyph.vmetric) {\n            glyphWidth = glyph.vmetric[0];\n          } else {\n            glyphWidth = glyph.width;\n          }\n\n          var glyphUnicode = glyph.unicode;\n          var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();\n\n          if (NormalizedUnicodes[glyphUnicode] !== undefined) {\n            glyphUnicode = NormalizedUnicodes[glyphUnicode];\n          }\n\n          glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);\n          var charSpacing = textState.charSpacing;\n\n          if (glyph.isSpace) {\n            var wordSpacing = textState.wordSpacing;\n            charSpacing += wordSpacing;\n\n            if (wordSpacing > 0) {\n              addFakeSpaces(wordSpacing, textChunk.str);\n            }\n          }\n\n          var tx = 0;\n          var ty = 0;\n\n          if (!font.vertical) {\n            var w0 = glyphWidth * textState.fontMatrix[0];\n            tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;\n            width += tx;\n          } else {\n            var w1 = glyphWidth * textState.fontMatrix[0];\n            ty = w1 * textState.fontSize + charSpacing;\n            height += ty;\n          }\n\n          textState.translateTextMatrix(tx, ty);\n          textChunk.str.push(glyphUnicode);\n        }\n\n        if (!font.vertical) {\n          textChunk.lastAdvanceWidth = width;\n          textChunk.width += width;\n        } else {\n          textChunk.lastAdvanceHeight = height;\n          textChunk.height += Math.abs(height);\n        }\n\n        return textChunk;\n      }\n\n      function addFakeSpaces(width, strBuf) {\n        if (width < textContentItem.fakeSpaceMin) {\n          return;\n        }\n\n        if (width < textContentItem.fakeMultiSpaceMin) {\n          strBuf.push(\" \");\n          return;\n        }\n\n        var fakeSpaces = Math.round(width / textContentItem.spaceWidth);\n\n        while (fakeSpaces-- > 0) {\n          strBuf.push(\" \");\n        }\n      }\n\n      function flushTextContentItem() {\n        if (!textContentItem.initialized) {\n          return;\n        }\n\n        if (!textContentItem.vertical) {\n          textContentItem.width *= textContentItem.textAdvanceScale;\n        } else {\n          textContentItem.height *= textContentItem.textAdvanceScale;\n        }\n\n        textContent.items.push(runBidiTransform(textContentItem));\n        textContentItem.initialized = false;\n        textContentItem.str.length = 0;\n      }\n\n      function enqueueChunk() {\n        const length = textContent.items.length;\n\n        if (length > 0) {\n          sink.enqueue(textContent, length);\n          textContent.items = [];\n          textContent.styles = Object.create(null);\n        }\n      }\n\n      var timeSlotManager = new TimeSlotManager();\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          enqueueChunk();\n          Promise.all([promise, sink.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n            operation = {},\n            args = [];\n\n        while (!(stop = timeSlotManager.check())) {\n          args.length = 0;\n          operation.args = args;\n\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n\n          textState = stateManager.state;\n          var fn = operation.fn;\n          args = operation.args;\n          var advance, diff;\n\n          switch (fn | 0) {\n            case _util.OPS.setFont:\n              var fontNameArg = args[0].name,\n                  fontSizeArg = args[1];\n\n              if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {\n                break;\n              }\n\n              flushTextContentItem();\n              textState.fontName = fontNameArg;\n              textState.fontSize = fontSizeArg;\n              next(handleSetFont(fontNameArg, null));\n              return;\n\n            case _util.OPS.setTextRise:\n              flushTextContentItem();\n              textState.textRise = args[0];\n              break;\n\n            case _util.OPS.setHScale:\n              flushTextContentItem();\n              textState.textHScale = args[0] / 100;\n              break;\n\n            case _util.OPS.setLeading:\n              flushTextContentItem();\n              textState.leading = args[0];\n              break;\n\n            case _util.OPS.moveText:\n              var isSameTextLine = !textState.font ? false : (textState.font.vertical ? args[0] : args[1]) === 0;\n              advance = args[0] - args[1];\n\n              if (combineTextItems && isSameTextLine && textContentItem.initialized && advance > 0 && advance <= textContentItem.fakeMultiSpaceMax) {\n                textState.translateTextLineMatrix(args[0], args[1]);\n                textContentItem.width += args[0] - textContentItem.lastAdvanceWidth;\n                textContentItem.height += args[1] - textContentItem.lastAdvanceHeight;\n                diff = args[0] - textContentItem.lastAdvanceWidth - (args[1] - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n\n            case _util.OPS.setLeadingMoveText:\n              flushTextContentItem();\n              textState.leading = -args[1];\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n\n            case _util.OPS.nextLine:\n              flushTextContentItem();\n              textState.carriageReturn();\n              break;\n\n            case _util.OPS.setTextMatrix:\n              advance = textState.calcTextLineMatrixAdvance(args[0], args[1], args[2], args[3], args[4], args[5]);\n\n              if (combineTextItems && advance !== null && textContentItem.initialized && advance.value > 0 && advance.value <= textContentItem.fakeMultiSpaceMax) {\n                textState.translateTextLineMatrix(advance.width, advance.height);\n                textContentItem.width += advance.width - textContentItem.lastAdvanceWidth;\n                textContentItem.height += advance.height - textContentItem.lastAdvanceHeight;\n                diff = advance.width - textContentItem.lastAdvanceWidth - (advance.height - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.setCharSpacing:\n              textState.charSpacing = args[0];\n              break;\n\n            case _util.OPS.setWordSpacing:\n              textState.wordSpacing = args[0];\n              break;\n\n            case _util.OPS.beginText:\n              flushTextContentItem();\n              textState.textMatrix = _util.IDENTITY_MATRIX.slice();\n              textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n              break;\n\n            case _util.OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              var items = args[0];\n              var offset;\n\n              for (var j = 0, jj = items.length; j < jj; j++) {\n                if (typeof items[j] === \"string\") {\n                  buildTextContentItem(items[j]);\n                } else if ((0, _util.isNum)(items[j])) {\n                  ensureTextContentItem();\n                  advance = items[j] * textState.fontSize / 1000;\n                  var breakTextRun = false;\n\n                  if (textState.font.vertical) {\n                    offset = advance;\n                    textState.translateTextMatrix(0, offset);\n                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                    if (!breakTextRun) {\n                      textContentItem.height += offset;\n                    }\n                  } else {\n                    advance = -advance;\n                    offset = advance * textState.textHScale;\n                    textState.translateTextMatrix(offset, 0);\n                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                    if (!breakTextRun) {\n                      textContentItem.width += offset;\n                    }\n                  }\n\n                  if (breakTextRun) {\n                    flushTextContentItem();\n                  } else if (advance > 0) {\n                    addFakeSpaces(advance, textContentItem.str);\n                  }\n                }\n              }\n\n              break;\n\n            case _util.OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              buildTextContentItem(args[0]);\n              break;\n\n            case _util.OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              flushTextContentItem();\n              textState.carriageReturn();\n              buildTextContentItem(args[0]);\n              break;\n\n            case _util.OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              flushTextContentItem();\n              textState.wordSpacing = args[0];\n              textState.charSpacing = args[1];\n              textState.carriageReturn();\n              buildTextContentItem(args[2]);\n              break;\n\n            case _util.OPS.paintXObject:\n              flushTextContentItem();\n\n              if (!xobjs) {\n                xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n              }\n\n              var name = args[0].name;\n\n              if (name && emptyXObjectCache.getByName(name)) {\n                break;\n              }\n\n              next(new Promise(function (resolveXObject, rejectXObject) {\n                if (!name) {\n                  throw new _util.FormatError(\"XObject must be referred to by name.\");\n                }\n\n                let xobj = xobjs.getRaw(name);\n\n                if (xobj instanceof _primitives.Ref) {\n                  if (emptyXObjectCache.getByRef(xobj)) {\n                    resolveXObject();\n                    return;\n                  }\n\n                  xobj = xref.fetch(xobj);\n                }\n\n                if (!xobj) {\n                  resolveXObject();\n                  return;\n                }\n\n                if (!(0, _primitives.isStream)(xobj)) {\n                  throw new _util.FormatError(\"XObject should be a stream\");\n                }\n\n                const type = xobj.dict.get(\"Subtype\");\n\n                if (!(0, _primitives.isName)(type)) {\n                  throw new _util.FormatError(\"XObject should have a Name subtype\");\n                }\n\n                if (type.name !== \"Form\") {\n                  emptyXObjectCache.set(name, xobj.dict.objId, true);\n                  resolveXObject();\n                  return;\n                }\n\n                const currentState = stateManager.state.clone();\n                const xObjStateManager = new StateManager(currentState);\n                const matrix = xobj.dict.getArray(\"Matrix\");\n\n                if (Array.isArray(matrix) && matrix.length === 6) {\n                  xObjStateManager.transform(matrix);\n                }\n\n                enqueueChunk();\n                const sinkWrapper = {\n                  enqueueInvoked: false,\n\n                  enqueue(chunk, size) {\n                    this.enqueueInvoked = true;\n                    sink.enqueue(chunk, size);\n                  },\n\n                  get desiredSize() {\n                    return sink.desiredSize;\n                  },\n\n                  get ready() {\n                    return sink.ready;\n                  }\n\n                };\n                self.getTextContent({\n                  stream: xobj,\n                  task,\n                  resources: xobj.dict.get(\"Resources\") || resources,\n                  stateManager: xObjStateManager,\n                  normalizeWhitespace,\n                  combineTextItems,\n                  sink: sinkWrapper,\n                  seenStyles\n                }).then(function () {\n                  if (!sinkWrapper.enqueueInvoked) {\n                    emptyXObjectCache.set(name, xobj.dict.objId, true);\n                  }\n\n                  resolveXObject();\n                }, rejectXObject);\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  (0, _util.warn)(`getTextContent - ignoring XObject: \"${reason}\".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n\n            case _util.OPS.setGState:\n              flushTextContentItem();\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!(0, _primitives.isDict)(extGState) || !(0, _primitives.isName)(dictName)) {\n                break;\n              }\n\n              var gState = extGState.get(dictName.name);\n\n              if (!(0, _primitives.isDict)(gState)) {\n                break;\n              }\n\n              var gStateFont = gState.get(\"Font\");\n\n              if (gStateFont) {\n                textState.fontName = null;\n                textState.fontSize = gStateFont[1];\n                next(handleSetFont(null, gStateFont[0]));\n                return;\n              }\n\n              break;\n          }\n\n          if (textContent.items.length >= sink.desiredSize) {\n            stop = true;\n            break;\n          }\n        }\n\n        if (stop) {\n          next(deferred);\n          return;\n        }\n\n        flushTextContentItem();\n        enqueueChunk();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          (0, _util.warn)(`getTextContent - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n          flushTextContentItem();\n          enqueueChunk();\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    extractDataStructures: function PartialEvaluator_extractDataStructures(dict, baseDict, properties) {\n      const xref = this.xref;\n      let cidToGidBytes;\n      var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n      var toUnicodePromise = toUnicode ? this.readToUnicode(toUnicode) : Promise.resolve(undefined);\n\n      if (properties.composite) {\n        var cidSystemInfo = dict.get(\"CIDSystemInfo\");\n\n        if ((0, _primitives.isDict)(cidSystemInfo)) {\n          properties.cidSystemInfo = {\n            registry: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Registry\")),\n            ordering: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Ordering\")),\n            supplement: cidSystemInfo.get(\"Supplement\")\n          };\n        }\n\n        var cidToGidMap = dict.get(\"CIDToGIDMap\");\n\n        if ((0, _primitives.isStream)(cidToGidMap)) {\n          cidToGidBytes = cidToGidMap.getBytes();\n        }\n      }\n\n      var differences = [];\n      var baseEncodingName = null;\n      var encoding;\n\n      if (dict.has(\"Encoding\")) {\n        encoding = dict.get(\"Encoding\");\n\n        if ((0, _primitives.isDict)(encoding)) {\n          baseEncodingName = encoding.get(\"BaseEncoding\");\n          baseEncodingName = (0, _primitives.isName)(baseEncodingName) ? baseEncodingName.name : null;\n\n          if (encoding.has(\"Differences\")) {\n            var diffEncoding = encoding.get(\"Differences\");\n            var index = 0;\n\n            for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n              var data = xref.fetchIfRef(diffEncoding[j]);\n\n              if ((0, _util.isNum)(data)) {\n                index = data;\n              } else if ((0, _primitives.isName)(data)) {\n                differences[index++] = data.name;\n              } else {\n                throw new _util.FormatError(`Invalid entry in 'Differences' array: ${data}`);\n              }\n            }\n          }\n        } else if ((0, _primitives.isName)(encoding)) {\n          baseEncodingName = encoding.name;\n        } else {\n          throw new _util.FormatError(\"Encoding is not a Name nor a Dict\");\n        }\n\n        if (baseEncodingName !== \"MacRomanEncoding\" && baseEncodingName !== \"MacExpertEncoding\" && baseEncodingName !== \"WinAnsiEncoding\") {\n          baseEncodingName = null;\n        }\n      }\n\n      if (baseEncodingName) {\n        properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName).slice();\n      } else {\n        var isSymbolicFont = !!(properties.flags & _fonts.FontFlags.Symbolic);\n        var isNonsymbolicFont = !!(properties.flags & _fonts.FontFlags.Nonsymbolic);\n        encoding = _encodings.StandardEncoding;\n\n        if (properties.type === \"TrueType\" && !isNonsymbolicFont) {\n          encoding = _encodings.WinAnsiEncoding;\n        }\n\n        if (isSymbolicFont) {\n          encoding = _encodings.MacRomanEncoding;\n\n          if (!properties.file) {\n            if (/Symbol/i.test(properties.name)) {\n              encoding = _encodings.SymbolSetEncoding;\n            } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n              encoding = _encodings.ZapfDingbatsEncoding;\n            }\n          }\n        }\n\n        properties.defaultEncoding = encoding;\n      }\n\n      properties.differences = differences;\n      properties.baseEncodingName = baseEncodingName;\n      properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n      properties.dict = dict;\n      return toUnicodePromise.then(readToUnicode => {\n        properties.toUnicode = readToUnicode;\n        return this.buildToUnicode(properties);\n      }).then(builtToUnicode => {\n        properties.toUnicode = builtToUnicode;\n\n        if (cidToGidBytes) {\n          properties.cidToGidMap = this.readCidToGidMap(cidToGidBytes, builtToUnicode);\n        }\n\n        return properties;\n      });\n    },\n\n    _buildSimpleFontToUnicode(properties, forceGlyphs = false) {\n      (0, _util.assert)(!properties.composite, \"Must be a simple font.\");\n      const toUnicode = [];\n      const encoding = properties.defaultEncoding.slice();\n      const baseEncodingName = properties.baseEncodingName;\n      const differences = properties.differences;\n\n      for (const charcode in differences) {\n        const glyphName = differences[charcode];\n\n        if (glyphName === \".notdef\") {\n          continue;\n        }\n\n        encoding[charcode] = glyphName;\n      }\n\n      const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n      for (const charcode in encoding) {\n        let glyphName = encoding[charcode];\n\n        if (glyphName === \"\") {\n          continue;\n        } else if (glyphsUnicodeMap[glyphName] === undefined) {\n          let code = 0;\n\n          switch (glyphName[0]) {\n            case \"G\":\n              if (glyphName.length === 3) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n\n              break;\n\n            case \"g\":\n              if (glyphName.length === 5) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n\n              break;\n\n            case \"C\":\n            case \"c\":\n              if (glyphName.length >= 3 && glyphName.length <= 4) {\n                const codeStr = glyphName.substring(1);\n\n                if (forceGlyphs) {\n                  code = parseInt(codeStr, 16);\n                  break;\n                }\n\n                code = +codeStr;\n\n                if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {\n                  return this._buildSimpleFontToUnicode(properties, true);\n                }\n              }\n\n              break;\n\n            default:\n              const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n              if (unicode !== -1) {\n                code = unicode;\n              }\n\n          }\n\n          if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {\n            if (baseEncodingName && code === +charcode) {\n              const baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n\n              if (baseEncoding && (glyphName = baseEncoding[charcode])) {\n                toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n                continue;\n              }\n            }\n\n            toUnicode[charcode] = String.fromCodePoint(code);\n          }\n\n          continue;\n        }\n\n        toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n      }\n\n      return new _fonts.ToUnicodeMap(toUnicode);\n    },\n\n    buildToUnicode(properties) {\n      properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;\n\n      if (properties.hasIncludedToUnicodeMap) {\n        if (!properties.composite && properties.hasEncoding) {\n          properties.fallbackToUnicode = this._buildSimpleFontToUnicode(properties);\n        }\n\n        return Promise.resolve(properties.toUnicode);\n      }\n\n      if (!properties.composite) {\n        return Promise.resolve(this._buildSimpleFontToUnicode(properties));\n      }\n\n      if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === \"Adobe\" && (properties.cidSystemInfo.ordering === \"GB1\" || properties.cidSystemInfo.ordering === \"CNS1\" || properties.cidSystemInfo.ordering === \"Japan1\" || properties.cidSystemInfo.ordering === \"Korea1\"))) {\n        const registry = properties.cidSystemInfo.registry;\n        const ordering = properties.cidSystemInfo.ordering;\n\n        const ucs2CMapName = _primitives.Name.get(registry + \"-\" + ordering + \"-UCS2\");\n\n        return _cmap.CMapFactory.create({\n          encoding: ucs2CMapName,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (ucs2CMap) {\n          const cMap = properties.cMap;\n          const toUnicode = [];\n          cMap.forEach(function (charcode, cid) {\n            if (cid > 0xffff) {\n              throw new _util.FormatError(\"Max size of CID is 65,535\");\n            }\n\n            const ucs2 = ucs2CMap.lookup(cid);\n\n            if (ucs2) {\n              toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));\n            }\n          });\n          return new _fonts.ToUnicodeMap(toUnicode);\n        });\n      }\n\n      return Promise.resolve(new _fonts.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));\n    },\n\n    readToUnicode: function PartialEvaluator_readToUnicode(toUnicode) {\n      var cmapObj = toUnicode;\n\n      if ((0, _primitives.isName)(cmapObj)) {\n        return _cmap.CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cmap) {\n          if (cmap instanceof _cmap.IdentityCMap) {\n            return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n          }\n\n          return new _fonts.ToUnicodeMap(cmap.getMap());\n        });\n      } else if ((0, _primitives.isStream)(cmapObj)) {\n        return _cmap.CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cmap) {\n          if (cmap instanceof _cmap.IdentityCMap) {\n            return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n          }\n\n          var map = new Array(cmap.length);\n          cmap.forEach(function (charCode, token) {\n            var str = [];\n\n            for (var k = 0; k < token.length; k += 2) {\n              var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n\n              if ((w1 & 0xf800) !== 0xd800) {\n                str.push(w1);\n                continue;\n              }\n\n              k += 2;\n              var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n              str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n            }\n\n            map[charCode] = String.fromCodePoint.apply(String, str);\n          });\n          return new _fonts.ToUnicodeMap(map);\n        }, reason => {\n          if (reason instanceof _util.AbortException) {\n            return null;\n          }\n\n          if (this.options.ignoreErrors) {\n            this.handler.send(\"UnsupportedFeature\", {\n              featureId: _util.UNSUPPORTED_FEATURES.errorFontToUnicode\n            });\n            (0, _util.warn)(`readToUnicode - ignoring ToUnicode data: \"${reason}\".`);\n            return null;\n          }\n\n          throw reason;\n        });\n      }\n\n      return Promise.resolve(null);\n    },\n\n    readCidToGidMap(glyphsData, toUnicode) {\n      var result = [];\n\n      for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n        var glyphID = glyphsData[j++] << 8 | glyphsData[j];\n        const code = j >> 1;\n\n        if (glyphID === 0 && !toUnicode.has(code)) {\n          continue;\n        }\n\n        result[code] = glyphID;\n      }\n\n      return result;\n    },\n\n    extractWidths: function PartialEvaluator_extractWidths(dict, descriptor, properties) {\n      var xref = this.xref;\n      var glyphsWidths = [];\n      var defaultWidth = 0;\n      var glyphsVMetrics = [];\n      var defaultVMetrics;\n      var i, ii, j, jj, start, code, widths;\n\n      if (properties.composite) {\n        defaultWidth = dict.has(\"DW\") ? dict.get(\"DW\") : 1000;\n        widths = dict.get(\"W\");\n\n        if (widths) {\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            start = xref.fetchIfRef(widths[i++]);\n            code = xref.fetchIfRef(widths[i]);\n\n            if (Array.isArray(code)) {\n              for (j = 0, jj = code.length; j < jj; j++) {\n                glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n              }\n            } else {\n              var width = xref.fetchIfRef(widths[++i]);\n\n              for (j = start; j <= code; j++) {\n                glyphsWidths[j] = width;\n              }\n            }\n          }\n        }\n\n        if (properties.vertical) {\n          var vmetrics = dict.getArray(\"DW2\") || [880, -1000];\n          defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n          vmetrics = dict.get(\"W2\");\n\n          if (vmetrics) {\n            for (i = 0, ii = vmetrics.length; i < ii; i++) {\n              start = xref.fetchIfRef(vmetrics[i++]);\n              code = xref.fetchIfRef(vmetrics[i]);\n\n              if (Array.isArray(code)) {\n                for (j = 0, jj = code.length; j < jj; j++) {\n                  glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];\n                }\n              } else {\n                var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];\n\n                for (j = start; j <= code; j++) {\n                  glyphsVMetrics[j] = vmetric;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        var firstChar = properties.firstChar;\n        widths = dict.get(\"Widths\");\n\n        if (widths) {\n          j = firstChar;\n\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n          }\n\n          defaultWidth = parseFloat(descriptor.get(\"MissingWidth\")) || 0;\n        } else {\n          var baseFontName = dict.get(\"BaseFont\");\n\n          if ((0, _primitives.isName)(baseFontName)) {\n            var metrics = this.getBaseFontMetrics(baseFontName.name);\n            glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);\n            defaultWidth = metrics.defaultWidth;\n          }\n        }\n      }\n\n      var isMonospace = true;\n      var firstWidth = defaultWidth;\n\n      for (var glyph in glyphsWidths) {\n        var glyphWidth = glyphsWidths[glyph];\n\n        if (!glyphWidth) {\n          continue;\n        }\n\n        if (!firstWidth) {\n          firstWidth = glyphWidth;\n          continue;\n        }\n\n        if (firstWidth !== glyphWidth) {\n          isMonospace = false;\n          break;\n        }\n      }\n\n      if (isMonospace) {\n        properties.flags |= _fonts.FontFlags.FixedPitch;\n      }\n\n      properties.defaultWidth = defaultWidth;\n      properties.widths = glyphsWidths;\n      properties.defaultVMetrics = defaultVMetrics;\n      properties.vmetrics = glyphsVMetrics;\n    },\n    isSerifFont: function PartialEvaluator_isSerifFont(baseFontName) {\n      var fontNameWoStyle = baseFontName.split(\"-\")[0];\n      return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;\n    },\n    getBaseFontMetrics: function PartialEvaluator_getBaseFontMetrics(name) {\n      var defaultWidth = 0;\n      var widths = [];\n      var monospace = false;\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)();\n      var lookupName = stdFontMap[name] || name;\n      var Metrics = (0, _metrics.getMetrics)();\n\n      if (!(lookupName in Metrics)) {\n        if (this.isSerifFont(name)) {\n          lookupName = \"Times-Roman\";\n        } else {\n          lookupName = \"Helvetica\";\n        }\n      }\n\n      var glyphWidths = Metrics[lookupName];\n\n      if ((0, _util.isNum)(glyphWidths)) {\n        defaultWidth = glyphWidths;\n        monospace = true;\n      } else {\n        widths = glyphWidths();\n      }\n\n      return {\n        defaultWidth,\n        monospace,\n        widths\n      };\n    },\n    buildCharCodeToWidth: function PartialEvaluator_bulildCharCodeToWidth(widthsByGlyphName, properties) {\n      var widths = Object.create(null);\n      var differences = properties.differences;\n      var encoding = properties.defaultEncoding;\n\n      for (var charCode = 0; charCode < 256; charCode++) {\n        if (charCode in differences && widthsByGlyphName[differences[charCode]]) {\n          widths[charCode] = widthsByGlyphName[differences[charCode]];\n          continue;\n        }\n\n        if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n          widths[charCode] = widthsByGlyphName[encoding[charCode]];\n          continue;\n        }\n      }\n\n      return widths;\n    },\n    preEvaluateFont: function PartialEvaluator_preEvaluateFont(dict) {\n      var baseDict = dict;\n      var type = dict.get(\"Subtype\");\n\n      if (!(0, _primitives.isName)(type)) {\n        throw new _util.FormatError(\"invalid font Subtype\");\n      }\n\n      var composite = false;\n      var uint8array;\n\n      if (type.name === \"Type0\") {\n        var df = dict.get(\"DescendantFonts\");\n\n        if (!df) {\n          throw new _util.FormatError(\"Descendant fonts are not specified\");\n        }\n\n        dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n        type = dict.get(\"Subtype\");\n\n        if (!(0, _primitives.isName)(type)) {\n          throw new _util.FormatError(\"invalid font Subtype\");\n        }\n\n        composite = true;\n      }\n\n      var descriptor = dict.get(\"FontDescriptor\");\n\n      if (descriptor) {\n        var hash = new _murmurhash.MurmurHash3_64();\n        var encoding = baseDict.getRaw(\"Encoding\");\n\n        if ((0, _primitives.isName)(encoding)) {\n          hash.update(encoding.name);\n        } else if ((0, _primitives.isRef)(encoding)) {\n          hash.update(encoding.toString());\n        } else if ((0, _primitives.isDict)(encoding)) {\n          var keys = encoding.getKeys();\n\n          for (var i = 0, ii = keys.length; i < ii; i++) {\n            var entry = encoding.getRaw(keys[i]);\n\n            if ((0, _primitives.isName)(entry)) {\n              hash.update(entry.name);\n            } else if ((0, _primitives.isRef)(entry)) {\n              hash.update(entry.toString());\n            } else if (Array.isArray(entry)) {\n              var diffLength = entry.length,\n                  diffBuf = new Array(diffLength);\n\n              for (var j = 0; j < diffLength; j++) {\n                var diffEntry = entry[j];\n\n                if ((0, _primitives.isName)(diffEntry)) {\n                  diffBuf[j] = diffEntry.name;\n                } else if ((0, _util.isNum)(diffEntry) || (0, _primitives.isRef)(diffEntry)) {\n                  diffBuf[j] = diffEntry.toString();\n                }\n              }\n\n              hash.update(diffBuf.join());\n            }\n          }\n        }\n\n        const firstChar = dict.get(\"FirstChar\") || 0;\n        const lastChar = dict.get(\"LastChar\") || (composite ? 0xffff : 0xff);\n        hash.update(`${firstChar}-${lastChar}`);\n        var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n\n        if ((0, _primitives.isStream)(toUnicode)) {\n          var stream = toUnicode.str || toUnicode;\n          uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);\n          hash.update(uint8array);\n        } else if ((0, _primitives.isName)(toUnicode)) {\n          hash.update(toUnicode.name);\n        }\n\n        var widths = dict.get(\"Widths\") || baseDict.get(\"Widths\");\n\n        if (widths) {\n          uint8array = new Uint8Array(new Uint32Array(widths).buffer);\n          hash.update(uint8array);\n        }\n      }\n\n      return {\n        descriptor,\n        dict,\n        baseDict,\n        composite,\n        type: type.name,\n        hash: hash ? hash.hexdigest() : \"\"\n      };\n    },\n    translateFont: function PartialEvaluator_translateFont(preEvaluatedFont) {\n      var baseDict = preEvaluatedFont.baseDict;\n      var dict = preEvaluatedFont.dict;\n      var composite = preEvaluatedFont.composite;\n      var descriptor = preEvaluatedFont.descriptor;\n      var type = preEvaluatedFont.type;\n      var maxCharIndex = composite ? 0xffff : 0xff;\n      var properties;\n      const firstChar = dict.get(\"FirstChar\") || 0;\n      const lastChar = dict.get(\"LastChar\") || maxCharIndex;\n\n      if (!descriptor) {\n        if (type === \"Type3\") {\n          descriptor = new _primitives.Dict(null);\n          descriptor.set(\"FontName\", _primitives.Name.get(type));\n          descriptor.set(\"FontBBox\", dict.getArray(\"FontBBox\") || [0, 0, 0, 0]);\n        } else {\n          var baseFontName = dict.get(\"BaseFont\");\n\n          if (!(0, _primitives.isName)(baseFontName)) {\n            throw new _util.FormatError(\"Base font is not specified\");\n          }\n\n          baseFontName = baseFontName.name.replace(/[,_]/g, \"-\");\n          var metrics = this.getBaseFontMetrics(baseFontName);\n          var fontNameWoStyle = baseFontName.split(\"-\")[0];\n          var flags = (this.isSerifFont(fontNameWoStyle) ? _fonts.FontFlags.Serif : 0) | (metrics.monospace ? _fonts.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts.FontFlags.Symbolic : _fonts.FontFlags.Nonsymbolic);\n          properties = {\n            type,\n            name: baseFontName,\n            widths: metrics.widths,\n            defaultWidth: metrics.defaultWidth,\n            flags,\n            firstChar,\n            lastChar\n          };\n          const widths = dict.get(\"Widths\");\n          return this.extractDataStructures(dict, dict, properties).then(newProperties => {\n            if (widths) {\n              const glyphWidths = [];\n              let j = firstChar;\n\n              for (let i = 0, ii = widths.length; i < ii; i++) {\n                glyphWidths[j++] = this.xref.fetchIfRef(widths[i]);\n              }\n\n              newProperties.widths = glyphWidths;\n            } else {\n              newProperties.widths = this.buildCharCodeToWidth(metrics.widths, newProperties);\n            }\n\n            return new _fonts.Font(baseFontName, null, newProperties);\n          });\n        }\n      }\n\n      var fontName = descriptor.get(\"FontName\");\n      var baseFont = dict.get(\"BaseFont\");\n\n      if ((0, _util.isString)(fontName)) {\n        fontName = _primitives.Name.get(fontName);\n      }\n\n      if ((0, _util.isString)(baseFont)) {\n        baseFont = _primitives.Name.get(baseFont);\n      }\n\n      if (type !== \"Type3\") {\n        var fontNameStr = fontName && fontName.name;\n        var baseFontStr = baseFont && baseFont.name;\n\n        if (fontNameStr !== baseFontStr) {\n          (0, _util.info)(`The FontDescriptor\\'s FontName is \"${fontNameStr}\" but ` + `should be the same as the Font\\'s BaseFont \"${baseFontStr}\".`);\n\n          if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {\n            fontName = baseFont;\n          }\n        }\n      }\n\n      fontName = fontName || baseFont;\n\n      if (!(0, _primitives.isName)(fontName)) {\n        throw new _util.FormatError(\"invalid font name\");\n      }\n\n      var fontFile = descriptor.get(\"FontFile\", \"FontFile2\", \"FontFile3\");\n\n      if (fontFile) {\n        if (fontFile.dict) {\n          var subtype = fontFile.dict.get(\"Subtype\");\n\n          if (subtype) {\n            subtype = subtype.name;\n          }\n\n          var length1 = fontFile.dict.get(\"Length1\");\n          var length2 = fontFile.dict.get(\"Length2\");\n          var length3 = fontFile.dict.get(\"Length3\");\n        }\n      }\n\n      properties = {\n        type,\n        name: fontName.name,\n        subtype,\n        file: fontFile,\n        length1,\n        length2,\n        length3,\n        loadedName: baseDict.loadedName,\n        composite,\n        fixedPitch: false,\n        fontMatrix: dict.getArray(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX,\n        firstChar: firstChar || 0,\n        lastChar: lastChar || maxCharIndex,\n        bbox: descriptor.getArray(\"FontBBox\"),\n        ascent: descriptor.get(\"Ascent\"),\n        descent: descriptor.get(\"Descent\"),\n        xHeight: descriptor.get(\"XHeight\"),\n        capHeight: descriptor.get(\"CapHeight\"),\n        flags: descriptor.get(\"Flags\"),\n        italicAngle: descriptor.get(\"ItalicAngle\"),\n        isType3Font: false\n      };\n      var cMapPromise;\n\n      if (composite) {\n        var cidEncoding = baseDict.get(\"Encoding\");\n\n        if ((0, _primitives.isName)(cidEncoding)) {\n          properties.cidEncoding = cidEncoding.name;\n        }\n\n        cMapPromise = _cmap.CMapFactory.create({\n          encoding: cidEncoding,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cMap) {\n          properties.cMap = cMap;\n          properties.vertical = properties.cMap.vertical;\n        });\n      } else {\n        cMapPromise = Promise.resolve(undefined);\n      }\n\n      return cMapPromise.then(() => {\n        return this.extractDataStructures(dict, baseDict, properties);\n      }).then(newProperties => {\n        this.extractWidths(dict, descriptor, newProperties);\n\n        if (type === \"Type3\") {\n          newProperties.isType3Font = true;\n        }\n\n        return new _fonts.Font(fontName.name, fontFile, newProperties);\n      });\n    }\n  };\n\n  PartialEvaluator.buildFontPaths = function (font, glyphs, handler) {\n    function buildPath(fontChar) {\n      if (font.renderer.hasBuiltPath(fontChar)) {\n        return;\n      }\n\n      handler.send(\"commonobj\", [`${font.loadedName}_path_${fontChar}`, \"FontPath\", font.renderer.getPathJs(fontChar)]);\n    }\n\n    for (const glyph of glyphs) {\n      buildPath(glyph.fontChar);\n      const accent = glyph.accent;\n\n      if (accent && accent.fontChar) {\n        buildPath(accent.fontChar);\n      }\n    }\n  };\n\n  PartialEvaluator.getFallbackFontDict = function () {\n    if (this._fallbackFontDict) {\n      return this._fallbackFontDict;\n    }\n\n    const dict = new _primitives.Dict();\n    dict.set(\"BaseFont\", _primitives.Name.get(\"PDFJS-FallbackFont\"));\n    dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n    return this._fallbackFontDict = dict;\n  };\n\n  return PartialEvaluator;\n}();\n\nexports.PartialEvaluator = PartialEvaluator;\n\nclass TranslatedFont {\n  constructor({\n    loadedName,\n    font,\n    dict,\n    extraProperties = false\n  }) {\n    this.loadedName = loadedName;\n    this.font = font;\n    this.dict = dict;\n    this._extraProperties = extraProperties;\n    this.type3Loaded = null;\n    this.sent = false;\n  }\n\n  send(handler) {\n    if (this.sent) {\n      return;\n    }\n\n    this.sent = true;\n    handler.send(\"commonobj\", [this.loadedName, \"Font\", this.font.exportData(this._extraProperties)]);\n  }\n\n  fallback(handler) {\n    if (!this.font.data) {\n      return;\n    }\n\n    this.font.disableFontFace = true;\n    const glyphs = this.font.glyphCacheValues;\n    PartialEvaluator.buildFontPaths(this.font, glyphs, handler);\n  }\n\n  loadType3Data(evaluator, resources, parentOperatorList, task) {\n    if (!this.font.isType3Font) {\n      throw new Error(\"Must be a Type3 font.\");\n    }\n\n    if (this.type3Loaded) {\n      return this.type3Loaded;\n    }\n\n    var type3Options = Object.create(evaluator.options);\n    type3Options.ignoreErrors = false;\n    var type3Evaluator = evaluator.clone(type3Options);\n    type3Evaluator.parsingType3Font = true;\n    var translatedFont = this.font;\n    var loadCharProcsPromise = Promise.resolve();\n    var charProcs = this.dict.get(\"CharProcs\");\n    var fontResources = this.dict.get(\"Resources\") || resources;\n    var charProcKeys = charProcs.getKeys();\n    var charProcOperatorList = Object.create(null);\n\n    for (var i = 0, n = charProcKeys.length; i < n; ++i) {\n      const key = charProcKeys[i];\n      loadCharProcsPromise = loadCharProcsPromise.then(function () {\n        var glyphStream = charProcs.get(key);\n        var operatorList = new _operator_list.OperatorList();\n        return type3Evaluator.getOperatorList({\n          stream: glyphStream,\n          task,\n          resources: fontResources,\n          operatorList\n        }).then(function () {\n          charProcOperatorList[key] = operatorList.getIR();\n          parentOperatorList.addDependencies(operatorList.dependencies);\n        }).catch(function (reason) {\n          (0, _util.warn)(`Type3 font resource \"${key}\" is not available.`);\n          const dummyOperatorList = new _operator_list.OperatorList();\n          charProcOperatorList[key] = dummyOperatorList.getIR();\n        });\n      });\n    }\n\n    this.type3Loaded = loadCharProcsPromise.then(function () {\n      translatedFont.charProcOperatorList = charProcOperatorList;\n    });\n    return this.type3Loaded;\n  }\n\n}\n\nvar StateManager = function StateManagerClosure() {\n  function StateManager(initialState) {\n    this.state = initialState;\n    this.stateStack = [];\n  }\n\n  StateManager.prototype = {\n    save() {\n      var old = this.state;\n      this.stateStack.push(this.state);\n      this.state = old.clone();\n    },\n\n    restore() {\n      var prev = this.stateStack.pop();\n\n      if (prev) {\n        this.state = prev;\n      }\n    },\n\n    transform(args) {\n      this.state.ctm = _util.Util.transform(this.state.ctm, args);\n    }\n\n  };\n  return StateManager;\n}();\n\nvar TextState = function TextStateClosure() {\n  function TextState() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.fontName = null;\n    this.fontSize = 0;\n    this.font = null;\n    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n    this.textMatrix = _util.IDENTITY_MATRIX.slice();\n    this.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.leading = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n  }\n\n  TextState.prototype = {\n    setTextMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    setTextLineMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textLineMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    translateTextMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    translateTextLineMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textLineMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    calcTextLineMatrixAdvance: function TextState_calcTextLineMatrixAdvance(a, b, c, d, e, f) {\n      var font = this.font;\n\n      if (!font) {\n        return null;\n      }\n\n      var m = this.textLineMatrix;\n\n      if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {\n        return null;\n      }\n\n      var txDiff = e - m[4],\n          tyDiff = f - m[5];\n\n      if (font.vertical && txDiff !== 0 || !font.vertical && tyDiff !== 0) {\n        return null;\n      }\n\n      var tx,\n          ty,\n          denominator = a * d - b * c;\n\n      if (font.vertical) {\n        tx = -tyDiff * c / denominator;\n        ty = tyDiff * a / denominator;\n      } else {\n        tx = txDiff * d / denominator;\n        ty = -txDiff * b / denominator;\n      }\n\n      return {\n        width: tx,\n        height: ty,\n        value: font.vertical ? ty : tx\n      };\n    },\n    calcRenderMatrix: function TextState_calcRendeMatrix(ctm) {\n      var tsm = [this.fontSize * this.textHScale, 0, 0, this.fontSize, 0, this.textRise];\n      return _util.Util.transform(ctm, _util.Util.transform(this.textMatrix, tsm));\n    },\n    carriageReturn: function TextState_carriageReturn() {\n      this.translateTextLineMatrix(0, -this.leading);\n      this.textMatrix = this.textLineMatrix.slice();\n    },\n    clone: function TextState_clone() {\n      var clone = Object.create(this);\n      clone.textMatrix = this.textMatrix.slice();\n      clone.textLineMatrix = this.textLineMatrix.slice();\n      clone.fontMatrix = this.fontMatrix.slice();\n      return clone;\n    }\n  };\n  return TextState;\n}();\n\nvar EvalState = function EvalStateClosure() {\n  function EvalState() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.font = null;\n    this.textRenderingMode = _util.TextRenderingMode.FILL;\n    this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n    this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n  }\n\n  EvalState.prototype = {\n    clone: function CanvasExtraState_clone() {\n      return Object.create(this);\n    }\n  };\n  return EvalState;\n}();\n\nvar EvaluatorPreprocessor = function EvaluatorPreprocessorClosure() {\n  var getOPMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.w = {\n      id: _util.OPS.setLineWidth,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.J = {\n      id: _util.OPS.setLineCap,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.j = {\n      id: _util.OPS.setLineJoin,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.M = {\n      id: _util.OPS.setMiterLimit,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.d = {\n      id: _util.OPS.setDash,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.ri = {\n      id: _util.OPS.setRenderingIntent,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.i = {\n      id: _util.OPS.setFlatness,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.gs = {\n      id: _util.OPS.setGState,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.q = {\n      id: _util.OPS.save,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.Q = {\n      id: _util.OPS.restore,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.cm = {\n      id: _util.OPS.transform,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t.m = {\n      id: _util.OPS.moveTo,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.l = {\n      id: _util.OPS.lineTo,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.c = {\n      id: _util.OPS.curveTo,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t.v = {\n      id: _util.OPS.curveTo2,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t.y = {\n      id: _util.OPS.curveTo3,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t.h = {\n      id: _util.OPS.closePath,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.re = {\n      id: _util.OPS.rectangle,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t.S = {\n      id: _util.OPS.stroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.s = {\n      id: _util.OPS.closeStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.f = {\n      id: _util.OPS.fill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.F = {\n      id: _util.OPS.fill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"f*\"] = {\n      id: _util.OPS.eoFill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.B = {\n      id: _util.OPS.fillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"B*\"] = {\n      id: _util.OPS.eoFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.b = {\n      id: _util.OPS.closeFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"b*\"] = {\n      id: _util.OPS.closeEOFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.n = {\n      id: _util.OPS.endPath,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.W = {\n      id: _util.OPS.clip,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"W*\"] = {\n      id: _util.OPS.eoClip,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.BT = {\n      id: _util.OPS.beginText,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.ET = {\n      id: _util.OPS.endText,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.Tc = {\n      id: _util.OPS.setCharSpacing,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Tw = {\n      id: _util.OPS.setWordSpacing,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Tz = {\n      id: _util.OPS.setHScale,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.TL = {\n      id: _util.OPS.setLeading,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Tf = {\n      id: _util.OPS.setFont,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.Tr = {\n      id: _util.OPS.setTextRenderingMode,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Ts = {\n      id: _util.OPS.setTextRise,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Td = {\n      id: _util.OPS.moveText,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.TD = {\n      id: _util.OPS.setLeadingMoveText,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.Tm = {\n      id: _util.OPS.setTextMatrix,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t[\"T*\"] = {\n      id: _util.OPS.nextLine,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.Tj = {\n      id: _util.OPS.showText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.TJ = {\n      id: _util.OPS.showSpacedText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"'\"] = {\n      id: _util.OPS.nextLineShowText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t['\"'] = {\n      id: _util.OPS.nextLineSetSpacingShowText,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t.d0 = {\n      id: _util.OPS.setCharWidth,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.d1 = {\n      id: _util.OPS.setCharWidthAndBounds,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t.CS = {\n      id: _util.OPS.setStrokeColorSpace,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.cs = {\n      id: _util.OPS.setFillColorSpace,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.SC = {\n      id: _util.OPS.setStrokeColor,\n      numArgs: 4,\n      variableArgs: true\n    };\n    t.SCN = {\n      id: _util.OPS.setStrokeColorN,\n      numArgs: 33,\n      variableArgs: true\n    };\n    t.sc = {\n      id: _util.OPS.setFillColor,\n      numArgs: 4,\n      variableArgs: true\n    };\n    t.scn = {\n      id: _util.OPS.setFillColorN,\n      numArgs: 33,\n      variableArgs: true\n    };\n    t.G = {\n      id: _util.OPS.setStrokeGray,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.g = {\n      id: _util.OPS.setFillGray,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.RG = {\n      id: _util.OPS.setStrokeRGBColor,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t.rg = {\n      id: _util.OPS.setFillRGBColor,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t.K = {\n      id: _util.OPS.setStrokeCMYKColor,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t.k = {\n      id: _util.OPS.setFillCMYKColor,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t.sh = {\n      id: _util.OPS.shadingFill,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.BI = {\n      id: _util.OPS.beginInlineImage,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.ID = {\n      id: _util.OPS.beginImageData,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.EI = {\n      id: _util.OPS.endInlineImage,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.Do = {\n      id: _util.OPS.paintXObject,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.MP = {\n      id: _util.OPS.markPoint,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.DP = {\n      id: _util.OPS.markPointProps,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.BMC = {\n      id: _util.OPS.beginMarkedContent,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t.BDC = {\n      id: _util.OPS.beginMarkedContentProps,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t.EMC = {\n      id: _util.OPS.endMarkedContent,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.BX = {\n      id: _util.OPS.beginCompat,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.EX = {\n      id: _util.OPS.endCompat,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t.BM = null;\n    t.BD = null;\n    t.true = null;\n    t.fa = null;\n    t.fal = null;\n    t.fals = null;\n    t.false = null;\n    t.nu = null;\n    t.nul = null;\n    t.null = null;\n  });\n  const MAX_INVALID_PATH_OPS = 20;\n\n  function EvaluatorPreprocessor(stream, xref, stateManager) {\n    this.opMap = getOPMap();\n    this.parser = new _parser.Parser({\n      lexer: new _parser.Lexer(stream, this.opMap),\n      xref\n    });\n    this.stateManager = stateManager;\n    this.nonProcessedArgs = [];\n    this._numInvalidPathOPS = 0;\n  }\n\n  EvaluatorPreprocessor.prototype = {\n    get savedStatesDepth() {\n      return this.stateManager.stateStack.length;\n    },\n\n    read: function EvaluatorPreprocessor_read(operation) {\n      var args = operation.args;\n\n      while (true) {\n        var obj = this.parser.getObj();\n\n        if (obj instanceof _primitives.Cmd) {\n          var cmd = obj.cmd;\n          var opSpec = this.opMap[cmd];\n\n          if (!opSpec) {\n            (0, _util.warn)(`Unknown command \"${cmd}\".`);\n            continue;\n          }\n\n          var fn = opSpec.id;\n          var numArgs = opSpec.numArgs;\n          var argsLength = args !== null ? args.length : 0;\n\n          if (!opSpec.variableArgs) {\n            if (argsLength !== numArgs) {\n              var nonProcessedArgs = this.nonProcessedArgs;\n\n              while (argsLength > numArgs) {\n                nonProcessedArgs.push(args.shift());\n                argsLength--;\n              }\n\n              while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n                if (args === null) {\n                  args = [];\n                }\n\n                args.unshift(nonProcessedArgs.pop());\n                argsLength++;\n              }\n            }\n\n            if (argsLength < numArgs) {\n              const partialMsg = `command ${cmd}: expected ${numArgs} args, ` + `but received ${argsLength} args.`;\n\n              if (fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath && ++this._numInvalidPathOPS > MAX_INVALID_PATH_OPS) {\n                throw new _util.FormatError(`Invalid ${partialMsg}`);\n              }\n\n              (0, _util.warn)(`Skipping ${partialMsg}`);\n\n              if (args !== null) {\n                args.length = 0;\n              }\n\n              continue;\n            }\n          } else if (argsLength > numArgs) {\n            (0, _util.info)(`Command ${cmd}: expected [0, ${numArgs}] args, ` + `but received ${argsLength} args.`);\n          }\n\n          this.preprocessCommand(fn, args);\n          operation.fn = fn;\n          operation.args = args;\n          return true;\n        }\n\n        if (obj === _primitives.EOF) {\n          return false;\n        }\n\n        if (obj !== null) {\n          if (args === null) {\n            args = [];\n          }\n\n          args.push(obj);\n\n          if (args.length > 33) {\n            throw new _util.FormatError(\"Too many arguments\");\n          }\n        }\n      }\n    },\n    preprocessCommand: function EvaluatorPreprocessor_preprocessCommand(fn, args) {\n      switch (fn | 0) {\n        case _util.OPS.save:\n          this.stateManager.save();\n          break;\n\n        case _util.OPS.restore:\n          this.stateManager.restore();\n          break;\n\n        case _util.OPS.transform:\n          this.stateManager.transform(args);\n          break;\n      }\n    }\n  };\n  return EvaluatorPreprocessor;\n}();\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CMapFactory = exports.IdentityCMap = exports.CMap = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _parser = __w_pdfjs_require__(11);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar BUILT_IN_CMAPS = [\"Adobe-GB1-UCS2\", \"Adobe-CNS1-UCS2\", \"Adobe-Japan1-UCS2\", \"Adobe-Korea1-UCS2\", \"78-EUC-H\", \"78-EUC-V\", \"78-H\", \"78-RKSJ-H\", \"78-RKSJ-V\", \"78-V\", \"78ms-RKSJ-H\", \"78ms-RKSJ-V\", \"83pv-RKSJ-H\", \"90ms-RKSJ-H\", \"90ms-RKSJ-V\", \"90msp-RKSJ-H\", \"90msp-RKSJ-V\", \"90pv-RKSJ-H\", \"90pv-RKSJ-V\", \"Add-H\", \"Add-RKSJ-H\", \"Add-RKSJ-V\", \"Add-V\", \"Adobe-CNS1-0\", \"Adobe-CNS1-1\", \"Adobe-CNS1-2\", \"Adobe-CNS1-3\", \"Adobe-CNS1-4\", \"Adobe-CNS1-5\", \"Adobe-CNS1-6\", \"Adobe-GB1-0\", \"Adobe-GB1-1\", \"Adobe-GB1-2\", \"Adobe-GB1-3\", \"Adobe-GB1-4\", \"Adobe-GB1-5\", \"Adobe-Japan1-0\", \"Adobe-Japan1-1\", \"Adobe-Japan1-2\", \"Adobe-Japan1-3\", \"Adobe-Japan1-4\", \"Adobe-Japan1-5\", \"Adobe-Japan1-6\", \"Adobe-Korea1-0\", \"Adobe-Korea1-1\", \"Adobe-Korea1-2\", \"B5-H\", \"B5-V\", \"B5pc-H\", \"B5pc-V\", \"CNS-EUC-H\", \"CNS-EUC-V\", \"CNS1-H\", \"CNS1-V\", \"CNS2-H\", \"CNS2-V\", \"ETHK-B5-H\", \"ETHK-B5-V\", \"ETen-B5-H\", \"ETen-B5-V\", \"ETenms-B5-H\", \"ETenms-B5-V\", \"EUC-H\", \"EUC-V\", \"Ext-H\", \"Ext-RKSJ-H\", \"Ext-RKSJ-V\", \"Ext-V\", \"GB-EUC-H\", \"GB-EUC-V\", \"GB-H\", \"GB-V\", \"GBK-EUC-H\", \"GBK-EUC-V\", \"GBK2K-H\", \"GBK2K-V\", \"GBKp-EUC-H\", \"GBKp-EUC-V\", \"GBT-EUC-H\", \"GBT-EUC-V\", \"GBT-H\", \"GBT-V\", \"GBTpc-EUC-H\", \"GBTpc-EUC-V\", \"GBpc-EUC-H\", \"GBpc-EUC-V\", \"H\", \"HKdla-B5-H\", \"HKdla-B5-V\", \"HKdlb-B5-H\", \"HKdlb-B5-V\", \"HKgccs-B5-H\", \"HKgccs-B5-V\", \"HKm314-B5-H\", \"HKm314-B5-V\", \"HKm471-B5-H\", \"HKm471-B5-V\", \"HKscs-B5-H\", \"HKscs-B5-V\", \"Hankaku\", \"Hiragana\", \"KSC-EUC-H\", \"KSC-EUC-V\", \"KSC-H\", \"KSC-Johab-H\", \"KSC-Johab-V\", \"KSC-V\", \"KSCms-UHC-H\", \"KSCms-UHC-HW-H\", \"KSCms-UHC-HW-V\", \"KSCms-UHC-V\", \"KSCpc-EUC-H\", \"KSCpc-EUC-V\", \"Katakana\", \"NWP-H\", \"NWP-V\", \"RKSJ-H\", \"RKSJ-V\", \"Roman\", \"UniCNS-UCS2-H\", \"UniCNS-UCS2-V\", \"UniCNS-UTF16-H\", \"UniCNS-UTF16-V\", \"UniCNS-UTF32-H\", \"UniCNS-UTF32-V\", \"UniCNS-UTF8-H\", \"UniCNS-UTF8-V\", \"UniGB-UCS2-H\", \"UniGB-UCS2-V\", \"UniGB-UTF16-H\", \"UniGB-UTF16-V\", \"UniGB-UTF32-H\", \"UniGB-UTF32-V\", \"UniGB-UTF8-H\", \"UniGB-UTF8-V\", \"UniJIS-UCS2-H\", \"UniJIS-UCS2-HW-H\", \"UniJIS-UCS2-HW-V\", \"UniJIS-UCS2-V\", \"UniJIS-UTF16-H\", \"UniJIS-UTF16-V\", \"UniJIS-UTF32-H\", \"UniJIS-UTF32-V\", \"UniJIS-UTF8-H\", \"UniJIS-UTF8-V\", \"UniJIS2004-UTF16-H\", \"UniJIS2004-UTF16-V\", \"UniJIS2004-UTF32-H\", \"UniJIS2004-UTF32-V\", \"UniJIS2004-UTF8-H\", \"UniJIS2004-UTF8-V\", \"UniJISPro-UCS2-HW-V\", \"UniJISPro-UCS2-V\", \"UniJISPro-UTF8-V\", \"UniJISX0213-UTF32-H\", \"UniJISX0213-UTF32-V\", \"UniJISX02132004-UTF32-H\", \"UniJISX02132004-UTF32-V\", \"UniKS-UCS2-H\", \"UniKS-UCS2-V\", \"UniKS-UTF16-H\", \"UniKS-UTF16-V\", \"UniKS-UTF32-H\", \"UniKS-UTF32-V\", \"UniKS-UTF8-H\", \"UniKS-UTF8-V\", \"V\", \"WP-Symbol\"];\nconst MAX_MAP_RANGE = 2 ** 24 - 1;\n\nclass CMap {\n  constructor(builtInCMap = false) {\n    this.codespaceRanges = [[], [], [], []];\n    this.numCodespaceRanges = 0;\n    this._map = [];\n    this.name = \"\";\n    this.vertical = false;\n    this.useCMap = null;\n    this.builtInCMap = builtInCMap;\n  }\n\n  addCodespaceRange(n, low, high) {\n    this.codespaceRanges[n - 1].push(low, high);\n    this.numCodespaceRanges++;\n  }\n\n  mapCidRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapCidRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    while (low <= high) {\n      this._map[low++] = dstLow++;\n    }\n  }\n\n  mapBfRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    var lastByte = dstLow.length - 1;\n\n    while (low <= high) {\n      this._map[low++] = dstLow;\n      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);\n    }\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.\");\n    }\n\n    const ii = array.length;\n    let i = 0;\n\n    while (low <= high && i < ii) {\n      this._map[low] = array[i++];\n      ++low;\n    }\n  }\n\n  mapOne(src, dst) {\n    this._map[src] = dst;\n  }\n\n  lookup(code) {\n    return this._map[code];\n  }\n\n  contains(code) {\n    return this._map[code] !== undefined;\n  }\n\n  forEach(callback) {\n    const map = this._map;\n    const length = map.length;\n\n    if (length <= 0x10000) {\n      for (let i = 0; i < length; i++) {\n        if (map[i] !== undefined) {\n          callback(i, map[i]);\n        }\n      }\n    } else {\n      for (const i in map) {\n        callback(i, map[i]);\n      }\n    }\n  }\n\n  charCodeOf(value) {\n    const map = this._map;\n\n    if (map.length <= 0x10000) {\n      return map.indexOf(value);\n    }\n\n    for (const charCode in map) {\n      if (map[charCode] === value) {\n        return charCode | 0;\n      }\n    }\n\n    return -1;\n  }\n\n  getMap() {\n    return this._map;\n  }\n\n  readCharCode(str, offset, out) {\n    let c = 0;\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (c >= low && c <= high) {\n          out.charcode = c;\n          out.length = n + 1;\n          return;\n        }\n      }\n    }\n\n    out.charcode = 0;\n    out.length = 1;\n  }\n\n  get length() {\n    return this._map.length;\n  }\n\n  get isIdentityCMap() {\n    if (!(this.name === \"Identity-H\" || this.name === \"Identity-V\")) {\n      return false;\n    }\n\n    if (this._map.length !== 0x10000) {\n      return false;\n    }\n\n    for (let i = 0; i < 0x10000; i++) {\n      if (this._map[i] !== i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CMap = CMap;\n\nclass IdentityCMap extends CMap {\n  constructor(vertical, n) {\n    super();\n    this.vertical = vertical;\n    this.addCodespaceRange(n, 0, 0xffff);\n  }\n\n  mapCidRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapCidRange\");\n  }\n\n  mapBfRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapBfRange\");\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    (0, _util.unreachable)(\"should not call mapBfRangeToArray\");\n  }\n\n  mapOne(src, dst) {\n    (0, _util.unreachable)(\"should not call mapCidOne\");\n  }\n\n  lookup(code) {\n    return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n  }\n\n  contains(code) {\n    return Number.isInteger(code) && code <= 0xffff;\n  }\n\n  forEach(callback) {\n    for (let i = 0; i <= 0xffff; i++) {\n      callback(i, i);\n    }\n  }\n\n  charCodeOf(value) {\n    return Number.isInteger(value) && value <= 0xffff ? value : -1;\n  }\n\n  getMap() {\n    const map = new Array(0x10000);\n\n    for (let i = 0; i <= 0xffff; i++) {\n      map[i] = i;\n    }\n\n    return map;\n  }\n\n  get length() {\n    return 0x10000;\n  }\n\n  get isIdentityCMap() {\n    (0, _util.unreachable)(\"should not access .isIdentityCMap\");\n  }\n\n}\n\nexports.IdentityCMap = IdentityCMap;\n\nvar BinaryCMapReader = function BinaryCMapReaderClosure() {\n  function hexToInt(a, size) {\n    var n = 0;\n\n    for (var i = 0; i <= size; i++) {\n      n = n << 8 | a[i];\n    }\n\n    return n >>> 0;\n  }\n\n  function hexToStr(a, size) {\n    if (size === 1) {\n      return String.fromCharCode(a[0], a[1]);\n    }\n\n    if (size === 3) {\n      return String.fromCharCode(a[0], a[1], a[2], a[3]);\n    }\n\n    return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n  }\n\n  function addHex(a, b, size) {\n    var c = 0;\n\n    for (var i = size; i >= 0; i--) {\n      c += a[i] + b[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  function incHex(a, size) {\n    var c = 1;\n\n    for (var i = size; i >= 0 && c > 0; i--) {\n      c += a[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  var MAX_NUM_SIZE = 16;\n  var MAX_ENCODED_NUM_SIZE = 19;\n\n  function BinaryCMapStream(data) {\n    this.buffer = data;\n    this.pos = 0;\n    this.end = data.length;\n    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n  }\n\n  BinaryCMapStream.prototype = {\n    readByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.buffer[this.pos++];\n    },\n\n    readNumber() {\n      var n = 0;\n      var last;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        n = n << 7 | b & 0x7f;\n      } while (!last);\n\n      return n;\n    },\n\n    readSigned() {\n      var n = this.readNumber();\n      return n & 1 ? ~(n >>> 1) : n >>> 1;\n    },\n\n    readHex(num, size) {\n      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n      this.pos += size + 1;\n    },\n\n    readHexNumber(num, size) {\n      var last;\n      var stack = this.tmpBuf,\n          sp = 0;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        stack[sp++] = b & 0x7f;\n      } while (!last);\n\n      var i = size,\n          buffer = 0,\n          bufferSize = 0;\n\n      while (i >= 0) {\n        while (bufferSize < 8 && stack.length > 0) {\n          buffer = stack[--sp] << bufferSize | buffer;\n          bufferSize += 7;\n        }\n\n        num[i] = buffer & 255;\n        i--;\n        buffer >>= 8;\n        bufferSize -= 8;\n      }\n    },\n\n    readHexSigned(num, size) {\n      this.readHexNumber(num, size);\n      var sign = num[size] & 1 ? 255 : 0;\n      var c = 0;\n\n      for (var i = 0; i <= size; i++) {\n        c = (c & 1) << 8 | num[i];\n        num[i] = c >> 1 ^ sign;\n      }\n    },\n\n    readString() {\n      var len = this.readNumber();\n      var s = \"\";\n\n      for (var i = 0; i < len; i++) {\n        s += String.fromCharCode(this.readNumber());\n      }\n\n      return s;\n    }\n\n  };\n\n  function processBinaryCMap(data, cMap, extend) {\n    return new Promise(function (resolve, reject) {\n      var stream = new BinaryCMapStream(data);\n      var header = stream.readByte();\n      cMap.vertical = !!(header & 1);\n      var useCMap = null;\n      var start = new Uint8Array(MAX_NUM_SIZE);\n      var end = new Uint8Array(MAX_NUM_SIZE);\n      var char = new Uint8Array(MAX_NUM_SIZE);\n      var charCode = new Uint8Array(MAX_NUM_SIZE);\n      var tmp = new Uint8Array(MAX_NUM_SIZE);\n      var code;\n      var b;\n\n      while ((b = stream.readByte()) >= 0) {\n        var type = b >> 5;\n\n        if (type === 7) {\n          switch (b & 0x1f) {\n            case 0:\n              stream.readString();\n              break;\n\n            case 1:\n              useCMap = stream.readString();\n              break;\n          }\n\n          continue;\n        }\n\n        var sequence = !!(b & 0x10);\n        var dataSize = b & 15;\n\n        if (dataSize + 1 > MAX_NUM_SIZE) {\n          throw new Error(\"processBinaryCMap: Invalid dataSize.\");\n        }\n\n        var ucs2DataSize = 1;\n        var subitemsCount = stream.readNumber();\n        var i;\n\n        switch (type) {\n          case 0:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n            }\n\n            break;\n\n          case 1:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            stream.readNumber();\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              stream.readNumber();\n            }\n\n            break;\n\n          case 2:\n            stream.readHex(char, dataSize);\n            code = stream.readNumber();\n            cMap.mapOne(hexToInt(char, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, dataSize);\n                addHex(char, tmp, dataSize);\n              }\n\n              code = stream.readSigned() + (code + 1);\n              cMap.mapOne(hexToInt(char, dataSize), code);\n            }\n\n            break;\n\n          case 3:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            code = stream.readNumber();\n            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, dataSize);\n                addHex(start, end, dataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              code = stream.readNumber();\n              cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n            }\n\n            break;\n\n          case 4:\n            stream.readHex(char, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, ucs2DataSize);\n                addHex(char, tmp, ucs2DataSize);\n              }\n\n              incHex(charCode, dataSize);\n              stream.readHexSigned(tmp, dataSize);\n              addHex(charCode, tmp, dataSize);\n              cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          case 5:\n            stream.readHex(start, ucs2DataSize);\n            stream.readHexNumber(end, ucs2DataSize);\n            addHex(end, start, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, ucs2DataSize);\n                addHex(start, end, ucs2DataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, ucs2DataSize);\n              addHex(end, start, ucs2DataSize);\n              stream.readHex(charCode, dataSize);\n              cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          default:\n            reject(new Error(\"processBinaryCMap: Unknown type: \" + type));\n            return;\n        }\n      }\n\n      if (useCMap) {\n        resolve(extend(useCMap));\n        return;\n      }\n\n      resolve(cMap);\n    });\n  }\n\n  function BinaryCMapReader() {}\n\n  BinaryCMapReader.prototype = {\n    process: processBinaryCMap\n  };\n  return BinaryCMapReader;\n}();\n\nvar CMapFactory = function CMapFactoryClosure() {\n  function strToInt(str) {\n    var a = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      a = a << 8 | str.charCodeAt(i);\n    }\n\n    return a >>> 0;\n  }\n\n  function expectString(obj) {\n    if (!(0, _util.isString)(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected string.\");\n    }\n  }\n\n  function expectInt(obj) {\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected int.\");\n    }\n  }\n\n  function parseBfChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseBfRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (Number.isInteger(obj) || (0, _util.isString)(obj)) {\n        var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n        cMap.mapBfRange(low, high, dstLow);\n      } else if ((0, _primitives.isCmd)(obj, \"[\")) {\n        obj = lexer.getObj();\n        var array = [];\n\n        while (!(0, _primitives.isCmd)(obj, \"]\") && !(0, _primitives.isEOF)(obj)) {\n          array.push(obj);\n          obj = lexer.getObj();\n        }\n\n        cMap.mapBfRangeToArray(low, high, array);\n      } else {\n        break;\n      }\n    }\n\n    throw new _util.FormatError(\"Invalid bf range.\");\n  }\n\n  function parseCidChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseCidRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dstLow = obj;\n      cMap.mapCidRange(low, high, dstLow);\n    }\n  }\n\n  function parseCodespaceRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcodespacerange\")) {\n        return;\n      }\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var high = strToInt(obj);\n      cMap.addCodespaceRange(obj.length, low, high);\n    }\n\n    throw new _util.FormatError(\"Invalid codespace range.\");\n  }\n\n  function parseWMode(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if (Number.isInteger(obj)) {\n      cMap.vertical = !!obj;\n    }\n  }\n\n  function parseCMapName(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if ((0, _primitives.isName)(obj) && (0, _util.isString)(obj.name)) {\n      cMap.name = obj.name;\n    }\n  }\n\n  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {\n    var previous;\n    var embeddedUseCMap;\n\n    objLoop: while (true) {\n      try {\n        var obj = lexer.getObj();\n\n        if ((0, _primitives.isEOF)(obj)) {\n          break;\n        } else if ((0, _primitives.isName)(obj)) {\n          if (obj.name === \"WMode\") {\n            parseWMode(cMap, lexer);\n          } else if (obj.name === \"CMapName\") {\n            parseCMapName(cMap, lexer);\n          }\n\n          previous = obj;\n        } else if ((0, _primitives.isCmd)(obj)) {\n          switch (obj.cmd) {\n            case \"endcmap\":\n              break objLoop;\n\n            case \"usecmap\":\n              if ((0, _primitives.isName)(previous)) {\n                embeddedUseCMap = previous.name;\n              }\n\n              break;\n\n            case \"begincodespacerange\":\n              parseCodespaceRange(cMap, lexer);\n              break;\n\n            case \"beginbfchar\":\n              parseBfChar(cMap, lexer);\n              break;\n\n            case \"begincidchar\":\n              parseCidChar(cMap, lexer);\n              break;\n\n            case \"beginbfrange\":\n              parseBfRange(cMap, lexer);\n              break;\n\n            case \"begincidrange\":\n              parseCidRange(cMap, lexer);\n              break;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(\"Invalid cMap data: \" + ex);\n        continue;\n      }\n    }\n\n    if (!useCMap && embeddedUseCMap) {\n      useCMap = embeddedUseCMap;\n    }\n\n    if (useCMap) {\n      return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n    }\n\n    return Promise.resolve(cMap);\n  }\n\n  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {\n    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (newCMap) {\n      cMap.useCMap = newCMap;\n\n      if (cMap.numCodespaceRanges === 0) {\n        var useCodespaceRanges = cMap.useCMap.codespaceRanges;\n\n        for (var i = 0; i < useCodespaceRanges.length; i++) {\n          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n        }\n\n        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n      }\n\n      cMap.useCMap.forEach(function (key, value) {\n        if (!cMap.contains(key)) {\n          cMap.mapOne(key, cMap.useCMap.lookup(key));\n        }\n      });\n      return cMap;\n    });\n  }\n\n  function createBuiltInCMap(name, fetchBuiltInCMap) {\n    if (name === \"Identity-H\") {\n      return Promise.resolve(new IdentityCMap(false, 2));\n    } else if (name === \"Identity-V\") {\n      return Promise.resolve(new IdentityCMap(true, 2));\n    }\n\n    if (!BUILT_IN_CMAPS.includes(name)) {\n      return Promise.reject(new Error(\"Unknown CMap name: \" + name));\n    }\n\n    if (!fetchBuiltInCMap) {\n      return Promise.reject(new Error(\"Built-in CMap parameters are not provided.\"));\n    }\n\n    return fetchBuiltInCMap(name).then(function (data) {\n      var cMapData = data.cMapData,\n          compressionType = data.compressionType;\n      var cMap = new CMap(true);\n\n      if (compressionType === _util.CMapCompressionType.BINARY) {\n        return new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {\n          return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n        });\n      }\n\n      if (compressionType === _util.CMapCompressionType.NONE) {\n        var lexer = new _parser.Lexer(new _stream.Stream(cMapData));\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, null);\n      }\n\n      return Promise.reject(new Error(\"TODO: Only BINARY/NONE CMap compression is currently supported.\"));\n    });\n  }\n\n  return {\n    async create(params) {\n      var encoding = params.encoding;\n      var fetchBuiltInCMap = params.fetchBuiltInCMap;\n      var useCMap = params.useCMap;\n\n      if ((0, _primitives.isName)(encoding)) {\n        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);\n      } else if ((0, _primitives.isStream)(encoding)) {\n        var cMap = new CMap();\n        var lexer = new _parser.Lexer(encoding);\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (parsedCMap) {\n          if (parsedCMap.isIdentityCMap) {\n            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);\n          }\n\n          return parsedCMap;\n        });\n      }\n\n      throw new Error(\"Encoding required.\");\n    }\n\n  };\n}();\n\nexports.CMapFactory = CMapFactory;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontType = getFontType;\nexports.IdentityToUnicodeMap = exports.ToUnicodeMap = exports.FontFlags = exports.Font = exports.ErrorFont = exports.SEAC_ANALYSIS_ENABLED = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(30);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _standard_fonts = __w_pdfjs_require__(34);\n\nvar _unicode = __w_pdfjs_require__(35);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _font_renderer = __w_pdfjs_require__(36);\n\nvar _cmap = __w_pdfjs_require__(28);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _type1_parser = __w_pdfjs_require__(37);\n\nconst PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];\nvar PDF_GLYPH_SPACE_UNITS = 1000;\nvar SEAC_ANALYSIS_ENABLED = true;\nexports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;\nconst EXPORT_DATA_PROPERTIES = [\"ascent\", \"bbox\", \"black\", \"bold\", \"charProcOperatorList\", \"composite\", \"data\", \"defaultVMetrics\", \"defaultWidth\", \"descent\", \"fallbackName\", \"fontMatrix\", \"fontType\", \"isMonospace\", \"isSerifFont\", \"isType3Font\", \"italic\", \"loadedName\", \"mimetype\", \"missingFile\", \"name\", \"remeasure\", \"subtype\", \"type\", \"vertical\"];\nconst EXPORT_DATA_EXTRA_PROPERTIES = [\"cMap\", \"defaultEncoding\", \"differences\", \"isSymbolicFont\", \"seacMap\", \"toFontChar\", \"toUnicode\", \"vmetrics\", \"widths\"];\nvar FontFlags = {\n  FixedPitch: 1,\n  Serif: 2,\n  Symbolic: 4,\n  Script: 8,\n  Nonsymbolic: 32,\n  Italic: 64,\n  AllCap: 65536,\n  SmallCap: 131072,\n  ForceBold: 262144\n};\nexports.FontFlags = FontFlags;\nvar MacStandardGlyphOrdering = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n\nfunction adjustWidths(properties) {\n  if (!properties.fontMatrix) {\n    return;\n  }\n\n  if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {\n    return;\n  }\n\n  var scale = 0.001 / properties.fontMatrix[0];\n  var glyphsWidths = properties.widths;\n\n  for (var glyph in glyphsWidths) {\n    glyphsWidths[glyph] *= scale;\n  }\n\n  properties.defaultWidth *= scale;\n}\n\nfunction adjustToUnicode(properties, builtInEncoding) {\n  if (properties.hasIncludedToUnicodeMap) {\n    return;\n  }\n\n  if (properties.hasEncoding) {\n    return;\n  }\n\n  if (builtInEncoding === properties.defaultEncoding) {\n    return;\n  }\n\n  if (properties.toUnicode instanceof IdentityToUnicodeMap) {\n    return;\n  }\n\n  var toUnicode = [],\n      glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n  for (var charCode in builtInEncoding) {\n    var glyphName = builtInEncoding[charCode];\n    var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n    if (unicode !== -1) {\n      toUnicode[charCode] = String.fromCharCode(unicode);\n    }\n  }\n\n  properties.toUnicode.amend(toUnicode);\n}\n\nfunction getFontType(type, subtype) {\n  switch (type) {\n    case \"Type1\":\n      return subtype === \"Type1C\" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;\n\n    case \"CIDFontType0\":\n      return subtype === \"CIDFontType0C\" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;\n\n    case \"OpenType\":\n      return _util.FontType.OPENTYPE;\n\n    case \"TrueType\":\n      return _util.FontType.TRUETYPE;\n\n    case \"CIDFontType2\":\n      return _util.FontType.CIDFONTTYPE2;\n\n    case \"MMType1\":\n      return _util.FontType.MMTYPE1;\n\n    case \"Type0\":\n      return _util.FontType.TYPE0;\n\n    default:\n      return _util.FontType.UNKNOWN;\n  }\n}\n\nfunction recoverGlyphName(name, glyphsUnicodeMap) {\n  if (glyphsUnicodeMap[name] !== undefined) {\n    return name;\n  }\n\n  var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);\n\n  if (unicode !== -1) {\n    for (var key in glyphsUnicodeMap) {\n      if (glyphsUnicodeMap[key] === unicode) {\n        return key;\n      }\n    }\n  }\n\n  (0, _util.info)(\"Unable to recover a standard glyph name for: \" + name);\n  return name;\n}\n\nvar Glyph = function GlyphClosure() {\n  function Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    this.fontChar = fontChar;\n    this.unicode = unicode;\n    this.accent = accent;\n    this.width = width;\n    this.vmetric = vmetric;\n    this.operatorListId = operatorListId;\n    this.isSpace = isSpace;\n    this.isInFont = isInFont;\n  }\n\n  Glyph.prototype.matchesForCache = function (fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    return this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;\n  };\n\n  return Glyph;\n}();\n\nvar ToUnicodeMap = function ToUnicodeMapClosure() {\n  function ToUnicodeMap(cmap = []) {\n    this._map = cmap;\n  }\n\n  ToUnicodeMap.prototype = {\n    get length() {\n      return this._map.length;\n    },\n\n    forEach(callback) {\n      for (var charCode in this._map) {\n        callback(charCode, this._map[charCode].charCodeAt(0));\n      }\n    },\n\n    has(i) {\n      return this._map[i] !== undefined;\n    },\n\n    get(i) {\n      return this._map[i];\n    },\n\n    charCodeOf(value) {\n      const map = this._map;\n\n      if (map.length <= 0x10000) {\n        return map.indexOf(value);\n      }\n\n      for (const charCode in map) {\n        if (map[charCode] === value) {\n          return charCode | 0;\n        }\n      }\n\n      return -1;\n    },\n\n    amend(map) {\n      for (var charCode in map) {\n        this._map[charCode] = map[charCode];\n      }\n    }\n\n  };\n  return ToUnicodeMap;\n}();\n\nexports.ToUnicodeMap = ToUnicodeMap;\n\nvar IdentityToUnicodeMap = function IdentityToUnicodeMapClosure() {\n  function IdentityToUnicodeMap(firstChar, lastChar) {\n    this.firstChar = firstChar;\n    this.lastChar = lastChar;\n  }\n\n  IdentityToUnicodeMap.prototype = {\n    get length() {\n      return this.lastChar + 1 - this.firstChar;\n    },\n\n    forEach(callback) {\n      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n        callback(i, i);\n      }\n    },\n\n    has(i) {\n      return this.firstChar <= i && i <= this.lastChar;\n    },\n\n    get(i) {\n      if (this.firstChar <= i && i <= this.lastChar) {\n        return String.fromCharCode(i);\n      }\n\n      return undefined;\n    },\n\n    charCodeOf(v) {\n      return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;\n    },\n\n    amend(map) {\n      (0, _util.unreachable)(\"Should not call amend()\");\n    }\n\n  };\n  return IdentityToUnicodeMap;\n}();\n\nexports.IdentityToUnicodeMap = IdentityToUnicodeMap;\n\nvar OpenTypeFileBuilder = function OpenTypeFileBuilderClosure() {\n  function writeInt16(dest, offset, num) {\n    dest[offset] = num >> 8 & 0xff;\n    dest[offset + 1] = num & 0xff;\n  }\n\n  function writeInt32(dest, offset, num) {\n    dest[offset] = num >> 24 & 0xff;\n    dest[offset + 1] = num >> 16 & 0xff;\n    dest[offset + 2] = num >> 8 & 0xff;\n    dest[offset + 3] = num & 0xff;\n  }\n\n  function writeData(dest, offset, data) {\n    var i, ii;\n\n    if (data instanceof Uint8Array) {\n      dest.set(data, offset);\n    } else if (typeof data === \"string\") {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data.charCodeAt(i) & 0xff;\n      }\n    } else {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data[i] & 0xff;\n      }\n    }\n  }\n\n  function OpenTypeFileBuilder(sfnt) {\n    this.sfnt = sfnt;\n    this.tables = Object.create(null);\n  }\n\n  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(entriesCount, entrySize) {\n    var maxPower2 = 1,\n        log2 = 0;\n\n    while ((maxPower2 ^ entriesCount) > maxPower2) {\n      maxPower2 <<= 1;\n      log2++;\n    }\n\n    var searchRange = maxPower2 * entrySize;\n    return {\n      range: searchRange,\n      entry: log2,\n      rangeShift: entrySize * entriesCount - searchRange\n    };\n  };\n\n  var OTF_HEADER_SIZE = 12;\n  var OTF_TABLE_ENTRY_SIZE = 16;\n  OpenTypeFileBuilder.prototype = {\n    toArray: function OpenTypeFileBuilder_toArray() {\n      var sfnt = this.sfnt;\n      var tables = this.tables;\n      var tablesNames = Object.keys(tables);\n      tablesNames.sort();\n      var numTables = tablesNames.length;\n      var i, j, jj, table, tableName;\n      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n      var tableOffsets = [offset];\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        var paddedLength = (table.length + 3 & ~3) >>> 0;\n        offset += paddedLength;\n        tableOffsets.push(offset);\n      }\n\n      var file = new Uint8Array(offset);\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        writeData(file, tableOffsets[i], table);\n      }\n\n      if (sfnt === \"true\") {\n        sfnt = (0, _util.string32)(0x00010000);\n      }\n\n      file[0] = sfnt.charCodeAt(0) & 0xff;\n      file[1] = sfnt.charCodeAt(1) & 0xff;\n      file[2] = sfnt.charCodeAt(2) & 0xff;\n      file[3] = sfnt.charCodeAt(3) & 0xff;\n      writeInt16(file, 4, numTables);\n      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n      writeInt16(file, 6, searchParams.range);\n      writeInt16(file, 8, searchParams.entry);\n      writeInt16(file, 10, searchParams.rangeShift);\n      offset = OTF_HEADER_SIZE;\n\n      for (i = 0; i < numTables; i++) {\n        tableName = tablesNames[i];\n        file[offset] = tableName.charCodeAt(0) & 0xff;\n        file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n        file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n        file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n        var checksum = 0;\n\n        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n          var quad = (0, _core_utils.readUint32)(file, j);\n          checksum = checksum + quad >>> 0;\n        }\n\n        writeInt32(file, offset + 4, checksum);\n        writeInt32(file, offset + 8, tableOffsets[i]);\n        writeInt32(file, offset + 12, tables[tableName].length);\n        offset += OTF_TABLE_ENTRY_SIZE;\n      }\n\n      return file;\n    },\n    addTable: function OpenTypeFileBuilder_addTable(tag, data) {\n      if (tag in this.tables) {\n        throw new Error(\"Table \" + tag + \" already exists\");\n      }\n\n      this.tables[tag] = data;\n    }\n  };\n  return OpenTypeFileBuilder;\n}();\n\nvar Font = function FontClosure() {\n  function Font(name, file, properties) {\n    var charCode;\n    this.name = name;\n    this.loadedName = properties.loadedName;\n    this.isType3Font = properties.isType3Font;\n    this.missingFile = false;\n    this.glyphCache = Object.create(null);\n    this.isSerifFont = !!(properties.flags & FontFlags.Serif);\n    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);\n    var type = properties.type;\n    var subtype = properties.subtype;\n    this.type = type;\n    this.subtype = subtype;\n    let fallbackName = \"sans-serif\";\n\n    if (this.isMonospace) {\n      fallbackName = \"monospace\";\n    } else if (this.isSerifFont) {\n      fallbackName = \"serif\";\n    }\n\n    this.fallbackName = fallbackName;\n    this.differences = properties.differences;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.composite = properties.composite;\n    this.cMap = properties.cMap;\n    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n    this.fontMatrix = properties.fontMatrix;\n    this.bbox = properties.bbox;\n    this.defaultEncoding = properties.defaultEncoding;\n    this.toUnicode = properties.toUnicode;\n    this.fallbackToUnicode = properties.fallbackToUnicode || new ToUnicodeMap();\n    this.toFontChar = [];\n\n    if (properties.type === \"Type3\") {\n      for (charCode = 0; charCode < 256; charCode++) {\n        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];\n      }\n\n      this.fontType = _util.FontType.TYPE3;\n      return;\n    }\n\n    this.cidEncoding = properties.cidEncoding;\n    this.vertical = !!properties.vertical;\n\n    if (this.vertical) {\n      this.vmetrics = properties.vmetrics;\n      this.defaultVMetrics = properties.defaultVMetrics;\n    }\n\n    if (!file || file.isEmpty) {\n      if (file) {\n        (0, _util.warn)('Font file is empty in \"' + name + '\" (' + this.loadedName + \")\");\n      }\n\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    [type, subtype] = getFontFileType(file, properties);\n\n    if (type !== this.type || subtype !== this.subtype) {\n      (0, _util.info)(\"Inconsistent font file Type/SubType, expected: \" + `${this.type}/${this.subtype} but found: ${type}/${subtype}.`);\n    }\n\n    try {\n      var data;\n\n      switch (type) {\n        case \"MMType1\":\n          (0, _util.info)(\"MMType1 font (\" + name + \"), falling back to Type1.\");\n\n        case \"Type1\":\n        case \"CIDFontType0\":\n          this.mimetype = \"font/opentype\";\n          var cff = subtype === \"Type1C\" || subtype === \"CIDFontType0C\" ? new CFFFont(file, properties) : new Type1Font(name, file, properties);\n          adjustWidths(properties);\n          data = this.convert(name, cff, properties);\n          break;\n\n        case \"OpenType\":\n        case \"TrueType\":\n        case \"CIDFontType2\":\n          this.mimetype = \"font/opentype\";\n          data = this.checkAndRepair(name, file, properties);\n\n          if (this.isOpenType) {\n            adjustWidths(properties);\n            type = \"OpenType\";\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(`Font ${type} is not supported`);\n      }\n    } catch (e) {\n      (0, _util.warn)(e);\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    this.data = data;\n    this.fontType = getFontType(type, subtype);\n    this.fontMatrix = properties.fontMatrix;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.toUnicode = properties.toUnicode;\n    this.seacMap = properties.seacMap;\n  }\n\n  Font.getFontID = function () {\n    var ID = 1;\n    return function Font_getFontID() {\n      return String(ID++);\n    };\n  }();\n\n  function int16(b0, b1) {\n    return (b0 << 8) + b1;\n  }\n\n  function writeSignedInt16(bytes, index, value) {\n    bytes[index + 1] = value;\n    bytes[index] = value >>> 8;\n  }\n\n  function signedInt16(b0, b1) {\n    var value = (b0 << 8) + b1;\n    return value & 1 << 15 ? value - 0x10000 : value;\n  }\n\n  function int32(b0, b1, b2, b3) {\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  function string16(value) {\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function safeString16(value) {\n    if (value > 0x7fff) {\n      value = 0x7fff;\n    } else if (value < -0x8000) {\n      value = -0x8000;\n    }\n\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function isTrueTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _core_utils.readUint32)(header, 0) === 0x00010000 || (0, _util.bytesToString)(header) === \"true\";\n  }\n\n  function isTrueTypeCollectionFile(file) {\n    const header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"ttcf\";\n  }\n\n  function isOpenTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"OTTO\";\n  }\n\n  function isType1File(file) {\n    var header = file.peekBytes(2);\n\n    if (header[0] === 0x25 && header[1] === 0x21) {\n      return true;\n    }\n\n    if (header[0] === 0x80 && header[1] === 0x01) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isCFFFile(file) {\n    const header = file.peekBytes(4);\n\n    if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getFontFileType(file, {\n    type,\n    subtype,\n    composite\n  }) {\n    let fileType, fileSubtype;\n\n    if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"TrueType\";\n      }\n    } else if (isOpenTypeFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"OpenType\";\n      }\n    } else if (isType1File(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n      }\n    } else if (isCFFFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n        fileSubtype = \"CIDFontType0C\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n        fileSubtype = \"Type1C\";\n      }\n    } else {\n      (0, _util.warn)(\"getFontFileType: Unable to detect correct font file Type/Subtype.\");\n      fileType = type;\n      fileSubtype = subtype;\n    }\n\n    return [fileType, fileSubtype];\n  }\n\n  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n    var toFontChar = [],\n        unicode;\n\n    for (var i = 0, ii = encoding.length; i < ii; i++) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[i] = unicode;\n      }\n    }\n\n    for (var charCode in differences) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[+charCode] = unicode;\n      }\n    }\n\n    return toFontChar;\n  }\n\n  function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {\n    var newMap = Object.create(null);\n    var toFontChar = [];\n    var privateUseAreaIndex = 0;\n    var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n    var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n\n    for (var originalCharCode in charCodeToGlyphId) {\n      originalCharCode |= 0;\n      var glyphId = charCodeToGlyphId[originalCharCode];\n\n      if (!hasGlyph(glyphId)) {\n        continue;\n      }\n\n      if (nextAvailableFontCharCode > privateUseOffetEnd) {\n        privateUseAreaIndex++;\n\n        if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n          (0, _util.warn)(\"Ran out of space in font private use area.\");\n          break;\n        }\n\n        nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n        privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n      }\n\n      var fontCharCode = nextAvailableFontCharCode++;\n\n      if (glyphId === 0) {\n        glyphId = newGlyphZeroId;\n      }\n\n      newMap[fontCharCode] = glyphId;\n      toFontChar[originalCharCode] = fontCharCode;\n    }\n\n    return {\n      toFontChar,\n      charCodeToGlyphId: newMap,\n      nextAvailableFontCharCode\n    };\n  }\n\n  function getRanges(glyphs, numGlyphs) {\n    var codes = [];\n\n    for (var charCode in glyphs) {\n      if (glyphs[charCode] >= numGlyphs) {\n        continue;\n      }\n\n      codes.push({\n        fontCharCode: charCode | 0,\n        glyphId: glyphs[charCode]\n      });\n    }\n\n    if (codes.length === 0) {\n      codes.push({\n        fontCharCode: 0,\n        glyphId: 0\n      });\n    }\n\n    codes.sort(function fontGetRangesSort(a, b) {\n      return a.fontCharCode - b.fontCharCode;\n    });\n    var ranges = [];\n    var length = codes.length;\n\n    for (var n = 0; n < length;) {\n      var start = codes[n].fontCharCode;\n      var codeIndices = [codes[n].glyphId];\n      ++n;\n      var end = start;\n\n      while (n < length && end + 1 === codes[n].fontCharCode) {\n        codeIndices.push(codes[n].glyphId);\n        ++end;\n        ++n;\n\n        if (end === 0xffff) {\n          break;\n        }\n      }\n\n      ranges.push([start, end, codeIndices]);\n    }\n\n    return ranges;\n  }\n\n  function createCmapTable(glyphs, numGlyphs) {\n    var ranges = getRanges(glyphs, numGlyphs);\n    var numTables = ranges[ranges.length - 1][1] > 0xffff ? 2 : 1;\n    var cmap = \"\\x00\\x00\" + string16(numTables) + \"\\x00\\x03\" + \"\\x00\\x01\" + (0, _util.string32)(4 + numTables * 8);\n    var i, ii, j, jj;\n\n    for (i = ranges.length - 1; i >= 0; --i) {\n      if (ranges[i][0] <= 0xffff) {\n        break;\n      }\n    }\n\n    var bmpLength = i + 1;\n\n    if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n      ranges[i][1] = 0xfffe;\n    }\n\n    var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n    var segCount = bmpLength + trailingRangesCount;\n    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);\n    var startCount = \"\";\n    var endCount = \"\";\n    var idDeltas = \"\";\n    var idRangeOffsets = \"\";\n    var glyphsIds = \"\";\n    var bias = 0;\n    var range, start, end, codes;\n\n    for (i = 0, ii = bmpLength; i < ii; i++) {\n      range = ranges[i];\n      start = range[0];\n      end = range[1];\n      startCount += string16(start);\n      endCount += string16(end);\n      codes = range[2];\n      var contiguous = true;\n\n      for (j = 1, jj = codes.length; j < jj; ++j) {\n        if (codes[j] !== codes[j - 1] + 1) {\n          contiguous = false;\n          break;\n        }\n      }\n\n      if (!contiguous) {\n        var offset = (segCount - i) * 2 + bias * 2;\n        bias += end - start + 1;\n        idDeltas += string16(0);\n        idRangeOffsets += string16(offset);\n\n        for (j = 0, jj = codes.length; j < jj; ++j) {\n          glyphsIds += string16(codes[j]);\n        }\n      } else {\n        var startCode = codes[0];\n        idDeltas += string16(startCode - start & 0xffff);\n        idRangeOffsets += string16(0);\n      }\n    }\n\n    if (trailingRangesCount > 0) {\n      endCount += \"\\xFF\\xFF\";\n      startCount += \"\\xFF\\xFF\";\n      idDeltas += \"\\x00\\x01\";\n      idRangeOffsets += \"\\x00\\x00\";\n    }\n\n    var format314 = \"\\x00\\x00\" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + \"\\x00\\x00\" + startCount + idDeltas + idRangeOffsets + glyphsIds;\n    var format31012 = \"\";\n    var header31012 = \"\";\n\n    if (numTables > 1) {\n      cmap += \"\\x00\\x03\" + \"\\x00\\x0A\" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);\n      format31012 = \"\";\n\n      for (i = 0, ii = ranges.length; i < ii; i++) {\n        range = ranges[i];\n        start = range[0];\n        codes = range[2];\n        var code = codes[0];\n\n        for (j = 1, jj = codes.length; j < jj; ++j) {\n          if (codes[j] !== codes[j - 1] + 1) {\n            end = range[0] + j - 1;\n            format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);\n            start = end + 1;\n            code = codes[j];\n          }\n        }\n\n        format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);\n      }\n\n      header31012 = \"\\x00\\x0C\" + \"\\x00\\x00\" + (0, _util.string32)(format31012.length + 16) + \"\\x00\\x00\\x00\\x00\" + (0, _util.string32)(format31012.length / 12);\n    }\n\n    return cmap + \"\\x00\\x04\" + string16(format314.length + 4) + format314 + header31012 + format31012;\n  }\n\n  function validateOS2Table(os2, file) {\n    file.pos = (file.start || 0) + os2.offset;\n    var version = file.getUint16();\n    file.skip(60);\n    var selection = file.getUint16();\n\n    if (version < 4 && selection & 0x0300) {\n      return false;\n    }\n\n    var firstChar = file.getUint16();\n    var lastChar = file.getUint16();\n\n    if (firstChar > lastChar) {\n      return false;\n    }\n\n    file.skip(6);\n    var usWinAscent = file.getUint16();\n\n    if (usWinAscent === 0) {\n      return false;\n    }\n\n    os2.data[8] = os2.data[9] = 0;\n    return true;\n  }\n\n  function createOS2Table(properties, charstrings, override) {\n    override = override || {\n      unitsPerEm: 0,\n      yMax: 0,\n      yMin: 0,\n      ascent: 0,\n      descent: 0\n    };\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n\n    if (charstrings) {\n      for (var code in charstrings) {\n        code |= 0;\n\n        if (firstCharIndex > code || !firstCharIndex) {\n          firstCharIndex = code;\n        }\n\n        if (lastCharIndex < code) {\n          lastCharIndex = code;\n        }\n\n        var position = (0, _unicode.getUnicodeRangeFor)(code);\n\n        if (position < 32) {\n          ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n          ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n          ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n          ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n          throw new _util.FormatError(\"Unicode ranges Bits > 123 are reserved for internal usage\");\n        }\n      }\n\n      if (lastCharIndex > 0xffff) {\n        lastCharIndex = 0xffff;\n      }\n    } else {\n      firstCharIndex = 0;\n      lastCharIndex = 255;\n    }\n\n    var bbox = properties.bbox || [0, 0, 0, 0];\n    var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n    var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n    var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n    var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));\n\n    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n      typoDescent = -typoDescent;\n    }\n\n    var winAscent = override.yMax || typoAscent;\n    var winDescent = -override.yMin || -typoDescent;\n    return \"\\x00\\x03\" + \"\\x02\\x24\" + \"\\x01\\xF4\" + \"\\x00\\x05\" + \"\\x00\\x00\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x00\\x8C\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x01\\xDF\" + \"\\x00\\x31\" + \"\\x01\\x02\" + \"\\x00\\x00\" + \"\\x00\\x00\\x06\" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + \"\\x00\\x00\\x00\\x00\\x00\\x00\" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + \"\\x2A\\x32\\x31\\x2A\" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + \"\\x00\\x64\" + string16(winAscent) + string16(winDescent) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + \"\\x00\\x03\";\n  }\n\n  function createPostTable(properties) {\n    var angle = Math.floor(properties.italicAngle * 2 ** 16);\n    return \"\\x00\\x03\\x00\\x00\" + (0, _util.string32)(angle) + \"\\x00\\x00\" + \"\\x00\\x00\" + (0, _util.string32)(properties.fixedPitch) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\";\n  }\n\n  function createNameTable(name, proto) {\n    if (!proto) {\n      proto = [[], []];\n    }\n\n    var strings = [proto[0][0] || \"Original licence\", proto[0][1] || name, proto[0][2] || \"Unknown\", proto[0][3] || \"uniqueID\", proto[0][4] || name, proto[0][5] || \"Version 0.11\", proto[0][6] || \"\", proto[0][7] || \"Unknown\", proto[0][8] || \"Unknown\", proto[0][9] || \"Unknown\"];\n    var stringsUnicode = [];\n    var i, ii, j, jj, str;\n\n    for (i = 0, ii = strings.length; i < ii; i++) {\n      str = proto[1][i] || strings[i];\n      var strBufUnicode = [];\n\n      for (j = 0, jj = str.length; j < jj; j++) {\n        strBufUnicode.push(string16(str.charCodeAt(j)));\n      }\n\n      stringsUnicode.push(strBufUnicode.join(\"\"));\n    }\n\n    var names = [strings, stringsUnicode];\n    var platforms = [\"\\x00\\x01\", \"\\x00\\x03\"];\n    var encodings = [\"\\x00\\x00\", \"\\x00\\x01\"];\n    var languages = [\"\\x00\\x00\", \"\\x04\\x09\"];\n    var namesRecordCount = strings.length * platforms.length;\n    var nameTable = \"\\x00\\x00\" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);\n    var strOffset = 0;\n\n    for (i = 0, ii = platforms.length; i < ii; i++) {\n      var strs = names[i];\n\n      for (j = 0, jj = strs.length; j < jj; j++) {\n        str = strs[j];\n        var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);\n        nameTable += nameRecord;\n        strOffset += str.length;\n      }\n    }\n\n    nameTable += strings.join(\"\") + stringsUnicode.join(\"\");\n    return nameTable;\n  }\n\n  Font.prototype = {\n    name: null,\n    font: null,\n    mimetype: null,\n    disableFontFace: false,\n\n    get renderer() {\n      var renderer = _font_renderer.FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);\n\n      return (0, _util.shadow)(this, \"renderer\", renderer);\n    },\n\n    exportData(extraProperties = false) {\n      const exportDataProperties = extraProperties ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES] : EXPORT_DATA_PROPERTIES;\n      const data = Object.create(null);\n      let property, value;\n\n      for (property of exportDataProperties) {\n        value = this[property];\n\n        if (value !== undefined) {\n          data[property] = value;\n        }\n      }\n\n      return data;\n    },\n\n    fallbackToSystemFont: function Font_fallbackToSystemFont() {\n      this.missingFile = true;\n      var name = this.name;\n      var type = this.type;\n      var subtype = this.subtype;\n      let fontName = name.replace(/[,_]/g, \"-\").replace(/\\s/g, \"\");\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)(),\n          nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();\n      var isStandardFont = !!stdFontMap[fontName] || !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n      this.bold = fontName.search(/bold/gi) !== -1;\n      this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;\n      this.black = name.search(/Black/g) !== -1;\n      this.remeasure = Object.keys(this.widths).length > 0;\n\n      if (isStandardFont && type === \"CIDFontType2\" && this.cidEncoding.startsWith(\"Identity-\")) {\n        const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n        const map = [];\n\n        for (const charCode in GlyphMapForStandardFonts) {\n          map[+charCode] = GlyphMapForStandardFonts[charCode];\n        }\n\n        if (/Arial-?Black/i.test(name)) {\n          var SupplementalGlyphMapForArialBlack = (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)();\n\n          for (const charCode in SupplementalGlyphMapForArialBlack) {\n            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];\n          }\n        } else if (/Calibri/i.test(name)) {\n          const SupplementalGlyphMapForCalibri = (0, _standard_fonts.getSupplementalGlyphMapForCalibri)();\n\n          for (const charCode in SupplementalGlyphMapForCalibri) {\n            map[+charCode] = SupplementalGlyphMapForCalibri[charCode];\n          }\n        }\n\n        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;\n\n        if (!isIdentityUnicode) {\n          this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n            map[+charCode] = unicodeCharCode;\n          });\n        }\n\n        this.toFontChar = map;\n        this.toUnicode = new ToUnicodeMap(map);\n      } else if (/Symbol/i.test(fontName)) {\n        this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else if (/Dingbats/i.test(fontName)) {\n        if (/Wingdings/i.test(name)) {\n          (0, _util.warn)(\"Non-embedded Wingdings font, falling back to ZapfDingbats.\");\n        }\n\n        this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);\n      } else if (isStandardFont) {\n        this.toFontChar = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else {\n        const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        const map = [];\n        this.toUnicode.forEach((charCode, unicodeCharCode) => {\n          if (!this.composite) {\n            var glyphName = this.differences[charCode] || this.defaultEncoding[charCode];\n            const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              unicodeCharCode = unicode;\n            }\n          }\n\n          map[+charCode] = unicodeCharCode;\n        });\n\n        if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {\n          if (/Verdana/i.test(name)) {\n            const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n\n            for (const charCode in GlyphMapForStandardFonts) {\n              map[+charCode] = GlyphMapForStandardFonts[charCode];\n            }\n          }\n        }\n\n        this.toFontChar = map;\n      }\n\n      this.loadedName = fontName.split(\"-\")[0];\n      this.fontType = getFontType(type, subtype);\n    },\n    checkAndRepair: function Font_checkAndRepair(name, font, properties) {\n      const VALID_TABLES = [\"OS/2\", \"cmap\", \"head\", \"hhea\", \"hmtx\", \"maxp\", \"name\", \"post\", \"loca\", \"glyf\", \"fpgm\", \"prep\", \"cvt \", \"CFF \"];\n\n      function readTables(file, numTables) {\n        const tables = Object.create(null);\n        tables[\"OS/2\"] = null;\n        tables.cmap = null;\n        tables.head = null;\n        tables.hhea = null;\n        tables.hmtx = null;\n        tables.maxp = null;\n        tables.name = null;\n        tables.post = null;\n\n        for (let i = 0; i < numTables; i++) {\n          const table = readTableEntry(file);\n\n          if (!VALID_TABLES.includes(table.tag)) {\n            continue;\n          }\n\n          if (table.length === 0) {\n            continue;\n          }\n\n          tables[table.tag] = table;\n        }\n\n        return tables;\n      }\n\n      function readTableEntry(file) {\n        var tag = (0, _util.bytesToString)(file.getBytes(4));\n        var checksum = file.getInt32() >>> 0;\n        var offset = file.getInt32() >>> 0;\n        var length = file.getInt32() >>> 0;\n        var previousPosition = file.pos;\n        file.pos = file.start ? file.start : 0;\n        file.skip(offset);\n        var data = file.getBytes(length);\n        file.pos = previousPosition;\n\n        if (tag === \"head\") {\n          data[8] = data[9] = data[10] = data[11] = 0;\n          data[17] |= 0x20;\n        }\n\n        return {\n          tag,\n          checksum,\n          length,\n          offset,\n          data\n        };\n      }\n\n      function readOpenTypeHeader(ttf) {\n        return {\n          version: (0, _util.bytesToString)(ttf.getBytes(4)),\n          numTables: ttf.getUint16(),\n          searchRange: ttf.getUint16(),\n          entrySelector: ttf.getUint16(),\n          rangeShift: ttf.getUint16()\n        };\n      }\n\n      function readTrueTypeCollectionHeader(ttc) {\n        const ttcTag = (0, _util.bytesToString)(ttc.getBytes(4));\n        (0, _util.assert)(ttcTag === \"ttcf\", \"Must be a TrueType Collection font.\");\n        const majorVersion = ttc.getUint16();\n        const minorVersion = ttc.getUint16();\n        const numFonts = ttc.getInt32() >>> 0;\n        const offsetTable = [];\n\n        for (let i = 0; i < numFonts; i++) {\n          offsetTable.push(ttc.getInt32() >>> 0);\n        }\n\n        const header = {\n          ttcTag,\n          majorVersion,\n          minorVersion,\n          numFonts,\n          offsetTable\n        };\n\n        switch (majorVersion) {\n          case 1:\n            return header;\n\n          case 2:\n            header.dsigTag = ttc.getInt32() >>> 0;\n            header.dsigLength = ttc.getInt32() >>> 0;\n            header.dsigOffset = ttc.getInt32() >>> 0;\n            return header;\n        }\n\n        throw new _util.FormatError(`Invalid TrueType Collection majorVersion: ${majorVersion}.`);\n      }\n\n      function readTrueTypeCollectionData(ttc, fontName) {\n        const {\n          numFonts,\n          offsetTable\n        } = readTrueTypeCollectionHeader(ttc);\n\n        for (let i = 0; i < numFonts; i++) {\n          ttc.pos = (ttc.start || 0) + offsetTable[i];\n          const potentialHeader = readOpenTypeHeader(ttc);\n          const potentialTables = readTables(ttc, potentialHeader.numTables);\n\n          if (!potentialTables.name) {\n            throw new _util.FormatError('TrueType Collection font must contain a \"name\" table.');\n          }\n\n          const nameTable = readNameTable(potentialTables.name);\n\n          for (let j = 0, jj = nameTable.length; j < jj; j++) {\n            for (let k = 0, kk = nameTable[j].length; k < kk; k++) {\n              const nameEntry = nameTable[j][k];\n\n              if (nameEntry && nameEntry.replace(/\\s/g, \"\") === fontName) {\n                return {\n                  header: potentialHeader,\n                  tables: potentialTables\n                };\n              }\n            }\n          }\n        }\n\n        throw new _util.FormatError(`TrueType Collection does not contain \"${fontName}\" font.`);\n      }\n\n      function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {\n        if (!cmap) {\n          (0, _util.warn)(\"No cmap table available.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var segment;\n        var start = (file.start ? file.start : 0) + cmap.offset;\n        file.pos = start;\n        file.skip(2);\n        var numTables = file.getUint16();\n        var potentialTable;\n        var canBreak = false;\n\n        for (var i = 0; i < numTables; i++) {\n          var platformId = file.getUint16();\n          var encodingId = file.getUint16();\n          var offset = file.getInt32() >>> 0;\n          var useTable = false;\n\n          if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {\n            continue;\n          }\n\n          if (platformId === 0 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 1 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {\n            useTable = true;\n\n            if (!isSymbolicFont) {\n              canBreak = true;\n            }\n          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n            useTable = true;\n            canBreak = true;\n          }\n\n          if (useTable) {\n            potentialTable = {\n              platformId,\n              encodingId,\n              offset\n            };\n          }\n\n          if (canBreak) {\n            break;\n          }\n        }\n\n        if (potentialTable) {\n          file.pos = start + potentialTable.offset;\n        }\n\n        if (!potentialTable || file.peekByte() === -1) {\n          (0, _util.warn)(\"Could not find a preferred cmap table.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var format = file.getUint16();\n        file.skip(2 + 2);\n        var hasShortCmap = false;\n        var mappings = [];\n        var j, glyphId;\n\n        if (format === 0) {\n          for (j = 0; j < 256; j++) {\n            var index = file.getByte();\n\n            if (!index) {\n              continue;\n            }\n\n            mappings.push({\n              charCode: j,\n              glyphId: index\n            });\n          }\n\n          hasShortCmap = true;\n        } else if (format === 4) {\n          var segCount = file.getUint16() >> 1;\n          file.skip(6);\n          var segIndex,\n              segments = [];\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments.push({\n              end: file.getUint16()\n            });\n          }\n\n          file.skip(2);\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].start = file.getUint16();\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].delta = file.getUint16();\n          }\n\n          var offsetsCount = 0;\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            var rangeOffset = file.getUint16();\n\n            if (!rangeOffset) {\n              segment.offsetIndex = -1;\n              continue;\n            }\n\n            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n            segment.offsetIndex = offsetIndex;\n            offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);\n          }\n\n          var offsets = [];\n\n          for (j = 0; j < offsetsCount; j++) {\n            offsets.push(file.getUint16());\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            start = segment.start;\n            var end = segment.end;\n            var delta = segment.delta;\n            offsetIndex = segment.offsetIndex;\n\n            for (j = start; j <= end; j++) {\n              if (j === 0xffff) {\n                continue;\n              }\n\n              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n              glyphId = glyphId + delta & 0xffff;\n              mappings.push({\n                charCode: j,\n                glyphId\n              });\n            }\n          }\n        } else if (format === 6) {\n          var firstCode = file.getUint16();\n          var entryCount = file.getUint16();\n\n          for (j = 0; j < entryCount; j++) {\n            glyphId = file.getUint16();\n            var charCode = firstCode + j;\n            mappings.push({\n              charCode,\n              glyphId\n            });\n          }\n        } else {\n          (0, _util.warn)(\"cmap table has unsupported format: \" + format);\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        mappings.sort(function (a, b) {\n          return a.charCode - b.charCode;\n        });\n\n        for (i = 1; i < mappings.length; i++) {\n          if (mappings[i - 1].charCode === mappings[i].charCode) {\n            mappings.splice(i, 1);\n            i--;\n          }\n        }\n\n        return {\n          platformId: potentialTable.platformId,\n          encodingId: potentialTable.encodingId,\n          mappings,\n          hasShortCmap\n        };\n      }\n\n      function sanitizeMetrics(file, header, metrics, numGlyphs, dupFirstEntry) {\n        if (!header) {\n          if (metrics) {\n            metrics.data = null;\n          }\n\n          return;\n        }\n\n        file.pos = (file.start ? file.start : 0) + header.offset;\n        file.pos += 4;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 2;\n        file.pos += 8;\n        file.pos += 2;\n        var numOfMetrics = file.getUint16();\n\n        if (numOfMetrics > numGlyphs) {\n          (0, _util.info)(\"The numOfMetrics (\" + numOfMetrics + \") should not be \" + \"greater than the numGlyphs (\" + numGlyphs + \")\");\n          numOfMetrics = numGlyphs;\n          header.data[34] = (numOfMetrics & 0xff00) >> 8;\n          header.data[35] = numOfMetrics & 0x00ff;\n        }\n\n        var numOfSidebearings = numGlyphs - numOfMetrics;\n        var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);\n\n        if (numMissing > 0) {\n          var entries = new Uint8Array(metrics.length + numMissing * 2);\n          entries.set(metrics.data);\n\n          if (dupFirstEntry) {\n            entries[metrics.length] = metrics.data[2];\n            entries[metrics.length + 1] = metrics.data[3];\n          }\n\n          metrics.data = entries;\n        }\n      }\n\n      function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {\n        var glyphProfile = {\n          length: 0,\n          sizeOfInstructions: 0\n        };\n\n        if (sourceEnd - sourceStart <= 12) {\n          return glyphProfile;\n        }\n\n        var glyf = source.subarray(sourceStart, sourceEnd);\n        var contoursCount = signedInt16(glyf[0], glyf[1]);\n\n        if (contoursCount < 0) {\n          contoursCount = -1;\n          writeSignedInt16(glyf, 0, contoursCount);\n          dest.set(glyf, destStart);\n          glyphProfile.length = glyf.length;\n          return glyphProfile;\n        }\n\n        var i,\n            j = 10,\n            flagsCount = 0;\n\n        for (i = 0; i < contoursCount; i++) {\n          var endPoint = glyf[j] << 8 | glyf[j + 1];\n          flagsCount = endPoint + 1;\n          j += 2;\n        }\n\n        var instructionsStart = j;\n        var instructionsLength = glyf[j] << 8 | glyf[j + 1];\n        glyphProfile.sizeOfInstructions = instructionsLength;\n        j += 2 + instructionsLength;\n        var instructionsEnd = j;\n        var coordinatesLength = 0;\n\n        for (i = 0; i < flagsCount; i++) {\n          var flag = glyf[j++];\n\n          if (flag & 0xc0) {\n            glyf[j - 1] = flag & 0x3f;\n          }\n\n          let xLength = 2;\n\n          if (flag & 2) {\n            xLength = 1;\n          } else if (flag & 16) {\n            xLength = 0;\n          }\n\n          let yLength = 2;\n\n          if (flag & 4) {\n            yLength = 1;\n          } else if (flag & 32) {\n            yLength = 0;\n          }\n\n          const xyLength = xLength + yLength;\n          coordinatesLength += xyLength;\n\n          if (flag & 8) {\n            var repeat = glyf[j++];\n            i += repeat;\n            coordinatesLength += repeat * xyLength;\n          }\n        }\n\n        if (coordinatesLength === 0) {\n          return glyphProfile;\n        }\n\n        var glyphDataLength = j + coordinatesLength;\n\n        if (glyphDataLength > glyf.length) {\n          return glyphProfile;\n        }\n\n        if (!hintsValid && instructionsLength > 0) {\n          dest.set(glyf.subarray(0, instructionsStart), destStart);\n          dest.set([0, 0], destStart + instructionsStart);\n          dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);\n          glyphDataLength -= instructionsLength;\n\n          if (glyf.length - glyphDataLength > 3) {\n            glyphDataLength = glyphDataLength + 3 & ~3;\n          }\n\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        if (glyf.length - glyphDataLength > 3) {\n          glyphDataLength = glyphDataLength + 3 & ~3;\n          dest.set(glyf.subarray(0, glyphDataLength), destStart);\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        dest.set(glyf, destStart);\n        glyphProfile.length = glyf.length;\n        return glyphProfile;\n      }\n\n      function sanitizeHead(head, numGlyphs, locaLength) {\n        var data = head.data;\n        var version = int32(data[0], data[1], data[2], data[3]);\n\n        if (version >> 16 !== 1) {\n          (0, _util.info)(\"Attempting to fix invalid version in head table: \" + version);\n          data[0] = 0;\n          data[1] = 1;\n          data[2] = 0;\n          data[3] = 0;\n        }\n\n        var indexToLocFormat = int16(data[50], data[51]);\n\n        if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n          (0, _util.info)(\"Attempting to fix invalid indexToLocFormat in head table: \" + indexToLocFormat);\n          var numGlyphsPlusOne = numGlyphs + 1;\n\n          if (locaLength === numGlyphsPlusOne << 1) {\n            data[50] = 0;\n            data[51] = 0;\n          } else if (locaLength === numGlyphsPlusOne << 2) {\n            data[50] = 0;\n            data[51] = 1;\n          } else {\n            throw new _util.FormatError(\"Could not fix indexToLocFormat: \" + indexToLocFormat);\n          }\n        }\n      }\n\n      function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {\n        var itemSize, itemDecode, itemEncode;\n\n        if (isGlyphLocationsLong) {\n          itemSize = 4;\n\n          itemDecode = function fontItemDecodeLong(data, offset) {\n            return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n          };\n\n          itemEncode = function fontItemEncodeLong(data, offset, value) {\n            data[offset] = value >>> 24 & 0xff;\n            data[offset + 1] = value >> 16 & 0xff;\n            data[offset + 2] = value >> 8 & 0xff;\n            data[offset + 3] = value & 0xff;\n          };\n        } else {\n          itemSize = 2;\n\n          itemDecode = function fontItemDecode(data, offset) {\n            return data[offset] << 9 | data[offset + 1] << 1;\n          };\n\n          itemEncode = function fontItemEncode(data, offset, value) {\n            data[offset] = value >> 9 & 0xff;\n            data[offset + 1] = value >> 1 & 0xff;\n          };\n        }\n\n        var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n        var locaDataSize = itemSize * (1 + numGlyphsOut);\n        var locaData = new Uint8Array(locaDataSize);\n        locaData.set(loca.data.subarray(0, locaDataSize));\n        loca.data = locaData;\n        var oldGlyfData = glyf.data;\n        var oldGlyfDataLength = oldGlyfData.length;\n        var newGlyfData = new Uint8Array(oldGlyfDataLength);\n        var startOffset = itemDecode(locaData, 0);\n        var writeOffset = 0;\n        var missingGlyphs = Object.create(null);\n        itemEncode(locaData, 0, writeOffset);\n        var i, j;\n\n        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n          var endOffset = itemDecode(locaData, j);\n\n          if (endOffset === 0) {\n            endOffset = startOffset;\n          }\n\n          if (endOffset > oldGlyfDataLength && (oldGlyfDataLength + 3 & ~3) === endOffset) {\n            endOffset = oldGlyfDataLength;\n          }\n\n          if (endOffset > oldGlyfDataLength) {\n            startOffset = endOffset;\n          }\n\n          var glyphProfile = sanitizeGlyph(oldGlyfData, startOffset, endOffset, newGlyfData, writeOffset, hintsValid);\n          var newLength = glyphProfile.length;\n\n          if (newLength === 0) {\n            missingGlyphs[i] = true;\n          }\n\n          if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n            maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n          }\n\n          writeOffset += newLength;\n          itemEncode(locaData, j, writeOffset);\n          startOffset = endOffset;\n        }\n\n        if (writeOffset === 0) {\n          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);\n\n          for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n            itemEncode(locaData, j, simpleGlyph.length);\n          }\n\n          glyf.data = simpleGlyph;\n        } else if (dupFirstEntry) {\n          var firstEntryLength = itemDecode(locaData, itemSize);\n\n          if (newGlyfData.length > firstEntryLength + writeOffset) {\n            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n          } else {\n            glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n            glyf.data.set(newGlyfData.subarray(0, writeOffset));\n          }\n\n          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n          itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);\n        } else {\n          glyf.data = newGlyfData.subarray(0, writeOffset);\n        }\n\n        return {\n          missingGlyphs,\n          maxSizeOfInstructions\n        };\n      }\n\n      function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {\n        var start = (font.start ? font.start : 0) + post.offset;\n        font.pos = start;\n        var length = post.length,\n            end = start + length;\n        var version = font.getInt32();\n        font.skip(28);\n        var glyphNames;\n        var valid = true;\n        var i;\n\n        switch (version) {\n          case 0x00010000:\n            glyphNames = MacStandardGlyphOrdering;\n            break;\n\n          case 0x00020000:\n            var numGlyphs = font.getUint16();\n\n            if (numGlyphs !== maxpNumGlyphs) {\n              valid = false;\n              break;\n            }\n\n            var glyphNameIndexes = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var index = font.getUint16();\n\n              if (index >= 32768) {\n                valid = false;\n                break;\n              }\n\n              glyphNameIndexes.push(index);\n            }\n\n            if (!valid) {\n              break;\n            }\n\n            var customNames = [];\n            var strBuf = [];\n\n            while (font.pos < end) {\n              var stringLength = font.getByte();\n              strBuf.length = stringLength;\n\n              for (i = 0; i < stringLength; ++i) {\n                strBuf[i] = String.fromCharCode(font.getByte());\n              }\n\n              customNames.push(strBuf.join(\"\"));\n            }\n\n            glyphNames = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var j = glyphNameIndexes[i];\n\n              if (j < 258) {\n                glyphNames.push(MacStandardGlyphOrdering[j]);\n                continue;\n              }\n\n              glyphNames.push(customNames[j - 258]);\n            }\n\n            break;\n\n          case 0x00030000:\n            break;\n\n          default:\n            (0, _util.warn)(\"Unknown/unsupported post table version \" + version);\n            valid = false;\n\n            if (propertiesObj.defaultEncoding) {\n              glyphNames = propertiesObj.defaultEncoding;\n            }\n\n            break;\n        }\n\n        propertiesObj.glyphNames = glyphNames;\n        return valid;\n      }\n\n      function readNameTable(nameTable) {\n        var start = (font.start ? font.start : 0) + nameTable.offset;\n        font.pos = start;\n        var names = [[], []];\n        var length = nameTable.length,\n            end = start + length;\n        var format = font.getUint16();\n        var FORMAT_0_HEADER_LENGTH = 6;\n\n        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n          return names;\n        }\n\n        var numRecords = font.getUint16();\n        var stringsStart = font.getUint16();\n        var records = [];\n        var NAME_RECORD_LENGTH = 12;\n        var i, ii;\n\n        for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {\n          var r = {\n            platform: font.getUint16(),\n            encoding: font.getUint16(),\n            language: font.getUint16(),\n            name: font.getUint16(),\n            length: font.getUint16(),\n            offset: font.getUint16()\n          };\n\n          if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {\n            records.push(r);\n          }\n        }\n\n        for (i = 0, ii = records.length; i < ii; i++) {\n          var record = records[i];\n\n          if (record.length <= 0) {\n            continue;\n          }\n\n          var pos = start + stringsStart + record.offset;\n\n          if (pos + record.length > end) {\n            continue;\n          }\n\n          font.pos = pos;\n          var nameIndex = record.name;\n\n          if (record.encoding) {\n            var str = \"\";\n\n            for (var j = 0, jj = record.length; j < jj; j += 2) {\n              str += String.fromCharCode(font.getUint16());\n            }\n\n            names[1][nameIndex] = str;\n          } else {\n            names[0][nameIndex] = (0, _util.bytesToString)(font.getBytes(record.length));\n          }\n        }\n\n        return names;\n      }\n\n      var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n\n      function sanitizeTTProgram(table, ttContext) {\n        var data = table.data;\n        var i = 0,\n            j,\n            n,\n            b,\n            funcId,\n            pc,\n            lastEndf = 0,\n            lastDeff = 0;\n        var stack = [];\n        var callstack = [];\n        var functionsCalled = [];\n        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n        var inFDEF = false,\n            ifLevel = 0,\n            inELSE = 0;\n\n        for (var ii = data.length; i < ii;) {\n          var op = data[i++];\n\n          if (op === 0x40) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if (op === 0x41) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb0) {\n            n = op - 0xb0 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb8) {\n            n = op - 0xb8 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n            if (!inFDEF && !inELSE) {\n              funcId = stack[stack.length - 1];\n\n              if (isNaN(funcId)) {\n                (0, _util.info)(\"TT: CALL empty stack (or invalid entry).\");\n              } else {\n                ttContext.functionsUsed[funcId] = true;\n\n                if (funcId in ttContext.functionsStackDeltas) {\n                  const newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];\n\n                  if (newStackLength < 0) {\n                    (0, _util.warn)(\"TT: CALL invalid functions stack delta.\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  stack.length = newStackLength;\n                } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {\n                  callstack.push({\n                    data,\n                    i,\n                    stackTop: stack.length - 1\n                  });\n                  functionsCalled.push(funcId);\n                  pc = ttContext.functionsDefined[funcId];\n\n                  if (!pc) {\n                    (0, _util.warn)(\"TT: CALL non-existent function\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  data = pc.data;\n                  i = pc.i;\n                }\n              }\n            }\n          } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested FDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n            funcId = stack.pop();\n            ttContext.functionsDefined[funcId] = {\n              data,\n              i\n            };\n          } else if (op === 0x2d) {\n            if (inFDEF) {\n              inFDEF = false;\n              lastEndf = i;\n            } else {\n              pc = callstack.pop();\n\n              if (!pc) {\n                (0, _util.warn)(\"TT: ENDF bad stack\");\n                ttContext.hintsValid = false;\n                return;\n              }\n\n              funcId = functionsCalled.pop();\n              data = pc.data;\n              i = pc.i;\n              ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;\n            }\n          } else if (op === 0x89) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested IDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n          } else if (op === 0x58) {\n            ++ifLevel;\n          } else if (op === 0x1b) {\n            inELSE = ifLevel;\n          } else if (op === 0x59) {\n            if (inELSE === ifLevel) {\n              inELSE = 0;\n            }\n\n            --ifLevel;\n          } else if (op === 0x1c) {\n            if (!inFDEF && !inELSE) {\n              var offset = stack[stack.length - 1];\n\n              if (offset > 0) {\n                i += offset - 1;\n              }\n            }\n          }\n\n          if (!inFDEF && !inELSE) {\n            let stackDelta = 0;\n\n            if (op <= 0x8e) {\n              stackDelta = TTOpsStackDeltas[op];\n            } else if (op >= 0xc0 && op <= 0xdf) {\n              stackDelta = -1;\n            } else if (op >= 0xe0) {\n              stackDelta = -2;\n            }\n\n            if (op >= 0x71 && op <= 0x75) {\n              n = stack.pop();\n\n              if (!isNaN(n)) {\n                stackDelta = -n * 2;\n              }\n            }\n\n            while (stackDelta < 0 && stack.length > 0) {\n              stack.pop();\n              stackDelta++;\n            }\n\n            while (stackDelta > 0) {\n              stack.push(NaN);\n              stackDelta--;\n            }\n          }\n        }\n\n        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n        var content = [data];\n\n        if (i > data.length) {\n          content.push(new Uint8Array(i - data.length));\n        }\n\n        if (lastDeff > lastEndf) {\n          (0, _util.warn)(\"TT: complementing a missing function tail\");\n          content.push(new Uint8Array([0x22, 0x2d]));\n        }\n\n        foldTTTable(table, content);\n      }\n\n      function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n        if (ttContext.tooComplexToFollowFunctions) {\n          return;\n        }\n\n        if (ttContext.functionsDefined.length > maxFunctionDefs) {\n          (0, _util.warn)(\"TT: more functions defined than expected\");\n          ttContext.hintsValid = false;\n          return;\n        }\n\n        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n          if (j > maxFunctionDefs) {\n            (0, _util.warn)(\"TT: invalid function id: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n\n          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n            (0, _util.warn)(\"TT: undefined function: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n        }\n      }\n\n      function foldTTTable(table, content) {\n        if (content.length > 1) {\n          var newLength = 0;\n          var j, jj;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            newLength += content[j].length;\n          }\n\n          newLength = newLength + 3 & ~3;\n          var result = new Uint8Array(newLength);\n          var pos = 0;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            result.set(content[j], pos);\n            pos += content[j].length;\n          }\n\n          table.data = result;\n          table.length = newLength;\n        }\n      }\n\n      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n        var ttContext = {\n          functionsDefined: [],\n          functionsUsed: [],\n          functionsStackDeltas: [],\n          tooComplexToFollowFunctions: false,\n          hintsValid: true\n        };\n\n        if (fpgm) {\n          sanitizeTTProgram(fpgm, ttContext);\n        }\n\n        if (prep) {\n          sanitizeTTProgram(prep, ttContext);\n        }\n\n        if (fpgm) {\n          checkInvalidFunctions(ttContext, maxFunctionDefs);\n        }\n\n        if (cvt && cvt.length & 1) {\n          var cvtData = new Uint8Array(cvt.length + 1);\n          cvtData.set(cvt.data);\n          cvt.data = cvtData;\n        }\n\n        return ttContext.hintsValid;\n      }\n\n      font = new _stream.Stream(new Uint8Array(font.getBytes()));\n      let header, tables;\n\n      if (isTrueTypeCollectionFile(font)) {\n        const ttcData = readTrueTypeCollectionData(font, this.name);\n        header = ttcData.header;\n        tables = ttcData.tables;\n      } else {\n        header = readOpenTypeHeader(font);\n        tables = readTables(font, header.numTables);\n      }\n\n      let cff, cffFile;\n      var isTrueType = !tables[\"CFF \"];\n\n      if (!isTrueType) {\n        const isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));\n\n        if (header.version === \"OTTO\" && !isComposite || !tables.head || !tables.hhea || !tables.maxp || !tables.post) {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          cff = new CFFFont(cffFile, properties);\n          adjustWidths(properties);\n          return this.convert(name, cff, properties);\n        }\n\n        delete tables.glyf;\n        delete tables.loca;\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n        this.isOpenType = true;\n      } else {\n        if (!tables.loca) {\n          throw new _util.FormatError('Required \"loca\" table is not found');\n        }\n\n        if (!tables.glyf) {\n          (0, _util.warn)('Required \"glyf\" table is not found -- trying to recover.');\n          tables.glyf = {\n            tag: \"glyf\",\n            data: new Uint8Array(0)\n          };\n        }\n\n        this.isOpenType = false;\n      }\n\n      if (!tables.maxp) {\n        throw new _util.FormatError('Required \"maxp\" table is not found');\n      }\n\n      font.pos = (font.start || 0) + tables.maxp.offset;\n      var version = font.getInt32();\n      const numGlyphs = font.getUint16();\n      let numGlyphsOut = numGlyphs + 1;\n      let dupFirstEntry = true;\n\n      if (numGlyphsOut > 0xffff) {\n        dupFirstEntry = false;\n        numGlyphsOut = numGlyphs;\n        (0, _util.warn)(\"Not enough space in glyfs to duplicate first glyph.\");\n      }\n\n      var maxFunctionDefs = 0;\n      var maxSizeOfInstructions = 0;\n\n      if (version >= 0x00010000 && tables.maxp.length >= 22) {\n        font.pos += 8;\n        var maxZones = font.getUint16();\n\n        if (maxZones > 2) {\n          tables.maxp.data[14] = 0;\n          tables.maxp.data[15] = 2;\n        }\n\n        font.pos += 4;\n        maxFunctionDefs = font.getUint16();\n        font.pos += 4;\n        maxSizeOfInstructions = font.getUint16();\n      }\n\n      tables.maxp.data[4] = numGlyphsOut >> 8;\n      tables.maxp.data[5] = numGlyphsOut & 255;\n      var hintsValid = sanitizeTTPrograms(tables.fpgm, tables.prep, tables[\"cvt \"], maxFunctionDefs);\n\n      if (!hintsValid) {\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n      }\n\n      sanitizeMetrics(font, tables.hhea, tables.hmtx, numGlyphsOut, dupFirstEntry);\n\n      if (!tables.head) {\n        throw new _util.FormatError('Required \"head\" table is not found');\n      }\n\n      sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);\n      var missingGlyphs = Object.create(null);\n\n      if (isTrueType) {\n        var isGlyphLocationsLong = int16(tables.head.data[50], tables.head.data[51]);\n        var glyphsInfo = sanitizeGlyphLocations(tables.loca, tables.glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);\n        missingGlyphs = glyphsInfo.missingGlyphs;\n\n        if (version >= 0x00010000 && tables.maxp.length >= 22) {\n          tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n          tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n        }\n      }\n\n      if (!tables.hhea) {\n        throw new _util.FormatError('Required \"hhea\" table is not found');\n      }\n\n      if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {\n        tables.hhea.data[10] = 0xff;\n        tables.hhea.data[11] = 0xff;\n      }\n\n      var metricsOverride = {\n        unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),\n        yMax: int16(tables.head.data[42], tables.head.data[43]),\n        yMin: signedInt16(tables.head.data[38], tables.head.data[39]),\n        ascent: int16(tables.hhea.data[4], tables.hhea.data[5]),\n        descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7])\n      };\n      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n\n      if (tables.post) {\n        readPostScriptTable(tables.post, properties, numGlyphs);\n      }\n\n      tables.post = {\n        tag: \"post\",\n        data: createPostTable(properties)\n      };\n      const charCodeToGlyphId = [];\n\n      function hasGlyph(glyphId) {\n        return !missingGlyphs[glyphId];\n      }\n\n      if (properties.composite) {\n        var cidToGidMap = properties.cidToGidMap || [];\n        var isCidToGidMapEmpty = cidToGidMap.length === 0;\n        properties.cMap.forEach(function (charCode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError(\"Max size of CID is 65,535\");\n          }\n\n          var glyphId = -1;\n\n          if (isCidToGidMapEmpty) {\n            glyphId = cid;\n          } else if (cidToGidMap[cid] !== undefined) {\n            glyphId = cidToGidMap[cid];\n          }\n\n          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        });\n      } else {\n        var cmapTable = readCmapTable(tables.cmap, font, this.isSymbolicFont, properties.hasEncoding);\n        var cmapPlatformId = cmapTable.platformId;\n        var cmapEncodingId = cmapTable.encodingId;\n        var cmapMappings = cmapTable.mappings;\n        var cmapMappingsLength = cmapMappings.length;\n\n        if (properties.hasEncoding && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0) || cmapPlatformId === -1 && cmapEncodingId === -1 && !!(0, _encodings.getEncoding)(properties.baseEncodingName)) {\n          var baseEncoding = [];\n\n          if (properties.baseEncodingName === \"MacRomanEncoding\" || properties.baseEncodingName === \"WinAnsiEncoding\") {\n            baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n          }\n\n          var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n          for (let charCode = 0; charCode < 256; charCode++) {\n            var glyphName, standardGlyphName;\n\n            if (this.differences && charCode in this.differences) {\n              glyphName = this.differences[charCode];\n            } else if (charCode in baseEncoding && baseEncoding[charCode] !== \"\") {\n              glyphName = baseEncoding[charCode];\n            } else {\n              glyphName = _encodings.StandardEncoding[charCode];\n            }\n\n            if (!glyphName) {\n              continue;\n            }\n\n            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n            var unicodeOrCharCode;\n\n            if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n              unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);\n            }\n\n            var found = false;\n\n            for (let i = 0; i < cmapMappingsLength; ++i) {\n              if (cmapMappings[i].charCode !== unicodeOrCharCode) {\n                continue;\n              }\n\n              charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n              found = true;\n              break;\n            }\n\n            if (!found && properties.glyphNames) {\n              var glyphId = properties.glyphNames.indexOf(glyphName);\n\n              if (glyphId === -1 && standardGlyphName !== glyphName) {\n                glyphId = properties.glyphNames.indexOf(standardGlyphName);\n              }\n\n              if (glyphId > 0 && hasGlyph(glyphId)) {\n                charCodeToGlyphId[charCode] = glyphId;\n              }\n            }\n          }\n        } else if (cmapPlatformId === 0 && cmapEncodingId === 0) {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCodeToGlyphId[cmapMappings[i].charCode] = cmapMappings[i].glyphId;\n          }\n        } else {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            let charCode = cmapMappings[i].charCode;\n\n            if (cmapPlatformId === 3 && charCode >= 0xf000 && charCode <= 0xf0ff) {\n              charCode &= 0xff;\n            }\n\n            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n          }\n        }\n      }\n\n      if (charCodeToGlyphId.length === 0) {\n        charCodeToGlyphId[0] = 0;\n      }\n\n      let glyphZeroId = numGlyphsOut - 1;\n\n      if (!dupFirstEntry) {\n        glyphZeroId = 0;\n      }\n\n      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      tables.cmap = {\n        tag: \"cmap\",\n        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut)\n      };\n\n      if (!tables[\"OS/2\"] || !validateOS2Table(tables[\"OS/2\"], font)) {\n        tables[\"OS/2\"] = {\n          tag: \"OS/2\",\n          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)\n        };\n      }\n\n      if (!isTrueType) {\n        try {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          var parser = new _cff_parser.CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);\n          cff = parser.parse();\n          cff.duplicateFirstGlyph();\n          var compiler = new _cff_parser.CFFCompiler(cff);\n          tables[\"CFF \"].data = compiler.compile();\n        } catch (e) {\n          (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n        }\n      }\n\n      if (!tables.name) {\n        tables.name = {\n          tag: \"name\",\n          data: createNameTable(this.name)\n        };\n      } else {\n        var namePrototype = readNameTable(tables.name);\n        tables.name.data = createNameTable(name, namePrototype);\n      }\n\n      var builder = new OpenTypeFileBuilder(header.version);\n\n      for (var tableTag in tables) {\n        builder.addTable(tableTag, tables[tableTag].data);\n      }\n\n      return builder.toArray();\n    },\n    convert: function Font_convert(fontName, font, properties) {\n      properties.fixedPitch = false;\n\n      if (properties.builtInEncoding) {\n        adjustToUnicode(properties, properties.builtInEncoding);\n      }\n\n      let glyphZeroId = 1;\n\n      if (font instanceof CFFFont) {\n        glyphZeroId = font.numGlyphs - 1;\n      }\n\n      var mapping = font.getGlyphMapping(properties);\n      var newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      var numGlyphs = font.numGlyphs;\n\n      function getCharCodes(charCodeToGlyphId, glyphId) {\n        var charCodes = null;\n\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            if (!charCodes) {\n              charCodes = [];\n            }\n\n            charCodes.push(charCode | 0);\n          }\n        }\n\n        return charCodes;\n      }\n\n      function createCharCode(charCodeToGlyphId, glyphId) {\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            return charCode | 0;\n          }\n        }\n\n        newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;\n        return newMapping.nextAvailableFontCharCode++;\n      }\n\n      var seacs = font.seacs;\n\n      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n        var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        var charset = font.getCharset();\n        var seacMap = Object.create(null);\n\n        for (var glyphId in seacs) {\n          glyphId |= 0;\n          var seac = seacs[glyphId];\n          var baseGlyphName = _encodings.StandardEncoding[seac[2]];\n          var accentGlyphName = _encodings.StandardEncoding[seac[3]];\n          var baseGlyphId = charset.indexOf(baseGlyphName);\n          var accentGlyphId = charset.indexOf(accentGlyphName);\n\n          if (baseGlyphId < 0 || accentGlyphId < 0) {\n            continue;\n          }\n\n          var accentOffset = {\n            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]\n          };\n          var charCodes = getCharCodes(mapping, glyphId);\n\n          if (!charCodes) {\n            continue;\n          }\n\n          for (let i = 0, ii = charCodes.length; i < ii; i++) {\n            var charCode = charCodes[i];\n            var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n            var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);\n            var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);\n            seacMap[charCode] = {\n              baseFontCharCode,\n              accentFontCharCode,\n              accentOffset\n            };\n          }\n        }\n\n        properties.seacMap = seacMap;\n      }\n\n      var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n      var builder = new OpenTypeFileBuilder(\"\\x4F\\x54\\x54\\x4F\");\n      builder.addTable(\"CFF \", font.data);\n      builder.addTable(\"OS/2\", createOS2Table(properties, newMapping.charCodeToGlyphId));\n      builder.addTable(\"cmap\", createCmapTable(newMapping.charCodeToGlyphId, numGlyphs));\n      builder.addTable(\"head\", \"\\x00\\x01\\x00\\x00\" + \"\\x00\\x00\\x10\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x5F\\x0F\\x3C\\xF5\" + \"\\x00\\x00\" + safeString16(unitsPerEm) + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\" + safeString16(properties.descent) + \"\\x0F\\xFF\" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + \"\\x00\\x11\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\");\n      builder.addTable(\"hhea\", \"\\x00\\x01\\x00\\x00\" + safeString16(properties.ascent) + safeString16(properties.descent) + \"\\x00\\x00\" + \"\\xFF\\xFF\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + string16(numGlyphs));\n      builder.addTable(\"hmtx\", function fontFieldsHmtx() {\n        var charstrings = font.charstrings;\n        var cffWidths = font.cff ? font.cff.widths : null;\n        var hmtx = \"\\x00\\x00\\x00\\x00\";\n\n        for (let i = 1, ii = numGlyphs; i < ii; i++) {\n          var width = 0;\n\n          if (charstrings) {\n            var charstring = charstrings[i - 1];\n            width = \"width\" in charstring ? charstring.width : 0;\n          } else if (cffWidths) {\n            width = Math.ceil(cffWidths[i] || 0);\n          }\n\n          hmtx += string16(width) + string16(0);\n        }\n\n        return hmtx;\n      }());\n      builder.addTable(\"maxp\", \"\\x00\\x00\\x50\\x00\" + string16(numGlyphs));\n      builder.addTable(\"name\", createNameTable(fontName));\n      builder.addTable(\"post\", createPostTable(properties));\n      return builder.toArray();\n    },\n\n    get spaceWidth() {\n      var possibleSpaceReplacements = [\"space\", \"minus\", \"one\", \"i\", \"I\"];\n      var width;\n\n      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n        var glyphName = possibleSpaceReplacements[i];\n\n        if (glyphName in this.widths) {\n          width = this.widths[glyphName];\n          break;\n        }\n\n        var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        var glyphUnicode = glyphsUnicodeMap[glyphName];\n        var charcode = 0;\n\n        if (this.composite && this.cMap.contains(glyphUnicode)) {\n          charcode = this.cMap.lookup(glyphUnicode);\n        }\n\n        if (!charcode && this.toUnicode) {\n          charcode = this.toUnicode.charCodeOf(glyphUnicode);\n        }\n\n        if (charcode <= 0) {\n          charcode = glyphUnicode;\n        }\n\n        width = this.widths[charcode];\n\n        if (width) {\n          break;\n        }\n      }\n\n      width = width || this.defaultWidth;\n      return (0, _util.shadow)(this, \"spaceWidth\", width);\n    },\n\n    charToGlyph: function Font_charToGlyph(charcode, isSpace) {\n      var fontCharCode, width, operatorListId;\n      var widthCode = charcode;\n\n      if (this.cMap && this.cMap.contains(charcode)) {\n        widthCode = this.cMap.lookup(charcode);\n      }\n\n      width = this.widths[widthCode];\n      width = (0, _util.isNum)(width) ? width : this.defaultWidth;\n      var vmetric = this.vmetrics && this.vmetrics[widthCode];\n      let unicode = this.toUnicode.get(charcode) || this.fallbackToUnicode.get(charcode) || charcode;\n\n      if (typeof unicode === \"number\") {\n        unicode = String.fromCharCode(unicode);\n      }\n\n      var isInFont = (charcode in this.toFontChar);\n      fontCharCode = this.toFontChar[charcode] || charcode;\n\n      if (this.missingFile) {\n        const glyphName = this.differences[charcode] || this.defaultEncoding[charcode];\n\n        if ((glyphName === \".notdef\" || glyphName === \"\") && this.type === \"Type1\") {\n          fontCharCode = 0x20;\n        }\n\n        fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);\n      }\n\n      if (this.isType3Font) {\n        operatorListId = fontCharCode;\n      }\n\n      var accent = null;\n\n      if (this.seacMap && this.seacMap[charcode]) {\n        isInFont = true;\n        var seac = this.seacMap[charcode];\n        fontCharCode = seac.baseFontCharCode;\n        accent = {\n          fontChar: String.fromCodePoint(seac.accentFontCharCode),\n          offset: seac.accentOffset\n        };\n      }\n\n      let fontChar = \"\";\n\n      if (typeof fontCharCode === \"number\") {\n        if (fontCharCode <= 0x10ffff) {\n          fontChar = String.fromCodePoint(fontCharCode);\n        } else {\n          (0, _util.warn)(`charToGlyph - invalid fontCharCode: ${fontCharCode}`);\n        }\n      }\n\n      var glyph = this.glyphCache[charcode];\n\n      if (!glyph || !glyph.matchesForCache(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {\n        glyph = new Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);\n        this.glyphCache[charcode] = glyph;\n      }\n\n      return glyph;\n    },\n    charsToGlyphs: function Font_charsToGlyphs(chars) {\n      var charsCache = this.charsCache;\n      var glyphs, glyph, charcode;\n\n      if (charsCache) {\n        glyphs = charsCache[chars];\n\n        if (glyphs) {\n          return glyphs;\n        }\n      }\n\n      if (!charsCache) {\n        charsCache = this.charsCache = Object.create(null);\n      }\n\n      glyphs = [];\n      var charsCacheKey = chars;\n      var i = 0,\n          ii;\n\n      if (this.cMap) {\n        var c = Object.create(null);\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          charcode = c.charcode;\n          var length = c.length;\n          i += length;\n          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;\n          glyph = this.charToGlyph(charcode, isSpace);\n          glyphs.push(glyph);\n        }\n      } else {\n        for (i = 0, ii = chars.length; i < ii; ++i) {\n          charcode = chars.charCodeAt(i);\n          glyph = this.charToGlyph(charcode, charcode === 0x20);\n          glyphs.push(glyph);\n        }\n      }\n\n      return charsCache[charsCacheKey] = glyphs;\n    },\n\n    get glyphCacheValues() {\n      return Object.values(this.glyphCache);\n    }\n\n  };\n  return Font;\n}();\n\nexports.Font = Font;\n\nvar ErrorFont = function ErrorFontClosure() {\n  function ErrorFont(error) {\n    this.error = error;\n    this.loadedName = \"g_font_error\";\n    this.missingFile = true;\n  }\n\n  ErrorFont.prototype = {\n    charsToGlyphs: function ErrorFont_charsToGlyphs() {\n      return [];\n    },\n\n    exportData(extraProperties = false) {\n      return {\n        error: this.error\n      };\n    }\n\n  };\n  return ErrorFont;\n}();\n\nexports.ErrorFont = ErrorFont;\n\nfunction type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n  var charCodeToGlyphId = Object.create(null);\n  var glyphId, charCode, baseEncoding;\n  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n\n  if (properties.baseEncodingName) {\n    baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  } else if (isSymbolicFont) {\n    for (charCode in builtInEncoding) {\n      charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n    }\n  } else {\n    baseEncoding = _encodings.StandardEncoding;\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  var differences = properties.differences,\n      glyphsUnicodeMap;\n\n  if (differences) {\n    for (charCode in differences) {\n      var glyphName = differences[charCode];\n      glyphId = glyphNames.indexOf(glyphName);\n\n      if (glyphId === -1) {\n        if (!glyphsUnicodeMap) {\n          glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        }\n\n        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n\n        if (standardGlyphName !== glyphName) {\n          glyphId = glyphNames.indexOf(standardGlyphName);\n        }\n      }\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  return charCodeToGlyphId;\n}\n\nvar Type1Font = function Type1FontClosure() {\n  function findBlock(streamBytes, signature, startIndex) {\n    var streamBytesLength = streamBytes.length;\n    var signatureLength = signature.length;\n    var scanLength = streamBytesLength - signatureLength;\n    var i = startIndex,\n        j,\n        found = false;\n\n    while (i < scanLength) {\n      j = 0;\n\n      while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        i += j;\n\n        while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {\n          i++;\n        }\n\n        found = true;\n        break;\n      }\n\n      i++;\n    }\n\n    return {\n      found,\n      length: i\n    };\n  }\n\n  function getHeaderBlock(stream, suggestedLength) {\n    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n    var streamStartPos = stream.pos;\n    var headerBytes, headerBytesLength, block;\n\n    try {\n      headerBytes = stream.getBytes(suggestedLength);\n      headerBytesLength = headerBytes.length;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n    }\n\n    if (headerBytesLength === suggestedLength) {\n      block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);\n\n      if (block.found && block.length === suggestedLength) {\n        return {\n          stream: new _stream.Stream(headerBytes),\n          length: suggestedLength\n        };\n      }\n    }\n\n    (0, _util.warn)('Invalid \"Length1\" property in Type1 font -- trying to recover.');\n    stream.pos = streamStartPos;\n    var SCAN_BLOCK_LENGTH = 2048;\n    var actualLength;\n\n    while (true) {\n      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n\n      if (block.length === 0) {\n        break;\n      }\n\n      stream.pos += block.length;\n\n      if (block.found) {\n        actualLength = stream.pos - streamStartPos;\n        break;\n      }\n    }\n\n    stream.pos = streamStartPos;\n\n    if (actualLength) {\n      return {\n        stream: new _stream.Stream(stream.getBytes(actualLength)),\n        length: actualLength\n      };\n    }\n\n    (0, _util.warn)('Unable to recover \"Length1\" property in Type1 font -- using as is.');\n    return {\n      stream: new _stream.Stream(stream.getBytes(suggestedLength)),\n      length: suggestedLength\n    };\n  }\n\n  function getEexecBlock(stream, suggestedLength) {\n    var eexecBytes = stream.getBytes();\n    return {\n      stream: new _stream.Stream(eexecBytes),\n      length: eexecBytes.length\n    };\n  }\n\n  function Type1Font(name, file, properties) {\n    var PFB_HEADER_SIZE = 6;\n    var headerBlockLength = properties.length1;\n    var eexecBlockLength = properties.length2;\n    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n\n    if (pfbHeaderPresent) {\n      file.skip(PFB_HEADER_SIZE);\n      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var headerBlock = getHeaderBlock(file, headerBlockLength);\n    var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);\n    headerBlockParser.extractFontHeader(properties);\n\n    if (pfbHeaderPresent) {\n      pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var eexecBlock = getEexecBlock(file, eexecBlockLength);\n    var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);\n    var data = eexecBlockParser.extractFontProgram(properties);\n\n    for (const key in data.properties) {\n      properties[key] = data.properties[key];\n    }\n\n    var charstrings = data.charstrings;\n    var type2Charstrings = this.getType2Charstrings(charstrings);\n    var subrs = this.getType2Subrs(data.subrs);\n    this.charstrings = charstrings;\n    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);\n    this.seacs = this.getSeacs(data.charstrings);\n  }\n\n  Type1Font.prototype = {\n    get numGlyphs() {\n      return this.charstrings.length + 1;\n    },\n\n    getCharset: function Type1Font_getCharset() {\n      var charset = [\".notdef\"];\n      var charstrings = this.charstrings;\n\n      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        charset.push(charstrings[glyphId].glyphName);\n      }\n\n      return charset;\n    },\n    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {\n      var charstrings = this.charstrings;\n\n      if (properties.composite) {\n        const charCodeToGlyphId = Object.create(null);\n\n        for (let glyphId = 0, charstringsLen = charstrings.length; glyphId < charstringsLen; glyphId++) {\n          const charCode = properties.cMap.charCodeOf(glyphId);\n          charCodeToGlyphId[charCode] = glyphId + 1;\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var glyphNames = [\".notdef\"],\n          glyphId;\n\n      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        glyphNames.push(charstrings[glyphId].glyphName);\n      }\n\n      var encoding = properties.builtInEncoding;\n\n      if (encoding) {\n        var builtInEncoding = Object.create(null);\n\n        for (var charCode in encoding) {\n          glyphId = glyphNames.indexOf(encoding[charCode]);\n\n          if (glyphId >= 0) {\n            builtInEncoding[charCode] = glyphId;\n          }\n        }\n      }\n\n      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);\n    },\n    hasGlyphId: function Type1Font_hasGlyphID(id) {\n      if (id < 0 || id >= this.numGlyphs) {\n        return false;\n      }\n\n      if (id === 0) {\n        return true;\n      }\n\n      var glyph = this.charstrings[id - 1];\n      return glyph.charstring.length > 0;\n    },\n    getSeacs: function Type1Font_getSeacs(charstrings) {\n      var i, ii;\n      var seacMap = [];\n\n      for (i = 0, ii = charstrings.length; i < ii; i++) {\n        var charstring = charstrings[i];\n\n        if (charstring.seac) {\n          seacMap[i + 1] = charstring.seac;\n        }\n      }\n\n      return seacMap;\n    },\n    getType2Charstrings: function Type1Font_getType2Charstrings(type1Charstrings) {\n      var type2Charstrings = [];\n\n      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n        type2Charstrings.push(type1Charstrings[i].charstring);\n      }\n\n      return type2Charstrings;\n    },\n    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {\n      var bias = 0;\n      var count = type1Subrs.length;\n\n      if (count < 1133) {\n        bias = 107;\n      } else if (count < 33769) {\n        bias = 1131;\n      } else {\n        bias = 32768;\n      }\n\n      var type2Subrs = [];\n      var i;\n\n      for (i = 0; i < bias; i++) {\n        type2Subrs.push([0x0b]);\n      }\n\n      for (i = 0; i < count; i++) {\n        type2Subrs.push(type1Subrs[i]);\n      }\n\n      return type2Subrs;\n    },\n    wrap: function Type1Font_wrap(name, glyphs, charstrings, subrs, properties) {\n      var cff = new _cff_parser.CFF();\n      cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);\n      cff.names = [name];\n      var topDict = new _cff_parser.CFFTopDict();\n      topDict.setByName(\"version\", 391);\n      topDict.setByName(\"Notice\", 392);\n      topDict.setByName(\"FullName\", 393);\n      topDict.setByName(\"FamilyName\", 394);\n      topDict.setByName(\"Weight\", 395);\n      topDict.setByName(\"Encoding\", null);\n      topDict.setByName(\"FontMatrix\", properties.fontMatrix);\n      topDict.setByName(\"FontBBox\", properties.bbox);\n      topDict.setByName(\"charset\", null);\n      topDict.setByName(\"CharStrings\", null);\n      topDict.setByName(\"Private\", null);\n      cff.topDict = topDict;\n      var strings = new _cff_parser.CFFStrings();\n      strings.add(\"Version 0.11\");\n      strings.add(\"See original notice\");\n      strings.add(name);\n      strings.add(name);\n      strings.add(\"Medium\");\n      cff.strings = strings;\n      cff.globalSubrIndex = new _cff_parser.CFFIndex();\n      var count = glyphs.length;\n      var charsetArray = [\".notdef\"];\n      var i, ii;\n\n      for (i = 0; i < count; i++) {\n        const glyphName = charstrings[i].glyphName;\n\n        const index = _cff_parser.CFFStandardStrings.indexOf(glyphName);\n\n        if (index === -1) {\n          strings.add(glyphName);\n        }\n\n        charsetArray.push(glyphName);\n      }\n\n      cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);\n      var charStringsIndex = new _cff_parser.CFFIndex();\n      charStringsIndex.add([0x8b, 0x0e]);\n\n      for (i = 0; i < count; i++) {\n        charStringsIndex.add(glyphs[i]);\n      }\n\n      cff.charStrings = charStringsIndex;\n      var privateDict = new _cff_parser.CFFPrivateDict();\n      privateDict.setByName(\"Subrs\", null);\n      var fields = [\"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StemSnapH\", \"StemSnapV\", \"BlueShift\", \"BlueFuzz\", \"BlueScale\", \"LanguageGroup\", \"ExpansionFactor\", \"ForceBold\", \"StdHW\", \"StdVW\"];\n\n      for (i = 0, ii = fields.length; i < ii; i++) {\n        var field = fields[i];\n\n        if (!(field in properties.privateData)) {\n          continue;\n        }\n\n        var value = properties.privateData[field];\n\n        if (Array.isArray(value)) {\n          for (var j = value.length - 1; j > 0; j--) {\n            value[j] -= value[j - 1];\n          }\n        }\n\n        privateDict.setByName(field, value);\n      }\n\n      cff.topDict.privateDict = privateDict;\n      var subrIndex = new _cff_parser.CFFIndex();\n\n      for (i = 0, ii = subrs.length; i < ii; i++) {\n        subrIndex.add(subrs[i]);\n      }\n\n      privateDict.subrsIndex = subrIndex;\n      var compiler = new _cff_parser.CFFCompiler(cff);\n      return compiler.compile();\n    }\n  };\n  return Type1Font;\n}();\n\nvar CFFFont = function CFFFontClosure() {\n  function CFFFont(file, properties) {\n    this.properties = properties;\n    var parser = new _cff_parser.CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);\n    this.cff = parser.parse();\n    this.cff.duplicateFirstGlyph();\n    var compiler = new _cff_parser.CFFCompiler(this.cff);\n    this.seacs = this.cff.seacs;\n\n    try {\n      this.data = compiler.compile();\n    } catch (e) {\n      (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n      this.data = file;\n    }\n  }\n\n  CFFFont.prototype = {\n    get numGlyphs() {\n      return this.cff.charStrings.count;\n    },\n\n    getCharset: function CFFFont_getCharset() {\n      return this.cff.charset.charset;\n    },\n    getGlyphMapping: function CFFFont_getGlyphMapping() {\n      var cff = this.cff;\n      var properties = this.properties;\n      var charsets = cff.charset.charset;\n      var charCodeToGlyphId;\n      var glyphId;\n\n      if (properties.composite) {\n        charCodeToGlyphId = Object.create(null);\n        let charCode;\n\n        if (cff.isCIDFont) {\n          for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n            var cid = charsets[glyphId];\n            charCode = properties.cMap.charCodeOf(cid);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        } else {\n          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n            charCode = properties.cMap.charCodeOf(glyphId);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var encoding = cff.encoding ? cff.encoding.encoding : null;\n      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);\n      return charCodeToGlyphId;\n    },\n    hasGlyphId: function CFFFont_hasGlyphID(id) {\n      return this.cff.hasGlyphId(id);\n    }\n  };\n  return CFFFont;\n}();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CFFFDSelect = exports.CFFCompiler = exports.CFFPrivateDict = exports.CFFTopDict = exports.CFFCharset = exports.CFFIndex = exports.CFFStrings = exports.CFFHeader = exports.CFF = exports.CFFParser = exports.CFFStandardStrings = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _charsets = __w_pdfjs_require__(31);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar MAX_SUBR_NESTING = 10;\nvar CFFStandardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nexports.CFFStandardStrings = CFFStandardStrings;\nconst NUM_STANDARD_CFF_STRINGS = 391;\n\nvar CFFParser = function CFFParserClosure() {\n  var CharstringValidationData = [null, {\n    id: \"hstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, null, {\n    id: \"vstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"vmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"rlineto\",\n    min: 2,\n    resetStack: true\n  }, {\n    id: \"hlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"vlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"rrcurveto\",\n    min: 6,\n    resetStack: true\n  }, null, {\n    id: \"callsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"return\",\n    min: 0,\n    undefStack: true\n  }, null, null, {\n    id: \"endchar\",\n    min: 0,\n    stackClearing: true\n  }, null, null, null, {\n    id: \"hstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"hintmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"cntrmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"rmoveto\",\n    min: 2,\n    stackClearing: true\n  }, {\n    id: \"hmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"vstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"rcurveline\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"rlinecurve\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"vvcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hhcurveto\",\n    min: 4,\n    resetStack: true\n  }, null, {\n    id: \"callgsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"vhcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hvcurveto\",\n    min: 4,\n    resetStack: true\n  }];\n  var CharstringValidationData12 = [null, null, null, {\n    id: \"and\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"or\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"not\",\n    min: 1,\n    stackDelta: 0\n  }, null, null, null, {\n    id: \"abs\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"add\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] + stack[index - 1];\n    }\n  }, {\n    id: \"sub\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] - stack[index - 1];\n    }\n  }, {\n    id: \"div\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] / stack[index - 1];\n    }\n  }, null, {\n    id: \"neg\",\n    min: 1,\n    stackDelta: 0,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 1] = -stack[index - 1];\n    }\n  }, {\n    id: \"eq\",\n    min: 2,\n    stackDelta: -1\n  }, null, null, {\n    id: \"drop\",\n    min: 1,\n    stackDelta: -1\n  }, null, {\n    id: \"put\",\n    min: 2,\n    stackDelta: -2\n  }, {\n    id: \"get\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"ifelse\",\n    min: 4,\n    stackDelta: -3\n  }, {\n    id: \"random\",\n    min: 0,\n    stackDelta: 1\n  }, {\n    id: \"mul\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] * stack[index - 1];\n    }\n  }, null, {\n    id: \"sqrt\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"dup\",\n    min: 1,\n    stackDelta: 1\n  }, {\n    id: \"exch\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"index\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"roll\",\n    min: 3,\n    stackDelta: -2\n  }, null, null, null, {\n    id: \"hflex\",\n    min: 7,\n    resetStack: true\n  }, {\n    id: \"flex\",\n    min: 13,\n    resetStack: true\n  }, {\n    id: \"hflex1\",\n    min: 9,\n    resetStack: true\n  }, {\n    id: \"flex1\",\n    min: 11,\n    resetStack: true\n  }];\n\n  function CFFParser(file, properties, seacAnalysisEnabled) {\n    this.bytes = file.getBytes();\n    this.properties = properties;\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n  }\n\n  CFFParser.prototype = {\n    parse: function CFFParser_parse() {\n      var properties = this.properties;\n      var cff = new CFF();\n      this.cff = cff;\n      var header = this.parseHeader();\n      var nameIndex = this.parseIndex(header.endPos);\n      var topDictIndex = this.parseIndex(nameIndex.endPos);\n      var stringIndex = this.parseIndex(topDictIndex.endPos);\n      var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n      cff.header = header.obj;\n      cff.names = this.parseNameIndex(nameIndex.obj);\n      cff.strings = this.parseStringIndex(stringIndex.obj);\n      cff.topDict = topDict;\n      cff.globalSubrIndex = globalSubrIndex.obj;\n      this.parsePrivateDict(cff.topDict);\n      cff.isCIDFont = topDict.hasName(\"ROS\");\n      var charStringOffset = topDict.getByName(\"CharStrings\");\n      var charStringIndex = this.parseIndex(charStringOffset).obj;\n      var fontMatrix = topDict.getByName(\"FontMatrix\");\n\n      if (fontMatrix) {\n        properties.fontMatrix = fontMatrix;\n      }\n\n      var fontBBox = topDict.getByName(\"FontBBox\");\n\n      if (fontBBox) {\n        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n        properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n        properties.ascentScaled = true;\n      }\n\n      var charset, encoding;\n\n      if (cff.isCIDFont) {\n        var fdArrayIndex = this.parseIndex(topDict.getByName(\"FDArray\")).obj;\n\n        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n          var dictRaw = fdArrayIndex.get(i);\n          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);\n          this.parsePrivateDict(fontDict);\n          cff.fdArray.push(fontDict);\n        }\n\n        encoding = null;\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, true);\n        cff.fdSelect = this.parseFDSelect(topDict.getByName(\"FDSelect\"), charStringIndex.count);\n      } else {\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, false);\n        encoding = this.parseEncoding(topDict.getByName(\"Encoding\"), properties, cff.strings, charset.charset);\n      }\n\n      cff.charset = charset;\n      cff.encoding = encoding;\n      var charStringsAndSeacs = this.parseCharStrings({\n        charStrings: charStringIndex,\n        localSubrIndex: topDict.privateDict.subrsIndex,\n        globalSubrIndex: globalSubrIndex.obj,\n        fdSelect: cff.fdSelect,\n        fdArray: cff.fdArray,\n        privateDict: topDict.privateDict\n      });\n      cff.charStrings = charStringsAndSeacs.charStrings;\n      cff.seacs = charStringsAndSeacs.seacs;\n      cff.widths = charStringsAndSeacs.widths;\n      return cff;\n    },\n    parseHeader: function CFFParser_parseHeader() {\n      var bytes = this.bytes;\n      var bytesLength = bytes.length;\n      var offset = 0;\n\n      while (offset < bytesLength && bytes[offset] !== 1) {\n        ++offset;\n      }\n\n      if (offset >= bytesLength) {\n        throw new _util.FormatError(\"Invalid CFF header\");\n      }\n\n      if (offset !== 0) {\n        (0, _util.info)(\"cff data is shifted\");\n        bytes = bytes.subarray(offset);\n        this.bytes = bytes;\n      }\n\n      var major = bytes[0];\n      var minor = bytes[1];\n      var hdrSize = bytes[2];\n      var offSize = bytes[3];\n      var header = new CFFHeader(major, minor, hdrSize, offSize);\n      return {\n        obj: header,\n        endPos: hdrSize\n      };\n    },\n    parseDict: function CFFParser_parseDict(dict) {\n      var pos = 0;\n\n      function parseOperand() {\n        var value = dict[pos++];\n\n        if (value === 30) {\n          return parseFloatOperand();\n        } else if (value === 28) {\n          value = dict[pos++];\n          value = (value << 24 | dict[pos++] << 16) >> 16;\n          return value;\n        } else if (value === 29) {\n          value = dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          return value;\n        } else if (value >= 32 && value <= 246) {\n          return value - 139;\n        } else if (value >= 247 && value <= 250) {\n          return (value - 247) * 256 + dict[pos++] + 108;\n        } else if (value >= 251 && value <= 254) {\n          return -((value - 251) * 256) - dict[pos++] - 108;\n        }\n\n        (0, _util.warn)('CFFParser_parseDict: \"' + value + '\" is a reserved command.');\n        return NaN;\n      }\n\n      function parseFloatOperand() {\n        var str = \"\";\n        var eof = 15;\n        const lookup = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"];\n        var length = dict.length;\n\n        while (pos < length) {\n          var b = dict[pos++];\n          var b1 = b >> 4;\n          var b2 = b & 15;\n\n          if (b1 === eof) {\n            break;\n          }\n\n          str += lookup[b1];\n\n          if (b2 === eof) {\n            break;\n          }\n\n          str += lookup[b2];\n        }\n\n        return parseFloat(str);\n      }\n\n      var operands = [];\n      var entries = [];\n      pos = 0;\n      var end = dict.length;\n\n      while (pos < end) {\n        var b = dict[pos];\n\n        if (b <= 21) {\n          if (b === 12) {\n            b = b << 8 | dict[++pos];\n          }\n\n          entries.push([b, operands]);\n          operands = [];\n          ++pos;\n        } else {\n          operands.push(parseOperand());\n        }\n      }\n\n      return entries;\n    },\n    parseIndex: function CFFParser_parseIndex(pos) {\n      var cffIndex = new CFFIndex();\n      var bytes = this.bytes;\n      var count = bytes[pos++] << 8 | bytes[pos++];\n      var offsets = [];\n      var end = pos;\n      var i, ii;\n\n      if (count !== 0) {\n        var offsetSize = bytes[pos++];\n        var startPos = pos + (count + 1) * offsetSize - 1;\n\n        for (i = 0, ii = count + 1; i < ii; ++i) {\n          var offset = 0;\n\n          for (var j = 0; j < offsetSize; ++j) {\n            offset <<= 8;\n            offset += bytes[pos++];\n          }\n\n          offsets.push(startPos + offset);\n        }\n\n        end = offsets[count];\n      }\n\n      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n        var offsetStart = offsets[i];\n        var offsetEnd = offsets[i + 1];\n        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n      }\n\n      return {\n        obj: cffIndex,\n        endPos: end\n      };\n    },\n    parseNameIndex: function CFFParser_parseNameIndex(index) {\n      var names = [];\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var name = index.get(i);\n        names.push((0, _util.bytesToString)(name));\n      }\n\n      return names;\n    },\n    parseStringIndex: function CFFParser_parseStringIndex(index) {\n      var strings = new CFFStrings();\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var data = index.get(i);\n        strings.add((0, _util.bytesToString)(data));\n      }\n\n      return strings;\n    },\n    createDict: function CFFParser_createDict(Type, dict, strings) {\n      var cffDict = new Type(strings);\n\n      for (var i = 0, ii = dict.length; i < ii; ++i) {\n        var pair = dict[i];\n        var key = pair[0];\n        var value = pair[1];\n        cffDict.setByKey(key, value);\n      }\n\n      return cffDict;\n    },\n    parseCharString: function CFFParser_parseCharString(state, data, localSubrIndex, globalSubrIndex) {\n      if (!data || state.callDepth > MAX_SUBR_NESTING) {\n        return false;\n      }\n\n      var stackSize = state.stackSize;\n      var stack = state.stack;\n      var length = data.length;\n\n      for (var j = 0; j < length;) {\n        var value = data[j++];\n        var validationCommand = null;\n\n        if (value === 12) {\n          var q = data[j++];\n\n          if (q === 0) {\n            data[j - 2] = 139;\n            data[j - 1] = 22;\n            stackSize = 0;\n          } else {\n            validationCommand = CharstringValidationData12[q];\n          }\n        } else if (value === 28) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;\n          j += 2;\n          stackSize++;\n        } else if (value === 14) {\n          if (stackSize >= 4) {\n            stackSize -= 4;\n\n            if (this.seacAnalysisEnabled) {\n              state.seac = stack.slice(stackSize, stackSize + 4);\n              return false;\n            }\n          }\n\n          validationCommand = CharstringValidationData[value];\n        } else if (value >= 32 && value <= 246) {\n          stack[stackSize] = value - 139;\n          stackSize++;\n        } else if (value >= 247 && value <= 254) {\n          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;\n          j++;\n          stackSize++;\n        } else if (value === 255) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;\n          j += 4;\n          stackSize++;\n        } else if (value === 19 || value === 20) {\n          state.hints += stackSize >> 1;\n          j += state.hints + 7 >> 3;\n          stackSize %= 2;\n          validationCommand = CharstringValidationData[value];\n        } else if (value === 10 || value === 29) {\n          var subrsIndex;\n\n          if (value === 10) {\n            subrsIndex = localSubrIndex;\n          } else {\n            subrsIndex = globalSubrIndex;\n          }\n\n          if (!subrsIndex) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Missing subrsIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          var bias = 32768;\n\n          if (subrsIndex.count < 1240) {\n            bias = 107;\n          } else if (subrsIndex.count < 33900) {\n            bias = 1131;\n          }\n\n          var subrNumber = stack[--stackSize] + bias;\n\n          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Out of bounds subrIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          state.stackSize = stackSize;\n          state.callDepth++;\n          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);\n\n          if (!valid) {\n            return false;\n          }\n\n          state.callDepth--;\n          stackSize = state.stackSize;\n          continue;\n        } else if (value === 11) {\n          state.stackSize = stackSize;\n          return true;\n        } else {\n          validationCommand = CharstringValidationData[value];\n        }\n\n        if (validationCommand) {\n          if (validationCommand.stem) {\n            state.hints += stackSize >> 1;\n\n            if (value === 3 || value === 23) {\n              state.hasVStems = true;\n            } else if (state.hasVStems && (value === 1 || value === 18)) {\n              (0, _util.warn)(\"CFF stem hints are in wrong order\");\n              data[j - 1] = value === 1 ? 3 : 23;\n            }\n          }\n\n          if (\"min\" in validationCommand) {\n            if (!state.undefStack && stackSize < validationCommand.min) {\n              (0, _util.warn)(\"Not enough parameters for \" + validationCommand.id + \"; actual: \" + stackSize + \", expected: \" + validationCommand.min);\n              return false;\n            }\n          }\n\n          if (state.firstStackClearing && validationCommand.stackClearing) {\n            state.firstStackClearing = false;\n            stackSize -= validationCommand.min;\n\n            if (stackSize >= 2 && validationCommand.stem) {\n              stackSize %= 2;\n            } else if (stackSize > 1) {\n              (0, _util.warn)(\"Found too many parameters for stack-clearing command\");\n            }\n\n            if (stackSize > 0 && stack[stackSize - 1] >= 0) {\n              state.width = stack[stackSize - 1];\n            }\n          }\n\n          if (\"stackDelta\" in validationCommand) {\n            if (\"stackFn\" in validationCommand) {\n              validationCommand.stackFn(stack, stackSize);\n            }\n\n            stackSize += validationCommand.stackDelta;\n          } else if (validationCommand.stackClearing) {\n            stackSize = 0;\n          } else if (validationCommand.resetStack) {\n            stackSize = 0;\n            state.undefStack = false;\n          } else if (validationCommand.undefStack) {\n            stackSize = 0;\n            state.undefStack = true;\n            state.firstStackClearing = false;\n          }\n        }\n      }\n\n      state.stackSize = stackSize;\n      return true;\n    },\n\n    parseCharStrings({\n      charStrings,\n      localSubrIndex,\n      globalSubrIndex,\n      fdSelect,\n      fdArray,\n      privateDict\n    }) {\n      var seacs = [];\n      var widths = [];\n      var count = charStrings.count;\n\n      for (var i = 0; i < count; i++) {\n        var charstring = charStrings.get(i);\n        var state = {\n          callDepth: 0,\n          stackSize: 0,\n          stack: [],\n          undefStack: true,\n          hints: 0,\n          firstStackClearing: true,\n          seac: null,\n          width: null,\n          hasVStems: false\n        };\n        var valid = true;\n        var localSubrToUse = null;\n        var privateDictToUse = privateDict;\n\n        if (fdSelect && fdArray.length) {\n          var fdIndex = fdSelect.getFDIndex(i);\n\n          if (fdIndex === -1) {\n            (0, _util.warn)(\"Glyph index is not in fd select.\");\n            valid = false;\n          }\n\n          if (fdIndex >= fdArray.length) {\n            (0, _util.warn)(\"Invalid fd index for glyph index.\");\n            valid = false;\n          }\n\n          if (valid) {\n            privateDictToUse = fdArray[fdIndex].privateDict;\n            localSubrToUse = privateDictToUse.subrsIndex;\n          }\n        } else if (localSubrIndex) {\n          localSubrToUse = localSubrIndex;\n        }\n\n        if (valid) {\n          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);\n        }\n\n        if (state.width !== null) {\n          const nominalWidth = privateDictToUse.getByName(\"nominalWidthX\");\n          widths[i] = nominalWidth + state.width;\n        } else {\n          const defaultWidth = privateDictToUse.getByName(\"defaultWidthX\");\n          widths[i] = defaultWidth;\n        }\n\n        if (state.seac !== null) {\n          seacs[i] = state.seac;\n        }\n\n        if (!valid) {\n          charStrings.set(i, new Uint8Array([14]));\n        }\n      }\n\n      return {\n        charStrings,\n        seacs,\n        widths\n      };\n    },\n\n    emptyPrivateDictionary: function CFFParser_emptyPrivateDictionary(parentDict) {\n      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n      parentDict.setByKey(18, [0, 0]);\n      parentDict.privateDict = privateDict;\n    },\n    parsePrivateDict: function CFFParser_parsePrivateDict(parentDict) {\n      if (!parentDict.hasName(\"Private\")) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateOffset = parentDict.getByName(\"Private\");\n\n      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n        parentDict.removeByName(\"Private\");\n        return;\n      }\n\n      var size = privateOffset[0];\n      var offset = privateOffset[1];\n\n      if (size === 0 || offset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateDictEnd = offset + size;\n      var dictData = this.bytes.subarray(offset, privateDictEnd);\n      var dict = this.parseDict(dictData);\n      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);\n      parentDict.privateDict = privateDict;\n\n      if (!privateDict.getByName(\"Subrs\")) {\n        return;\n      }\n\n      var subrsOffset = privateDict.getByName(\"Subrs\");\n      var relativeOffset = offset + subrsOffset;\n\n      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var subrsIndex = this.parseIndex(relativeOffset);\n      privateDict.subrsIndex = subrsIndex.obj;\n    },\n    parseCharsets: function CFFParser_parseCharsets(pos, length, strings, cid) {\n      if (pos === 0) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);\n      } else if (pos === 1) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);\n      } else if (pos === 2) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);\n      }\n\n      var bytes = this.bytes;\n      var start = pos;\n      var format = bytes[pos++];\n      const charset = [cid ? 0 : \".notdef\"];\n      var id, count, i;\n      length -= 1;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; i++) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            charset.push(cid ? id : strings.get(id));\n          }\n\n          break;\n\n        case 1:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        case 2:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++] << 8 | bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(\"Unknown charset format\");\n      }\n\n      var end = pos;\n      var raw = bytes.subarray(start, end);\n      return new CFFCharset(false, format, charset, raw);\n    },\n    parseEncoding: function CFFParser_parseEncoding(pos, properties, strings, charset) {\n      var encoding = Object.create(null);\n      var bytes = this.bytes;\n      var predefined = false;\n      var format, i, ii;\n      var raw = null;\n\n      function readSupplement() {\n        var supplementsCount = bytes[pos++];\n\n        for (i = 0; i < supplementsCount; i++) {\n          var code = bytes[pos++];\n          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n          encoding[code] = charset.indexOf(strings.get(sid));\n        }\n      }\n\n      if (pos === 0 || pos === 1) {\n        predefined = true;\n        format = pos;\n        var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;\n\n        for (i = 0, ii = charset.length; i < ii; i++) {\n          var index = baseEncoding.indexOf(charset[i]);\n\n          if (index !== -1) {\n            encoding[index] = i;\n          }\n        }\n      } else {\n        var dataStart = pos;\n        format = bytes[pos++];\n\n        switch (format & 0x7f) {\n          case 0:\n            var glyphsCount = bytes[pos++];\n\n            for (i = 1; i <= glyphsCount; i++) {\n              encoding[bytes[pos++]] = i;\n            }\n\n            break;\n\n          case 1:\n            var rangesCount = bytes[pos++];\n            var gid = 1;\n\n            for (i = 0; i < rangesCount; i++) {\n              var start = bytes[pos++];\n              var left = bytes[pos++];\n\n              for (var j = start; j <= start + left; j++) {\n                encoding[j] = gid++;\n              }\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown encoding format: ${format} in CFF`);\n        }\n\n        var dataEnd = pos;\n\n        if (format & 0x80) {\n          bytes[dataStart] &= 0x7f;\n          readSupplement();\n        }\n\n        raw = bytes.subarray(dataStart, dataEnd);\n      }\n\n      format = format & 0x7f;\n      return new CFFEncoding(predefined, format, encoding, raw);\n    },\n    parseFDSelect: function CFFParser_parseFDSelect(pos, length) {\n      var bytes = this.bytes;\n      var format = bytes[pos++];\n      var fdSelect = [];\n      var i;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; ++i) {\n            var id = bytes[pos++];\n            fdSelect.push(id);\n          }\n\n          break;\n\n        case 3:\n          var rangesCount = bytes[pos++] << 8 | bytes[pos++];\n\n          for (i = 0; i < rangesCount; ++i) {\n            var first = bytes[pos++] << 8 | bytes[pos++];\n\n            if (i === 0 && first !== 0) {\n              (0, _util.warn)(\"parseFDSelect: The first range must have a first GID of 0\" + \" -- trying to recover.\");\n              first = 0;\n            }\n\n            var fdIndex = bytes[pos++];\n            var next = bytes[pos] << 8 | bytes[pos + 1];\n\n            for (var j = first; j < next; ++j) {\n              fdSelect.push(fdIndex);\n            }\n          }\n\n          pos += 2;\n          break;\n\n        default:\n          throw new _util.FormatError(`parseFDSelect: Unknown format \"${format}\".`);\n      }\n\n      if (fdSelect.length !== length) {\n        throw new _util.FormatError(\"parseFDSelect: Invalid font data.\");\n      }\n\n      return new CFFFDSelect(format, fdSelect);\n    }\n  };\n  return CFFParser;\n}();\n\nexports.CFFParser = CFFParser;\n\nvar CFF = function CFFClosure() {\n  function CFF() {\n    this.header = null;\n    this.names = [];\n    this.topDict = null;\n    this.strings = new CFFStrings();\n    this.globalSubrIndex = null;\n    this.encoding = null;\n    this.charset = null;\n    this.charStrings = null;\n    this.fdArray = [];\n    this.fdSelect = null;\n    this.isCIDFont = false;\n  }\n\n  CFF.prototype = {\n    duplicateFirstGlyph: function CFF_duplicateFirstGlyph() {\n      if (this.charStrings.count >= 65535) {\n        (0, _util.warn)(\"Not enough space in charstrings to duplicate first glyph.\");\n        return;\n      }\n\n      var glyphZero = this.charStrings.get(0);\n      this.charStrings.add(glyphZero);\n\n      if (this.isCIDFont) {\n        this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n      }\n    },\n    hasGlyphId: function CFF_hasGlyphID(id) {\n      if (id < 0 || id >= this.charStrings.count) {\n        return false;\n      }\n\n      var glyph = this.charStrings.get(id);\n      return glyph.length > 0;\n    }\n  };\n  return CFF;\n}();\n\nexports.CFF = CFF;\n\nvar CFFHeader = function CFFHeaderClosure() {\n  function CFFHeader(major, minor, hdrSize, offSize) {\n    this.major = major;\n    this.minor = minor;\n    this.hdrSize = hdrSize;\n    this.offSize = offSize;\n  }\n\n  return CFFHeader;\n}();\n\nexports.CFFHeader = CFFHeader;\n\nvar CFFStrings = function CFFStringsClosure() {\n  function CFFStrings() {\n    this.strings = [];\n  }\n\n  CFFStrings.prototype = {\n    get: function CFFStrings_get(index) {\n      if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n        return CFFStandardStrings[index];\n      }\n\n      if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n        return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n      }\n\n      return CFFStandardStrings[0];\n    },\n    getSID: function CFFStrings_getSID(str) {\n      let index = CFFStandardStrings.indexOf(str);\n\n      if (index !== -1) {\n        return index;\n      }\n\n      index = this.strings.indexOf(str);\n\n      if (index !== -1) {\n        return index + NUM_STANDARD_CFF_STRINGS;\n      }\n\n      return -1;\n    },\n    add: function CFFStrings_add(value) {\n      this.strings.push(value);\n    },\n\n    get count() {\n      return this.strings.length;\n    }\n\n  };\n  return CFFStrings;\n}();\n\nexports.CFFStrings = CFFStrings;\n\nvar CFFIndex = function CFFIndexClosure() {\n  function CFFIndex() {\n    this.objects = [];\n    this.length = 0;\n  }\n\n  CFFIndex.prototype = {\n    add: function CFFIndex_add(data) {\n      this.length += data.length;\n      this.objects.push(data);\n    },\n    set: function CFFIndex_set(index, data) {\n      this.length += data.length - this.objects[index].length;\n      this.objects[index] = data;\n    },\n    get: function CFFIndex_get(index) {\n      return this.objects[index];\n    },\n\n    get count() {\n      return this.objects.length;\n    }\n\n  };\n  return CFFIndex;\n}();\n\nexports.CFFIndex = CFFIndex;\n\nvar CFFDict = function CFFDictClosure() {\n  function CFFDict(tables, strings) {\n    this.keyToNameMap = tables.keyToNameMap;\n    this.nameToKeyMap = tables.nameToKeyMap;\n    this.defaults = tables.defaults;\n    this.types = tables.types;\n    this.opcodes = tables.opcodes;\n    this.order = tables.order;\n    this.strings = strings;\n    this.values = Object.create(null);\n  }\n\n  CFFDict.prototype = {\n    setByKey: function CFFDict_setByKey(key, value) {\n      if (!(key in this.keyToNameMap)) {\n        return false;\n      }\n\n      var valueLength = value.length;\n\n      if (valueLength === 0) {\n        return true;\n      }\n\n      for (var i = 0; i < valueLength; i++) {\n        if (isNaN(value[i])) {\n          (0, _util.warn)('Invalid CFFDict value: \"' + value + '\" for key \"' + key + '\".');\n          return true;\n        }\n      }\n\n      var type = this.types[key];\n\n      if (type === \"num\" || type === \"sid\" || type === \"offset\") {\n        value = value[0];\n      }\n\n      this.values[key] = value;\n      return true;\n    },\n    setByName: function CFFDict_setByName(name, value) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new _util.FormatError(`Invalid dictionary name \"${name}\"`);\n      }\n\n      this.values[this.nameToKeyMap[name]] = value;\n    },\n    hasName: function CFFDict_hasName(name) {\n      return this.nameToKeyMap[name] in this.values;\n    },\n    getByName: function CFFDict_getByName(name) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new _util.FormatError(`Invalid dictionary name ${name}\"`);\n      }\n\n      var key = this.nameToKeyMap[name];\n\n      if (!(key in this.values)) {\n        return this.defaults[key];\n      }\n\n      return this.values[key];\n    },\n    removeByName: function CFFDict_removeByName(name) {\n      delete this.values[this.nameToKeyMap[name]];\n    }\n  };\n\n  CFFDict.createTables = function CFFDict_createTables(layout) {\n    var tables = {\n      keyToNameMap: {},\n      nameToKeyMap: {},\n      defaults: {},\n      types: {},\n      opcodes: {},\n      order: []\n    };\n\n    for (var i = 0, ii = layout.length; i < ii; ++i) {\n      var entry = layout[i];\n      var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];\n      tables.keyToNameMap[key] = entry[1];\n      tables.nameToKeyMap[entry[1]] = key;\n      tables.types[key] = entry[2];\n      tables.defaults[key] = entry[3];\n      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n      tables.order.push(key);\n    }\n\n    return tables;\n  };\n\n  return CFFDict;\n}();\n\nvar CFFTopDict = function CFFTopDictClosure() {\n  var layout = [[[12, 30], \"ROS\", [\"sid\", \"sid\", \"num\"], null], [[12, 20], \"SyntheticBase\", \"num\", null], [0, \"version\", \"sid\", null], [1, \"Notice\", \"sid\", null], [[12, 0], \"Copyright\", \"sid\", null], [2, \"FullName\", \"sid\", null], [3, \"FamilyName\", \"sid\", null], [4, \"Weight\", \"sid\", null], [[12, 1], \"isFixedPitch\", \"num\", 0], [[12, 2], \"ItalicAngle\", \"num\", 0], [[12, 3], \"UnderlinePosition\", \"num\", -100], [[12, 4], \"UnderlineThickness\", \"num\", 50], [[12, 5], \"PaintType\", \"num\", 0], [[12, 6], \"CharstringType\", \"num\", 2], [[12, 7], \"FontMatrix\", [\"num\", \"num\", \"num\", \"num\", \"num\", \"num\"], [0.001, 0, 0, 0.001, 0, 0]], [13, \"UniqueID\", \"num\", null], [5, \"FontBBox\", [\"num\", \"num\", \"num\", \"num\"], [0, 0, 0, 0]], [[12, 8], \"StrokeWidth\", \"num\", 0], [14, \"XUID\", \"array\", null], [15, \"charset\", \"offset\", 0], [16, \"Encoding\", \"offset\", 0], [17, \"CharStrings\", \"offset\", 0], [18, \"Private\", [\"offset\", \"offset\"], null], [[12, 21], \"PostScript\", \"sid\", null], [[12, 22], \"BaseFontName\", \"sid\", null], [[12, 23], \"BaseFontBlend\", \"delta\", null], [[12, 31], \"CIDFontVersion\", \"num\", 0], [[12, 32], \"CIDFontRevision\", \"num\", 0], [[12, 33], \"CIDFontType\", \"num\", 0], [[12, 34], \"CIDCount\", \"num\", 8720], [[12, 35], \"UIDBase\", \"num\", null], [[12, 37], \"FDSelect\", \"offset\", null], [[12, 36], \"FDArray\", \"offset\", null], [[12, 38], \"FontName\", \"sid\", null]];\n  var tables = null;\n\n  function CFFTopDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n\n    CFFDict.call(this, tables, strings);\n    this.privateDict = null;\n  }\n\n  CFFTopDict.prototype = Object.create(CFFDict.prototype);\n  return CFFTopDict;\n}();\n\nexports.CFFTopDict = CFFTopDict;\n\nvar CFFPrivateDict = function CFFPrivateDictClosure() {\n  var layout = [[6, \"BlueValues\", \"delta\", null], [7, \"OtherBlues\", \"delta\", null], [8, \"FamilyBlues\", \"delta\", null], [9, \"FamilyOtherBlues\", \"delta\", null], [[12, 9], \"BlueScale\", \"num\", 0.039625], [[12, 10], \"BlueShift\", \"num\", 7], [[12, 11], \"BlueFuzz\", \"num\", 1], [10, \"StdHW\", \"num\", null], [11, \"StdVW\", \"num\", null], [[12, 12], \"StemSnapH\", \"delta\", null], [[12, 13], \"StemSnapV\", \"delta\", null], [[12, 14], \"ForceBold\", \"num\", 0], [[12, 17], \"LanguageGroup\", \"num\", 0], [[12, 18], \"ExpansionFactor\", \"num\", 0.06], [[12, 19], \"initialRandomSeed\", \"num\", 0], [20, \"defaultWidthX\", \"num\", 0], [21, \"nominalWidthX\", \"num\", 0], [19, \"Subrs\", \"offset\", null]];\n  var tables = null;\n\n  function CFFPrivateDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n\n    CFFDict.call(this, tables, strings);\n    this.subrsIndex = null;\n  }\n\n  CFFPrivateDict.prototype = Object.create(CFFDict.prototype);\n  return CFFPrivateDict;\n}();\n\nexports.CFFPrivateDict = CFFPrivateDict;\nvar CFFCharsetPredefinedTypes = {\n  ISO_ADOBE: 0,\n  EXPERT: 1,\n  EXPERT_SUBSET: 2\n};\n\nvar CFFCharset = function CFFCharsetClosure() {\n  function CFFCharset(predefined, format, charset, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.charset = charset;\n    this.raw = raw;\n  }\n\n  return CFFCharset;\n}();\n\nexports.CFFCharset = CFFCharset;\n\nvar CFFEncoding = function CFFEncodingClosure() {\n  function CFFEncoding(predefined, format, encoding, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.encoding = encoding;\n    this.raw = raw;\n  }\n\n  return CFFEncoding;\n}();\n\nvar CFFFDSelect = function CFFFDSelectClosure() {\n  function CFFFDSelect(format, fdSelect) {\n    this.format = format;\n    this.fdSelect = fdSelect;\n  }\n\n  CFFFDSelect.prototype = {\n    getFDIndex: function CFFFDSelect_get(glyphIndex) {\n      if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n        return -1;\n      }\n\n      return this.fdSelect[glyphIndex];\n    }\n  };\n  return CFFFDSelect;\n}();\n\nexports.CFFFDSelect = CFFFDSelect;\n\nvar CFFOffsetTracker = function CFFOffsetTrackerClosure() {\n  function CFFOffsetTracker() {\n    this.offsets = Object.create(null);\n  }\n\n  CFFOffsetTracker.prototype = {\n    isTracking: function CFFOffsetTracker_isTracking(key) {\n      return key in this.offsets;\n    },\n    track: function CFFOffsetTracker_track(key, location) {\n      if (key in this.offsets) {\n        throw new _util.FormatError(`Already tracking location of ${key}`);\n      }\n\n      this.offsets[key] = location;\n    },\n    offset: function CFFOffsetTracker_offset(value) {\n      for (var key in this.offsets) {\n        this.offsets[key] += value;\n      }\n    },\n    setEntryLocation: function CFFOffsetTracker_setEntryLocation(key, values, output) {\n      if (!(key in this.offsets)) {\n        throw new _util.FormatError(`Not tracking location of ${key}`);\n      }\n\n      var data = output.data;\n      var dataOffset = this.offsets[key];\n      var size = 5;\n\n      for (var i = 0, ii = values.length; i < ii; ++i) {\n        var offset0 = i * size + dataOffset;\n        var offset1 = offset0 + 1;\n        var offset2 = offset0 + 2;\n        var offset3 = offset0 + 3;\n        var offset4 = offset0 + 4;\n\n        if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {\n          throw new _util.FormatError(\"writing to an offset that is not empty\");\n        }\n\n        var value = values[i];\n        data[offset0] = 0x1d;\n        data[offset1] = value >> 24 & 0xff;\n        data[offset2] = value >> 16 & 0xff;\n        data[offset3] = value >> 8 & 0xff;\n        data[offset4] = value & 0xff;\n      }\n    }\n  };\n  return CFFOffsetTracker;\n}();\n\nvar CFFCompiler = function CFFCompilerClosure() {\n  function CFFCompiler(cff) {\n    this.cff = cff;\n  }\n\n  CFFCompiler.prototype = {\n    compile: function CFFCompiler_compile() {\n      var cff = this.cff;\n      var output = {\n        data: [],\n        length: 0,\n        add: function CFFCompiler_add(data) {\n          this.data = this.data.concat(data);\n          this.length = this.data.length;\n        }\n      };\n      var header = this.compileHeader(cff.header);\n      output.add(header);\n      var nameIndex = this.compileNameIndex(cff.names);\n      output.add(nameIndex);\n\n      if (cff.isCIDFont) {\n        if (cff.topDict.hasName(\"FontMatrix\")) {\n          var base = cff.topDict.getByName(\"FontMatrix\");\n          cff.topDict.removeByName(\"FontMatrix\");\n\n          for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n            var subDict = cff.fdArray[i];\n            var matrix = base.slice(0);\n\n            if (subDict.hasName(\"FontMatrix\")) {\n              matrix = _util.Util.transform(matrix, subDict.getByName(\"FontMatrix\"));\n            }\n\n            subDict.setByName(\"FontMatrix\", matrix);\n          }\n        }\n      }\n\n      cff.topDict.setByName(\"charset\", 0);\n      var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);\n      output.add(compiled.output);\n      var topDictTracker = compiled.trackers[0];\n      var stringIndex = this.compileStringIndex(cff.strings.strings);\n      output.add(stringIndex);\n      var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n      output.add(globalSubrIndex);\n\n      if (cff.encoding && cff.topDict.hasName(\"Encoding\")) {\n        if (cff.encoding.predefined) {\n          topDictTracker.setEntryLocation(\"Encoding\", [cff.encoding.format], output);\n        } else {\n          var encoding = this.compileEncoding(cff.encoding);\n          topDictTracker.setEntryLocation(\"Encoding\", [output.length], output);\n          output.add(encoding);\n        }\n      }\n\n      var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);\n      topDictTracker.setEntryLocation(\"charset\", [output.length], output);\n      output.add(charset);\n      var charStrings = this.compileCharStrings(cff.charStrings);\n      topDictTracker.setEntryLocation(\"CharStrings\", [output.length], output);\n      output.add(charStrings);\n\n      if (cff.isCIDFont) {\n        topDictTracker.setEntryLocation(\"FDSelect\", [output.length], output);\n        var fdSelect = this.compileFDSelect(cff.fdSelect);\n        output.add(fdSelect);\n        compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n        topDictTracker.setEntryLocation(\"FDArray\", [output.length], output);\n        output.add(compiled.output);\n        var fontDictTrackers = compiled.trackers;\n        this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n      }\n\n      this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n      output.add([0]);\n      return output.data;\n    },\n    encodeNumber: function CFFCompiler_encodeNumber(value) {\n      if (parseFloat(value) === parseInt(value, 10) && !isNaN(value)) {\n        return this.encodeInteger(value);\n      }\n\n      return this.encodeFloat(value);\n    },\n    encodeFloat: function CFFCompiler_encodeFloat(num) {\n      var value = num.toString();\n      var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n\n      if (m) {\n        var epsilon = parseFloat(\"1e\" + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(num * epsilon) / epsilon).toString();\n      }\n\n      var nibbles = \"\";\n      var i, ii;\n\n      for (i = 0, ii = value.length; i < ii; ++i) {\n        var a = value[i];\n\n        if (a === \"e\") {\n          nibbles += value[++i] === \"-\" ? \"c\" : \"b\";\n        } else if (a === \".\") {\n          nibbles += \"a\";\n        } else if (a === \"-\") {\n          nibbles += \"e\";\n        } else {\n          nibbles += a;\n        }\n      }\n\n      nibbles += nibbles.length & 1 ? \"f\" : \"ff\";\n      var out = [30];\n\n      for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n        out.push(parseInt(nibbles.substring(i, i + 2), 16));\n      }\n\n      return out;\n    },\n    encodeInteger: function CFFCompiler_encodeInteger(value) {\n      var code;\n\n      if (value >= -107 && value <= 107) {\n        code = [value + 139];\n      } else if (value >= 108 && value <= 1131) {\n        value = value - 108;\n        code = [(value >> 8) + 247, value & 0xff];\n      } else if (value >= -1131 && value <= -108) {\n        value = -value - 108;\n        code = [(value >> 8) + 251, value & 0xff];\n      } else if (value >= -32768 && value <= 32767) {\n        code = [0x1c, value >> 8 & 0xff, value & 0xff];\n      } else {\n        code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];\n      }\n\n      return code;\n    },\n    compileHeader: function CFFCompiler_compileHeader(header) {\n      return [header.major, header.minor, header.hdrSize, header.offSize];\n    },\n    compileNameIndex: function CFFCompiler_compileNameIndex(names) {\n      var nameIndex = new CFFIndex();\n\n      for (var i = 0, ii = names.length; i < ii; ++i) {\n        var name = names[i];\n        var length = Math.min(name.length, 127);\n        var sanitizedName = new Array(length);\n\n        for (var j = 0; j < length; j++) {\n          var char = name[j];\n\n          if (char < \"!\" || char > \"~\" || char === \"[\" || char === \"]\" || char === \"(\" || char === \")\" || char === \"{\" || char === \"}\" || char === \"<\" || char === \">\" || char === \"/\" || char === \"%\") {\n            char = \"_\";\n          }\n\n          sanitizedName[j] = char;\n        }\n\n        sanitizedName = sanitizedName.join(\"\");\n\n        if (sanitizedName === \"\") {\n          sanitizedName = \"Bad_Font_Name\";\n        }\n\n        nameIndex.add((0, _util.stringToBytes)(sanitizedName));\n      }\n\n      return this.compileIndex(nameIndex);\n    },\n    compileTopDicts: function CFFCompiler_compileTopDicts(dicts, length, removeCidKeys) {\n      var fontDictTrackers = [];\n      var fdArrayIndex = new CFFIndex();\n\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n\n        if (removeCidKeys) {\n          fontDict.removeByName(\"CIDFontVersion\");\n          fontDict.removeByName(\"CIDFontRevision\");\n          fontDict.removeByName(\"CIDFontType\");\n          fontDict.removeByName(\"CIDCount\");\n          fontDict.removeByName(\"UIDBase\");\n        }\n\n        var fontDictTracker = new CFFOffsetTracker();\n        var fontDictData = this.compileDict(fontDict, fontDictTracker);\n        fontDictTrackers.push(fontDictTracker);\n        fdArrayIndex.add(fontDictData);\n        fontDictTracker.offset(length);\n      }\n\n      fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n      return {\n        trackers: fontDictTrackers,\n        output: fdArrayIndex\n      };\n    },\n    compilePrivateDicts: function CFFCompiler_compilePrivateDicts(dicts, trackers, output) {\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n        var privateDict = fontDict.privateDict;\n\n        if (!privateDict || !fontDict.hasName(\"Private\")) {\n          throw new _util.FormatError(\"There must be a private dictionary.\");\n        }\n\n        var privateDictTracker = new CFFOffsetTracker();\n        var privateDictData = this.compileDict(privateDict, privateDictTracker);\n        var outputLength = output.length;\n        privateDictTracker.offset(outputLength);\n\n        if (!privateDictData.length) {\n          outputLength = 0;\n        }\n\n        trackers[i].setEntryLocation(\"Private\", [privateDictData.length, outputLength], output);\n        output.add(privateDictData);\n\n        if (privateDict.subrsIndex && privateDict.hasName(\"Subrs\")) {\n          var subrs = this.compileIndex(privateDict.subrsIndex);\n          privateDictTracker.setEntryLocation(\"Subrs\", [privateDictData.length], output);\n          output.add(subrs);\n        }\n      }\n    },\n    compileDict: function CFFCompiler_compileDict(dict, offsetTracker) {\n      var out = [];\n      var order = dict.order;\n\n      for (var i = 0; i < order.length; ++i) {\n        var key = order[i];\n\n        if (!(key in dict.values)) {\n          continue;\n        }\n\n        var values = dict.values[key];\n        var types = dict.types[key];\n\n        if (!Array.isArray(types)) {\n          types = [types];\n        }\n\n        if (!Array.isArray(values)) {\n          values = [values];\n        }\n\n        if (values.length === 0) {\n          continue;\n        }\n\n        for (var j = 0, jj = types.length; j < jj; ++j) {\n          var type = types[j];\n          var value = values[j];\n\n          switch (type) {\n            case \"num\":\n            case \"sid\":\n              out = out.concat(this.encodeNumber(value));\n              break;\n\n            case \"offset\":\n              var name = dict.keyToNameMap[key];\n\n              if (!offsetTracker.isTracking(name)) {\n                offsetTracker.track(name, out.length);\n              }\n\n              out = out.concat([0x1d, 0, 0, 0, 0]);\n              break;\n\n            case \"array\":\n            case \"delta\":\n              out = out.concat(this.encodeNumber(value));\n\n              for (var k = 1, kk = values.length; k < kk; ++k) {\n                out = out.concat(this.encodeNumber(values[k]));\n              }\n\n              break;\n\n            default:\n              throw new _util.FormatError(`Unknown data type of ${type}`);\n          }\n        }\n\n        out = out.concat(dict.opcodes[key]);\n      }\n\n      return out;\n    },\n    compileStringIndex: function CFFCompiler_compileStringIndex(strings) {\n      var stringIndex = new CFFIndex();\n\n      for (var i = 0, ii = strings.length; i < ii; ++i) {\n        stringIndex.add((0, _util.stringToBytes)(strings[i]));\n      }\n\n      return this.compileIndex(stringIndex);\n    },\n    compileGlobalSubrIndex: function CFFCompiler_compileGlobalSubrIndex() {\n      var globalSubrIndex = this.cff.globalSubrIndex;\n      this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n    },\n    compileCharStrings: function CFFCompiler_compileCharStrings(charStrings) {\n      var charStringsIndex = new CFFIndex();\n\n      for (var i = 0; i < charStrings.count; i++) {\n        var glyph = charStrings.get(i);\n\n        if (glyph.length === 0) {\n          charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n          continue;\n        }\n\n        charStringsIndex.add(glyph);\n      }\n\n      return this.compileIndex(charStringsIndex);\n    },\n    compileCharset: function CFFCompiler_compileCharset(charset, numGlyphs, strings, isCIDFont) {\n      let out;\n      const numGlyphsLessNotDef = numGlyphs - 1;\n\n      if (isCIDFont) {\n        out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);\n      } else {\n        const length = 1 + numGlyphsLessNotDef * 2;\n        out = new Uint8Array(length);\n        out[0] = 0;\n        let charsetIndex = 0;\n        const numCharsets = charset.charset.length;\n        let warned = false;\n\n        for (let i = 1; i < out.length; i += 2) {\n          let sid = 0;\n\n          if (charsetIndex < numCharsets) {\n            const name = charset.charset[charsetIndex++];\n            sid = strings.getSID(name);\n\n            if (sid === -1) {\n              sid = 0;\n\n              if (!warned) {\n                warned = true;\n                (0, _util.warn)(`Couldn't find ${name} in CFF strings`);\n              }\n            }\n          }\n\n          out[i] = sid >> 8 & 0xff;\n          out[i + 1] = sid & 0xff;\n        }\n      }\n\n      return this.compileTypedArray(out);\n    },\n    compileEncoding: function CFFCompiler_compileEncoding(encoding) {\n      return this.compileTypedArray(encoding.raw);\n    },\n    compileFDSelect: function CFFCompiler_compileFDSelect(fdSelect) {\n      const format = fdSelect.format;\n      let out, i;\n\n      switch (format) {\n        case 0:\n          out = new Uint8Array(1 + fdSelect.fdSelect.length);\n          out[0] = format;\n\n          for (i = 0; i < fdSelect.fdSelect.length; i++) {\n            out[i + 1] = fdSelect.fdSelect[i];\n          }\n\n          break;\n\n        case 3:\n          const start = 0;\n          let lastFD = fdSelect.fdSelect[0];\n          const ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];\n\n          for (i = 1; i < fdSelect.fdSelect.length; i++) {\n            const currentFD = fdSelect.fdSelect[i];\n\n            if (currentFD !== lastFD) {\n              ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);\n              lastFD = currentFD;\n            }\n          }\n\n          const numRanges = (ranges.length - 3) / 3;\n          ranges[1] = numRanges >> 8 & 0xff;\n          ranges[2] = numRanges & 0xff;\n          ranges.push(i >> 8 & 0xff, i & 0xff);\n          out = new Uint8Array(ranges);\n          break;\n      }\n\n      return this.compileTypedArray(out);\n    },\n    compileTypedArray: function CFFCompiler_compileTypedArray(data) {\n      var out = [];\n\n      for (var i = 0, ii = data.length; i < ii; ++i) {\n        out[i] = data[i];\n      }\n\n      return out;\n    },\n    compileIndex: function CFFCompiler_compileIndex(index, trackers) {\n      trackers = trackers || [];\n      var objects = index.objects;\n      var count = objects.length;\n\n      if (count === 0) {\n        return [0, 0, 0];\n      }\n\n      var data = [count >> 8 & 0xff, count & 0xff];\n      var lastOffset = 1,\n          i;\n\n      for (i = 0; i < count; ++i) {\n        lastOffset += objects[i].length;\n      }\n\n      var offsetSize;\n\n      if (lastOffset < 0x100) {\n        offsetSize = 1;\n      } else if (lastOffset < 0x10000) {\n        offsetSize = 2;\n      } else if (lastOffset < 0x1000000) {\n        offsetSize = 3;\n      } else {\n        offsetSize = 4;\n      }\n\n      data.push(offsetSize);\n      var relativeOffset = 1;\n\n      for (i = 0; i < count + 1; i++) {\n        if (offsetSize === 1) {\n          data.push(relativeOffset & 0xff);\n        } else if (offsetSize === 2) {\n          data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        } else if (offsetSize === 3) {\n          data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        } else {\n          data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        }\n\n        if (objects[i]) {\n          relativeOffset += objects[i].length;\n        }\n      }\n\n      for (i = 0; i < count; i++) {\n        if (trackers[i]) {\n          trackers[i].offset(data.length);\n        }\n\n        for (var j = 0, jj = objects[i].length; j < jj; j++) {\n          data.push(objects[i][j]);\n        }\n      }\n\n      return data;\n    }\n  };\n  return CFFCompiler;\n}();\n\nexports.CFFCompiler = CFFCompiler;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpertSubsetCharset = exports.ExpertCharset = exports.ISOAdobeCharset = void 0;\nconst ISOAdobeCharset = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"];\nexports.ISOAdobeCharset = ISOAdobeCharset;\nconst ExpertCharset = [\".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertCharset = ExpertCharset;\nconst ExpertSubsetCharset = [\".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\"];\nexports.ExpertSubsetCharset = ExpertSubsetCharset;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEncoding = getEncoding;\nexports.ExpertEncoding = exports.ZapfDingbatsEncoding = exports.SymbolSetEncoding = exports.MacRomanEncoding = exports.StandardEncoding = exports.WinAnsiEncoding = void 0;\nconst ExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertEncoding = ExpertEncoding;\nconst MacExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"centoldstyle\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"\", \"threequartersemdash\", \"\", \"questionsmall\", \"\", \"\", \"\", \"\", \"Ethsmall\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"\", \"\", \"\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hypheninferior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"asuperior\", \"centsuperior\", \"\", \"\", \"\", \"\", \"Aacutesmall\", \"Agravesmall\", \"Acircumflexsmall\", \"Adieresissmall\", \"Atildesmall\", \"Aringsmall\", \"Ccedillasmall\", \"Eacutesmall\", \"Egravesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Iacutesmall\", \"Igravesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ntildesmall\", \"Oacutesmall\", \"Ogravesmall\", \"Ocircumflexsmall\", \"Odieresissmall\", \"Otildesmall\", \"Uacutesmall\", \"Ugravesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"\", \"eightsuperior\", \"fourinferior\", \"threeinferior\", \"sixinferior\", \"eightinferior\", \"seveninferior\", \"Scaronsmall\", \"\", \"centinferior\", \"twoinferior\", \"\", \"Dieresissmall\", \"\", \"Caronsmall\", \"osuperior\", \"fiveinferior\", \"\", \"commainferior\", \"periodinferior\", \"Yacutesmall\", \"\", \"dollarinferior\", \"\", \"\", \"Thornsmall\", \"\", \"nineinferior\", \"zeroinferior\", \"Zcaronsmall\", \"AEsmall\", \"Oslashsmall\", \"questiondownsmall\", \"oneinferior\", \"Lslashsmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"Cedillasmall\", \"\", \"\", \"\", \"\", \"\", \"OEsmall\", \"figuredash\", \"hyphensuperior\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"\", \"Ydieresissmall\", \"\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"ninesuperior\", \"zerosuperior\", \"\", \"esuperior\", \"rsuperior\", \"tsuperior\", \"\", \"\", \"isuperior\", \"ssuperior\", \"dsuperior\", \"\", \"\", \"\", \"\", \"\", \"lsuperior\", \"Ogoneksmall\", \"Brevesmall\", \"Macronsmall\", \"bsuperior\", \"nsuperior\", \"msuperior\", \"commasuperior\", \"periodsuperior\", \"Dotaccentsmall\", \"Ringsmall\", \"\", \"\", \"\", \"\"];\nconst MacRomanEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"space\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\"];\nexports.MacRomanEncoding = MacRomanEncoding;\nconst StandardEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"\", \"\", \"\", \"\"];\nexports.StandardEncoding = StandardEncoding;\nconst WinAnsiEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"bullet\", \"Euro\", \"bullet\", \"quotesinglbase\", \"florin\", \"quotedblbase\", \"ellipsis\", \"dagger\", \"daggerdbl\", \"circumflex\", \"perthousand\", \"Scaron\", \"guilsinglleft\", \"OE\", \"bullet\", \"Zcaron\", \"bullet\", \"bullet\", \"quoteleft\", \"quoteright\", \"quotedblleft\", \"quotedblright\", \"bullet\", \"endash\", \"emdash\", \"tilde\", \"trademark\", \"scaron\", \"guilsinglright\", \"oe\", \"bullet\", \"zcaron\", \"Ydieresis\", \"space\", \"exclamdown\", \"cent\", \"sterling\", \"currency\", \"yen\", \"brokenbar\", \"section\", \"dieresis\", \"copyright\", \"ordfeminine\", \"guillemotleft\", \"logicalnot\", \"hyphen\", \"registered\", \"macron\", \"degree\", \"plusminus\", \"twosuperior\", \"threesuperior\", \"acute\", \"mu\", \"paragraph\", \"periodcentered\", \"cedilla\", \"onesuperior\", \"ordmasculine\", \"guillemotright\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondown\", \"Agrave\", \"Aacute\", \"Acircumflex\", \"Atilde\", \"Adieresis\", \"Aring\", \"AE\", \"Ccedilla\", \"Egrave\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Igrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Eth\", \"Ntilde\", \"Ograve\", \"Oacute\", \"Ocircumflex\", \"Otilde\", \"Odieresis\", \"multiply\", \"Oslash\", \"Ugrave\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Yacute\", \"Thorn\", \"germandbls\", \"agrave\", \"aacute\", \"acircumflex\", \"atilde\", \"adieresis\", \"aring\", \"ae\", \"ccedilla\", \"egrave\", \"eacute\", \"ecircumflex\", \"edieresis\", \"igrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"eth\", \"ntilde\", \"ograve\", \"oacute\", \"ocircumflex\", \"otilde\", \"odieresis\", \"divide\", \"oslash\", \"ugrave\", \"uacute\", \"ucircumflex\", \"udieresis\", \"yacute\", \"thorn\", \"ydieresis\"];\nexports.WinAnsiEncoding = WinAnsiEncoding;\nconst SymbolSetEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"universal\", \"numbersign\", \"existential\", \"percent\", \"ampersand\", \"suchthat\", \"parenleft\", \"parenright\", \"asteriskmath\", \"plus\", \"comma\", \"minus\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"congruent\", \"Alpha\", \"Beta\", \"Chi\", \"Delta\", \"Epsilon\", \"Phi\", \"Gamma\", \"Eta\", \"Iota\", \"theta1\", \"Kappa\", \"Lambda\", \"Mu\", \"Nu\", \"Omicron\", \"Pi\", \"Theta\", \"Rho\", \"Sigma\", \"Tau\", \"Upsilon\", \"sigma1\", \"Omega\", \"Xi\", \"Psi\", \"Zeta\", \"bracketleft\", \"therefore\", \"bracketright\", \"perpendicular\", \"underscore\", \"radicalex\", \"alpha\", \"beta\", \"chi\", \"delta\", \"epsilon\", \"phi\", \"gamma\", \"eta\", \"iota\", \"phi1\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"omicron\", \"pi\", \"theta\", \"rho\", \"sigma\", \"tau\", \"upsilon\", \"omega1\", \"omega\", \"xi\", \"psi\", \"zeta\", \"braceleft\", \"bar\", \"braceright\", \"similar\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Euro\", \"Upsilon1\", \"minute\", \"lessequal\", \"fraction\", \"infinity\", \"florin\", \"club\", \"diamond\", \"heart\", \"spade\", \"arrowboth\", \"arrowleft\", \"arrowup\", \"arrowright\", \"arrowdown\", \"degree\", \"plusminus\", \"second\", \"greaterequal\", \"multiply\", \"proportional\", \"partialdiff\", \"bullet\", \"divide\", \"notequal\", \"equivalence\", \"approxequal\", \"ellipsis\", \"arrowvertex\", \"arrowhorizex\", \"carriagereturn\", \"aleph\", \"Ifraktur\", \"Rfraktur\", \"weierstrass\", \"circlemultiply\", \"circleplus\", \"emptyset\", \"intersection\", \"union\", \"propersuperset\", \"reflexsuperset\", \"notsubset\", \"propersubset\", \"reflexsubset\", \"element\", \"notelement\", \"angle\", \"gradient\", \"registerserif\", \"copyrightserif\", \"trademarkserif\", \"product\", \"radical\", \"dotmath\", \"logicalnot\", \"logicaland\", \"logicalor\", \"arrowdblboth\", \"arrowdblleft\", \"arrowdblup\", \"arrowdblright\", \"arrowdbldown\", \"lozenge\", \"angleleft\", \"registersans\", \"copyrightsans\", \"trademarksans\", \"summation\", \"parenlefttp\", \"parenleftex\", \"parenleftbt\", \"bracketlefttp\", \"bracketleftex\", \"bracketleftbt\", \"bracelefttp\", \"braceleftmid\", \"braceleftbt\", \"braceex\", \"\", \"angleright\", \"integral\", \"integraltp\", \"integralex\", \"integralbt\", \"parenrighttp\", \"parenrightex\", \"parenrightbt\", \"bracketrighttp\", \"bracketrightex\", \"bracketrightbt\", \"bracerighttp\", \"bracerightmid\", \"bracerightbt\", \"\"];\nexports.SymbolSetEncoding = SymbolSetEncoding;\nconst ZapfDingbatsEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"a1\", \"a2\", \"a202\", \"a3\", \"a4\", \"a5\", \"a119\", \"a118\", \"a117\", \"a11\", \"a12\", \"a13\", \"a14\", \"a15\", \"a16\", \"a105\", \"a17\", \"a18\", \"a19\", \"a20\", \"a21\", \"a22\", \"a23\", \"a24\", \"a25\", \"a26\", \"a27\", \"a28\", \"a6\", \"a7\", \"a8\", \"a9\", \"a10\", \"a29\", \"a30\", \"a31\", \"a32\", \"a33\", \"a34\", \"a35\", \"a36\", \"a37\", \"a38\", \"a39\", \"a40\", \"a41\", \"a42\", \"a43\", \"a44\", \"a45\", \"a46\", \"a47\", \"a48\", \"a49\", \"a50\", \"a51\", \"a52\", \"a53\", \"a54\", \"a55\", \"a56\", \"a57\", \"a58\", \"a59\", \"a60\", \"a61\", \"a62\", \"a63\", \"a64\", \"a65\", \"a66\", \"a67\", \"a68\", \"a69\", \"a70\", \"a71\", \"a72\", \"a73\", \"a74\", \"a203\", \"a75\", \"a204\", \"a76\", \"a77\", \"a78\", \"a79\", \"a81\", \"a82\", \"a83\", \"a84\", \"a97\", \"a98\", \"a99\", \"a100\", \"\", \"a89\", \"a90\", \"a93\", \"a94\", \"a91\", \"a92\", \"a205\", \"a85\", \"a206\", \"a86\", \"a87\", \"a88\", \"a95\", \"a96\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a101\", \"a102\", \"a103\", \"a104\", \"a106\", \"a107\", \"a108\", \"a112\", \"a111\", \"a110\", \"a109\", \"a120\", \"a121\", \"a122\", \"a123\", \"a124\", \"a125\", \"a126\", \"a127\", \"a128\", \"a129\", \"a130\", \"a131\", \"a132\", \"a133\", \"a134\", \"a135\", \"a136\", \"a137\", \"a138\", \"a139\", \"a140\", \"a141\", \"a142\", \"a143\", \"a144\", \"a145\", \"a146\", \"a147\", \"a148\", \"a149\", \"a150\", \"a151\", \"a152\", \"a153\", \"a154\", \"a155\", \"a156\", \"a157\", \"a158\", \"a159\", \"a160\", \"a161\", \"a163\", \"a164\", \"a196\", \"a165\", \"a192\", \"a166\", \"a167\", \"a168\", \"a169\", \"a170\", \"a171\", \"a172\", \"a173\", \"a162\", \"a174\", \"a175\", \"a176\", \"a177\", \"a178\", \"a179\", \"a193\", \"a180\", \"a199\", \"a181\", \"a200\", \"a182\", \"\", \"a201\", \"a183\", \"a184\", \"a197\", \"a185\", \"a194\", \"a198\", \"a186\", \"a195\", \"a187\", \"a188\", \"a189\", \"a190\", \"a191\", \"\"];\nexports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;\n\nfunction getEncoding(encodingName) {\n  switch (encodingName) {\n    case \"WinAnsiEncoding\":\n      return WinAnsiEncoding;\n\n    case \"StandardEncoding\":\n      return StandardEncoding;\n\n    case \"MacRomanEncoding\":\n      return MacRomanEncoding;\n\n    case \"SymbolSetEncoding\":\n      return SymbolSetEncoding;\n\n    case \"ZapfDingbatsEncoding\":\n      return ZapfDingbatsEncoding;\n\n    case \"ExpertEncoding\":\n      return ExpertEncoding;\n\n    case \"MacExpertEncoding\":\n      return MacExpertEncoding;\n\n    default:\n      return null;\n  }\n}\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\nvar getLookupTableFactory = __w_pdfjs_require__(8).getLookupTableFactory;\nvar getGlyphsUnicode = getLookupTableFactory(function (t) {\n t.A = 0x0041;\n t.AE = 0x00c6;\n t.AEacute = 0x01fc;\n t.AEmacron = 0x01e2;\n t.AEsmall = 0xf7e6;\n t.Aacute = 0x00c1;\n t.Aacutesmall = 0xf7e1;\n t.Abreve = 0x0102;\n t.Abreveacute = 0x1eae;\n t.Abrevecyrillic = 0x04d0;\n t.Abrevedotbelow = 0x1eb6;\n t.Abrevegrave = 0x1eb0;\n t.Abrevehookabove = 0x1eb2;\n t.Abrevetilde = 0x1eb4;\n t.Acaron = 0x01cd;\n t.Acircle = 0x24b6;\n t.Acircumflex = 0x00c2;\n t.Acircumflexacute = 0x1ea4;\n t.Acircumflexdotbelow = 0x1eac;\n t.Acircumflexgrave = 0x1ea6;\n t.Acircumflexhookabove = 0x1ea8;\n t.Acircumflexsmall = 0xf7e2;\n t.Acircumflextilde = 0x1eaa;\n t.Acute = 0xf6c9;\n t.Acutesmall = 0xf7b4;\n t.Acyrillic = 0x0410;\n t.Adblgrave = 0x0200;\n t.Adieresis = 0x00c4;\n t.Adieresiscyrillic = 0x04d2;\n t.Adieresismacron = 0x01de;\n t.Adieresissmall = 0xf7e4;\n t.Adotbelow = 0x1ea0;\n t.Adotmacron = 0x01e0;\n t.Agrave = 0x00c0;\n t.Agravesmall = 0xf7e0;\n t.Ahookabove = 0x1ea2;\n t.Aiecyrillic = 0x04d4;\n t.Ainvertedbreve = 0x0202;\n t.Alpha = 0x0391;\n t.Alphatonos = 0x0386;\n t.Amacron = 0x0100;\n t.Amonospace = 0xff21;\n t.Aogonek = 0x0104;\n t.Aring = 0x00c5;\n t.Aringacute = 0x01fa;\n t.Aringbelow = 0x1e00;\n t.Aringsmall = 0xf7e5;\n t.Asmall = 0xf761;\n t.Atilde = 0x00c3;\n t.Atildesmall = 0xf7e3;\n t.Aybarmenian = 0x0531;\n t.B = 0x0042;\n t.Bcircle = 0x24b7;\n t.Bdotaccent = 0x1e02;\n t.Bdotbelow = 0x1e04;\n t.Becyrillic = 0x0411;\n t.Benarmenian = 0x0532;\n t.Beta = 0x0392;\n t.Bhook = 0x0181;\n t.Blinebelow = 0x1e06;\n t.Bmonospace = 0xff22;\n t.Brevesmall = 0xf6f4;\n t.Bsmall = 0xf762;\n t.Btopbar = 0x0182;\n t.C = 0x0043;\n t.Caarmenian = 0x053e;\n t.Cacute = 0x0106;\n t.Caron = 0xf6ca;\n t.Caronsmall = 0xf6f5;\n t.Ccaron = 0x010c;\n t.Ccedilla = 0x00c7;\n t.Ccedillaacute = 0x1e08;\n t.Ccedillasmall = 0xf7e7;\n t.Ccircle = 0x24b8;\n t.Ccircumflex = 0x0108;\n t.Cdot = 0x010a;\n t.Cdotaccent = 0x010a;\n t.Cedillasmall = 0xf7b8;\n t.Chaarmenian = 0x0549;\n t.Cheabkhasiancyrillic = 0x04bc;\n t.Checyrillic = 0x0427;\n t.Chedescenderabkhasiancyrillic = 0x04be;\n t.Chedescendercyrillic = 0x04b6;\n t.Chedieresiscyrillic = 0x04f4;\n t.Cheharmenian = 0x0543;\n t.Chekhakassiancyrillic = 0x04cb;\n t.Cheverticalstrokecyrillic = 0x04b8;\n t.Chi = 0x03a7;\n t.Chook = 0x0187;\n t.Circumflexsmall = 0xf6f6;\n t.Cmonospace = 0xff23;\n t.Coarmenian = 0x0551;\n t.Csmall = 0xf763;\n t.D = 0x0044;\n t.DZ = 0x01f1;\n t.DZcaron = 0x01c4;\n t.Daarmenian = 0x0534;\n t.Dafrican = 0x0189;\n t.Dcaron = 0x010e;\n t.Dcedilla = 0x1e10;\n t.Dcircle = 0x24b9;\n t.Dcircumflexbelow = 0x1e12;\n t.Dcroat = 0x0110;\n t.Ddotaccent = 0x1e0a;\n t.Ddotbelow = 0x1e0c;\n t.Decyrillic = 0x0414;\n t.Deicoptic = 0x03ee;\n t.Delta = 0x2206;\n t.Deltagreek = 0x0394;\n t.Dhook = 0x018a;\n t.Dieresis = 0xf6cb;\n t.DieresisAcute = 0xf6cc;\n t.DieresisGrave = 0xf6cd;\n t.Dieresissmall = 0xf7a8;\n t.Digammagreek = 0x03dc;\n t.Djecyrillic = 0x0402;\n t.Dlinebelow = 0x1e0e;\n t.Dmonospace = 0xff24;\n t.Dotaccentsmall = 0xf6f7;\n t.Dslash = 0x0110;\n t.Dsmall = 0xf764;\n t.Dtopbar = 0x018b;\n t.Dz = 0x01f2;\n t.Dzcaron = 0x01c5;\n t.Dzeabkhasiancyrillic = 0x04e0;\n t.Dzecyrillic = 0x0405;\n t.Dzhecyrillic = 0x040f;\n t.E = 0x0045;\n t.Eacute = 0x00c9;\n t.Eacutesmall = 0xf7e9;\n t.Ebreve = 0x0114;\n t.Ecaron = 0x011a;\n t.Ecedillabreve = 0x1e1c;\n t.Echarmenian = 0x0535;\n t.Ecircle = 0x24ba;\n t.Ecircumflex = 0x00ca;\n t.Ecircumflexacute = 0x1ebe;\n t.Ecircumflexbelow = 0x1e18;\n t.Ecircumflexdotbelow = 0x1ec6;\n t.Ecircumflexgrave = 0x1ec0;\n t.Ecircumflexhookabove = 0x1ec2;\n t.Ecircumflexsmall = 0xf7ea;\n t.Ecircumflextilde = 0x1ec4;\n t.Ecyrillic = 0x0404;\n t.Edblgrave = 0x0204;\n t.Edieresis = 0x00cb;\n t.Edieresissmall = 0xf7eb;\n t.Edot = 0x0116;\n t.Edotaccent = 0x0116;\n t.Edotbelow = 0x1eb8;\n t.Efcyrillic = 0x0424;\n t.Egrave = 0x00c8;\n t.Egravesmall = 0xf7e8;\n t.Eharmenian = 0x0537;\n t.Ehookabove = 0x1eba;\n t.Eightroman = 0x2167;\n t.Einvertedbreve = 0x0206;\n t.Eiotifiedcyrillic = 0x0464;\n t.Elcyrillic = 0x041b;\n t.Elevenroman = 0x216a;\n t.Emacron = 0x0112;\n t.Emacronacute = 0x1e16;\n t.Emacrongrave = 0x1e14;\n t.Emcyrillic = 0x041c;\n t.Emonospace = 0xff25;\n t.Encyrillic = 0x041d;\n t.Endescendercyrillic = 0x04a2;\n t.Eng = 0x014a;\n t.Enghecyrillic = 0x04a4;\n t.Enhookcyrillic = 0x04c7;\n t.Eogonek = 0x0118;\n t.Eopen = 0x0190;\n t.Epsilon = 0x0395;\n t.Epsilontonos = 0x0388;\n t.Ercyrillic = 0x0420;\n t.Ereversed = 0x018e;\n t.Ereversedcyrillic = 0x042d;\n t.Escyrillic = 0x0421;\n t.Esdescendercyrillic = 0x04aa;\n t.Esh = 0x01a9;\n t.Esmall = 0xf765;\n t.Eta = 0x0397;\n t.Etarmenian = 0x0538;\n t.Etatonos = 0x0389;\n t.Eth = 0x00d0;\n t.Ethsmall = 0xf7f0;\n t.Etilde = 0x1ebc;\n t.Etildebelow = 0x1e1a;\n t.Euro = 0x20ac;\n t.Ezh = 0x01b7;\n t.Ezhcaron = 0x01ee;\n t.Ezhreversed = 0x01b8;\n t.F = 0x0046;\n t.Fcircle = 0x24bb;\n t.Fdotaccent = 0x1e1e;\n t.Feharmenian = 0x0556;\n t.Feicoptic = 0x03e4;\n t.Fhook = 0x0191;\n t.Fitacyrillic = 0x0472;\n t.Fiveroman = 0x2164;\n t.Fmonospace = 0xff26;\n t.Fourroman = 0x2163;\n t.Fsmall = 0xf766;\n t.G = 0x0047;\n t.GBsquare = 0x3387;\n t.Gacute = 0x01f4;\n t.Gamma = 0x0393;\n t.Gammaafrican = 0x0194;\n t.Gangiacoptic = 0x03ea;\n t.Gbreve = 0x011e;\n t.Gcaron = 0x01e6;\n t.Gcedilla = 0x0122;\n t.Gcircle = 0x24bc;\n t.Gcircumflex = 0x011c;\n t.Gcommaaccent = 0x0122;\n t.Gdot = 0x0120;\n t.Gdotaccent = 0x0120;\n t.Gecyrillic = 0x0413;\n t.Ghadarmenian = 0x0542;\n t.Ghemiddlehookcyrillic = 0x0494;\n t.Ghestrokecyrillic = 0x0492;\n t.Gheupturncyrillic = 0x0490;\n t.Ghook = 0x0193;\n t.Gimarmenian = 0x0533;\n t.Gjecyrillic = 0x0403;\n t.Gmacron = 0x1e20;\n t.Gmonospace = 0xff27;\n t.Grave = 0xf6ce;\n t.Gravesmall = 0xf760;\n t.Gsmall = 0xf767;\n t.Gsmallhook = 0x029b;\n t.Gstroke = 0x01e4;\n t.H = 0x0048;\n t.H18533 = 0x25cf;\n t.H18543 = 0x25aa;\n t.H18551 = 0x25ab;\n t.H22073 = 0x25a1;\n t.HPsquare = 0x33cb;\n t.Haabkhasiancyrillic = 0x04a8;\n t.Hadescendercyrillic = 0x04b2;\n t.Hardsigncyrillic = 0x042a;\n t.Hbar = 0x0126;\n t.Hbrevebelow = 0x1e2a;\n t.Hcedilla = 0x1e28;\n t.Hcircle = 0x24bd;\n t.Hcircumflex = 0x0124;\n t.Hdieresis = 0x1e26;\n t.Hdotaccent = 0x1e22;\n t.Hdotbelow = 0x1e24;\n t.Hmonospace = 0xff28;\n t.Hoarmenian = 0x0540;\n t.Horicoptic = 0x03e8;\n t.Hsmall = 0xf768;\n t.Hungarumlaut = 0xf6cf;\n t.Hungarumlautsmall = 0xf6f8;\n t.Hzsquare = 0x3390;\n t.I = 0x0049;\n t.IAcyrillic = 0x042f;\n t.IJ = 0x0132;\n t.IUcyrillic = 0x042e;\n t.Iacute = 0x00cd;\n t.Iacutesmall = 0xf7ed;\n t.Ibreve = 0x012c;\n t.Icaron = 0x01cf;\n t.Icircle = 0x24be;\n t.Icircumflex = 0x00ce;\n t.Icircumflexsmall = 0xf7ee;\n t.Icyrillic = 0x0406;\n t.Idblgrave = 0x0208;\n t.Idieresis = 0x00cf;\n t.Idieresisacute = 0x1e2e;\n t.Idieresiscyrillic = 0x04e4;\n t.Idieresissmall = 0xf7ef;\n t.Idot = 0x0130;\n t.Idotaccent = 0x0130;\n t.Idotbelow = 0x1eca;\n t.Iebrevecyrillic = 0x04d6;\n t.Iecyrillic = 0x0415;\n t.Ifraktur = 0x2111;\n t.Igrave = 0x00cc;\n t.Igravesmall = 0xf7ec;\n t.Ihookabove = 0x1ec8;\n t.Iicyrillic = 0x0418;\n t.Iinvertedbreve = 0x020a;\n t.Iishortcyrillic = 0x0419;\n t.Imacron = 0x012a;\n t.Imacroncyrillic = 0x04e2;\n t.Imonospace = 0xff29;\n t.Iniarmenian = 0x053b;\n t.Iocyrillic = 0x0401;\n t.Iogonek = 0x012e;\n t.Iota = 0x0399;\n t.Iotaafrican = 0x0196;\n t.Iotadieresis = 0x03aa;\n t.Iotatonos = 0x038a;\n t.Ismall = 0xf769;\n t.Istroke = 0x0197;\n t.Itilde = 0x0128;\n t.Itildebelow = 0x1e2c;\n t.Izhitsacyrillic = 0x0474;\n t.Izhitsadblgravecyrillic = 0x0476;\n t.J = 0x004a;\n t.Jaarmenian = 0x0541;\n t.Jcircle = 0x24bf;\n t.Jcircumflex = 0x0134;\n t.Jecyrillic = 0x0408;\n t.Jheharmenian = 0x054b;\n t.Jmonospace = 0xff2a;\n t.Jsmall = 0xf76a;\n t.K = 0x004b;\n t.KBsquare = 0x3385;\n t.KKsquare = 0x33cd;\n t.Kabashkircyrillic = 0x04a0;\n t.Kacute = 0x1e30;\n t.Kacyrillic = 0x041a;\n t.Kadescendercyrillic = 0x049a;\n t.Kahookcyrillic = 0x04c3;\n t.Kappa = 0x039a;\n t.Kastrokecyrillic = 0x049e;\n t.Kaverticalstrokecyrillic = 0x049c;\n t.Kcaron = 0x01e8;\n t.Kcedilla = 0x0136;\n t.Kcircle = 0x24c0;\n t.Kcommaaccent = 0x0136;\n t.Kdotbelow = 0x1e32;\n t.Keharmenian = 0x0554;\n t.Kenarmenian = 0x053f;\n t.Khacyrillic = 0x0425;\n t.Kheicoptic = 0x03e6;\n t.Khook = 0x0198;\n t.Kjecyrillic = 0x040c;\n t.Klinebelow = 0x1e34;\n t.Kmonospace = 0xff2b;\n t.Koppacyrillic = 0x0480;\n t.Koppagreek = 0x03de;\n t.Ksicyrillic = 0x046e;\n t.Ksmall = 0xf76b;\n t.L = 0x004c;\n t.LJ = 0x01c7;\n t.LL = 0xf6bf;\n t.Lacute = 0x0139;\n t.Lambda = 0x039b;\n t.Lcaron = 0x013d;\n t.Lcedilla = 0x013b;\n t.Lcircle = 0x24c1;\n t.Lcircumflexbelow = 0x1e3c;\n t.Lcommaaccent = 0x013b;\n t.Ldot = 0x013f;\n t.Ldotaccent = 0x013f;\n t.Ldotbelow = 0x1e36;\n t.Ldotbelowmacron = 0x1e38;\n t.Liwnarmenian = 0x053c;\n t.Lj = 0x01c8;\n t.Ljecyrillic = 0x0409;\n t.Llinebelow = 0x1e3a;\n t.Lmonospace = 0xff2c;\n t.Lslash = 0x0141;\n t.Lslashsmall = 0xf6f9;\n t.Lsmall = 0xf76c;\n t.M = 0x004d;\n t.MBsquare = 0x3386;\n t.Macron = 0xf6d0;\n t.Macronsmall = 0xf7af;\n t.Macute = 0x1e3e;\n t.Mcircle = 0x24c2;\n t.Mdotaccent = 0x1e40;\n t.Mdotbelow = 0x1e42;\n t.Menarmenian = 0x0544;\n t.Mmonospace = 0xff2d;\n t.Msmall = 0xf76d;\n t.Mturned = 0x019c;\n t.Mu = 0x039c;\n t.N = 0x004e;\n t.NJ = 0x01ca;\n t.Nacute = 0x0143;\n t.Ncaron = 0x0147;\n t.Ncedilla = 0x0145;\n t.Ncircle = 0x24c3;\n t.Ncircumflexbelow = 0x1e4a;\n t.Ncommaaccent = 0x0145;\n t.Ndotaccent = 0x1e44;\n t.Ndotbelow = 0x1e46;\n t.Nhookleft = 0x019d;\n t.Nineroman = 0x2168;\n t.Nj = 0x01cb;\n t.Njecyrillic = 0x040a;\n t.Nlinebelow = 0x1e48;\n t.Nmonospace = 0xff2e;\n t.Nowarmenian = 0x0546;\n t.Nsmall = 0xf76e;\n t.Ntilde = 0x00d1;\n t.Ntildesmall = 0xf7f1;\n t.Nu = 0x039d;\n t.O = 0x004f;\n t.OE = 0x0152;\n t.OEsmall = 0xf6fa;\n t.Oacute = 0x00d3;\n t.Oacutesmall = 0xf7f3;\n t.Obarredcyrillic = 0x04e8;\n t.Obarreddieresiscyrillic = 0x04ea;\n t.Obreve = 0x014e;\n t.Ocaron = 0x01d1;\n t.Ocenteredtilde = 0x019f;\n t.Ocircle = 0x24c4;\n t.Ocircumflex = 0x00d4;\n t.Ocircumflexacute = 0x1ed0;\n t.Ocircumflexdotbelow = 0x1ed8;\n t.Ocircumflexgrave = 0x1ed2;\n t.Ocircumflexhookabove = 0x1ed4;\n t.Ocircumflexsmall = 0xf7f4;\n t.Ocircumflextilde = 0x1ed6;\n t.Ocyrillic = 0x041e;\n t.Odblacute = 0x0150;\n t.Odblgrave = 0x020c;\n t.Odieresis = 0x00d6;\n t.Odieresiscyrillic = 0x04e6;\n t.Odieresissmall = 0xf7f6;\n t.Odotbelow = 0x1ecc;\n t.Ogoneksmall = 0xf6fb;\n t.Ograve = 0x00d2;\n t.Ogravesmall = 0xf7f2;\n t.Oharmenian = 0x0555;\n t.Ohm = 0x2126;\n t.Ohookabove = 0x1ece;\n t.Ohorn = 0x01a0;\n t.Ohornacute = 0x1eda;\n t.Ohorndotbelow = 0x1ee2;\n t.Ohorngrave = 0x1edc;\n t.Ohornhookabove = 0x1ede;\n t.Ohorntilde = 0x1ee0;\n t.Ohungarumlaut = 0x0150;\n t.Oi = 0x01a2;\n t.Oinvertedbreve = 0x020e;\n t.Omacron = 0x014c;\n t.Omacronacute = 0x1e52;\n t.Omacrongrave = 0x1e50;\n t.Omega = 0x2126;\n t.Omegacyrillic = 0x0460;\n t.Omegagreek = 0x03a9;\n t.Omegaroundcyrillic = 0x047a;\n t.Omegatitlocyrillic = 0x047c;\n t.Omegatonos = 0x038f;\n t.Omicron = 0x039f;\n t.Omicrontonos = 0x038c;\n t.Omonospace = 0xff2f;\n t.Oneroman = 0x2160;\n t.Oogonek = 0x01ea;\n t.Oogonekmacron = 0x01ec;\n t.Oopen = 0x0186;\n t.Oslash = 0x00d8;\n t.Oslashacute = 0x01fe;\n t.Oslashsmall = 0xf7f8;\n t.Osmall = 0xf76f;\n t.Ostrokeacute = 0x01fe;\n t.Otcyrillic = 0x047e;\n t.Otilde = 0x00d5;\n t.Otildeacute = 0x1e4c;\n t.Otildedieresis = 0x1e4e;\n t.Otildesmall = 0xf7f5;\n t.P = 0x0050;\n t.Pacute = 0x1e54;\n t.Pcircle = 0x24c5;\n t.Pdotaccent = 0x1e56;\n t.Pecyrillic = 0x041f;\n t.Peharmenian = 0x054a;\n t.Pemiddlehookcyrillic = 0x04a6;\n t.Phi = 0x03a6;\n t.Phook = 0x01a4;\n t.Pi = 0x03a0;\n t.Piwrarmenian = 0x0553;\n t.Pmonospace = 0xff30;\n t.Psi = 0x03a8;\n t.Psicyrillic = 0x0470;\n t.Psmall = 0xf770;\n t.Q = 0x0051;\n t.Qcircle = 0x24c6;\n t.Qmonospace = 0xff31;\n t.Qsmall = 0xf771;\n t.R = 0x0052;\n t.Raarmenian = 0x054c;\n t.Racute = 0x0154;\n t.Rcaron = 0x0158;\n t.Rcedilla = 0x0156;\n t.Rcircle = 0x24c7;\n t.Rcommaaccent = 0x0156;\n t.Rdblgrave = 0x0210;\n t.Rdotaccent = 0x1e58;\n t.Rdotbelow = 0x1e5a;\n t.Rdotbelowmacron = 0x1e5c;\n t.Reharmenian = 0x0550;\n t.Rfraktur = 0x211c;\n t.Rho = 0x03a1;\n t.Ringsmall = 0xf6fc;\n t.Rinvertedbreve = 0x0212;\n t.Rlinebelow = 0x1e5e;\n t.Rmonospace = 0xff32;\n t.Rsmall = 0xf772;\n t.Rsmallinverted = 0x0281;\n t.Rsmallinvertedsuperior = 0x02b6;\n t.S = 0x0053;\n t.SF010000 = 0x250c;\n t.SF020000 = 0x2514;\n t.SF030000 = 0x2510;\n t.SF040000 = 0x2518;\n t.SF050000 = 0x253c;\n t.SF060000 = 0x252c;\n t.SF070000 = 0x2534;\n t.SF080000 = 0x251c;\n t.SF090000 = 0x2524;\n t.SF100000 = 0x2500;\n t.SF110000 = 0x2502;\n t.SF190000 = 0x2561;\n t.SF200000 = 0x2562;\n t.SF210000 = 0x2556;\n t.SF220000 = 0x2555;\n t.SF230000 = 0x2563;\n t.SF240000 = 0x2551;\n t.SF250000 = 0x2557;\n t.SF260000 = 0x255d;\n t.SF270000 = 0x255c;\n t.SF280000 = 0x255b;\n t.SF360000 = 0x255e;\n t.SF370000 = 0x255f;\n t.SF380000 = 0x255a;\n t.SF390000 = 0x2554;\n t.SF400000 = 0x2569;\n t.SF410000 = 0x2566;\n t.SF420000 = 0x2560;\n t.SF430000 = 0x2550;\n t.SF440000 = 0x256c;\n t.SF450000 = 0x2567;\n t.SF460000 = 0x2568;\n t.SF470000 = 0x2564;\n t.SF480000 = 0x2565;\n t.SF490000 = 0x2559;\n t.SF500000 = 0x2558;\n t.SF510000 = 0x2552;\n t.SF520000 = 0x2553;\n t.SF530000 = 0x256b;\n t.SF540000 = 0x256a;\n t.Sacute = 0x015a;\n t.Sacutedotaccent = 0x1e64;\n t.Sampigreek = 0x03e0;\n t.Scaron = 0x0160;\n t.Scarondotaccent = 0x1e66;\n t.Scaronsmall = 0xf6fd;\n t.Scedilla = 0x015e;\n t.Schwa = 0x018f;\n t.Schwacyrillic = 0x04d8;\n t.Schwadieresiscyrillic = 0x04da;\n t.Scircle = 0x24c8;\n t.Scircumflex = 0x015c;\n t.Scommaaccent = 0x0218;\n t.Sdotaccent = 0x1e60;\n t.Sdotbelow = 0x1e62;\n t.Sdotbelowdotaccent = 0x1e68;\n t.Seharmenian = 0x054d;\n t.Sevenroman = 0x2166;\n t.Shaarmenian = 0x0547;\n t.Shacyrillic = 0x0428;\n t.Shchacyrillic = 0x0429;\n t.Sheicoptic = 0x03e2;\n t.Shhacyrillic = 0x04ba;\n t.Shimacoptic = 0x03ec;\n t.Sigma = 0x03a3;\n t.Sixroman = 0x2165;\n t.Smonospace = 0xff33;\n t.Softsigncyrillic = 0x042c;\n t.Ssmall = 0xf773;\n t.Stigmagreek = 0x03da;\n t.T = 0x0054;\n t.Tau = 0x03a4;\n t.Tbar = 0x0166;\n t.Tcaron = 0x0164;\n t.Tcedilla = 0x0162;\n t.Tcircle = 0x24c9;\n t.Tcircumflexbelow = 0x1e70;\n t.Tcommaaccent = 0x0162;\n t.Tdotaccent = 0x1e6a;\n t.Tdotbelow = 0x1e6c;\n t.Tecyrillic = 0x0422;\n t.Tedescendercyrillic = 0x04ac;\n t.Tenroman = 0x2169;\n t.Tetsecyrillic = 0x04b4;\n t.Theta = 0x0398;\n t.Thook = 0x01ac;\n t.Thorn = 0x00de;\n t.Thornsmall = 0xf7fe;\n t.Threeroman = 0x2162;\n t.Tildesmall = 0xf6fe;\n t.Tiwnarmenian = 0x054f;\n t.Tlinebelow = 0x1e6e;\n t.Tmonospace = 0xff34;\n t.Toarmenian = 0x0539;\n t.Tonefive = 0x01bc;\n t.Tonesix = 0x0184;\n t.Tonetwo = 0x01a7;\n t.Tretroflexhook = 0x01ae;\n t.Tsecyrillic = 0x0426;\n t.Tshecyrillic = 0x040b;\n t.Tsmall = 0xf774;\n t.Twelveroman = 0x216b;\n t.Tworoman = 0x2161;\n t.U = 0x0055;\n t.Uacute = 0x00da;\n t.Uacutesmall = 0xf7fa;\n t.Ubreve = 0x016c;\n t.Ucaron = 0x01d3;\n t.Ucircle = 0x24ca;\n t.Ucircumflex = 0x00db;\n t.Ucircumflexbelow = 0x1e76;\n t.Ucircumflexsmall = 0xf7fb;\n t.Ucyrillic = 0x0423;\n t.Udblacute = 0x0170;\n t.Udblgrave = 0x0214;\n t.Udieresis = 0x00dc;\n t.Udieresisacute = 0x01d7;\n t.Udieresisbelow = 0x1e72;\n t.Udieresiscaron = 0x01d9;\n t.Udieresiscyrillic = 0x04f0;\n t.Udieresisgrave = 0x01db;\n t.Udieresismacron = 0x01d5;\n t.Udieresissmall = 0xf7fc;\n t.Udotbelow = 0x1ee4;\n t.Ugrave = 0x00d9;\n t.Ugravesmall = 0xf7f9;\n t.Uhookabove = 0x1ee6;\n t.Uhorn = 0x01af;\n t.Uhornacute = 0x1ee8;\n t.Uhorndotbelow = 0x1ef0;\n t.Uhorngrave = 0x1eea;\n t.Uhornhookabove = 0x1eec;\n t.Uhorntilde = 0x1eee;\n t.Uhungarumlaut = 0x0170;\n t.Uhungarumlautcyrillic = 0x04f2;\n t.Uinvertedbreve = 0x0216;\n t.Ukcyrillic = 0x0478;\n t.Umacron = 0x016a;\n t.Umacroncyrillic = 0x04ee;\n t.Umacrondieresis = 0x1e7a;\n t.Umonospace = 0xff35;\n t.Uogonek = 0x0172;\n t.Upsilon = 0x03a5;\n t.Upsilon1 = 0x03d2;\n t.Upsilonacutehooksymbolgreek = 0x03d3;\n t.Upsilonafrican = 0x01b1;\n t.Upsilondieresis = 0x03ab;\n t.Upsilondieresishooksymbolgreek = 0x03d4;\n t.Upsilonhooksymbol = 0x03d2;\n t.Upsilontonos = 0x038e;\n t.Uring = 0x016e;\n t.Ushortcyrillic = 0x040e;\n t.Usmall = 0xf775;\n t.Ustraightcyrillic = 0x04ae;\n t.Ustraightstrokecyrillic = 0x04b0;\n t.Utilde = 0x0168;\n t.Utildeacute = 0x1e78;\n t.Utildebelow = 0x1e74;\n t.V = 0x0056;\n t.Vcircle = 0x24cb;\n t.Vdotbelow = 0x1e7e;\n t.Vecyrillic = 0x0412;\n t.Vewarmenian = 0x054e;\n t.Vhook = 0x01b2;\n t.Vmonospace = 0xff36;\n t.Voarmenian = 0x0548;\n t.Vsmall = 0xf776;\n t.Vtilde = 0x1e7c;\n t.W = 0x0057;\n t.Wacute = 0x1e82;\n t.Wcircle = 0x24cc;\n t.Wcircumflex = 0x0174;\n t.Wdieresis = 0x1e84;\n t.Wdotaccent = 0x1e86;\n t.Wdotbelow = 0x1e88;\n t.Wgrave = 0x1e80;\n t.Wmonospace = 0xff37;\n t.Wsmall = 0xf777;\n t.X = 0x0058;\n t.Xcircle = 0x24cd;\n t.Xdieresis = 0x1e8c;\n t.Xdotaccent = 0x1e8a;\n t.Xeharmenian = 0x053d;\n t.Xi = 0x039e;\n t.Xmonospace = 0xff38;\n t.Xsmall = 0xf778;\n t.Y = 0x0059;\n t.Yacute = 0x00dd;\n t.Yacutesmall = 0xf7fd;\n t.Yatcyrillic = 0x0462;\n t.Ycircle = 0x24ce;\n t.Ycircumflex = 0x0176;\n t.Ydieresis = 0x0178;\n t.Ydieresissmall = 0xf7ff;\n t.Ydotaccent = 0x1e8e;\n t.Ydotbelow = 0x1ef4;\n t.Yericyrillic = 0x042b;\n t.Yerudieresiscyrillic = 0x04f8;\n t.Ygrave = 0x1ef2;\n t.Yhook = 0x01b3;\n t.Yhookabove = 0x1ef6;\n t.Yiarmenian = 0x0545;\n t.Yicyrillic = 0x0407;\n t.Yiwnarmenian = 0x0552;\n t.Ymonospace = 0xff39;\n t.Ysmall = 0xf779;\n t.Ytilde = 0x1ef8;\n t.Yusbigcyrillic = 0x046a;\n t.Yusbigiotifiedcyrillic = 0x046c;\n t.Yuslittlecyrillic = 0x0466;\n t.Yuslittleiotifiedcyrillic = 0x0468;\n t.Z = 0x005a;\n t.Zaarmenian = 0x0536;\n t.Zacute = 0x0179;\n t.Zcaron = 0x017d;\n t.Zcaronsmall = 0xf6ff;\n t.Zcircle = 0x24cf;\n t.Zcircumflex = 0x1e90;\n t.Zdot = 0x017b;\n t.Zdotaccent = 0x017b;\n t.Zdotbelow = 0x1e92;\n t.Zecyrillic = 0x0417;\n t.Zedescendercyrillic = 0x0498;\n t.Zedieresiscyrillic = 0x04de;\n t.Zeta = 0x0396;\n t.Zhearmenian = 0x053a;\n t.Zhebrevecyrillic = 0x04c1;\n t.Zhecyrillic = 0x0416;\n t.Zhedescendercyrillic = 0x0496;\n t.Zhedieresiscyrillic = 0x04dc;\n t.Zlinebelow = 0x1e94;\n t.Zmonospace = 0xff3a;\n t.Zsmall = 0xf77a;\n t.Zstroke = 0x01b5;\n t.a = 0x0061;\n t.aabengali = 0x0986;\n t.aacute = 0x00e1;\n t.aadeva = 0x0906;\n t.aagujarati = 0x0a86;\n t.aagurmukhi = 0x0a06;\n t.aamatragurmukhi = 0x0a3e;\n t.aarusquare = 0x3303;\n t.aavowelsignbengali = 0x09be;\n t.aavowelsigndeva = 0x093e;\n t.aavowelsigngujarati = 0x0abe;\n t.abbreviationmarkarmenian = 0x055f;\n t.abbreviationsigndeva = 0x0970;\n t.abengali = 0x0985;\n t.abopomofo = 0x311a;\n t.abreve = 0x0103;\n t.abreveacute = 0x1eaf;\n t.abrevecyrillic = 0x04d1;\n t.abrevedotbelow = 0x1eb7;\n t.abrevegrave = 0x1eb1;\n t.abrevehookabove = 0x1eb3;\n t.abrevetilde = 0x1eb5;\n t.acaron = 0x01ce;\n t.acircle = 0x24d0;\n t.acircumflex = 0x00e2;\n t.acircumflexacute = 0x1ea5;\n t.acircumflexdotbelow = 0x1ead;\n t.acircumflexgrave = 0x1ea7;\n t.acircumflexhookabove = 0x1ea9;\n t.acircumflextilde = 0x1eab;\n t.acute = 0x00b4;\n t.acutebelowcmb = 0x0317;\n t.acutecmb = 0x0301;\n t.acutecomb = 0x0301;\n t.acutedeva = 0x0954;\n t.acutelowmod = 0x02cf;\n t.acutetonecmb = 0x0341;\n t.acyrillic = 0x0430;\n t.adblgrave = 0x0201;\n t.addakgurmukhi = 0x0a71;\n t.adeva = 0x0905;\n t.adieresis = 0x00e4;\n t.adieresiscyrillic = 0x04d3;\n t.adieresismacron = 0x01df;\n t.adotbelow = 0x1ea1;\n t.adotmacron = 0x01e1;\n t.ae = 0x00e6;\n t.aeacute = 0x01fd;\n t.aekorean = 0x3150;\n t.aemacron = 0x01e3;\n t.afii00208 = 0x2015;\n t.afii08941 = 0x20a4;\n t.afii10017 = 0x0410;\n t.afii10018 = 0x0411;\n t.afii10019 = 0x0412;\n t.afii10020 = 0x0413;\n t.afii10021 = 0x0414;\n t.afii10022 = 0x0415;\n t.afii10023 = 0x0401;\n t.afii10024 = 0x0416;\n t.afii10025 = 0x0417;\n t.afii10026 = 0x0418;\n t.afii10027 = 0x0419;\n t.afii10028 = 0x041a;\n t.afii10029 = 0x041b;\n t.afii10030 = 0x041c;\n t.afii10031 = 0x041d;\n t.afii10032 = 0x041e;\n t.afii10033 = 0x041f;\n t.afii10034 = 0x0420;\n t.afii10035 = 0x0421;\n t.afii10036 = 0x0422;\n t.afii10037 = 0x0423;\n t.afii10038 = 0x0424;\n t.afii10039 = 0x0425;\n t.afii10040 = 0x0426;\n t.afii10041 = 0x0427;\n t.afii10042 = 0x0428;\n t.afii10043 = 0x0429;\n t.afii10044 = 0x042a;\n t.afii10045 = 0x042b;\n t.afii10046 = 0x042c;\n t.afii10047 = 0x042d;\n t.afii10048 = 0x042e;\n t.afii10049 = 0x042f;\n t.afii10050 = 0x0490;\n t.afii10051 = 0x0402;\n t.afii10052 = 0x0403;\n t.afii10053 = 0x0404;\n t.afii10054 = 0x0405;\n t.afii10055 = 0x0406;\n t.afii10056 = 0x0407;\n t.afii10057 = 0x0408;\n t.afii10058 = 0x0409;\n t.afii10059 = 0x040a;\n t.afii10060 = 0x040b;\n t.afii10061 = 0x040c;\n t.afii10062 = 0x040e;\n t.afii10063 = 0xf6c4;\n t.afii10064 = 0xf6c5;\n t.afii10065 = 0x0430;\n t.afii10066 = 0x0431;\n t.afii10067 = 0x0432;\n t.afii10068 = 0x0433;\n t.afii10069 = 0x0434;\n t.afii10070 = 0x0435;\n t.afii10071 = 0x0451;\n t.afii10072 = 0x0436;\n t.afii10073 = 0x0437;\n t.afii10074 = 0x0438;\n t.afii10075 = 0x0439;\n t.afii10076 = 0x043a;\n t.afii10077 = 0x043b;\n t.afii10078 = 0x043c;\n t.afii10079 = 0x043d;\n t.afii10080 = 0x043e;\n t.afii10081 = 0x043f;\n t.afii10082 = 0x0440;\n t.afii10083 = 0x0441;\n t.afii10084 = 0x0442;\n t.afii10085 = 0x0443;\n t.afii10086 = 0x0444;\n t.afii10087 = 0x0445;\n t.afii10088 = 0x0446;\n t.afii10089 = 0x0447;\n t.afii10090 = 0x0448;\n t.afii10091 = 0x0449;\n t.afii10092 = 0x044a;\n t.afii10093 = 0x044b;\n t.afii10094 = 0x044c;\n t.afii10095 = 0x044d;\n t.afii10096 = 0x044e;\n t.afii10097 = 0x044f;\n t.afii10098 = 0x0491;\n t.afii10099 = 0x0452;\n t.afii10100 = 0x0453;\n t.afii10101 = 0x0454;\n t.afii10102 = 0x0455;\n t.afii10103 = 0x0456;\n t.afii10104 = 0x0457;\n t.afii10105 = 0x0458;\n t.afii10106 = 0x0459;\n t.afii10107 = 0x045a;\n t.afii10108 = 0x045b;\n t.afii10109 = 0x045c;\n t.afii10110 = 0x045e;\n t.afii10145 = 0x040f;\n t.afii10146 = 0x0462;\n t.afii10147 = 0x0472;\n t.afii10148 = 0x0474;\n t.afii10192 = 0xf6c6;\n t.afii10193 = 0x045f;\n t.afii10194 = 0x0463;\n t.afii10195 = 0x0473;\n t.afii10196 = 0x0475;\n t.afii10831 = 0xf6c7;\n t.afii10832 = 0xf6c8;\n t.afii10846 = 0x04d9;\n t.afii299 = 0x200e;\n t.afii300 = 0x200f;\n t.afii301 = 0x200d;\n t.afii57381 = 0x066a;\n t.afii57388 = 0x060c;\n t.afii57392 = 0x0660;\n t.afii57393 = 0x0661;\n t.afii57394 = 0x0662;\n t.afii57395 = 0x0663;\n t.afii57396 = 0x0664;\n t.afii57397 = 0x0665;\n t.afii57398 = 0x0666;\n t.afii57399 = 0x0667;\n t.afii57400 = 0x0668;\n t.afii57401 = 0x0669;\n t.afii57403 = 0x061b;\n t.afii57407 = 0x061f;\n t.afii57409 = 0x0621;\n t.afii57410 = 0x0622;\n t.afii57411 = 0x0623;\n t.afii57412 = 0x0624;\n t.afii57413 = 0x0625;\n t.afii57414 = 0x0626;\n t.afii57415 = 0x0627;\n t.afii57416 = 0x0628;\n t.afii57417 = 0x0629;\n t.afii57418 = 0x062a;\n t.afii57419 = 0x062b;\n t.afii57420 = 0x062c;\n t.afii57421 = 0x062d;\n t.afii57422 = 0x062e;\n t.afii57423 = 0x062f;\n t.afii57424 = 0x0630;\n t.afii57425 = 0x0631;\n t.afii57426 = 0x0632;\n t.afii57427 = 0x0633;\n t.afii57428 = 0x0634;\n t.afii57429 = 0x0635;\n t.afii57430 = 0x0636;\n t.afii57431 = 0x0637;\n t.afii57432 = 0x0638;\n t.afii57433 = 0x0639;\n t.afii57434 = 0x063a;\n t.afii57440 = 0x0640;\n t.afii57441 = 0x0641;\n t.afii57442 = 0x0642;\n t.afii57443 = 0x0643;\n t.afii57444 = 0x0644;\n t.afii57445 = 0x0645;\n t.afii57446 = 0x0646;\n t.afii57448 = 0x0648;\n t.afii57449 = 0x0649;\n t.afii57450 = 0x064a;\n t.afii57451 = 0x064b;\n t.afii57452 = 0x064c;\n t.afii57453 = 0x064d;\n t.afii57454 = 0x064e;\n t.afii57455 = 0x064f;\n t.afii57456 = 0x0650;\n t.afii57457 = 0x0651;\n t.afii57458 = 0x0652;\n t.afii57470 = 0x0647;\n t.afii57505 = 0x06a4;\n t.afii57506 = 0x067e;\n t.afii57507 = 0x0686;\n t.afii57508 = 0x0698;\n t.afii57509 = 0x06af;\n t.afii57511 = 0x0679;\n t.afii57512 = 0x0688;\n t.afii57513 = 0x0691;\n t.afii57514 = 0x06ba;\n t.afii57519 = 0x06d2;\n t.afii57534 = 0x06d5;\n t.afii57636 = 0x20aa;\n t.afii57645 = 0x05be;\n t.afii57658 = 0x05c3;\n t.afii57664 = 0x05d0;\n t.afii57665 = 0x05d1;\n t.afii57666 = 0x05d2;\n t.afii57667 = 0x05d3;\n t.afii57668 = 0x05d4;\n t.afii57669 = 0x05d5;\n t.afii57670 = 0x05d6;\n t.afii57671 = 0x05d7;\n t.afii57672 = 0x05d8;\n t.afii57673 = 0x05d9;\n t.afii57674 = 0x05da;\n t.afii57675 = 0x05db;\n t.afii57676 = 0x05dc;\n t.afii57677 = 0x05dd;\n t.afii57678 = 0x05de;\n t.afii57679 = 0x05df;\n t.afii57680 = 0x05e0;\n t.afii57681 = 0x05e1;\n t.afii57682 = 0x05e2;\n t.afii57683 = 0x05e3;\n t.afii57684 = 0x05e4;\n t.afii57685 = 0x05e5;\n t.afii57686 = 0x05e6;\n t.afii57687 = 0x05e7;\n t.afii57688 = 0x05e8;\n t.afii57689 = 0x05e9;\n t.afii57690 = 0x05ea;\n t.afii57694 = 0xfb2a;\n t.afii57695 = 0xfb2b;\n t.afii57700 = 0xfb4b;\n t.afii57705 = 0xfb1f;\n t.afii57716 = 0x05f0;\n t.afii57717 = 0x05f1;\n t.afii57718 = 0x05f2;\n t.afii57723 = 0xfb35;\n t.afii57793 = 0x05b4;\n t.afii57794 = 0x05b5;\n t.afii57795 = 0x05b6;\n t.afii57796 = 0x05bb;\n t.afii57797 = 0x05b8;\n t.afii57798 = 0x05b7;\n t.afii57799 = 0x05b0;\n t.afii57800 = 0x05b2;\n t.afii57801 = 0x05b1;\n t.afii57802 = 0x05b3;\n t.afii57803 = 0x05c2;\n t.afii57804 = 0x05c1;\n t.afii57806 = 0x05b9;\n t.afii57807 = 0x05bc;\n t.afii57839 = 0x05bd;\n t.afii57841 = 0x05bf;\n t.afii57842 = 0x05c0;\n t.afii57929 = 0x02bc;\n t.afii61248 = 0x2105;\n t.afii61289 = 0x2113;\n t.afii61352 = 0x2116;\n t.afii61573 = 0x202c;\n t.afii61574 = 0x202d;\n t.afii61575 = 0x202e;\n t.afii61664 = 0x200c;\n t.afii63167 = 0x066d;\n t.afii64937 = 0x02bd;\n t.agrave = 0x00e0;\n t.agujarati = 0x0a85;\n t.agurmukhi = 0x0a05;\n t.ahiragana = 0x3042;\n t.ahookabove = 0x1ea3;\n t.aibengali = 0x0990;\n t.aibopomofo = 0x311e;\n t.aideva = 0x0910;\n t.aiecyrillic = 0x04d5;\n t.aigujarati = 0x0a90;\n t.aigurmukhi = 0x0a10;\n t.aimatragurmukhi = 0x0a48;\n t.ainarabic = 0x0639;\n t.ainfinalarabic = 0xfeca;\n t.aininitialarabic = 0xfecb;\n t.ainmedialarabic = 0xfecc;\n t.ainvertedbreve = 0x0203;\n t.aivowelsignbengali = 0x09c8;\n t.aivowelsigndeva = 0x0948;\n t.aivowelsigngujarati = 0x0ac8;\n t.akatakana = 0x30a2;\n t.akatakanahalfwidth = 0xff71;\n t.akorean = 0x314f;\n t.alef = 0x05d0;\n t.alefarabic = 0x0627;\n t.alefdageshhebrew = 0xfb30;\n t.aleffinalarabic = 0xfe8e;\n t.alefhamzaabovearabic = 0x0623;\n t.alefhamzaabovefinalarabic = 0xfe84;\n t.alefhamzabelowarabic = 0x0625;\n t.alefhamzabelowfinalarabic = 0xfe88;\n t.alefhebrew = 0x05d0;\n t.aleflamedhebrew = 0xfb4f;\n t.alefmaddaabovearabic = 0x0622;\n t.alefmaddaabovefinalarabic = 0xfe82;\n t.alefmaksuraarabic = 0x0649;\n t.alefmaksurafinalarabic = 0xfef0;\n t.alefmaksurainitialarabic = 0xfef3;\n t.alefmaksuramedialarabic = 0xfef4;\n t.alefpatahhebrew = 0xfb2e;\n t.alefqamatshebrew = 0xfb2f;\n t.aleph = 0x2135;\n t.allequal = 0x224c;\n t.alpha = 0x03b1;\n t.alphatonos = 0x03ac;\n t.amacron = 0x0101;\n t.amonospace = 0xff41;\n t.ampersand = 0x0026;\n t.ampersandmonospace = 0xff06;\n t.ampersandsmall = 0xf726;\n t.amsquare = 0x33c2;\n t.anbopomofo = 0x3122;\n t.angbopomofo = 0x3124;\n t.angbracketleft = 0x3008;\n t.angbracketright = 0x3009;\n t.angkhankhuthai = 0x0e5a;\n t.angle = 0x2220;\n t.anglebracketleft = 0x3008;\n t.anglebracketleftvertical = 0xfe3f;\n t.anglebracketright = 0x3009;\n t.anglebracketrightvertical = 0xfe40;\n t.angleleft = 0x2329;\n t.angleright = 0x232a;\n t.angstrom = 0x212b;\n t.anoteleia = 0x0387;\n t.anudattadeva = 0x0952;\n t.anusvarabengali = 0x0982;\n t.anusvaradeva = 0x0902;\n t.anusvaragujarati = 0x0a82;\n t.aogonek = 0x0105;\n t.apaatosquare = 0x3300;\n t.aparen = 0x249c;\n t.apostrophearmenian = 0x055a;\n t.apostrophemod = 0x02bc;\n t.apple = 0xf8ff;\n t.approaches = 0x2250;\n t.approxequal = 0x2248;\n t.approxequalorimage = 0x2252;\n t.approximatelyequal = 0x2245;\n t.araeaekorean = 0x318e;\n t.araeakorean = 0x318d;\n t.arc = 0x2312;\n t.arighthalfring = 0x1e9a;\n t.aring = 0x00e5;\n t.aringacute = 0x01fb;\n t.aringbelow = 0x1e01;\n t.arrowboth = 0x2194;\n t.arrowdashdown = 0x21e3;\n t.arrowdashleft = 0x21e0;\n t.arrowdashright = 0x21e2;\n t.arrowdashup = 0x21e1;\n t.arrowdblboth = 0x21d4;\n t.arrowdbldown = 0x21d3;\n t.arrowdblleft = 0x21d0;\n t.arrowdblright = 0x21d2;\n t.arrowdblup = 0x21d1;\n t.arrowdown = 0x2193;\n t.arrowdownleft = 0x2199;\n t.arrowdownright = 0x2198;\n t.arrowdownwhite = 0x21e9;\n t.arrowheaddownmod = 0x02c5;\n t.arrowheadleftmod = 0x02c2;\n t.arrowheadrightmod = 0x02c3;\n t.arrowheadupmod = 0x02c4;\n t.arrowhorizex = 0xf8e7;\n t.arrowleft = 0x2190;\n t.arrowleftdbl = 0x21d0;\n t.arrowleftdblstroke = 0x21cd;\n t.arrowleftoverright = 0x21c6;\n t.arrowleftwhite = 0x21e6;\n t.arrowright = 0x2192;\n t.arrowrightdblstroke = 0x21cf;\n t.arrowrightheavy = 0x279e;\n t.arrowrightoverleft = 0x21c4;\n t.arrowrightwhite = 0x21e8;\n t.arrowtableft = 0x21e4;\n t.arrowtabright = 0x21e5;\n t.arrowup = 0x2191;\n t.arrowupdn = 0x2195;\n t.arrowupdnbse = 0x21a8;\n t.arrowupdownbase = 0x21a8;\n t.arrowupleft = 0x2196;\n t.arrowupleftofdown = 0x21c5;\n t.arrowupright = 0x2197;\n t.arrowupwhite = 0x21e7;\n t.arrowvertex = 0xf8e6;\n t.asciicircum = 0x005e;\n t.asciicircummonospace = 0xff3e;\n t.asciitilde = 0x007e;\n t.asciitildemonospace = 0xff5e;\n t.ascript = 0x0251;\n t.ascriptturned = 0x0252;\n t.asmallhiragana = 0x3041;\n t.asmallkatakana = 0x30a1;\n t.asmallkatakanahalfwidth = 0xff67;\n t.asterisk = 0x002a;\n t.asteriskaltonearabic = 0x066d;\n t.asteriskarabic = 0x066d;\n t.asteriskmath = 0x2217;\n t.asteriskmonospace = 0xff0a;\n t.asterisksmall = 0xfe61;\n t.asterism = 0x2042;\n t.asuperior = 0xf6e9;\n t.asymptoticallyequal = 0x2243;\n t.at = 0x0040;\n t.atilde = 0x00e3;\n t.atmonospace = 0xff20;\n t.atsmall = 0xfe6b;\n t.aturned = 0x0250;\n t.aubengali = 0x0994;\n t.aubopomofo = 0x3120;\n t.audeva = 0x0914;\n t.augujarati = 0x0a94;\n t.augurmukhi = 0x0a14;\n t.aulengthmarkbengali = 0x09d7;\n t.aumatragurmukhi = 0x0a4c;\n t.auvowelsignbengali = 0x09cc;\n t.auvowelsigndeva = 0x094c;\n t.auvowelsigngujarati = 0x0acc;\n t.avagrahadeva = 0x093d;\n t.aybarmenian = 0x0561;\n t.ayin = 0x05e2;\n t.ayinaltonehebrew = 0xfb20;\n t.ayinhebrew = 0x05e2;\n t.b = 0x0062;\n t.babengali = 0x09ac;\n t.backslash = 0x005c;\n t.backslashmonospace = 0xff3c;\n t.badeva = 0x092c;\n t.bagujarati = 0x0aac;\n t.bagurmukhi = 0x0a2c;\n t.bahiragana = 0x3070;\n t.bahtthai = 0x0e3f;\n t.bakatakana = 0x30d0;\n t.bar = 0x007c;\n t.barmonospace = 0xff5c;\n t.bbopomofo = 0x3105;\n t.bcircle = 0x24d1;\n t.bdotaccent = 0x1e03;\n t.bdotbelow = 0x1e05;\n t.beamedsixteenthnotes = 0x266c;\n t.because = 0x2235;\n t.becyrillic = 0x0431;\n t.beharabic = 0x0628;\n t.behfinalarabic = 0xfe90;\n t.behinitialarabic = 0xfe91;\n t.behiragana = 0x3079;\n t.behmedialarabic = 0xfe92;\n t.behmeeminitialarabic = 0xfc9f;\n t.behmeemisolatedarabic = 0xfc08;\n t.behnoonfinalarabic = 0xfc6d;\n t.bekatakana = 0x30d9;\n t.benarmenian = 0x0562;\n t.bet = 0x05d1;\n t.beta = 0x03b2;\n t.betasymbolgreek = 0x03d0;\n t.betdagesh = 0xfb31;\n t.betdageshhebrew = 0xfb31;\n t.bethebrew = 0x05d1;\n t.betrafehebrew = 0xfb4c;\n t.bhabengali = 0x09ad;\n t.bhadeva = 0x092d;\n t.bhagujarati = 0x0aad;\n t.bhagurmukhi = 0x0a2d;\n t.bhook = 0x0253;\n t.bihiragana = 0x3073;\n t.bikatakana = 0x30d3;\n t.bilabialclick = 0x0298;\n t.bindigurmukhi = 0x0a02;\n t.birusquare = 0x3331;\n t.blackcircle = 0x25cf;\n t.blackdiamond = 0x25c6;\n t.blackdownpointingtriangle = 0x25bc;\n t.blackleftpointingpointer = 0x25c4;\n t.blackleftpointingtriangle = 0x25c0;\n t.blacklenticularbracketleft = 0x3010;\n t.blacklenticularbracketleftvertical = 0xfe3b;\n t.blacklenticularbracketright = 0x3011;\n t.blacklenticularbracketrightvertical = 0xfe3c;\n t.blacklowerlefttriangle = 0x25e3;\n t.blacklowerrighttriangle = 0x25e2;\n t.blackrectangle = 0x25ac;\n t.blackrightpointingpointer = 0x25ba;\n t.blackrightpointingtriangle = 0x25b6;\n t.blacksmallsquare = 0x25aa;\n t.blacksmilingface = 0x263b;\n t.blacksquare = 0x25a0;\n t.blackstar = 0x2605;\n t.blackupperlefttriangle = 0x25e4;\n t.blackupperrighttriangle = 0x25e5;\n t.blackuppointingsmalltriangle = 0x25b4;\n t.blackuppointingtriangle = 0x25b2;\n t.blank = 0x2423;\n t.blinebelow = 0x1e07;\n t.block = 0x2588;\n t.bmonospace = 0xff42;\n t.bobaimaithai = 0x0e1a;\n t.bohiragana = 0x307c;\n t.bokatakana = 0x30dc;\n t.bparen = 0x249d;\n t.bqsquare = 0x33c3;\n t.braceex = 0xf8f4;\n t.braceleft = 0x007b;\n t.braceleftbt = 0xf8f3;\n t.braceleftmid = 0xf8f2;\n t.braceleftmonospace = 0xff5b;\n t.braceleftsmall = 0xfe5b;\n t.bracelefttp = 0xf8f1;\n t.braceleftvertical = 0xfe37;\n t.braceright = 0x007d;\n t.bracerightbt = 0xf8fe;\n t.bracerightmid = 0xf8fd;\n t.bracerightmonospace = 0xff5d;\n t.bracerightsmall = 0xfe5c;\n t.bracerighttp = 0xf8fc;\n t.bracerightvertical = 0xfe38;\n t.bracketleft = 0x005b;\n t.bracketleftbt = 0xf8f0;\n t.bracketleftex = 0xf8ef;\n t.bracketleftmonospace = 0xff3b;\n t.bracketlefttp = 0xf8ee;\n t.bracketright = 0x005d;\n t.bracketrightbt = 0xf8fb;\n t.bracketrightex = 0xf8fa;\n t.bracketrightmonospace = 0xff3d;\n t.bracketrighttp = 0xf8f9;\n t.breve = 0x02d8;\n t.brevebelowcmb = 0x032e;\n t.brevecmb = 0x0306;\n t.breveinvertedbelowcmb = 0x032f;\n t.breveinvertedcmb = 0x0311;\n t.breveinverteddoublecmb = 0x0361;\n t.bridgebelowcmb = 0x032a;\n t.bridgeinvertedbelowcmb = 0x033a;\n t.brokenbar = 0x00a6;\n t.bstroke = 0x0180;\n t.bsuperior = 0xf6ea;\n t.btopbar = 0x0183;\n t.buhiragana = 0x3076;\n t.bukatakana = 0x30d6;\n t.bullet = 0x2022;\n t.bulletinverse = 0x25d8;\n t.bulletoperator = 0x2219;\n t.bullseye = 0x25ce;\n t.c = 0x0063;\n t.caarmenian = 0x056e;\n t.cabengali = 0x099a;\n t.cacute = 0x0107;\n t.cadeva = 0x091a;\n t.cagujarati = 0x0a9a;\n t.cagurmukhi = 0x0a1a;\n t.calsquare = 0x3388;\n t.candrabindubengali = 0x0981;\n t.candrabinducmb = 0x0310;\n t.candrabindudeva = 0x0901;\n t.candrabindugujarati = 0x0a81;\n t.capslock = 0x21ea;\n t.careof = 0x2105;\n t.caron = 0x02c7;\n t.caronbelowcmb = 0x032c;\n t.caroncmb = 0x030c;\n t.carriagereturn = 0x21b5;\n t.cbopomofo = 0x3118;\n t.ccaron = 0x010d;\n t.ccedilla = 0x00e7;\n t.ccedillaacute = 0x1e09;\n t.ccircle = 0x24d2;\n t.ccircumflex = 0x0109;\n t.ccurl = 0x0255;\n t.cdot = 0x010b;\n t.cdotaccent = 0x010b;\n t.cdsquare = 0x33c5;\n t.cedilla = 0x00b8;\n t.cedillacmb = 0x0327;\n t.cent = 0x00a2;\n t.centigrade = 0x2103;\n t.centinferior = 0xf6df;\n t.centmonospace = 0xffe0;\n t.centoldstyle = 0xf7a2;\n t.centsuperior = 0xf6e0;\n t.chaarmenian = 0x0579;\n t.chabengali = 0x099b;\n t.chadeva = 0x091b;\n t.chagujarati = 0x0a9b;\n t.chagurmukhi = 0x0a1b;\n t.chbopomofo = 0x3114;\n t.cheabkhasiancyrillic = 0x04bd;\n t.checkmark = 0x2713;\n t.checyrillic = 0x0447;\n t.chedescenderabkhasiancyrillic = 0x04bf;\n t.chedescendercyrillic = 0x04b7;\n t.chedieresiscyrillic = 0x04f5;\n t.cheharmenian = 0x0573;\n t.chekhakassiancyrillic = 0x04cc;\n t.cheverticalstrokecyrillic = 0x04b9;\n t.chi = 0x03c7;\n t.chieuchacirclekorean = 0x3277;\n t.chieuchaparenkorean = 0x3217;\n t.chieuchcirclekorean = 0x3269;\n t.chieuchkorean = 0x314a;\n t.chieuchparenkorean = 0x3209;\n t.chochangthai = 0x0e0a;\n t.chochanthai = 0x0e08;\n t.chochingthai = 0x0e09;\n t.chochoethai = 0x0e0c;\n t.chook = 0x0188;\n t.cieucacirclekorean = 0x3276;\n t.cieucaparenkorean = 0x3216;\n t.cieuccirclekorean = 0x3268;\n t.cieuckorean = 0x3148;\n t.cieucparenkorean = 0x3208;\n t.cieucuparenkorean = 0x321c;\n t.circle = 0x25cb;\n t.circlecopyrt = 0x00a9;\n t.circlemultiply = 0x2297;\n t.circleot = 0x2299;\n t.circleplus = 0x2295;\n t.circlepostalmark = 0x3036;\n t.circlewithlefthalfblack = 0x25d0;\n t.circlewithrighthalfblack = 0x25d1;\n t.circumflex = 0x02c6;\n t.circumflexbelowcmb = 0x032d;\n t.circumflexcmb = 0x0302;\n t.clear = 0x2327;\n t.clickalveolar = 0x01c2;\n t.clickdental = 0x01c0;\n t.clicklateral = 0x01c1;\n t.clickretroflex = 0x01c3;\n t.club = 0x2663;\n t.clubsuitblack = 0x2663;\n t.clubsuitwhite = 0x2667;\n t.cmcubedsquare = 0x33a4;\n t.cmonospace = 0xff43;\n t.cmsquaredsquare = 0x33a0;\n t.coarmenian = 0x0581;\n t.colon = 0x003a;\n t.colonmonetary = 0x20a1;\n t.colonmonospace = 0xff1a;\n t.colonsign = 0x20a1;\n t.colonsmall = 0xfe55;\n t.colontriangularhalfmod = 0x02d1;\n t.colontriangularmod = 0x02d0;\n t.comma = 0x002c;\n t.commaabovecmb = 0x0313;\n t.commaaboverightcmb = 0x0315;\n t.commaaccent = 0xf6c3;\n t.commaarabic = 0x060c;\n t.commaarmenian = 0x055d;\n t.commainferior = 0xf6e1;\n t.commamonospace = 0xff0c;\n t.commareversedabovecmb = 0x0314;\n t.commareversedmod = 0x02bd;\n t.commasmall = 0xfe50;\n t.commasuperior = 0xf6e2;\n t.commaturnedabovecmb = 0x0312;\n t.commaturnedmod = 0x02bb;\n t.compass = 0x263c;\n t.congruent = 0x2245;\n t.contourintegral = 0x222e;\n t.control = 0x2303;\n t.controlACK = 0x0006;\n t.controlBEL = 0x0007;\n t.controlBS = 0x0008;\n t.controlCAN = 0x0018;\n t.controlCR = 0x000d;\n t.controlDC1 = 0x0011;\n t.controlDC2 = 0x0012;\n t.controlDC3 = 0x0013;\n t.controlDC4 = 0x0014;\n t.controlDEL = 0x007f;\n t.controlDLE = 0x0010;\n t.controlEM = 0x0019;\n t.controlENQ = 0x0005;\n t.controlEOT = 0x0004;\n t.controlESC = 0x001b;\n t.controlETB = 0x0017;\n t.controlETX = 0x0003;\n t.controlFF = 0x000c;\n t.controlFS = 0x001c;\n t.controlGS = 0x001d;\n t.controlHT = 0x0009;\n t.controlLF = 0x000a;\n t.controlNAK = 0x0015;\n t.controlNULL = 0x0000;\n t.controlRS = 0x001e;\n t.controlSI = 0x000f;\n t.controlSO = 0x000e;\n t.controlSOT = 0x0002;\n t.controlSTX = 0x0001;\n t.controlSUB = 0x001a;\n t.controlSYN = 0x0016;\n t.controlUS = 0x001f;\n t.controlVT = 0x000b;\n t.copyright = 0x00a9;\n t.copyrightsans = 0xf8e9;\n t.copyrightserif = 0xf6d9;\n t.cornerbracketleft = 0x300c;\n t.cornerbracketlefthalfwidth = 0xff62;\n t.cornerbracketleftvertical = 0xfe41;\n t.cornerbracketright = 0x300d;\n t.cornerbracketrighthalfwidth = 0xff63;\n t.cornerbracketrightvertical = 0xfe42;\n t.corporationsquare = 0x337f;\n t.cosquare = 0x33c7;\n t.coverkgsquare = 0x33c6;\n t.cparen = 0x249e;\n t.cruzeiro = 0x20a2;\n t.cstretched = 0x0297;\n t.curlyand = 0x22cf;\n t.curlyor = 0x22ce;\n t.currency = 0x00a4;\n t.cyrBreve = 0xf6d1;\n t.cyrFlex = 0xf6d2;\n t.cyrbreve = 0xf6d4;\n t.cyrflex = 0xf6d5;\n t.d = 0x0064;\n t.daarmenian = 0x0564;\n t.dabengali = 0x09a6;\n t.dadarabic = 0x0636;\n t.dadeva = 0x0926;\n t.dadfinalarabic = 0xfebe;\n t.dadinitialarabic = 0xfebf;\n t.dadmedialarabic = 0xfec0;\n t.dagesh = 0x05bc;\n t.dageshhebrew = 0x05bc;\n t.dagger = 0x2020;\n t.daggerdbl = 0x2021;\n t.dagujarati = 0x0aa6;\n t.dagurmukhi = 0x0a26;\n t.dahiragana = 0x3060;\n t.dakatakana = 0x30c0;\n t.dalarabic = 0x062f;\n t.dalet = 0x05d3;\n t.daletdagesh = 0xfb33;\n t.daletdageshhebrew = 0xfb33;\n t.dalethebrew = 0x05d3;\n t.dalfinalarabic = 0xfeaa;\n t.dammaarabic = 0x064f;\n t.dammalowarabic = 0x064f;\n t.dammatanaltonearabic = 0x064c;\n t.dammatanarabic = 0x064c;\n t.danda = 0x0964;\n t.dargahebrew = 0x05a7;\n t.dargalefthebrew = 0x05a7;\n t.dasiapneumatacyrilliccmb = 0x0485;\n t.dblGrave = 0xf6d3;\n t.dblanglebracketleft = 0x300a;\n t.dblanglebracketleftvertical = 0xfe3d;\n t.dblanglebracketright = 0x300b;\n t.dblanglebracketrightvertical = 0xfe3e;\n t.dblarchinvertedbelowcmb = 0x032b;\n t.dblarrowleft = 0x21d4;\n t.dblarrowright = 0x21d2;\n t.dbldanda = 0x0965;\n t.dblgrave = 0xf6d6;\n t.dblgravecmb = 0x030f;\n t.dblintegral = 0x222c;\n t.dbllowline = 0x2017;\n t.dbllowlinecmb = 0x0333;\n t.dbloverlinecmb = 0x033f;\n t.dblprimemod = 0x02ba;\n t.dblverticalbar = 0x2016;\n t.dblverticallineabovecmb = 0x030e;\n t.dbopomofo = 0x3109;\n t.dbsquare = 0x33c8;\n t.dcaron = 0x010f;\n t.dcedilla = 0x1e11;\n t.dcircle = 0x24d3;\n t.dcircumflexbelow = 0x1e13;\n t.dcroat = 0x0111;\n t.ddabengali = 0x09a1;\n t.ddadeva = 0x0921;\n t.ddagujarati = 0x0aa1;\n t.ddagurmukhi = 0x0a21;\n t.ddalarabic = 0x0688;\n t.ddalfinalarabic = 0xfb89;\n t.dddhadeva = 0x095c;\n t.ddhabengali = 0x09a2;\n t.ddhadeva = 0x0922;\n t.ddhagujarati = 0x0aa2;\n t.ddhagurmukhi = 0x0a22;\n t.ddotaccent = 0x1e0b;\n t.ddotbelow = 0x1e0d;\n t.decimalseparatorarabic = 0x066b;\n t.decimalseparatorpersian = 0x066b;\n t.decyrillic = 0x0434;\n t.degree = 0x00b0;\n t.dehihebrew = 0x05ad;\n t.dehiragana = 0x3067;\n t.deicoptic = 0x03ef;\n t.dekatakana = 0x30c7;\n t.deleteleft = 0x232b;\n t.deleteright = 0x2326;\n t.delta = 0x03b4;\n t.deltaturned = 0x018d;\n t.denominatorminusonenumeratorbengali = 0x09f8;\n t.dezh = 0x02a4;\n t.dhabengali = 0x09a7;\n t.dhadeva = 0x0927;\n t.dhagujarati = 0x0aa7;\n t.dhagurmukhi = 0x0a27;\n t.dhook = 0x0257;\n t.dialytikatonos = 0x0385;\n t.dialytikatonoscmb = 0x0344;\n t.diamond = 0x2666;\n t.diamondsuitwhite = 0x2662;\n t.dieresis = 0x00a8;\n t.dieresisacute = 0xf6d7;\n t.dieresisbelowcmb = 0x0324;\n t.dieresiscmb = 0x0308;\n t.dieresisgrave = 0xf6d8;\n t.dieresistonos = 0x0385;\n t.dihiragana = 0x3062;\n t.dikatakana = 0x30c2;\n t.dittomark = 0x3003;\n t.divide = 0x00f7;\n t.divides = 0x2223;\n t.divisionslash = 0x2215;\n t.djecyrillic = 0x0452;\n t.dkshade = 0x2593;\n t.dlinebelow = 0x1e0f;\n t.dlsquare = 0x3397;\n t.dmacron = 0x0111;\n t.dmonospace = 0xff44;\n t.dnblock = 0x2584;\n t.dochadathai = 0x0e0e;\n t.dodekthai = 0x0e14;\n t.dohiragana = 0x3069;\n t.dokatakana = 0x30c9;\n t.dollar = 0x0024;\n t.dollarinferior = 0xf6e3;\n t.dollarmonospace = 0xff04;\n t.dollaroldstyle = 0xf724;\n t.dollarsmall = 0xfe69;\n t.dollarsuperior = 0xf6e4;\n t.dong = 0x20ab;\n t.dorusquare = 0x3326;\n t.dotaccent = 0x02d9;\n t.dotaccentcmb = 0x0307;\n t.dotbelowcmb = 0x0323;\n t.dotbelowcomb = 0x0323;\n t.dotkatakana = 0x30fb;\n t.dotlessi = 0x0131;\n t.dotlessj = 0xf6be;\n t.dotlessjstrokehook = 0x0284;\n t.dotmath = 0x22c5;\n t.dottedcircle = 0x25cc;\n t.doubleyodpatah = 0xfb1f;\n t.doubleyodpatahhebrew = 0xfb1f;\n t.downtackbelowcmb = 0x031e;\n t.downtackmod = 0x02d5;\n t.dparen = 0x249f;\n t.dsuperior = 0xf6eb;\n t.dtail = 0x0256;\n t.dtopbar = 0x018c;\n t.duhiragana = 0x3065;\n t.dukatakana = 0x30c5;\n t.dz = 0x01f3;\n t.dzaltone = 0x02a3;\n t.dzcaron = 0x01c6;\n t.dzcurl = 0x02a5;\n t.dzeabkhasiancyrillic = 0x04e1;\n t.dzecyrillic = 0x0455;\n t.dzhecyrillic = 0x045f;\n t.e = 0x0065;\n t.eacute = 0x00e9;\n t.earth = 0x2641;\n t.ebengali = 0x098f;\n t.ebopomofo = 0x311c;\n t.ebreve = 0x0115;\n t.ecandradeva = 0x090d;\n t.ecandragujarati = 0x0a8d;\n t.ecandravowelsigndeva = 0x0945;\n t.ecandravowelsigngujarati = 0x0ac5;\n t.ecaron = 0x011b;\n t.ecedillabreve = 0x1e1d;\n t.echarmenian = 0x0565;\n t.echyiwnarmenian = 0x0587;\n t.ecircle = 0x24d4;\n t.ecircumflex = 0x00ea;\n t.ecircumflexacute = 0x1ebf;\n t.ecircumflexbelow = 0x1e19;\n t.ecircumflexdotbelow = 0x1ec7;\n t.ecircumflexgrave = 0x1ec1;\n t.ecircumflexhookabove = 0x1ec3;\n t.ecircumflextilde = 0x1ec5;\n t.ecyrillic = 0x0454;\n t.edblgrave = 0x0205;\n t.edeva = 0x090f;\n t.edieresis = 0x00eb;\n t.edot = 0x0117;\n t.edotaccent = 0x0117;\n t.edotbelow = 0x1eb9;\n t.eegurmukhi = 0x0a0f;\n t.eematragurmukhi = 0x0a47;\n t.efcyrillic = 0x0444;\n t.egrave = 0x00e8;\n t.egujarati = 0x0a8f;\n t.eharmenian = 0x0567;\n t.ehbopomofo = 0x311d;\n t.ehiragana = 0x3048;\n t.ehookabove = 0x1ebb;\n t.eibopomofo = 0x311f;\n t.eight = 0x0038;\n t.eightarabic = 0x0668;\n t.eightbengali = 0x09ee;\n t.eightcircle = 0x2467;\n t.eightcircleinversesansserif = 0x2791;\n t.eightdeva = 0x096e;\n t.eighteencircle = 0x2471;\n t.eighteenparen = 0x2485;\n t.eighteenperiod = 0x2499;\n t.eightgujarati = 0x0aee;\n t.eightgurmukhi = 0x0a6e;\n t.eighthackarabic = 0x0668;\n t.eighthangzhou = 0x3028;\n t.eighthnotebeamed = 0x266b;\n t.eightideographicparen = 0x3227;\n t.eightinferior = 0x2088;\n t.eightmonospace = 0xff18;\n t.eightoldstyle = 0xf738;\n t.eightparen = 0x247b;\n t.eightperiod = 0x248f;\n t.eightpersian = 0x06f8;\n t.eightroman = 0x2177;\n t.eightsuperior = 0x2078;\n t.eightthai = 0x0e58;\n t.einvertedbreve = 0x0207;\n t.eiotifiedcyrillic = 0x0465;\n t.ekatakana = 0x30a8;\n t.ekatakanahalfwidth = 0xff74;\n t.ekonkargurmukhi = 0x0a74;\n t.ekorean = 0x3154;\n t.elcyrillic = 0x043b;\n t.element = 0x2208;\n t.elevencircle = 0x246a;\n t.elevenparen = 0x247e;\n t.elevenperiod = 0x2492;\n t.elevenroman = 0x217a;\n t.ellipsis = 0x2026;\n t.ellipsisvertical = 0x22ee;\n t.emacron = 0x0113;\n t.emacronacute = 0x1e17;\n t.emacrongrave = 0x1e15;\n t.emcyrillic = 0x043c;\n t.emdash = 0x2014;\n t.emdashvertical = 0xfe31;\n t.emonospace = 0xff45;\n t.emphasismarkarmenian = 0x055b;\n t.emptyset = 0x2205;\n t.enbopomofo = 0x3123;\n t.encyrillic = 0x043d;\n t.endash = 0x2013;\n t.endashvertical = 0xfe32;\n t.endescendercyrillic = 0x04a3;\n t.eng = 0x014b;\n t.engbopomofo = 0x3125;\n t.enghecyrillic = 0x04a5;\n t.enhookcyrillic = 0x04c8;\n t.enspace = 0x2002;\n t.eogonek = 0x0119;\n t.eokorean = 0x3153;\n t.eopen = 0x025b;\n t.eopenclosed = 0x029a;\n t.eopenreversed = 0x025c;\n t.eopenreversedclosed = 0x025e;\n t.eopenreversedhook = 0x025d;\n t.eparen = 0x24a0;\n t.epsilon = 0x03b5;\n t.epsilontonos = 0x03ad;\n t.equal = 0x003d;\n t.equalmonospace = 0xff1d;\n t.equalsmall = 0xfe66;\n t.equalsuperior = 0x207c;\n t.equivalence = 0x2261;\n t.erbopomofo = 0x3126;\n t.ercyrillic = 0x0440;\n t.ereversed = 0x0258;\n t.ereversedcyrillic = 0x044d;\n t.escyrillic = 0x0441;\n t.esdescendercyrillic = 0x04ab;\n t.esh = 0x0283;\n t.eshcurl = 0x0286;\n t.eshortdeva = 0x090e;\n t.eshortvowelsigndeva = 0x0946;\n t.eshreversedloop = 0x01aa;\n t.eshsquatreversed = 0x0285;\n t.esmallhiragana = 0x3047;\n t.esmallkatakana = 0x30a7;\n t.esmallkatakanahalfwidth = 0xff6a;\n t.estimated = 0x212e;\n t.esuperior = 0xf6ec;\n t.eta = 0x03b7;\n t.etarmenian = 0x0568;\n t.etatonos = 0x03ae;\n t.eth = 0x00f0;\n t.etilde = 0x1ebd;\n t.etildebelow = 0x1e1b;\n t.etnahtafoukhhebrew = 0x0591;\n t.etnahtafoukhlefthebrew = 0x0591;\n t.etnahtahebrew = 0x0591;\n t.etnahtalefthebrew = 0x0591;\n t.eturned = 0x01dd;\n t.eukorean = 0x3161;\n t.euro = 0x20ac;\n t.evowelsignbengali = 0x09c7;\n t.evowelsigndeva = 0x0947;\n t.evowelsigngujarati = 0x0ac7;\n t.exclam = 0x0021;\n t.exclamarmenian = 0x055c;\n t.exclamdbl = 0x203c;\n t.exclamdown = 0x00a1;\n t.exclamdownsmall = 0xf7a1;\n t.exclammonospace = 0xff01;\n t.exclamsmall = 0xf721;\n t.existential = 0x2203;\n t.ezh = 0x0292;\n t.ezhcaron = 0x01ef;\n t.ezhcurl = 0x0293;\n t.ezhreversed = 0x01b9;\n t.ezhtail = 0x01ba;\n t.f = 0x0066;\n t.fadeva = 0x095e;\n t.fagurmukhi = 0x0a5e;\n t.fahrenheit = 0x2109;\n t.fathaarabic = 0x064e;\n t.fathalowarabic = 0x064e;\n t.fathatanarabic = 0x064b;\n t.fbopomofo = 0x3108;\n t.fcircle = 0x24d5;\n t.fdotaccent = 0x1e1f;\n t.feharabic = 0x0641;\n t.feharmenian = 0x0586;\n t.fehfinalarabic = 0xfed2;\n t.fehinitialarabic = 0xfed3;\n t.fehmedialarabic = 0xfed4;\n t.feicoptic = 0x03e5;\n t.female = 0x2640;\n t.ff = 0xfb00;\n t.f_f = 0xfb00;\n t.ffi = 0xfb03;\n t.ffl = 0xfb04;\n t.fi = 0xfb01;\n t.fifteencircle = 0x246e;\n t.fifteenparen = 0x2482;\n t.fifteenperiod = 0x2496;\n t.figuredash = 0x2012;\n t.filledbox = 0x25a0;\n t.filledrect = 0x25ac;\n t.finalkaf = 0x05da;\n t.finalkafdagesh = 0xfb3a;\n t.finalkafdageshhebrew = 0xfb3a;\n t.finalkafhebrew = 0x05da;\n t.finalmem = 0x05dd;\n t.finalmemhebrew = 0x05dd;\n t.finalnun = 0x05df;\n t.finalnunhebrew = 0x05df;\n t.finalpe = 0x05e3;\n t.finalpehebrew = 0x05e3;\n t.finaltsadi = 0x05e5;\n t.finaltsadihebrew = 0x05e5;\n t.firsttonechinese = 0x02c9;\n t.fisheye = 0x25c9;\n t.fitacyrillic = 0x0473;\n t.five = 0x0035;\n t.fivearabic = 0x0665;\n t.fivebengali = 0x09eb;\n t.fivecircle = 0x2464;\n t.fivecircleinversesansserif = 0x278e;\n t.fivedeva = 0x096b;\n t.fiveeighths = 0x215d;\n t.fivegujarati = 0x0aeb;\n t.fivegurmukhi = 0x0a6b;\n t.fivehackarabic = 0x0665;\n t.fivehangzhou = 0x3025;\n t.fiveideographicparen = 0x3224;\n t.fiveinferior = 0x2085;\n t.fivemonospace = 0xff15;\n t.fiveoldstyle = 0xf735;\n t.fiveparen = 0x2478;\n t.fiveperiod = 0x248c;\n t.fivepersian = 0x06f5;\n t.fiveroman = 0x2174;\n t.fivesuperior = 0x2075;\n t.fivethai = 0x0e55;\n t.fl = 0xfb02;\n t.florin = 0x0192;\n t.fmonospace = 0xff46;\n t.fmsquare = 0x3399;\n t.fofanthai = 0x0e1f;\n t.fofathai = 0x0e1d;\n t.fongmanthai = 0x0e4f;\n t.forall = 0x2200;\n t.four = 0x0034;\n t.fourarabic = 0x0664;\n t.fourbengali = 0x09ea;\n t.fourcircle = 0x2463;\n t.fourcircleinversesansserif = 0x278d;\n t.fourdeva = 0x096a;\n t.fourgujarati = 0x0aea;\n t.fourgurmukhi = 0x0a6a;\n t.fourhackarabic = 0x0664;\n t.fourhangzhou = 0x3024;\n t.fourideographicparen = 0x3223;\n t.fourinferior = 0x2084;\n t.fourmonospace = 0xff14;\n t.fournumeratorbengali = 0x09f7;\n t.fouroldstyle = 0xf734;\n t.fourparen = 0x2477;\n t.fourperiod = 0x248b;\n t.fourpersian = 0x06f4;\n t.fourroman = 0x2173;\n t.foursuperior = 0x2074;\n t.fourteencircle = 0x246d;\n t.fourteenparen = 0x2481;\n t.fourteenperiod = 0x2495;\n t.fourthai = 0x0e54;\n t.fourthtonechinese = 0x02cb;\n t.fparen = 0x24a1;\n t.fraction = 0x2044;\n t.franc = 0x20a3;\n t.g = 0x0067;\n t.gabengali = 0x0997;\n t.gacute = 0x01f5;\n t.gadeva = 0x0917;\n t.gafarabic = 0x06af;\n t.gaffinalarabic = 0xfb93;\n t.gafinitialarabic = 0xfb94;\n t.gafmedialarabic = 0xfb95;\n t.gagujarati = 0x0a97;\n t.gagurmukhi = 0x0a17;\n t.gahiragana = 0x304c;\n t.gakatakana = 0x30ac;\n t.gamma = 0x03b3;\n t.gammalatinsmall = 0x0263;\n t.gammasuperior = 0x02e0;\n t.gangiacoptic = 0x03eb;\n t.gbopomofo = 0x310d;\n t.gbreve = 0x011f;\n t.gcaron = 0x01e7;\n t.gcedilla = 0x0123;\n t.gcircle = 0x24d6;\n t.gcircumflex = 0x011d;\n t.gcommaaccent = 0x0123;\n t.gdot = 0x0121;\n t.gdotaccent = 0x0121;\n t.gecyrillic = 0x0433;\n t.gehiragana = 0x3052;\n t.gekatakana = 0x30b2;\n t.geometricallyequal = 0x2251;\n t.gereshaccenthebrew = 0x059c;\n t.gereshhebrew = 0x05f3;\n t.gereshmuqdamhebrew = 0x059d;\n t.germandbls = 0x00df;\n t.gershayimaccenthebrew = 0x059e;\n t.gershayimhebrew = 0x05f4;\n t.getamark = 0x3013;\n t.ghabengali = 0x0998;\n t.ghadarmenian = 0x0572;\n t.ghadeva = 0x0918;\n t.ghagujarati = 0x0a98;\n t.ghagurmukhi = 0x0a18;\n t.ghainarabic = 0x063a;\n t.ghainfinalarabic = 0xfece;\n t.ghaininitialarabic = 0xfecf;\n t.ghainmedialarabic = 0xfed0;\n t.ghemiddlehookcyrillic = 0x0495;\n t.ghestrokecyrillic = 0x0493;\n t.gheupturncyrillic = 0x0491;\n t.ghhadeva = 0x095a;\n t.ghhagurmukhi = 0x0a5a;\n t.ghook = 0x0260;\n t.ghzsquare = 0x3393;\n t.gihiragana = 0x304e;\n t.gikatakana = 0x30ae;\n t.gimarmenian = 0x0563;\n t.gimel = 0x05d2;\n t.gimeldagesh = 0xfb32;\n t.gimeldageshhebrew = 0xfb32;\n t.gimelhebrew = 0x05d2;\n t.gjecyrillic = 0x0453;\n t.glottalinvertedstroke = 0x01be;\n t.glottalstop = 0x0294;\n t.glottalstopinverted = 0x0296;\n t.glottalstopmod = 0x02c0;\n t.glottalstopreversed = 0x0295;\n t.glottalstopreversedmod = 0x02c1;\n t.glottalstopreversedsuperior = 0x02e4;\n t.glottalstopstroke = 0x02a1;\n t.glottalstopstrokereversed = 0x02a2;\n t.gmacron = 0x1e21;\n t.gmonospace = 0xff47;\n t.gohiragana = 0x3054;\n t.gokatakana = 0x30b4;\n t.gparen = 0x24a2;\n t.gpasquare = 0x33ac;\n t.gradient = 0x2207;\n t.grave = 0x0060;\n t.gravebelowcmb = 0x0316;\n t.gravecmb = 0x0300;\n t.gravecomb = 0x0300;\n t.gravedeva = 0x0953;\n t.gravelowmod = 0x02ce;\n t.gravemonospace = 0xff40;\n t.gravetonecmb = 0x0340;\n t.greater = 0x003e;\n t.greaterequal = 0x2265;\n t.greaterequalorless = 0x22db;\n t.greatermonospace = 0xff1e;\n t.greaterorequivalent = 0x2273;\n t.greaterorless = 0x2277;\n t.greateroverequal = 0x2267;\n t.greatersmall = 0xfe65;\n t.gscript = 0x0261;\n t.gstroke = 0x01e5;\n t.guhiragana = 0x3050;\n t.guillemotleft = 0x00ab;\n t.guillemotright = 0x00bb;\n t.guilsinglleft = 0x2039;\n t.guilsinglright = 0x203a;\n t.gukatakana = 0x30b0;\n t.guramusquare = 0x3318;\n t.gysquare = 0x33c9;\n t.h = 0x0068;\n t.haabkhasiancyrillic = 0x04a9;\n t.haaltonearabic = 0x06c1;\n t.habengali = 0x09b9;\n t.hadescendercyrillic = 0x04b3;\n t.hadeva = 0x0939;\n t.hagujarati = 0x0ab9;\n t.hagurmukhi = 0x0a39;\n t.haharabic = 0x062d;\n t.hahfinalarabic = 0xfea2;\n t.hahinitialarabic = 0xfea3;\n t.hahiragana = 0x306f;\n t.hahmedialarabic = 0xfea4;\n t.haitusquare = 0x332a;\n t.hakatakana = 0x30cf;\n t.hakatakanahalfwidth = 0xff8a;\n t.halantgurmukhi = 0x0a4d;\n t.hamzaarabic = 0x0621;\n t.hamzalowarabic = 0x0621;\n t.hangulfiller = 0x3164;\n t.hardsigncyrillic = 0x044a;\n t.harpoonleftbarbup = 0x21bc;\n t.harpoonrightbarbup = 0x21c0;\n t.hasquare = 0x33ca;\n t.hatafpatah = 0x05b2;\n t.hatafpatah16 = 0x05b2;\n t.hatafpatah23 = 0x05b2;\n t.hatafpatah2f = 0x05b2;\n t.hatafpatahhebrew = 0x05b2;\n t.hatafpatahnarrowhebrew = 0x05b2;\n t.hatafpatahquarterhebrew = 0x05b2;\n t.hatafpatahwidehebrew = 0x05b2;\n t.hatafqamats = 0x05b3;\n t.hatafqamats1b = 0x05b3;\n t.hatafqamats28 = 0x05b3;\n t.hatafqamats34 = 0x05b3;\n t.hatafqamatshebrew = 0x05b3;\n t.hatafqamatsnarrowhebrew = 0x05b3;\n t.hatafqamatsquarterhebrew = 0x05b3;\n t.hatafqamatswidehebrew = 0x05b3;\n t.hatafsegol = 0x05b1;\n t.hatafsegol17 = 0x05b1;\n t.hatafsegol24 = 0x05b1;\n t.hatafsegol30 = 0x05b1;\n t.hatafsegolhebrew = 0x05b1;\n t.hatafsegolnarrowhebrew = 0x05b1;\n t.hatafsegolquarterhebrew = 0x05b1;\n t.hatafsegolwidehebrew = 0x05b1;\n t.hbar = 0x0127;\n t.hbopomofo = 0x310f;\n t.hbrevebelow = 0x1e2b;\n t.hcedilla = 0x1e29;\n t.hcircle = 0x24d7;\n t.hcircumflex = 0x0125;\n t.hdieresis = 0x1e27;\n t.hdotaccent = 0x1e23;\n t.hdotbelow = 0x1e25;\n t.he = 0x05d4;\n t.heart = 0x2665;\n t.heartsuitblack = 0x2665;\n t.heartsuitwhite = 0x2661;\n t.hedagesh = 0xfb34;\n t.hedageshhebrew = 0xfb34;\n t.hehaltonearabic = 0x06c1;\n t.heharabic = 0x0647;\n t.hehebrew = 0x05d4;\n t.hehfinalaltonearabic = 0xfba7;\n t.hehfinalalttwoarabic = 0xfeea;\n t.hehfinalarabic = 0xfeea;\n t.hehhamzaabovefinalarabic = 0xfba5;\n t.hehhamzaaboveisolatedarabic = 0xfba4;\n t.hehinitialaltonearabic = 0xfba8;\n t.hehinitialarabic = 0xfeeb;\n t.hehiragana = 0x3078;\n t.hehmedialaltonearabic = 0xfba9;\n t.hehmedialarabic = 0xfeec;\n t.heiseierasquare = 0x337b;\n t.hekatakana = 0x30d8;\n t.hekatakanahalfwidth = 0xff8d;\n t.hekutaarusquare = 0x3336;\n t.henghook = 0x0267;\n t.herutusquare = 0x3339;\n t.het = 0x05d7;\n t.hethebrew = 0x05d7;\n t.hhook = 0x0266;\n t.hhooksuperior = 0x02b1;\n t.hieuhacirclekorean = 0x327b;\n t.hieuhaparenkorean = 0x321b;\n t.hieuhcirclekorean = 0x326d;\n t.hieuhkorean = 0x314e;\n t.hieuhparenkorean = 0x320d;\n t.hihiragana = 0x3072;\n t.hikatakana = 0x30d2;\n t.hikatakanahalfwidth = 0xff8b;\n t.hiriq = 0x05b4;\n t.hiriq14 = 0x05b4;\n t.hiriq21 = 0x05b4;\n t.hiriq2d = 0x05b4;\n t.hiriqhebrew = 0x05b4;\n t.hiriqnarrowhebrew = 0x05b4;\n t.hiriqquarterhebrew = 0x05b4;\n t.hiriqwidehebrew = 0x05b4;\n t.hlinebelow = 0x1e96;\n t.hmonospace = 0xff48;\n t.hoarmenian = 0x0570;\n t.hohipthai = 0x0e2b;\n t.hohiragana = 0x307b;\n t.hokatakana = 0x30db;\n t.hokatakanahalfwidth = 0xff8e;\n t.holam = 0x05b9;\n t.holam19 = 0x05b9;\n t.holam26 = 0x05b9;\n t.holam32 = 0x05b9;\n t.holamhebrew = 0x05b9;\n t.holamnarrowhebrew = 0x05b9;\n t.holamquarterhebrew = 0x05b9;\n t.holamwidehebrew = 0x05b9;\n t.honokhukthai = 0x0e2e;\n t.hookabovecomb = 0x0309;\n t.hookcmb = 0x0309;\n t.hookpalatalizedbelowcmb = 0x0321;\n t.hookretroflexbelowcmb = 0x0322;\n t.hoonsquare = 0x3342;\n t.horicoptic = 0x03e9;\n t.horizontalbar = 0x2015;\n t.horncmb = 0x031b;\n t.hotsprings = 0x2668;\n t.house = 0x2302;\n t.hparen = 0x24a3;\n t.hsuperior = 0x02b0;\n t.hturned = 0x0265;\n t.huhiragana = 0x3075;\n t.huiitosquare = 0x3333;\n t.hukatakana = 0x30d5;\n t.hukatakanahalfwidth = 0xff8c;\n t.hungarumlaut = 0x02dd;\n t.hungarumlautcmb = 0x030b;\n t.hv = 0x0195;\n t.hyphen = 0x002d;\n t.hypheninferior = 0xf6e5;\n t.hyphenmonospace = 0xff0d;\n t.hyphensmall = 0xfe63;\n t.hyphensuperior = 0xf6e6;\n t.hyphentwo = 0x2010;\n t.i = 0x0069;\n t.iacute = 0x00ed;\n t.iacyrillic = 0x044f;\n t.ibengali = 0x0987;\n t.ibopomofo = 0x3127;\n t.ibreve = 0x012d;\n t.icaron = 0x01d0;\n t.icircle = 0x24d8;\n t.icircumflex = 0x00ee;\n t.icyrillic = 0x0456;\n t.idblgrave = 0x0209;\n t.ideographearthcircle = 0x328f;\n t.ideographfirecircle = 0x328b;\n t.ideographicallianceparen = 0x323f;\n t.ideographiccallparen = 0x323a;\n t.ideographiccentrecircle = 0x32a5;\n t.ideographicclose = 0x3006;\n t.ideographiccomma = 0x3001;\n t.ideographiccommaleft = 0xff64;\n t.ideographiccongratulationparen = 0x3237;\n t.ideographiccorrectcircle = 0x32a3;\n t.ideographicearthparen = 0x322f;\n t.ideographicenterpriseparen = 0x323d;\n t.ideographicexcellentcircle = 0x329d;\n t.ideographicfestivalparen = 0x3240;\n t.ideographicfinancialcircle = 0x3296;\n t.ideographicfinancialparen = 0x3236;\n t.ideographicfireparen = 0x322b;\n t.ideographichaveparen = 0x3232;\n t.ideographichighcircle = 0x32a4;\n t.ideographiciterationmark = 0x3005;\n t.ideographiclaborcircle = 0x3298;\n t.ideographiclaborparen = 0x3238;\n t.ideographicleftcircle = 0x32a7;\n t.ideographiclowcircle = 0x32a6;\n t.ideographicmedicinecircle = 0x32a9;\n t.ideographicmetalparen = 0x322e;\n t.ideographicmoonparen = 0x322a;\n t.ideographicnameparen = 0x3234;\n t.ideographicperiod = 0x3002;\n t.ideographicprintcircle = 0x329e;\n t.ideographicreachparen = 0x3243;\n t.ideographicrepresentparen = 0x3239;\n t.ideographicresourceparen = 0x323e;\n t.ideographicrightcircle = 0x32a8;\n t.ideographicsecretcircle = 0x3299;\n t.ideographicselfparen = 0x3242;\n t.ideographicsocietyparen = 0x3233;\n t.ideographicspace = 0x3000;\n t.ideographicspecialparen = 0x3235;\n t.ideographicstockparen = 0x3231;\n t.ideographicstudyparen = 0x323b;\n t.ideographicsunparen = 0x3230;\n t.ideographicsuperviseparen = 0x323c;\n t.ideographicwaterparen = 0x322c;\n t.ideographicwoodparen = 0x322d;\n t.ideographiczero = 0x3007;\n t.ideographmetalcircle = 0x328e;\n t.ideographmooncircle = 0x328a;\n t.ideographnamecircle = 0x3294;\n t.ideographsuncircle = 0x3290;\n t.ideographwatercircle = 0x328c;\n t.ideographwoodcircle = 0x328d;\n t.ideva = 0x0907;\n t.idieresis = 0x00ef;\n t.idieresisacute = 0x1e2f;\n t.idieresiscyrillic = 0x04e5;\n t.idotbelow = 0x1ecb;\n t.iebrevecyrillic = 0x04d7;\n t.iecyrillic = 0x0435;\n t.ieungacirclekorean = 0x3275;\n t.ieungaparenkorean = 0x3215;\n t.ieungcirclekorean = 0x3267;\n t.ieungkorean = 0x3147;\n t.ieungparenkorean = 0x3207;\n t.igrave = 0x00ec;\n t.igujarati = 0x0a87;\n t.igurmukhi = 0x0a07;\n t.ihiragana = 0x3044;\n t.ihookabove = 0x1ec9;\n t.iibengali = 0x0988;\n t.iicyrillic = 0x0438;\n t.iideva = 0x0908;\n t.iigujarati = 0x0a88;\n t.iigurmukhi = 0x0a08;\n t.iimatragurmukhi = 0x0a40;\n t.iinvertedbreve = 0x020b;\n t.iishortcyrillic = 0x0439;\n t.iivowelsignbengali = 0x09c0;\n t.iivowelsigndeva = 0x0940;\n t.iivowelsigngujarati = 0x0ac0;\n t.ij = 0x0133;\n t.ikatakana = 0x30a4;\n t.ikatakanahalfwidth = 0xff72;\n t.ikorean = 0x3163;\n t.ilde = 0x02dc;\n t.iluyhebrew = 0x05ac;\n t.imacron = 0x012b;\n t.imacroncyrillic = 0x04e3;\n t.imageorapproximatelyequal = 0x2253;\n t.imatragurmukhi = 0x0a3f;\n t.imonospace = 0xff49;\n t.increment = 0x2206;\n t.infinity = 0x221e;\n t.iniarmenian = 0x056b;\n t.integral = 0x222b;\n t.integralbottom = 0x2321;\n t.integralbt = 0x2321;\n t.integralex = 0xf8f5;\n t.integraltop = 0x2320;\n t.integraltp = 0x2320;\n t.intersection = 0x2229;\n t.intisquare = 0x3305;\n t.invbullet = 0x25d8;\n t.invcircle = 0x25d9;\n t.invsmileface = 0x263b;\n t.iocyrillic = 0x0451;\n t.iogonek = 0x012f;\n t.iota = 0x03b9;\n t.iotadieresis = 0x03ca;\n t.iotadieresistonos = 0x0390;\n t.iotalatin = 0x0269;\n t.iotatonos = 0x03af;\n t.iparen = 0x24a4;\n t.irigurmukhi = 0x0a72;\n t.ismallhiragana = 0x3043;\n t.ismallkatakana = 0x30a3;\n t.ismallkatakanahalfwidth = 0xff68;\n t.issharbengali = 0x09fa;\n t.istroke = 0x0268;\n t.isuperior = 0xf6ed;\n t.iterationhiragana = 0x309d;\n t.iterationkatakana = 0x30fd;\n t.itilde = 0x0129;\n t.itildebelow = 0x1e2d;\n t.iubopomofo = 0x3129;\n t.iucyrillic = 0x044e;\n t.ivowelsignbengali = 0x09bf;\n t.ivowelsigndeva = 0x093f;\n t.ivowelsigngujarati = 0x0abf;\n t.izhitsacyrillic = 0x0475;\n t.izhitsadblgravecyrillic = 0x0477;\n t.j = 0x006a;\n t.jaarmenian = 0x0571;\n t.jabengali = 0x099c;\n t.jadeva = 0x091c;\n t.jagujarati = 0x0a9c;\n t.jagurmukhi = 0x0a1c;\n t.jbopomofo = 0x3110;\n t.jcaron = 0x01f0;\n t.jcircle = 0x24d9;\n t.jcircumflex = 0x0135;\n t.jcrossedtail = 0x029d;\n t.jdotlessstroke = 0x025f;\n t.jecyrillic = 0x0458;\n t.jeemarabic = 0x062c;\n t.jeemfinalarabic = 0xfe9e;\n t.jeeminitialarabic = 0xfe9f;\n t.jeemmedialarabic = 0xfea0;\n t.jeharabic = 0x0698;\n t.jehfinalarabic = 0xfb8b;\n t.jhabengali = 0x099d;\n t.jhadeva = 0x091d;\n t.jhagujarati = 0x0a9d;\n t.jhagurmukhi = 0x0a1d;\n t.jheharmenian = 0x057b;\n t.jis = 0x3004;\n t.jmonospace = 0xff4a;\n t.jparen = 0x24a5;\n t.jsuperior = 0x02b2;\n t.k = 0x006b;\n t.kabashkircyrillic = 0x04a1;\n t.kabengali = 0x0995;\n t.kacute = 0x1e31;\n t.kacyrillic = 0x043a;\n t.kadescendercyrillic = 0x049b;\n t.kadeva = 0x0915;\n t.kaf = 0x05db;\n t.kafarabic = 0x0643;\n t.kafdagesh = 0xfb3b;\n t.kafdageshhebrew = 0xfb3b;\n t.kaffinalarabic = 0xfeda;\n t.kafhebrew = 0x05db;\n t.kafinitialarabic = 0xfedb;\n t.kafmedialarabic = 0xfedc;\n t.kafrafehebrew = 0xfb4d;\n t.kagujarati = 0x0a95;\n t.kagurmukhi = 0x0a15;\n t.kahiragana = 0x304b;\n t.kahookcyrillic = 0x04c4;\n t.kakatakana = 0x30ab;\n t.kakatakanahalfwidth = 0xff76;\n t.kappa = 0x03ba;\n t.kappasymbolgreek = 0x03f0;\n t.kapyeounmieumkorean = 0x3171;\n t.kapyeounphieuphkorean = 0x3184;\n t.kapyeounpieupkorean = 0x3178;\n t.kapyeounssangpieupkorean = 0x3179;\n t.karoriisquare = 0x330d;\n t.kashidaautoarabic = 0x0640;\n t.kashidaautonosidebearingarabic = 0x0640;\n t.kasmallkatakana = 0x30f5;\n t.kasquare = 0x3384;\n t.kasraarabic = 0x0650;\n t.kasratanarabic = 0x064d;\n t.kastrokecyrillic = 0x049f;\n t.katahiraprolongmarkhalfwidth = 0xff70;\n t.kaverticalstrokecyrillic = 0x049d;\n t.kbopomofo = 0x310e;\n t.kcalsquare = 0x3389;\n t.kcaron = 0x01e9;\n t.kcedilla = 0x0137;\n t.kcircle = 0x24da;\n t.kcommaaccent = 0x0137;\n t.kdotbelow = 0x1e33;\n t.keharmenian = 0x0584;\n t.kehiragana = 0x3051;\n t.kekatakana = 0x30b1;\n t.kekatakanahalfwidth = 0xff79;\n t.kenarmenian = 0x056f;\n t.kesmallkatakana = 0x30f6;\n t.kgreenlandic = 0x0138;\n t.khabengali = 0x0996;\n t.khacyrillic = 0x0445;\n t.khadeva = 0x0916;\n t.khagujarati = 0x0a96;\n t.khagurmukhi = 0x0a16;\n t.khaharabic = 0x062e;\n t.khahfinalarabic = 0xfea6;\n t.khahinitialarabic = 0xfea7;\n t.khahmedialarabic = 0xfea8;\n t.kheicoptic = 0x03e7;\n t.khhadeva = 0x0959;\n t.khhagurmukhi = 0x0a59;\n t.khieukhacirclekorean = 0x3278;\n t.khieukhaparenkorean = 0x3218;\n t.khieukhcirclekorean = 0x326a;\n t.khieukhkorean = 0x314b;\n t.khieukhparenkorean = 0x320a;\n t.khokhaithai = 0x0e02;\n t.khokhonthai = 0x0e05;\n t.khokhuatthai = 0x0e03;\n t.khokhwaithai = 0x0e04;\n t.khomutthai = 0x0e5b;\n t.khook = 0x0199;\n t.khorakhangthai = 0x0e06;\n t.khzsquare = 0x3391;\n t.kihiragana = 0x304d;\n t.kikatakana = 0x30ad;\n t.kikatakanahalfwidth = 0xff77;\n t.kiroguramusquare = 0x3315;\n t.kiromeetorusquare = 0x3316;\n t.kirosquare = 0x3314;\n t.kiyeokacirclekorean = 0x326e;\n t.kiyeokaparenkorean = 0x320e;\n t.kiyeokcirclekorean = 0x3260;\n t.kiyeokkorean = 0x3131;\n t.kiyeokparenkorean = 0x3200;\n t.kiyeoksioskorean = 0x3133;\n t.kjecyrillic = 0x045c;\n t.klinebelow = 0x1e35;\n t.klsquare = 0x3398;\n t.kmcubedsquare = 0x33a6;\n t.kmonospace = 0xff4b;\n t.kmsquaredsquare = 0x33a2;\n t.kohiragana = 0x3053;\n t.kohmsquare = 0x33c0;\n t.kokaithai = 0x0e01;\n t.kokatakana = 0x30b3;\n t.kokatakanahalfwidth = 0xff7a;\n t.kooposquare = 0x331e;\n t.koppacyrillic = 0x0481;\n t.koreanstandardsymbol = 0x327f;\n t.koroniscmb = 0x0343;\n t.kparen = 0x24a6;\n t.kpasquare = 0x33aa;\n t.ksicyrillic = 0x046f;\n t.ktsquare = 0x33cf;\n t.kturned = 0x029e;\n t.kuhiragana = 0x304f;\n t.kukatakana = 0x30af;\n t.kukatakanahalfwidth = 0xff78;\n t.kvsquare = 0x33b8;\n t.kwsquare = 0x33be;\n t.l = 0x006c;\n t.labengali = 0x09b2;\n t.lacute = 0x013a;\n t.ladeva = 0x0932;\n t.lagujarati = 0x0ab2;\n t.lagurmukhi = 0x0a32;\n t.lakkhangyaothai = 0x0e45;\n t.lamaleffinalarabic = 0xfefc;\n t.lamalefhamzaabovefinalarabic = 0xfef8;\n t.lamalefhamzaaboveisolatedarabic = 0xfef7;\n t.lamalefhamzabelowfinalarabic = 0xfefa;\n t.lamalefhamzabelowisolatedarabic = 0xfef9;\n t.lamalefisolatedarabic = 0xfefb;\n t.lamalefmaddaabovefinalarabic = 0xfef6;\n t.lamalefmaddaaboveisolatedarabic = 0xfef5;\n t.lamarabic = 0x0644;\n t.lambda = 0x03bb;\n t.lambdastroke = 0x019b;\n t.lamed = 0x05dc;\n t.lameddagesh = 0xfb3c;\n t.lameddageshhebrew = 0xfb3c;\n t.lamedhebrew = 0x05dc;\n t.lamfinalarabic = 0xfede;\n t.lamhahinitialarabic = 0xfcca;\n t.laminitialarabic = 0xfedf;\n t.lamjeeminitialarabic = 0xfcc9;\n t.lamkhahinitialarabic = 0xfccb;\n t.lamlamhehisolatedarabic = 0xfdf2;\n t.lammedialarabic = 0xfee0;\n t.lammeemhahinitialarabic = 0xfd88;\n t.lammeeminitialarabic = 0xfccc;\n t.largecircle = 0x25ef;\n t.lbar = 0x019a;\n t.lbelt = 0x026c;\n t.lbopomofo = 0x310c;\n t.lcaron = 0x013e;\n t.lcedilla = 0x013c;\n t.lcircle = 0x24db;\n t.lcircumflexbelow = 0x1e3d;\n t.lcommaaccent = 0x013c;\n t.ldot = 0x0140;\n t.ldotaccent = 0x0140;\n t.ldotbelow = 0x1e37;\n t.ldotbelowmacron = 0x1e39;\n t.leftangleabovecmb = 0x031a;\n t.lefttackbelowcmb = 0x0318;\n t.less = 0x003c;\n t.lessequal = 0x2264;\n t.lessequalorgreater = 0x22da;\n t.lessmonospace = 0xff1c;\n t.lessorequivalent = 0x2272;\n t.lessorgreater = 0x2276;\n t.lessoverequal = 0x2266;\n t.lesssmall = 0xfe64;\n t.lezh = 0x026e;\n t.lfblock = 0x258c;\n t.lhookretroflex = 0x026d;\n t.lira = 0x20a4;\n t.liwnarmenian = 0x056c;\n t.lj = 0x01c9;\n t.ljecyrillic = 0x0459;\n t.ll = 0xf6c0;\n t.lladeva = 0x0933;\n t.llagujarati = 0x0ab3;\n t.llinebelow = 0x1e3b;\n t.llladeva = 0x0934;\n t.llvocalicbengali = 0x09e1;\n t.llvocalicdeva = 0x0961;\n t.llvocalicvowelsignbengali = 0x09e3;\n t.llvocalicvowelsigndeva = 0x0963;\n t.lmiddletilde = 0x026b;\n t.lmonospace = 0xff4c;\n t.lmsquare = 0x33d0;\n t.lochulathai = 0x0e2c;\n t.logicaland = 0x2227;\n t.logicalnot = 0x00ac;\n t.logicalnotreversed = 0x2310;\n t.logicalor = 0x2228;\n t.lolingthai = 0x0e25;\n t.longs = 0x017f;\n t.lowlinecenterline = 0xfe4e;\n t.lowlinecmb = 0x0332;\n t.lowlinedashed = 0xfe4d;\n t.lozenge = 0x25ca;\n t.lparen = 0x24a7;\n t.lslash = 0x0142;\n t.lsquare = 0x2113;\n t.lsuperior = 0xf6ee;\n t.ltshade = 0x2591;\n t.luthai = 0x0e26;\n t.lvocalicbengali = 0x098c;\n t.lvocalicdeva = 0x090c;\n t.lvocalicvowelsignbengali = 0x09e2;\n t.lvocalicvowelsigndeva = 0x0962;\n t.lxsquare = 0x33d3;\n t.m = 0x006d;\n t.mabengali = 0x09ae;\n t.macron = 0x00af;\n t.macronbelowcmb = 0x0331;\n t.macroncmb = 0x0304;\n t.macronlowmod = 0x02cd;\n t.macronmonospace = 0xffe3;\n t.macute = 0x1e3f;\n t.madeva = 0x092e;\n t.magujarati = 0x0aae;\n t.magurmukhi = 0x0a2e;\n t.mahapakhhebrew = 0x05a4;\n t.mahapakhlefthebrew = 0x05a4;\n t.mahiragana = 0x307e;\n t.maichattawalowleftthai = 0xf895;\n t.maichattawalowrightthai = 0xf894;\n t.maichattawathai = 0x0e4b;\n t.maichattawaupperleftthai = 0xf893;\n t.maieklowleftthai = 0xf88c;\n t.maieklowrightthai = 0xf88b;\n t.maiekthai = 0x0e48;\n t.maiekupperleftthai = 0xf88a;\n t.maihanakatleftthai = 0xf884;\n t.maihanakatthai = 0x0e31;\n t.maitaikhuleftthai = 0xf889;\n t.maitaikhuthai = 0x0e47;\n t.maitholowleftthai = 0xf88f;\n t.maitholowrightthai = 0xf88e;\n t.maithothai = 0x0e49;\n t.maithoupperleftthai = 0xf88d;\n t.maitrilowleftthai = 0xf892;\n t.maitrilowrightthai = 0xf891;\n t.maitrithai = 0x0e4a;\n t.maitriupperleftthai = 0xf890;\n t.maiyamokthai = 0x0e46;\n t.makatakana = 0x30de;\n t.makatakanahalfwidth = 0xff8f;\n t.male = 0x2642;\n t.mansyonsquare = 0x3347;\n t.maqafhebrew = 0x05be;\n t.mars = 0x2642;\n t.masoracirclehebrew = 0x05af;\n t.masquare = 0x3383;\n t.mbopomofo = 0x3107;\n t.mbsquare = 0x33d4;\n t.mcircle = 0x24dc;\n t.mcubedsquare = 0x33a5;\n t.mdotaccent = 0x1e41;\n t.mdotbelow = 0x1e43;\n t.meemarabic = 0x0645;\n t.meemfinalarabic = 0xfee2;\n t.meeminitialarabic = 0xfee3;\n t.meemmedialarabic = 0xfee4;\n t.meemmeeminitialarabic = 0xfcd1;\n t.meemmeemisolatedarabic = 0xfc48;\n t.meetorusquare = 0x334d;\n t.mehiragana = 0x3081;\n t.meizierasquare = 0x337e;\n t.mekatakana = 0x30e1;\n t.mekatakanahalfwidth = 0xff92;\n t.mem = 0x05de;\n t.memdagesh = 0xfb3e;\n t.memdageshhebrew = 0xfb3e;\n t.memhebrew = 0x05de;\n t.menarmenian = 0x0574;\n t.merkhahebrew = 0x05a5;\n t.merkhakefulahebrew = 0x05a6;\n t.merkhakefulalefthebrew = 0x05a6;\n t.merkhalefthebrew = 0x05a5;\n t.mhook = 0x0271;\n t.mhzsquare = 0x3392;\n t.middledotkatakanahalfwidth = 0xff65;\n t.middot = 0x00b7;\n t.mieumacirclekorean = 0x3272;\n t.mieumaparenkorean = 0x3212;\n t.mieumcirclekorean = 0x3264;\n t.mieumkorean = 0x3141;\n t.mieumpansioskorean = 0x3170;\n t.mieumparenkorean = 0x3204;\n t.mieumpieupkorean = 0x316e;\n t.mieumsioskorean = 0x316f;\n t.mihiragana = 0x307f;\n t.mikatakana = 0x30df;\n t.mikatakanahalfwidth = 0xff90;\n t.minus = 0x2212;\n t.minusbelowcmb = 0x0320;\n t.minuscircle = 0x2296;\n t.minusmod = 0x02d7;\n t.minusplus = 0x2213;\n t.minute = 0x2032;\n t.miribaarusquare = 0x334a;\n t.mirisquare = 0x3349;\n t.mlonglegturned = 0x0270;\n t.mlsquare = 0x3396;\n t.mmcubedsquare = 0x33a3;\n t.mmonospace = 0xff4d;\n t.mmsquaredsquare = 0x339f;\n t.mohiragana = 0x3082;\n t.mohmsquare = 0x33c1;\n t.mokatakana = 0x30e2;\n t.mokatakanahalfwidth = 0xff93;\n t.molsquare = 0x33d6;\n t.momathai = 0x0e21;\n t.moverssquare = 0x33a7;\n t.moverssquaredsquare = 0x33a8;\n t.mparen = 0x24a8;\n t.mpasquare = 0x33ab;\n t.mssquare = 0x33b3;\n t.msuperior = 0xf6ef;\n t.mturned = 0x026f;\n t.mu = 0x00b5;\n t.mu1 = 0x00b5;\n t.muasquare = 0x3382;\n t.muchgreater = 0x226b;\n t.muchless = 0x226a;\n t.mufsquare = 0x338c;\n t.mugreek = 0x03bc;\n t.mugsquare = 0x338d;\n t.muhiragana = 0x3080;\n t.mukatakana = 0x30e0;\n t.mukatakanahalfwidth = 0xff91;\n t.mulsquare = 0x3395;\n t.multiply = 0x00d7;\n t.mumsquare = 0x339b;\n t.munahhebrew = 0x05a3;\n t.munahlefthebrew = 0x05a3;\n t.musicalnote = 0x266a;\n t.musicalnotedbl = 0x266b;\n t.musicflatsign = 0x266d;\n t.musicsharpsign = 0x266f;\n t.mussquare = 0x33b2;\n t.muvsquare = 0x33b6;\n t.muwsquare = 0x33bc;\n t.mvmegasquare = 0x33b9;\n t.mvsquare = 0x33b7;\n t.mwmegasquare = 0x33bf;\n t.mwsquare = 0x33bd;\n t.n = 0x006e;\n t.nabengali = 0x09a8;\n t.nabla = 0x2207;\n t.nacute = 0x0144;\n t.nadeva = 0x0928;\n t.nagujarati = 0x0aa8;\n t.nagurmukhi = 0x0a28;\n t.nahiragana = 0x306a;\n t.nakatakana = 0x30ca;\n t.nakatakanahalfwidth = 0xff85;\n t.napostrophe = 0x0149;\n t.nasquare = 0x3381;\n t.nbopomofo = 0x310b;\n t.nbspace = 0x00a0;\n t.ncaron = 0x0148;\n t.ncedilla = 0x0146;\n t.ncircle = 0x24dd;\n t.ncircumflexbelow = 0x1e4b;\n t.ncommaaccent = 0x0146;\n t.ndotaccent = 0x1e45;\n t.ndotbelow = 0x1e47;\n t.nehiragana = 0x306d;\n t.nekatakana = 0x30cd;\n t.nekatakanahalfwidth = 0xff88;\n t.newsheqelsign = 0x20aa;\n t.nfsquare = 0x338b;\n t.ngabengali = 0x0999;\n t.ngadeva = 0x0919;\n t.ngagujarati = 0x0a99;\n t.ngagurmukhi = 0x0a19;\n t.ngonguthai = 0x0e07;\n t.nhiragana = 0x3093;\n t.nhookleft = 0x0272;\n t.nhookretroflex = 0x0273;\n t.nieunacirclekorean = 0x326f;\n t.nieunaparenkorean = 0x320f;\n t.nieuncieuckorean = 0x3135;\n t.nieuncirclekorean = 0x3261;\n t.nieunhieuhkorean = 0x3136;\n t.nieunkorean = 0x3134;\n t.nieunpansioskorean = 0x3168;\n t.nieunparenkorean = 0x3201;\n t.nieunsioskorean = 0x3167;\n t.nieuntikeutkorean = 0x3166;\n t.nihiragana = 0x306b;\n t.nikatakana = 0x30cb;\n t.nikatakanahalfwidth = 0xff86;\n t.nikhahitleftthai = 0xf899;\n t.nikhahitthai = 0x0e4d;\n t.nine = 0x0039;\n t.ninearabic = 0x0669;\n t.ninebengali = 0x09ef;\n t.ninecircle = 0x2468;\n t.ninecircleinversesansserif = 0x2792;\n t.ninedeva = 0x096f;\n t.ninegujarati = 0x0aef;\n t.ninegurmukhi = 0x0a6f;\n t.ninehackarabic = 0x0669;\n t.ninehangzhou = 0x3029;\n t.nineideographicparen = 0x3228;\n t.nineinferior = 0x2089;\n t.ninemonospace = 0xff19;\n t.nineoldstyle = 0xf739;\n t.nineparen = 0x247c;\n t.nineperiod = 0x2490;\n t.ninepersian = 0x06f9;\n t.nineroman = 0x2178;\n t.ninesuperior = 0x2079;\n t.nineteencircle = 0x2472;\n t.nineteenparen = 0x2486;\n t.nineteenperiod = 0x249a;\n t.ninethai = 0x0e59;\n t.nj = 0x01cc;\n t.njecyrillic = 0x045a;\n t.nkatakana = 0x30f3;\n t.nkatakanahalfwidth = 0xff9d;\n t.nlegrightlong = 0x019e;\n t.nlinebelow = 0x1e49;\n t.nmonospace = 0xff4e;\n t.nmsquare = 0x339a;\n t.nnabengali = 0x09a3;\n t.nnadeva = 0x0923;\n t.nnagujarati = 0x0aa3;\n t.nnagurmukhi = 0x0a23;\n t.nnnadeva = 0x0929;\n t.nohiragana = 0x306e;\n t.nokatakana = 0x30ce;\n t.nokatakanahalfwidth = 0xff89;\n t.nonbreakingspace = 0x00a0;\n t.nonenthai = 0x0e13;\n t.nonuthai = 0x0e19;\n t.noonarabic = 0x0646;\n t.noonfinalarabic = 0xfee6;\n t.noonghunnaarabic = 0x06ba;\n t.noonghunnafinalarabic = 0xfb9f;\n t.nooninitialarabic = 0xfee7;\n t.noonjeeminitialarabic = 0xfcd2;\n t.noonjeemisolatedarabic = 0xfc4b;\n t.noonmedialarabic = 0xfee8;\n t.noonmeeminitialarabic = 0xfcd5;\n t.noonmeemisolatedarabic = 0xfc4e;\n t.noonnoonfinalarabic = 0xfc8d;\n t.notcontains = 0x220c;\n t.notelement = 0x2209;\n t.notelementof = 0x2209;\n t.notequal = 0x2260;\n t.notgreater = 0x226f;\n t.notgreaternorequal = 0x2271;\n t.notgreaternorless = 0x2279;\n t.notidentical = 0x2262;\n t.notless = 0x226e;\n t.notlessnorequal = 0x2270;\n t.notparallel = 0x2226;\n t.notprecedes = 0x2280;\n t.notsubset = 0x2284;\n t.notsucceeds = 0x2281;\n t.notsuperset = 0x2285;\n t.nowarmenian = 0x0576;\n t.nparen = 0x24a9;\n t.nssquare = 0x33b1;\n t.nsuperior = 0x207f;\n t.ntilde = 0x00f1;\n t.nu = 0x03bd;\n t.nuhiragana = 0x306c;\n t.nukatakana = 0x30cc;\n t.nukatakanahalfwidth = 0xff87;\n t.nuktabengali = 0x09bc;\n t.nuktadeva = 0x093c;\n t.nuktagujarati = 0x0abc;\n t.nuktagurmukhi = 0x0a3c;\n t.numbersign = 0x0023;\n t.numbersignmonospace = 0xff03;\n t.numbersignsmall = 0xfe5f;\n t.numeralsigngreek = 0x0374;\n t.numeralsignlowergreek = 0x0375;\n t.numero = 0x2116;\n t.nun = 0x05e0;\n t.nundagesh = 0xfb40;\n t.nundageshhebrew = 0xfb40;\n t.nunhebrew = 0x05e0;\n t.nvsquare = 0x33b5;\n t.nwsquare = 0x33bb;\n t.nyabengali = 0x099e;\n t.nyadeva = 0x091e;\n t.nyagujarati = 0x0a9e;\n t.nyagurmukhi = 0x0a1e;\n t.o = 0x006f;\n t.oacute = 0x00f3;\n t.oangthai = 0x0e2d;\n t.obarred = 0x0275;\n t.obarredcyrillic = 0x04e9;\n t.obarreddieresiscyrillic = 0x04eb;\n t.obengali = 0x0993;\n t.obopomofo = 0x311b;\n t.obreve = 0x014f;\n t.ocandradeva = 0x0911;\n t.ocandragujarati = 0x0a91;\n t.ocandravowelsigndeva = 0x0949;\n t.ocandravowelsigngujarati = 0x0ac9;\n t.ocaron = 0x01d2;\n t.ocircle = 0x24de;\n t.ocircumflex = 0x00f4;\n t.ocircumflexacute = 0x1ed1;\n t.ocircumflexdotbelow = 0x1ed9;\n t.ocircumflexgrave = 0x1ed3;\n t.ocircumflexhookabove = 0x1ed5;\n t.ocircumflextilde = 0x1ed7;\n t.ocyrillic = 0x043e;\n t.odblacute = 0x0151;\n t.odblgrave = 0x020d;\n t.odeva = 0x0913;\n t.odieresis = 0x00f6;\n t.odieresiscyrillic = 0x04e7;\n t.odotbelow = 0x1ecd;\n t.oe = 0x0153;\n t.oekorean = 0x315a;\n t.ogonek = 0x02db;\n t.ogonekcmb = 0x0328;\n t.ograve = 0x00f2;\n t.ogujarati = 0x0a93;\n t.oharmenian = 0x0585;\n t.ohiragana = 0x304a;\n t.ohookabove = 0x1ecf;\n t.ohorn = 0x01a1;\n t.ohornacute = 0x1edb;\n t.ohorndotbelow = 0x1ee3;\n t.ohorngrave = 0x1edd;\n t.ohornhookabove = 0x1edf;\n t.ohorntilde = 0x1ee1;\n t.ohungarumlaut = 0x0151;\n t.oi = 0x01a3;\n t.oinvertedbreve = 0x020f;\n t.okatakana = 0x30aa;\n t.okatakanahalfwidth = 0xff75;\n t.okorean = 0x3157;\n t.olehebrew = 0x05ab;\n t.omacron = 0x014d;\n t.omacronacute = 0x1e53;\n t.omacrongrave = 0x1e51;\n t.omdeva = 0x0950;\n t.omega = 0x03c9;\n t.omega1 = 0x03d6;\n t.omegacyrillic = 0x0461;\n t.omegalatinclosed = 0x0277;\n t.omegaroundcyrillic = 0x047b;\n t.omegatitlocyrillic = 0x047d;\n t.omegatonos = 0x03ce;\n t.omgujarati = 0x0ad0;\n t.omicron = 0x03bf;\n t.omicrontonos = 0x03cc;\n t.omonospace = 0xff4f;\n t.one = 0x0031;\n t.onearabic = 0x0661;\n t.onebengali = 0x09e7;\n t.onecircle = 0x2460;\n t.onecircleinversesansserif = 0x278a;\n t.onedeva = 0x0967;\n t.onedotenleader = 0x2024;\n t.oneeighth = 0x215b;\n t.onefitted = 0xf6dc;\n t.onegujarati = 0x0ae7;\n t.onegurmukhi = 0x0a67;\n t.onehackarabic = 0x0661;\n t.onehalf = 0x00bd;\n t.onehangzhou = 0x3021;\n t.oneideographicparen = 0x3220;\n t.oneinferior = 0x2081;\n t.onemonospace = 0xff11;\n t.onenumeratorbengali = 0x09f4;\n t.oneoldstyle = 0xf731;\n t.oneparen = 0x2474;\n t.oneperiod = 0x2488;\n t.onepersian = 0x06f1;\n t.onequarter = 0x00bc;\n t.oneroman = 0x2170;\n t.onesuperior = 0x00b9;\n t.onethai = 0x0e51;\n t.onethird = 0x2153;\n t.oogonek = 0x01eb;\n t.oogonekmacron = 0x01ed;\n t.oogurmukhi = 0x0a13;\n t.oomatragurmukhi = 0x0a4b;\n t.oopen = 0x0254;\n t.oparen = 0x24aa;\n t.openbullet = 0x25e6;\n t.option = 0x2325;\n t.ordfeminine = 0x00aa;\n t.ordmasculine = 0x00ba;\n t.orthogonal = 0x221f;\n t.oshortdeva = 0x0912;\n t.oshortvowelsigndeva = 0x094a;\n t.oslash = 0x00f8;\n t.oslashacute = 0x01ff;\n t.osmallhiragana = 0x3049;\n t.osmallkatakana = 0x30a9;\n t.osmallkatakanahalfwidth = 0xff6b;\n t.ostrokeacute = 0x01ff;\n t.osuperior = 0xf6f0;\n t.otcyrillic = 0x047f;\n t.otilde = 0x00f5;\n t.otildeacute = 0x1e4d;\n t.otildedieresis = 0x1e4f;\n t.oubopomofo = 0x3121;\n t.overline = 0x203e;\n t.overlinecenterline = 0xfe4a;\n t.overlinecmb = 0x0305;\n t.overlinedashed = 0xfe49;\n t.overlinedblwavy = 0xfe4c;\n t.overlinewavy = 0xfe4b;\n t.overscore = 0x00af;\n t.ovowelsignbengali = 0x09cb;\n t.ovowelsigndeva = 0x094b;\n t.ovowelsigngujarati = 0x0acb;\n t.p = 0x0070;\n t.paampssquare = 0x3380;\n t.paasentosquare = 0x332b;\n t.pabengali = 0x09aa;\n t.pacute = 0x1e55;\n t.padeva = 0x092a;\n t.pagedown = 0x21df;\n t.pageup = 0x21de;\n t.pagujarati = 0x0aaa;\n t.pagurmukhi = 0x0a2a;\n t.pahiragana = 0x3071;\n t.paiyannoithai = 0x0e2f;\n t.pakatakana = 0x30d1;\n t.palatalizationcyrilliccmb = 0x0484;\n t.palochkacyrillic = 0x04c0;\n t.pansioskorean = 0x317f;\n t.paragraph = 0x00b6;\n t.parallel = 0x2225;\n t.parenleft = 0x0028;\n t.parenleftaltonearabic = 0xfd3e;\n t.parenleftbt = 0xf8ed;\n t.parenleftex = 0xf8ec;\n t.parenleftinferior = 0x208d;\n t.parenleftmonospace = 0xff08;\n t.parenleftsmall = 0xfe59;\n t.parenleftsuperior = 0x207d;\n t.parenlefttp = 0xf8eb;\n t.parenleftvertical = 0xfe35;\n t.parenright = 0x0029;\n t.parenrightaltonearabic = 0xfd3f;\n t.parenrightbt = 0xf8f8;\n t.parenrightex = 0xf8f7;\n t.parenrightinferior = 0x208e;\n t.parenrightmonospace = 0xff09;\n t.parenrightsmall = 0xfe5a;\n t.parenrightsuperior = 0x207e;\n t.parenrighttp = 0xf8f6;\n t.parenrightvertical = 0xfe36;\n t.partialdiff = 0x2202;\n t.paseqhebrew = 0x05c0;\n t.pashtahebrew = 0x0599;\n t.pasquare = 0x33a9;\n t.patah = 0x05b7;\n t.patah11 = 0x05b7;\n t.patah1d = 0x05b7;\n t.patah2a = 0x05b7;\n t.patahhebrew = 0x05b7;\n t.patahnarrowhebrew = 0x05b7;\n t.patahquarterhebrew = 0x05b7;\n t.patahwidehebrew = 0x05b7;\n t.pazerhebrew = 0x05a1;\n t.pbopomofo = 0x3106;\n t.pcircle = 0x24df;\n t.pdotaccent = 0x1e57;\n t.pe = 0x05e4;\n t.pecyrillic = 0x043f;\n t.pedagesh = 0xfb44;\n t.pedageshhebrew = 0xfb44;\n t.peezisquare = 0x333b;\n t.pefinaldageshhebrew = 0xfb43;\n t.peharabic = 0x067e;\n t.peharmenian = 0x057a;\n t.pehebrew = 0x05e4;\n t.pehfinalarabic = 0xfb57;\n t.pehinitialarabic = 0xfb58;\n t.pehiragana = 0x307a;\n t.pehmedialarabic = 0xfb59;\n t.pekatakana = 0x30da;\n t.pemiddlehookcyrillic = 0x04a7;\n t.perafehebrew = 0xfb4e;\n t.percent = 0x0025;\n t.percentarabic = 0x066a;\n t.percentmonospace = 0xff05;\n t.percentsmall = 0xfe6a;\n t.period = 0x002e;\n t.periodarmenian = 0x0589;\n t.periodcentered = 0x00b7;\n t.periodhalfwidth = 0xff61;\n t.periodinferior = 0xf6e7;\n t.periodmonospace = 0xff0e;\n t.periodsmall = 0xfe52;\n t.periodsuperior = 0xf6e8;\n t.perispomenigreekcmb = 0x0342;\n t.perpendicular = 0x22a5;\n t.perthousand = 0x2030;\n t.peseta = 0x20a7;\n t.pfsquare = 0x338a;\n t.phabengali = 0x09ab;\n t.phadeva = 0x092b;\n t.phagujarati = 0x0aab;\n t.phagurmukhi = 0x0a2b;\n t.phi = 0x03c6;\n t.phi1 = 0x03d5;\n t.phieuphacirclekorean = 0x327a;\n t.phieuphaparenkorean = 0x321a;\n t.phieuphcirclekorean = 0x326c;\n t.phieuphkorean = 0x314d;\n t.phieuphparenkorean = 0x320c;\n t.philatin = 0x0278;\n t.phinthuthai = 0x0e3a;\n t.phisymbolgreek = 0x03d5;\n t.phook = 0x01a5;\n t.phophanthai = 0x0e1e;\n t.phophungthai = 0x0e1c;\n t.phosamphaothai = 0x0e20;\n t.pi = 0x03c0;\n t.pieupacirclekorean = 0x3273;\n t.pieupaparenkorean = 0x3213;\n t.pieupcieuckorean = 0x3176;\n t.pieupcirclekorean = 0x3265;\n t.pieupkiyeokkorean = 0x3172;\n t.pieupkorean = 0x3142;\n t.pieupparenkorean = 0x3205;\n t.pieupsioskiyeokkorean = 0x3174;\n t.pieupsioskorean = 0x3144;\n t.pieupsiostikeutkorean = 0x3175;\n t.pieupthieuthkorean = 0x3177;\n t.pieuptikeutkorean = 0x3173;\n t.pihiragana = 0x3074;\n t.pikatakana = 0x30d4;\n t.pisymbolgreek = 0x03d6;\n t.piwrarmenian = 0x0583;\n t.plus = 0x002b;\n t.plusbelowcmb = 0x031f;\n t.pluscircle = 0x2295;\n t.plusminus = 0x00b1;\n t.plusmod = 0x02d6;\n t.plusmonospace = 0xff0b;\n t.plussmall = 0xfe62;\n t.plussuperior = 0x207a;\n t.pmonospace = 0xff50;\n t.pmsquare = 0x33d8;\n t.pohiragana = 0x307d;\n t.pointingindexdownwhite = 0x261f;\n t.pointingindexleftwhite = 0x261c;\n t.pointingindexrightwhite = 0x261e;\n t.pointingindexupwhite = 0x261d;\n t.pokatakana = 0x30dd;\n t.poplathai = 0x0e1b;\n t.postalmark = 0x3012;\n t.postalmarkface = 0x3020;\n t.pparen = 0x24ab;\n t.precedes = 0x227a;\n t.prescription = 0x211e;\n t.primemod = 0x02b9;\n t.primereversed = 0x2035;\n t.product = 0x220f;\n t.projective = 0x2305;\n t.prolongedkana = 0x30fc;\n t.propellor = 0x2318;\n t.propersubset = 0x2282;\n t.propersuperset = 0x2283;\n t.proportion = 0x2237;\n t.proportional = 0x221d;\n t.psi = 0x03c8;\n t.psicyrillic = 0x0471;\n t.psilipneumatacyrilliccmb = 0x0486;\n t.pssquare = 0x33b0;\n t.puhiragana = 0x3077;\n t.pukatakana = 0x30d7;\n t.pvsquare = 0x33b4;\n t.pwsquare = 0x33ba;\n t.q = 0x0071;\n t.qadeva = 0x0958;\n t.qadmahebrew = 0x05a8;\n t.qafarabic = 0x0642;\n t.qaffinalarabic = 0xfed6;\n t.qafinitialarabic = 0xfed7;\n t.qafmedialarabic = 0xfed8;\n t.qamats = 0x05b8;\n t.qamats10 = 0x05b8;\n t.qamats1a = 0x05b8;\n t.qamats1c = 0x05b8;\n t.qamats27 = 0x05b8;\n t.qamats29 = 0x05b8;\n t.qamats33 = 0x05b8;\n t.qamatsde = 0x05b8;\n t.qamatshebrew = 0x05b8;\n t.qamatsnarrowhebrew = 0x05b8;\n t.qamatsqatanhebrew = 0x05b8;\n t.qamatsqatannarrowhebrew = 0x05b8;\n t.qamatsqatanquarterhebrew = 0x05b8;\n t.qamatsqatanwidehebrew = 0x05b8;\n t.qamatsquarterhebrew = 0x05b8;\n t.qamatswidehebrew = 0x05b8;\n t.qarneyparahebrew = 0x059f;\n t.qbopomofo = 0x3111;\n t.qcircle = 0x24e0;\n t.qhook = 0x02a0;\n t.qmonospace = 0xff51;\n t.qof = 0x05e7;\n t.qofdagesh = 0xfb47;\n t.qofdageshhebrew = 0xfb47;\n t.qofhebrew = 0x05e7;\n t.qparen = 0x24ac;\n t.quarternote = 0x2669;\n t.qubuts = 0x05bb;\n t.qubuts18 = 0x05bb;\n t.qubuts25 = 0x05bb;\n t.qubuts31 = 0x05bb;\n t.qubutshebrew = 0x05bb;\n t.qubutsnarrowhebrew = 0x05bb;\n t.qubutsquarterhebrew = 0x05bb;\n t.qubutswidehebrew = 0x05bb;\n t.question = 0x003f;\n t.questionarabic = 0x061f;\n t.questionarmenian = 0x055e;\n t.questiondown = 0x00bf;\n t.questiondownsmall = 0xf7bf;\n t.questiongreek = 0x037e;\n t.questionmonospace = 0xff1f;\n t.questionsmall = 0xf73f;\n t.quotedbl = 0x0022;\n t.quotedblbase = 0x201e;\n t.quotedblleft = 0x201c;\n t.quotedblmonospace = 0xff02;\n t.quotedblprime = 0x301e;\n t.quotedblprimereversed = 0x301d;\n t.quotedblright = 0x201d;\n t.quoteleft = 0x2018;\n t.quoteleftreversed = 0x201b;\n t.quotereversed = 0x201b;\n t.quoteright = 0x2019;\n t.quoterightn = 0x0149;\n t.quotesinglbase = 0x201a;\n t.quotesingle = 0x0027;\n t.quotesinglemonospace = 0xff07;\n t.r = 0x0072;\n t.raarmenian = 0x057c;\n t.rabengali = 0x09b0;\n t.racute = 0x0155;\n t.radeva = 0x0930;\n t.radical = 0x221a;\n t.radicalex = 0xf8e5;\n t.radoverssquare = 0x33ae;\n t.radoverssquaredsquare = 0x33af;\n t.radsquare = 0x33ad;\n t.rafe = 0x05bf;\n t.rafehebrew = 0x05bf;\n t.ragujarati = 0x0ab0;\n t.ragurmukhi = 0x0a30;\n t.rahiragana = 0x3089;\n t.rakatakana = 0x30e9;\n t.rakatakanahalfwidth = 0xff97;\n t.ralowerdiagonalbengali = 0x09f1;\n t.ramiddlediagonalbengali = 0x09f0;\n t.ramshorn = 0x0264;\n t.ratio = 0x2236;\n t.rbopomofo = 0x3116;\n t.rcaron = 0x0159;\n t.rcedilla = 0x0157;\n t.rcircle = 0x24e1;\n t.rcommaaccent = 0x0157;\n t.rdblgrave = 0x0211;\n t.rdotaccent = 0x1e59;\n t.rdotbelow = 0x1e5b;\n t.rdotbelowmacron = 0x1e5d;\n t.referencemark = 0x203b;\n t.reflexsubset = 0x2286;\n t.reflexsuperset = 0x2287;\n t.registered = 0x00ae;\n t.registersans = 0xf8e8;\n t.registerserif = 0xf6da;\n t.reharabic = 0x0631;\n t.reharmenian = 0x0580;\n t.rehfinalarabic = 0xfeae;\n t.rehiragana = 0x308c;\n t.rekatakana = 0x30ec;\n t.rekatakanahalfwidth = 0xff9a;\n t.resh = 0x05e8;\n t.reshdageshhebrew = 0xfb48;\n t.reshhebrew = 0x05e8;\n t.reversedtilde = 0x223d;\n t.reviahebrew = 0x0597;\n t.reviamugrashhebrew = 0x0597;\n t.revlogicalnot = 0x2310;\n t.rfishhook = 0x027e;\n t.rfishhookreversed = 0x027f;\n t.rhabengali = 0x09dd;\n t.rhadeva = 0x095d;\n t.rho = 0x03c1;\n t.rhook = 0x027d;\n t.rhookturned = 0x027b;\n t.rhookturnedsuperior = 0x02b5;\n t.rhosymbolgreek = 0x03f1;\n t.rhotichookmod = 0x02de;\n t.rieulacirclekorean = 0x3271;\n t.rieulaparenkorean = 0x3211;\n t.rieulcirclekorean = 0x3263;\n t.rieulhieuhkorean = 0x3140;\n t.rieulkiyeokkorean = 0x313a;\n t.rieulkiyeoksioskorean = 0x3169;\n t.rieulkorean = 0x3139;\n t.rieulmieumkorean = 0x313b;\n t.rieulpansioskorean = 0x316c;\n t.rieulparenkorean = 0x3203;\n t.rieulphieuphkorean = 0x313f;\n t.rieulpieupkorean = 0x313c;\n t.rieulpieupsioskorean = 0x316b;\n t.rieulsioskorean = 0x313d;\n t.rieulthieuthkorean = 0x313e;\n t.rieultikeutkorean = 0x316a;\n t.rieulyeorinhieuhkorean = 0x316d;\n t.rightangle = 0x221f;\n t.righttackbelowcmb = 0x0319;\n t.righttriangle = 0x22bf;\n t.rihiragana = 0x308a;\n t.rikatakana = 0x30ea;\n t.rikatakanahalfwidth = 0xff98;\n t.ring = 0x02da;\n t.ringbelowcmb = 0x0325;\n t.ringcmb = 0x030a;\n t.ringhalfleft = 0x02bf;\n t.ringhalfleftarmenian = 0x0559;\n t.ringhalfleftbelowcmb = 0x031c;\n t.ringhalfleftcentered = 0x02d3;\n t.ringhalfright = 0x02be;\n t.ringhalfrightbelowcmb = 0x0339;\n t.ringhalfrightcentered = 0x02d2;\n t.rinvertedbreve = 0x0213;\n t.rittorusquare = 0x3351;\n t.rlinebelow = 0x1e5f;\n t.rlongleg = 0x027c;\n t.rlonglegturned = 0x027a;\n t.rmonospace = 0xff52;\n t.rohiragana = 0x308d;\n t.rokatakana = 0x30ed;\n t.rokatakanahalfwidth = 0xff9b;\n t.roruathai = 0x0e23;\n t.rparen = 0x24ad;\n t.rrabengali = 0x09dc;\n t.rradeva = 0x0931;\n t.rragurmukhi = 0x0a5c;\n t.rreharabic = 0x0691;\n t.rrehfinalarabic = 0xfb8d;\n t.rrvocalicbengali = 0x09e0;\n t.rrvocalicdeva = 0x0960;\n t.rrvocalicgujarati = 0x0ae0;\n t.rrvocalicvowelsignbengali = 0x09c4;\n t.rrvocalicvowelsigndeva = 0x0944;\n t.rrvocalicvowelsigngujarati = 0x0ac4;\n t.rsuperior = 0xf6f1;\n t.rtblock = 0x2590;\n t.rturned = 0x0279;\n t.rturnedsuperior = 0x02b4;\n t.ruhiragana = 0x308b;\n t.rukatakana = 0x30eb;\n t.rukatakanahalfwidth = 0xff99;\n t.rupeemarkbengali = 0x09f2;\n t.rupeesignbengali = 0x09f3;\n t.rupiah = 0xf6dd;\n t.ruthai = 0x0e24;\n t.rvocalicbengali = 0x098b;\n t.rvocalicdeva = 0x090b;\n t.rvocalicgujarati = 0x0a8b;\n t.rvocalicvowelsignbengali = 0x09c3;\n t.rvocalicvowelsigndeva = 0x0943;\n t.rvocalicvowelsigngujarati = 0x0ac3;\n t.s = 0x0073;\n t.sabengali = 0x09b8;\n t.sacute = 0x015b;\n t.sacutedotaccent = 0x1e65;\n t.sadarabic = 0x0635;\n t.sadeva = 0x0938;\n t.sadfinalarabic = 0xfeba;\n t.sadinitialarabic = 0xfebb;\n t.sadmedialarabic = 0xfebc;\n t.sagujarati = 0x0ab8;\n t.sagurmukhi = 0x0a38;\n t.sahiragana = 0x3055;\n t.sakatakana = 0x30b5;\n t.sakatakanahalfwidth = 0xff7b;\n t.sallallahoualayhewasallamarabic = 0xfdfa;\n t.samekh = 0x05e1;\n t.samekhdagesh = 0xfb41;\n t.samekhdageshhebrew = 0xfb41;\n t.samekhhebrew = 0x05e1;\n t.saraaathai = 0x0e32;\n t.saraaethai = 0x0e41;\n t.saraaimaimalaithai = 0x0e44;\n t.saraaimaimuanthai = 0x0e43;\n t.saraamthai = 0x0e33;\n t.saraathai = 0x0e30;\n t.saraethai = 0x0e40;\n t.saraiileftthai = 0xf886;\n t.saraiithai = 0x0e35;\n t.saraileftthai = 0xf885;\n t.saraithai = 0x0e34;\n t.saraothai = 0x0e42;\n t.saraueeleftthai = 0xf888;\n t.saraueethai = 0x0e37;\n t.saraueleftthai = 0xf887;\n t.sarauethai = 0x0e36;\n t.sarauthai = 0x0e38;\n t.sarauuthai = 0x0e39;\n t.sbopomofo = 0x3119;\n t.scaron = 0x0161;\n t.scarondotaccent = 0x1e67;\n t.scedilla = 0x015f;\n t.schwa = 0x0259;\n t.schwacyrillic = 0x04d9;\n t.schwadieresiscyrillic = 0x04db;\n t.schwahook = 0x025a;\n t.scircle = 0x24e2;\n t.scircumflex = 0x015d;\n t.scommaaccent = 0x0219;\n t.sdotaccent = 0x1e61;\n t.sdotbelow = 0x1e63;\n t.sdotbelowdotaccent = 0x1e69;\n t.seagullbelowcmb = 0x033c;\n t.second = 0x2033;\n t.secondtonechinese = 0x02ca;\n t.section = 0x00a7;\n t.seenarabic = 0x0633;\n t.seenfinalarabic = 0xfeb2;\n t.seeninitialarabic = 0xfeb3;\n t.seenmedialarabic = 0xfeb4;\n t.segol = 0x05b6;\n t.segol13 = 0x05b6;\n t.segol1f = 0x05b6;\n t.segol2c = 0x05b6;\n t.segolhebrew = 0x05b6;\n t.segolnarrowhebrew = 0x05b6;\n t.segolquarterhebrew = 0x05b6;\n t.segoltahebrew = 0x0592;\n t.segolwidehebrew = 0x05b6;\n t.seharmenian = 0x057d;\n t.sehiragana = 0x305b;\n t.sekatakana = 0x30bb;\n t.sekatakanahalfwidth = 0xff7e;\n t.semicolon = 0x003b;\n t.semicolonarabic = 0x061b;\n t.semicolonmonospace = 0xff1b;\n t.semicolonsmall = 0xfe54;\n t.semivoicedmarkkana = 0x309c;\n t.semivoicedmarkkanahalfwidth = 0xff9f;\n t.sentisquare = 0x3322;\n t.sentosquare = 0x3323;\n t.seven = 0x0037;\n t.sevenarabic = 0x0667;\n t.sevenbengali = 0x09ed;\n t.sevencircle = 0x2466;\n t.sevencircleinversesansserif = 0x2790;\n t.sevendeva = 0x096d;\n t.seveneighths = 0x215e;\n t.sevengujarati = 0x0aed;\n t.sevengurmukhi = 0x0a6d;\n t.sevenhackarabic = 0x0667;\n t.sevenhangzhou = 0x3027;\n t.sevenideographicparen = 0x3226;\n t.seveninferior = 0x2087;\n t.sevenmonospace = 0xff17;\n t.sevenoldstyle = 0xf737;\n t.sevenparen = 0x247a;\n t.sevenperiod = 0x248e;\n t.sevenpersian = 0x06f7;\n t.sevenroman = 0x2176;\n t.sevensuperior = 0x2077;\n t.seventeencircle = 0x2470;\n t.seventeenparen = 0x2484;\n t.seventeenperiod = 0x2498;\n t.seventhai = 0x0e57;\n t.sfthyphen = 0x00ad;\n t.shaarmenian = 0x0577;\n t.shabengali = 0x09b6;\n t.shacyrillic = 0x0448;\n t.shaddaarabic = 0x0651;\n t.shaddadammaarabic = 0xfc61;\n t.shaddadammatanarabic = 0xfc5e;\n t.shaddafathaarabic = 0xfc60;\n t.shaddakasraarabic = 0xfc62;\n t.shaddakasratanarabic = 0xfc5f;\n t.shade = 0x2592;\n t.shadedark = 0x2593;\n t.shadelight = 0x2591;\n t.shademedium = 0x2592;\n t.shadeva = 0x0936;\n t.shagujarati = 0x0ab6;\n t.shagurmukhi = 0x0a36;\n t.shalshelethebrew = 0x0593;\n t.shbopomofo = 0x3115;\n t.shchacyrillic = 0x0449;\n t.sheenarabic = 0x0634;\n t.sheenfinalarabic = 0xfeb6;\n t.sheeninitialarabic = 0xfeb7;\n t.sheenmedialarabic = 0xfeb8;\n t.sheicoptic = 0x03e3;\n t.sheqel = 0x20aa;\n t.sheqelhebrew = 0x20aa;\n t.sheva = 0x05b0;\n t.sheva115 = 0x05b0;\n t.sheva15 = 0x05b0;\n t.sheva22 = 0x05b0;\n t.sheva2e = 0x05b0;\n t.shevahebrew = 0x05b0;\n t.shevanarrowhebrew = 0x05b0;\n t.shevaquarterhebrew = 0x05b0;\n t.shevawidehebrew = 0x05b0;\n t.shhacyrillic = 0x04bb;\n t.shimacoptic = 0x03ed;\n t.shin = 0x05e9;\n t.shindagesh = 0xfb49;\n t.shindageshhebrew = 0xfb49;\n t.shindageshshindot = 0xfb2c;\n t.shindageshshindothebrew = 0xfb2c;\n t.shindageshsindot = 0xfb2d;\n t.shindageshsindothebrew = 0xfb2d;\n t.shindothebrew = 0x05c1;\n t.shinhebrew = 0x05e9;\n t.shinshindot = 0xfb2a;\n t.shinshindothebrew = 0xfb2a;\n t.shinsindot = 0xfb2b;\n t.shinsindothebrew = 0xfb2b;\n t.shook = 0x0282;\n t.sigma = 0x03c3;\n t.sigma1 = 0x03c2;\n t.sigmafinal = 0x03c2;\n t.sigmalunatesymbolgreek = 0x03f2;\n t.sihiragana = 0x3057;\n t.sikatakana = 0x30b7;\n t.sikatakanahalfwidth = 0xff7c;\n t.siluqhebrew = 0x05bd;\n t.siluqlefthebrew = 0x05bd;\n t.similar = 0x223c;\n t.sindothebrew = 0x05c2;\n t.siosacirclekorean = 0x3274;\n t.siosaparenkorean = 0x3214;\n t.sioscieuckorean = 0x317e;\n t.sioscirclekorean = 0x3266;\n t.sioskiyeokkorean = 0x317a;\n t.sioskorean = 0x3145;\n t.siosnieunkorean = 0x317b;\n t.siosparenkorean = 0x3206;\n t.siospieupkorean = 0x317d;\n t.siostikeutkorean = 0x317c;\n t.six = 0x0036;\n t.sixarabic = 0x0666;\n t.sixbengali = 0x09ec;\n t.sixcircle = 0x2465;\n t.sixcircleinversesansserif = 0x278f;\n t.sixdeva = 0x096c;\n t.sixgujarati = 0x0aec;\n t.sixgurmukhi = 0x0a6c;\n t.sixhackarabic = 0x0666;\n t.sixhangzhou = 0x3026;\n t.sixideographicparen = 0x3225;\n t.sixinferior = 0x2086;\n t.sixmonospace = 0xff16;\n t.sixoldstyle = 0xf736;\n t.sixparen = 0x2479;\n t.sixperiod = 0x248d;\n t.sixpersian = 0x06f6;\n t.sixroman = 0x2175;\n t.sixsuperior = 0x2076;\n t.sixteencircle = 0x246f;\n t.sixteencurrencydenominatorbengali = 0x09f9;\n t.sixteenparen = 0x2483;\n t.sixteenperiod = 0x2497;\n t.sixthai = 0x0e56;\n t.slash = 0x002f;\n t.slashmonospace = 0xff0f;\n t.slong = 0x017f;\n t.slongdotaccent = 0x1e9b;\n t.smileface = 0x263a;\n t.smonospace = 0xff53;\n t.sofpasuqhebrew = 0x05c3;\n t.softhyphen = 0x00ad;\n t.softsigncyrillic = 0x044c;\n t.sohiragana = 0x305d;\n t.sokatakana = 0x30bd;\n t.sokatakanahalfwidth = 0xff7f;\n t.soliduslongoverlaycmb = 0x0338;\n t.solidusshortoverlaycmb = 0x0337;\n t.sorusithai = 0x0e29;\n t.sosalathai = 0x0e28;\n t.sosothai = 0x0e0b;\n t.sosuathai = 0x0e2a;\n t.space = 0x0020;\n t.spacehackarabic = 0x0020;\n t.spade = 0x2660;\n t.spadesuitblack = 0x2660;\n t.spadesuitwhite = 0x2664;\n t.sparen = 0x24ae;\n t.squarebelowcmb = 0x033b;\n t.squarecc = 0x33c4;\n t.squarecm = 0x339d;\n t.squarediagonalcrosshatchfill = 0x25a9;\n t.squarehorizontalfill = 0x25a4;\n t.squarekg = 0x338f;\n t.squarekm = 0x339e;\n t.squarekmcapital = 0x33ce;\n t.squareln = 0x33d1;\n t.squarelog = 0x33d2;\n t.squaremg = 0x338e;\n t.squaremil = 0x33d5;\n t.squaremm = 0x339c;\n t.squaremsquared = 0x33a1;\n t.squareorthogonalcrosshatchfill = 0x25a6;\n t.squareupperlefttolowerrightfill = 0x25a7;\n t.squareupperrighttolowerleftfill = 0x25a8;\n t.squareverticalfill = 0x25a5;\n t.squarewhitewithsmallblack = 0x25a3;\n t.srsquare = 0x33db;\n t.ssabengali = 0x09b7;\n t.ssadeva = 0x0937;\n t.ssagujarati = 0x0ab7;\n t.ssangcieuckorean = 0x3149;\n t.ssanghieuhkorean = 0x3185;\n t.ssangieungkorean = 0x3180;\n t.ssangkiyeokkorean = 0x3132;\n t.ssangnieunkorean = 0x3165;\n t.ssangpieupkorean = 0x3143;\n t.ssangsioskorean = 0x3146;\n t.ssangtikeutkorean = 0x3138;\n t.ssuperior = 0xf6f2;\n t.sterling = 0x00a3;\n t.sterlingmonospace = 0xffe1;\n t.strokelongoverlaycmb = 0x0336;\n t.strokeshortoverlaycmb = 0x0335;\n t.subset = 0x2282;\n t.subsetnotequal = 0x228a;\n t.subsetorequal = 0x2286;\n t.succeeds = 0x227b;\n t.suchthat = 0x220b;\n t.suhiragana = 0x3059;\n t.sukatakana = 0x30b9;\n t.sukatakanahalfwidth = 0xff7d;\n t.sukunarabic = 0x0652;\n t.summation = 0x2211;\n t.sun = 0x263c;\n t.superset = 0x2283;\n t.supersetnotequal = 0x228b;\n t.supersetorequal = 0x2287;\n t.svsquare = 0x33dc;\n t.syouwaerasquare = 0x337c;\n t.t = 0x0074;\n t.tabengali = 0x09a4;\n t.tackdown = 0x22a4;\n t.tackleft = 0x22a3;\n t.tadeva = 0x0924;\n t.tagujarati = 0x0aa4;\n t.tagurmukhi = 0x0a24;\n t.taharabic = 0x0637;\n t.tahfinalarabic = 0xfec2;\n t.tahinitialarabic = 0xfec3;\n t.tahiragana = 0x305f;\n t.tahmedialarabic = 0xfec4;\n t.taisyouerasquare = 0x337d;\n t.takatakana = 0x30bf;\n t.takatakanahalfwidth = 0xff80;\n t.tatweelarabic = 0x0640;\n t.tau = 0x03c4;\n t.tav = 0x05ea;\n t.tavdages = 0xfb4a;\n t.tavdagesh = 0xfb4a;\n t.tavdageshhebrew = 0xfb4a;\n t.tavhebrew = 0x05ea;\n t.tbar = 0x0167;\n t.tbopomofo = 0x310a;\n t.tcaron = 0x0165;\n t.tccurl = 0x02a8;\n t.tcedilla = 0x0163;\n t.tcheharabic = 0x0686;\n t.tchehfinalarabic = 0xfb7b;\n t.tchehinitialarabic = 0xfb7c;\n t.tchehmedialarabic = 0xfb7d;\n t.tcircle = 0x24e3;\n t.tcircumflexbelow = 0x1e71;\n t.tcommaaccent = 0x0163;\n t.tdieresis = 0x1e97;\n t.tdotaccent = 0x1e6b;\n t.tdotbelow = 0x1e6d;\n t.tecyrillic = 0x0442;\n t.tedescendercyrillic = 0x04ad;\n t.teharabic = 0x062a;\n t.tehfinalarabic = 0xfe96;\n t.tehhahinitialarabic = 0xfca2;\n t.tehhahisolatedarabic = 0xfc0c;\n t.tehinitialarabic = 0xfe97;\n t.tehiragana = 0x3066;\n t.tehjeeminitialarabic = 0xfca1;\n t.tehjeemisolatedarabic = 0xfc0b;\n t.tehmarbutaarabic = 0x0629;\n t.tehmarbutafinalarabic = 0xfe94;\n t.tehmedialarabic = 0xfe98;\n t.tehmeeminitialarabic = 0xfca4;\n t.tehmeemisolatedarabic = 0xfc0e;\n t.tehnoonfinalarabic = 0xfc73;\n t.tekatakana = 0x30c6;\n t.tekatakanahalfwidth = 0xff83;\n t.telephone = 0x2121;\n t.telephoneblack = 0x260e;\n t.telishagedolahebrew = 0x05a0;\n t.telishaqetanahebrew = 0x05a9;\n t.tencircle = 0x2469;\n t.tenideographicparen = 0x3229;\n t.tenparen = 0x247d;\n t.tenperiod = 0x2491;\n t.tenroman = 0x2179;\n t.tesh = 0x02a7;\n t.tet = 0x05d8;\n t.tetdagesh = 0xfb38;\n t.tetdageshhebrew = 0xfb38;\n t.tethebrew = 0x05d8;\n t.tetsecyrillic = 0x04b5;\n t.tevirhebrew = 0x059b;\n t.tevirlefthebrew = 0x059b;\n t.thabengali = 0x09a5;\n t.thadeva = 0x0925;\n t.thagujarati = 0x0aa5;\n t.thagurmukhi = 0x0a25;\n t.thalarabic = 0x0630;\n t.thalfinalarabic = 0xfeac;\n t.thanthakhatlowleftthai = 0xf898;\n t.thanthakhatlowrightthai = 0xf897;\n t.thanthakhatthai = 0x0e4c;\n t.thanthakhatupperleftthai = 0xf896;\n t.theharabic = 0x062b;\n t.thehfinalarabic = 0xfe9a;\n t.thehinitialarabic = 0xfe9b;\n t.thehmedialarabic = 0xfe9c;\n t.thereexists = 0x2203;\n t.therefore = 0x2234;\n t.theta = 0x03b8;\n t.theta1 = 0x03d1;\n t.thetasymbolgreek = 0x03d1;\n t.thieuthacirclekorean = 0x3279;\n t.thieuthaparenkorean = 0x3219;\n t.thieuthcirclekorean = 0x326b;\n t.thieuthkorean = 0x314c;\n t.thieuthparenkorean = 0x320b;\n t.thirteencircle = 0x246c;\n t.thirteenparen = 0x2480;\n t.thirteenperiod = 0x2494;\n t.thonangmonthothai = 0x0e11;\n t.thook = 0x01ad;\n t.thophuthaothai = 0x0e12;\n t.thorn = 0x00fe;\n t.thothahanthai = 0x0e17;\n t.thothanthai = 0x0e10;\n t.thothongthai = 0x0e18;\n t.thothungthai = 0x0e16;\n t.thousandcyrillic = 0x0482;\n t.thousandsseparatorarabic = 0x066c;\n t.thousandsseparatorpersian = 0x066c;\n t.three = 0x0033;\n t.threearabic = 0x0663;\n t.threebengali = 0x09e9;\n t.threecircle = 0x2462;\n t.threecircleinversesansserif = 0x278c;\n t.threedeva = 0x0969;\n t.threeeighths = 0x215c;\n t.threegujarati = 0x0ae9;\n t.threegurmukhi = 0x0a69;\n t.threehackarabic = 0x0663;\n t.threehangzhou = 0x3023;\n t.threeideographicparen = 0x3222;\n t.threeinferior = 0x2083;\n t.threemonospace = 0xff13;\n t.threenumeratorbengali = 0x09f6;\n t.threeoldstyle = 0xf733;\n t.threeparen = 0x2476;\n t.threeperiod = 0x248a;\n t.threepersian = 0x06f3;\n t.threequarters = 0x00be;\n t.threequartersemdash = 0xf6de;\n t.threeroman = 0x2172;\n t.threesuperior = 0x00b3;\n t.threethai = 0x0e53;\n t.thzsquare = 0x3394;\n t.tihiragana = 0x3061;\n t.tikatakana = 0x30c1;\n t.tikatakanahalfwidth = 0xff81;\n t.tikeutacirclekorean = 0x3270;\n t.tikeutaparenkorean = 0x3210;\n t.tikeutcirclekorean = 0x3262;\n t.tikeutkorean = 0x3137;\n t.tikeutparenkorean = 0x3202;\n t.tilde = 0x02dc;\n t.tildebelowcmb = 0x0330;\n t.tildecmb = 0x0303;\n t.tildecomb = 0x0303;\n t.tildedoublecmb = 0x0360;\n t.tildeoperator = 0x223c;\n t.tildeoverlaycmb = 0x0334;\n t.tildeverticalcmb = 0x033e;\n t.timescircle = 0x2297;\n t.tipehahebrew = 0x0596;\n t.tipehalefthebrew = 0x0596;\n t.tippigurmukhi = 0x0a70;\n t.titlocyrilliccmb = 0x0483;\n t.tiwnarmenian = 0x057f;\n t.tlinebelow = 0x1e6f;\n t.tmonospace = 0xff54;\n t.toarmenian = 0x0569;\n t.tohiragana = 0x3068;\n t.tokatakana = 0x30c8;\n t.tokatakanahalfwidth = 0xff84;\n t.tonebarextrahighmod = 0x02e5;\n t.tonebarextralowmod = 0x02e9;\n t.tonebarhighmod = 0x02e6;\n t.tonebarlowmod = 0x02e8;\n t.tonebarmidmod = 0x02e7;\n t.tonefive = 0x01bd;\n t.tonesix = 0x0185;\n t.tonetwo = 0x01a8;\n t.tonos = 0x0384;\n t.tonsquare = 0x3327;\n t.topatakthai = 0x0e0f;\n t.tortoiseshellbracketleft = 0x3014;\n t.tortoiseshellbracketleftsmall = 0xfe5d;\n t.tortoiseshellbracketleftvertical = 0xfe39;\n t.tortoiseshellbracketright = 0x3015;\n t.tortoiseshellbracketrightsmall = 0xfe5e;\n t.tortoiseshellbracketrightvertical = 0xfe3a;\n t.totaothai = 0x0e15;\n t.tpalatalhook = 0x01ab;\n t.tparen = 0x24af;\n t.trademark = 0x2122;\n t.trademarksans = 0xf8ea;\n t.trademarkserif = 0xf6db;\n t.tretroflexhook = 0x0288;\n t.triagdn = 0x25bc;\n t.triaglf = 0x25c4;\n t.triagrt = 0x25ba;\n t.triagup = 0x25b2;\n t.ts = 0x02a6;\n t.tsadi = 0x05e6;\n t.tsadidagesh = 0xfb46;\n t.tsadidageshhebrew = 0xfb46;\n t.tsadihebrew = 0x05e6;\n t.tsecyrillic = 0x0446;\n t.tsere = 0x05b5;\n t.tsere12 = 0x05b5;\n t.tsere1e = 0x05b5;\n t.tsere2b = 0x05b5;\n t.tserehebrew = 0x05b5;\n t.tserenarrowhebrew = 0x05b5;\n t.tserequarterhebrew = 0x05b5;\n t.tserewidehebrew = 0x05b5;\n t.tshecyrillic = 0x045b;\n t.tsuperior = 0xf6f3;\n t.ttabengali = 0x099f;\n t.ttadeva = 0x091f;\n t.ttagujarati = 0x0a9f;\n t.ttagurmukhi = 0x0a1f;\n t.tteharabic = 0x0679;\n t.ttehfinalarabic = 0xfb67;\n t.ttehinitialarabic = 0xfb68;\n t.ttehmedialarabic = 0xfb69;\n t.tthabengali = 0x09a0;\n t.tthadeva = 0x0920;\n t.tthagujarati = 0x0aa0;\n t.tthagurmukhi = 0x0a20;\n t.tturned = 0x0287;\n t.tuhiragana = 0x3064;\n t.tukatakana = 0x30c4;\n t.tukatakanahalfwidth = 0xff82;\n t.tusmallhiragana = 0x3063;\n t.tusmallkatakana = 0x30c3;\n t.tusmallkatakanahalfwidth = 0xff6f;\n t.twelvecircle = 0x246b;\n t.twelveparen = 0x247f;\n t.twelveperiod = 0x2493;\n t.twelveroman = 0x217b;\n t.twentycircle = 0x2473;\n t.twentyhangzhou = 0x5344;\n t.twentyparen = 0x2487;\n t.twentyperiod = 0x249b;\n t.two = 0x0032;\n t.twoarabic = 0x0662;\n t.twobengali = 0x09e8;\n t.twocircle = 0x2461;\n t.twocircleinversesansserif = 0x278b;\n t.twodeva = 0x0968;\n t.twodotenleader = 0x2025;\n t.twodotleader = 0x2025;\n t.twodotleadervertical = 0xfe30;\n t.twogujarati = 0x0ae8;\n t.twogurmukhi = 0x0a68;\n t.twohackarabic = 0x0662;\n t.twohangzhou = 0x3022;\n t.twoideographicparen = 0x3221;\n t.twoinferior = 0x2082;\n t.twomonospace = 0xff12;\n t.twonumeratorbengali = 0x09f5;\n t.twooldstyle = 0xf732;\n t.twoparen = 0x2475;\n t.twoperiod = 0x2489;\n t.twopersian = 0x06f2;\n t.tworoman = 0x2171;\n t.twostroke = 0x01bb;\n t.twosuperior = 0x00b2;\n t.twothai = 0x0e52;\n t.twothirds = 0x2154;\n t.u = 0x0075;\n t.uacute = 0x00fa;\n t.ubar = 0x0289;\n t.ubengali = 0x0989;\n t.ubopomofo = 0x3128;\n t.ubreve = 0x016d;\n t.ucaron = 0x01d4;\n t.ucircle = 0x24e4;\n t.ucircumflex = 0x00fb;\n t.ucircumflexbelow = 0x1e77;\n t.ucyrillic = 0x0443;\n t.udattadeva = 0x0951;\n t.udblacute = 0x0171;\n t.udblgrave = 0x0215;\n t.udeva = 0x0909;\n t.udieresis = 0x00fc;\n t.udieresisacute = 0x01d8;\n t.udieresisbelow = 0x1e73;\n t.udieresiscaron = 0x01da;\n t.udieresiscyrillic = 0x04f1;\n t.udieresisgrave = 0x01dc;\n t.udieresismacron = 0x01d6;\n t.udotbelow = 0x1ee5;\n t.ugrave = 0x00f9;\n t.ugujarati = 0x0a89;\n t.ugurmukhi = 0x0a09;\n t.uhiragana = 0x3046;\n t.uhookabove = 0x1ee7;\n t.uhorn = 0x01b0;\n t.uhornacute = 0x1ee9;\n t.uhorndotbelow = 0x1ef1;\n t.uhorngrave = 0x1eeb;\n t.uhornhookabove = 0x1eed;\n t.uhorntilde = 0x1eef;\n t.uhungarumlaut = 0x0171;\n t.uhungarumlautcyrillic = 0x04f3;\n t.uinvertedbreve = 0x0217;\n t.ukatakana = 0x30a6;\n t.ukatakanahalfwidth = 0xff73;\n t.ukcyrillic = 0x0479;\n t.ukorean = 0x315c;\n t.umacron = 0x016b;\n t.umacroncyrillic = 0x04ef;\n t.umacrondieresis = 0x1e7b;\n t.umatragurmukhi = 0x0a41;\n t.umonospace = 0xff55;\n t.underscore = 0x005f;\n t.underscoredbl = 0x2017;\n t.underscoremonospace = 0xff3f;\n t.underscorevertical = 0xfe33;\n t.underscorewavy = 0xfe4f;\n t.union = 0x222a;\n t.universal = 0x2200;\n t.uogonek = 0x0173;\n t.uparen = 0x24b0;\n t.upblock = 0x2580;\n t.upperdothebrew = 0x05c4;\n t.upsilon = 0x03c5;\n t.upsilondieresis = 0x03cb;\n t.upsilondieresistonos = 0x03b0;\n t.upsilonlatin = 0x028a;\n t.upsilontonos = 0x03cd;\n t.uptackbelowcmb = 0x031d;\n t.uptackmod = 0x02d4;\n t.uragurmukhi = 0x0a73;\n t.uring = 0x016f;\n t.ushortcyrillic = 0x045e;\n t.usmallhiragana = 0x3045;\n t.usmallkatakana = 0x30a5;\n t.usmallkatakanahalfwidth = 0xff69;\n t.ustraightcyrillic = 0x04af;\n t.ustraightstrokecyrillic = 0x04b1;\n t.utilde = 0x0169;\n t.utildeacute = 0x1e79;\n t.utildebelow = 0x1e75;\n t.uubengali = 0x098a;\n t.uudeva = 0x090a;\n t.uugujarati = 0x0a8a;\n t.uugurmukhi = 0x0a0a;\n t.uumatragurmukhi = 0x0a42;\n t.uuvowelsignbengali = 0x09c2;\n t.uuvowelsigndeva = 0x0942;\n t.uuvowelsigngujarati = 0x0ac2;\n t.uvowelsignbengali = 0x09c1;\n t.uvowelsigndeva = 0x0941;\n t.uvowelsigngujarati = 0x0ac1;\n t.v = 0x0076;\n t.vadeva = 0x0935;\n t.vagujarati = 0x0ab5;\n t.vagurmukhi = 0x0a35;\n t.vakatakana = 0x30f7;\n t.vav = 0x05d5;\n t.vavdagesh = 0xfb35;\n t.vavdagesh65 = 0xfb35;\n t.vavdageshhebrew = 0xfb35;\n t.vavhebrew = 0x05d5;\n t.vavholam = 0xfb4b;\n t.vavholamhebrew = 0xfb4b;\n t.vavvavhebrew = 0x05f0;\n t.vavyodhebrew = 0x05f1;\n t.vcircle = 0x24e5;\n t.vdotbelow = 0x1e7f;\n t.vecyrillic = 0x0432;\n t.veharabic = 0x06a4;\n t.vehfinalarabic = 0xfb6b;\n t.vehinitialarabic = 0xfb6c;\n t.vehmedialarabic = 0xfb6d;\n t.vekatakana = 0x30f9;\n t.venus = 0x2640;\n t.verticalbar = 0x007c;\n t.verticallineabovecmb = 0x030d;\n t.verticallinebelowcmb = 0x0329;\n t.verticallinelowmod = 0x02cc;\n t.verticallinemod = 0x02c8;\n t.vewarmenian = 0x057e;\n t.vhook = 0x028b;\n t.vikatakana = 0x30f8;\n t.viramabengali = 0x09cd;\n t.viramadeva = 0x094d;\n t.viramagujarati = 0x0acd;\n t.visargabengali = 0x0983;\n t.visargadeva = 0x0903;\n t.visargagujarati = 0x0a83;\n t.vmonospace = 0xff56;\n t.voarmenian = 0x0578;\n t.voicediterationhiragana = 0x309e;\n t.voicediterationkatakana = 0x30fe;\n t.voicedmarkkana = 0x309b;\n t.voicedmarkkanahalfwidth = 0xff9e;\n t.vokatakana = 0x30fa;\n t.vparen = 0x24b1;\n t.vtilde = 0x1e7d;\n t.vturned = 0x028c;\n t.vuhiragana = 0x3094;\n t.vukatakana = 0x30f4;\n t.w = 0x0077;\n t.wacute = 0x1e83;\n t.waekorean = 0x3159;\n t.wahiragana = 0x308f;\n t.wakatakana = 0x30ef;\n t.wakatakanahalfwidth = 0xff9c;\n t.wakorean = 0x3158;\n t.wasmallhiragana = 0x308e;\n t.wasmallkatakana = 0x30ee;\n t.wattosquare = 0x3357;\n t.wavedash = 0x301c;\n t.wavyunderscorevertical = 0xfe34;\n t.wawarabic = 0x0648;\n t.wawfinalarabic = 0xfeee;\n t.wawhamzaabovearabic = 0x0624;\n t.wawhamzaabovefinalarabic = 0xfe86;\n t.wbsquare = 0x33dd;\n t.wcircle = 0x24e6;\n t.wcircumflex = 0x0175;\n t.wdieresis = 0x1e85;\n t.wdotaccent = 0x1e87;\n t.wdotbelow = 0x1e89;\n t.wehiragana = 0x3091;\n t.weierstrass = 0x2118;\n t.wekatakana = 0x30f1;\n t.wekorean = 0x315e;\n t.weokorean = 0x315d;\n t.wgrave = 0x1e81;\n t.whitebullet = 0x25e6;\n t.whitecircle = 0x25cb;\n t.whitecircleinverse = 0x25d9;\n t.whitecornerbracketleft = 0x300e;\n t.whitecornerbracketleftvertical = 0xfe43;\n t.whitecornerbracketright = 0x300f;\n t.whitecornerbracketrightvertical = 0xfe44;\n t.whitediamond = 0x25c7;\n t.whitediamondcontainingblacksmalldiamond = 0x25c8;\n t.whitedownpointingsmalltriangle = 0x25bf;\n t.whitedownpointingtriangle = 0x25bd;\n t.whiteleftpointingsmalltriangle = 0x25c3;\n t.whiteleftpointingtriangle = 0x25c1;\n t.whitelenticularbracketleft = 0x3016;\n t.whitelenticularbracketright = 0x3017;\n t.whiterightpointingsmalltriangle = 0x25b9;\n t.whiterightpointingtriangle = 0x25b7;\n t.whitesmallsquare = 0x25ab;\n t.whitesmilingface = 0x263a;\n t.whitesquare = 0x25a1;\n t.whitestar = 0x2606;\n t.whitetelephone = 0x260f;\n t.whitetortoiseshellbracketleft = 0x3018;\n t.whitetortoiseshellbracketright = 0x3019;\n t.whiteuppointingsmalltriangle = 0x25b5;\n t.whiteuppointingtriangle = 0x25b3;\n t.wihiragana = 0x3090;\n t.wikatakana = 0x30f0;\n t.wikorean = 0x315f;\n t.wmonospace = 0xff57;\n t.wohiragana = 0x3092;\n t.wokatakana = 0x30f2;\n t.wokatakanahalfwidth = 0xff66;\n t.won = 0x20a9;\n t.wonmonospace = 0xffe6;\n t.wowaenthai = 0x0e27;\n t.wparen = 0x24b2;\n t.wring = 0x1e98;\n t.wsuperior = 0x02b7;\n t.wturned = 0x028d;\n t.wynn = 0x01bf;\n t.x = 0x0078;\n t.xabovecmb = 0x033d;\n t.xbopomofo = 0x3112;\n t.xcircle = 0x24e7;\n t.xdieresis = 0x1e8d;\n t.xdotaccent = 0x1e8b;\n t.xeharmenian = 0x056d;\n t.xi = 0x03be;\n t.xmonospace = 0xff58;\n t.xparen = 0x24b3;\n t.xsuperior = 0x02e3;\n t.y = 0x0079;\n t.yaadosquare = 0x334e;\n t.yabengali = 0x09af;\n t.yacute = 0x00fd;\n t.yadeva = 0x092f;\n t.yaekorean = 0x3152;\n t.yagujarati = 0x0aaf;\n t.yagurmukhi = 0x0a2f;\n t.yahiragana = 0x3084;\n t.yakatakana = 0x30e4;\n t.yakatakanahalfwidth = 0xff94;\n t.yakorean = 0x3151;\n t.yamakkanthai = 0x0e4e;\n t.yasmallhiragana = 0x3083;\n t.yasmallkatakana = 0x30e3;\n t.yasmallkatakanahalfwidth = 0xff6c;\n t.yatcyrillic = 0x0463;\n t.ycircle = 0x24e8;\n t.ycircumflex = 0x0177;\n t.ydieresis = 0x00ff;\n t.ydotaccent = 0x1e8f;\n t.ydotbelow = 0x1ef5;\n t.yeharabic = 0x064a;\n t.yehbarreearabic = 0x06d2;\n t.yehbarreefinalarabic = 0xfbaf;\n t.yehfinalarabic = 0xfef2;\n t.yehhamzaabovearabic = 0x0626;\n t.yehhamzaabovefinalarabic = 0xfe8a;\n t.yehhamzaaboveinitialarabic = 0xfe8b;\n t.yehhamzaabovemedialarabic = 0xfe8c;\n t.yehinitialarabic = 0xfef3;\n t.yehmedialarabic = 0xfef4;\n t.yehmeeminitialarabic = 0xfcdd;\n t.yehmeemisolatedarabic = 0xfc58;\n t.yehnoonfinalarabic = 0xfc94;\n t.yehthreedotsbelowarabic = 0x06d1;\n t.yekorean = 0x3156;\n t.yen = 0x00a5;\n t.yenmonospace = 0xffe5;\n t.yeokorean = 0x3155;\n t.yeorinhieuhkorean = 0x3186;\n t.yerahbenyomohebrew = 0x05aa;\n t.yerahbenyomolefthebrew = 0x05aa;\n t.yericyrillic = 0x044b;\n t.yerudieresiscyrillic = 0x04f9;\n t.yesieungkorean = 0x3181;\n t.yesieungpansioskorean = 0x3183;\n t.yesieungsioskorean = 0x3182;\n t.yetivhebrew = 0x059a;\n t.ygrave = 0x1ef3;\n t.yhook = 0x01b4;\n t.yhookabove = 0x1ef7;\n t.yiarmenian = 0x0575;\n t.yicyrillic = 0x0457;\n t.yikorean = 0x3162;\n t.yinyang = 0x262f;\n t.yiwnarmenian = 0x0582;\n t.ymonospace = 0xff59;\n t.yod = 0x05d9;\n t.yoddagesh = 0xfb39;\n t.yoddageshhebrew = 0xfb39;\n t.yodhebrew = 0x05d9;\n t.yodyodhebrew = 0x05f2;\n t.yodyodpatahhebrew = 0xfb1f;\n t.yohiragana = 0x3088;\n t.yoikorean = 0x3189;\n t.yokatakana = 0x30e8;\n t.yokatakanahalfwidth = 0xff96;\n t.yokorean = 0x315b;\n t.yosmallhiragana = 0x3087;\n t.yosmallkatakana = 0x30e7;\n t.yosmallkatakanahalfwidth = 0xff6e;\n t.yotgreek = 0x03f3;\n t.yoyaekorean = 0x3188;\n t.yoyakorean = 0x3187;\n t.yoyakthai = 0x0e22;\n t.yoyingthai = 0x0e0d;\n t.yparen = 0x24b4;\n t.ypogegrammeni = 0x037a;\n t.ypogegrammenigreekcmb = 0x0345;\n t.yr = 0x01a6;\n t.yring = 0x1e99;\n t.ysuperior = 0x02b8;\n t.ytilde = 0x1ef9;\n t.yturned = 0x028e;\n t.yuhiragana = 0x3086;\n t.yuikorean = 0x318c;\n t.yukatakana = 0x30e6;\n t.yukatakanahalfwidth = 0xff95;\n t.yukorean = 0x3160;\n t.yusbigcyrillic = 0x046b;\n t.yusbigiotifiedcyrillic = 0x046d;\n t.yuslittlecyrillic = 0x0467;\n t.yuslittleiotifiedcyrillic = 0x0469;\n t.yusmallhiragana = 0x3085;\n t.yusmallkatakana = 0x30e5;\n t.yusmallkatakanahalfwidth = 0xff6d;\n t.yuyekorean = 0x318b;\n t.yuyeokorean = 0x318a;\n t.yyabengali = 0x09df;\n t.yyadeva = 0x095f;\n t.z = 0x007a;\n t.zaarmenian = 0x0566;\n t.zacute = 0x017a;\n t.zadeva = 0x095b;\n t.zagurmukhi = 0x0a5b;\n t.zaharabic = 0x0638;\n t.zahfinalarabic = 0xfec6;\n t.zahinitialarabic = 0xfec7;\n t.zahiragana = 0x3056;\n t.zahmedialarabic = 0xfec8;\n t.zainarabic = 0x0632;\n t.zainfinalarabic = 0xfeb0;\n t.zakatakana = 0x30b6;\n t.zaqefgadolhebrew = 0x0595;\n t.zaqefqatanhebrew = 0x0594;\n t.zarqahebrew = 0x0598;\n t.zayin = 0x05d6;\n t.zayindagesh = 0xfb36;\n t.zayindageshhebrew = 0xfb36;\n t.zayinhebrew = 0x05d6;\n t.zbopomofo = 0x3117;\n t.zcaron = 0x017e;\n t.zcircle = 0x24e9;\n t.zcircumflex = 0x1e91;\n t.zcurl = 0x0291;\n t.zdot = 0x017c;\n t.zdotaccent = 0x017c;\n t.zdotbelow = 0x1e93;\n t.zecyrillic = 0x0437;\n t.zedescendercyrillic = 0x0499;\n t.zedieresiscyrillic = 0x04df;\n t.zehiragana = 0x305c;\n t.zekatakana = 0x30bc;\n t.zero = 0x0030;\n t.zeroarabic = 0x0660;\n t.zerobengali = 0x09e6;\n t.zerodeva = 0x0966;\n t.zerogujarati = 0x0ae6;\n t.zerogurmukhi = 0x0a66;\n t.zerohackarabic = 0x0660;\n t.zeroinferior = 0x2080;\n t.zeromonospace = 0xff10;\n t.zerooldstyle = 0xf730;\n t.zeropersian = 0x06f0;\n t.zerosuperior = 0x2070;\n t.zerothai = 0x0e50;\n t.zerowidthjoiner = 0xfeff;\n t.zerowidthnonjoiner = 0x200c;\n t.zerowidthspace = 0x200b;\n t.zeta = 0x03b6;\n t.zhbopomofo = 0x3113;\n t.zhearmenian = 0x056a;\n t.zhebrevecyrillic = 0x04c2;\n t.zhecyrillic = 0x0436;\n t.zhedescendercyrillic = 0x0497;\n t.zhedieresiscyrillic = 0x04dd;\n t.zihiragana = 0x3058;\n t.zikatakana = 0x30b8;\n t.zinorhebrew = 0x05ae;\n t.zlinebelow = 0x1e95;\n t.zmonospace = 0xff5a;\n t.zohiragana = 0x305e;\n t.zokatakana = 0x30be;\n t.zparen = 0x24b5;\n t.zretroflexhook = 0x0290;\n t.zstroke = 0x01b6;\n t.zuhiragana = 0x305a;\n t.zukatakana = 0x30ba;\n t[\".notdef\"] = 0x0000;\n t.angbracketleftbig = 0x2329;\n t.angbracketleftBig = 0x2329;\n t.angbracketleftbigg = 0x2329;\n t.angbracketleftBigg = 0x2329;\n t.angbracketrightBig = 0x232a;\n t.angbracketrightbig = 0x232a;\n t.angbracketrightBigg = 0x232a;\n t.angbracketrightbigg = 0x232a;\n t.arrowhookleft = 0x21aa;\n t.arrowhookright = 0x21a9;\n t.arrowlefttophalf = 0x21bc;\n t.arrowleftbothalf = 0x21bd;\n t.arrownortheast = 0x2197;\n t.arrownorthwest = 0x2196;\n t.arrowrighttophalf = 0x21c0;\n t.arrowrightbothalf = 0x21c1;\n t.arrowsoutheast = 0x2198;\n t.arrowsouthwest = 0x2199;\n t.backslashbig = 0x2216;\n t.backslashBig = 0x2216;\n t.backslashBigg = 0x2216;\n t.backslashbigg = 0x2216;\n t.bardbl = 0x2016;\n t.bracehtipdownleft = 0xfe37;\n t.bracehtipdownright = 0xfe37;\n t.bracehtipupleft = 0xfe38;\n t.bracehtipupright = 0xfe38;\n t.braceleftBig = 0x007b;\n t.braceleftbig = 0x007b;\n t.braceleftbigg = 0x007b;\n t.braceleftBigg = 0x007b;\n t.bracerightBig = 0x007d;\n t.bracerightbig = 0x007d;\n t.bracerightbigg = 0x007d;\n t.bracerightBigg = 0x007d;\n t.bracketleftbig = 0x005b;\n t.bracketleftBig = 0x005b;\n t.bracketleftbigg = 0x005b;\n t.bracketleftBigg = 0x005b;\n t.bracketrightBig = 0x005d;\n t.bracketrightbig = 0x005d;\n t.bracketrightbigg = 0x005d;\n t.bracketrightBigg = 0x005d;\n t.ceilingleftbig = 0x2308;\n t.ceilingleftBig = 0x2308;\n t.ceilingleftBigg = 0x2308;\n t.ceilingleftbigg = 0x2308;\n t.ceilingrightbig = 0x2309;\n t.ceilingrightBig = 0x2309;\n t.ceilingrightbigg = 0x2309;\n t.ceilingrightBigg = 0x2309;\n t.circledotdisplay = 0x2299;\n t.circledottext = 0x2299;\n t.circlemultiplydisplay = 0x2297;\n t.circlemultiplytext = 0x2297;\n t.circleplusdisplay = 0x2295;\n t.circleplustext = 0x2295;\n t.contintegraldisplay = 0x222e;\n t.contintegraltext = 0x222e;\n t.coproductdisplay = 0x2210;\n t.coproducttext = 0x2210;\n t.floorleftBig = 0x230a;\n t.floorleftbig = 0x230a;\n t.floorleftbigg = 0x230a;\n t.floorleftBigg = 0x230a;\n t.floorrightbig = 0x230b;\n t.floorrightBig = 0x230b;\n t.floorrightBigg = 0x230b;\n t.floorrightbigg = 0x230b;\n t.hatwide = 0x0302;\n t.hatwider = 0x0302;\n t.hatwidest = 0x0302;\n t.intercal = 0x1d40;\n t.integraldisplay = 0x222b;\n t.integraltext = 0x222b;\n t.intersectiondisplay = 0x22c2;\n t.intersectiontext = 0x22c2;\n t.logicalanddisplay = 0x2227;\n t.logicalandtext = 0x2227;\n t.logicalordisplay = 0x2228;\n t.logicalortext = 0x2228;\n t.parenleftBig = 0x0028;\n t.parenleftbig = 0x0028;\n t.parenleftBigg = 0x0028;\n t.parenleftbigg = 0x0028;\n t.parenrightBig = 0x0029;\n t.parenrightbig = 0x0029;\n t.parenrightBigg = 0x0029;\n t.parenrightbigg = 0x0029;\n t.prime = 0x2032;\n t.productdisplay = 0x220f;\n t.producttext = 0x220f;\n t.radicalbig = 0x221a;\n t.radicalBig = 0x221a;\n t.radicalBigg = 0x221a;\n t.radicalbigg = 0x221a;\n t.radicalbt = 0x221a;\n t.radicaltp = 0x221a;\n t.radicalvertex = 0x221a;\n t.slashbig = 0x002f;\n t.slashBig = 0x002f;\n t.slashBigg = 0x002f;\n t.slashbigg = 0x002f;\n t.summationdisplay = 0x2211;\n t.summationtext = 0x2211;\n t.tildewide = 0x02dc;\n t.tildewider = 0x02dc;\n t.tildewidest = 0x02dc;\n t.uniondisplay = 0x22c3;\n t.unionmultidisplay = 0x228e;\n t.unionmultitext = 0x228e;\n t.unionsqdisplay = 0x2294;\n t.unionsqtext = 0x2294;\n t.uniontext = 0x22c3;\n t.vextenddouble = 0x2225;\n t.vextendsingle = 0x2223;\n});\nvar getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {\n t.space = 0x0020;\n t.a1 = 0x2701;\n t.a2 = 0x2702;\n t.a202 = 0x2703;\n t.a3 = 0x2704;\n t.a4 = 0x260e;\n t.a5 = 0x2706;\n t.a119 = 0x2707;\n t.a118 = 0x2708;\n t.a117 = 0x2709;\n t.a11 = 0x261b;\n t.a12 = 0x261e;\n t.a13 = 0x270c;\n t.a14 = 0x270d;\n t.a15 = 0x270e;\n t.a16 = 0x270f;\n t.a105 = 0x2710;\n t.a17 = 0x2711;\n t.a18 = 0x2712;\n t.a19 = 0x2713;\n t.a20 = 0x2714;\n t.a21 = 0x2715;\n t.a22 = 0x2716;\n t.a23 = 0x2717;\n t.a24 = 0x2718;\n t.a25 = 0x2719;\n t.a26 = 0x271a;\n t.a27 = 0x271b;\n t.a28 = 0x271c;\n t.a6 = 0x271d;\n t.a7 = 0x271e;\n t.a8 = 0x271f;\n t.a9 = 0x2720;\n t.a10 = 0x2721;\n t.a29 = 0x2722;\n t.a30 = 0x2723;\n t.a31 = 0x2724;\n t.a32 = 0x2725;\n t.a33 = 0x2726;\n t.a34 = 0x2727;\n t.a35 = 0x2605;\n t.a36 = 0x2729;\n t.a37 = 0x272a;\n t.a38 = 0x272b;\n t.a39 = 0x272c;\n t.a40 = 0x272d;\n t.a41 = 0x272e;\n t.a42 = 0x272f;\n t.a43 = 0x2730;\n t.a44 = 0x2731;\n t.a45 = 0x2732;\n t.a46 = 0x2733;\n t.a47 = 0x2734;\n t.a48 = 0x2735;\n t.a49 = 0x2736;\n t.a50 = 0x2737;\n t.a51 = 0x2738;\n t.a52 = 0x2739;\n t.a53 = 0x273a;\n t.a54 = 0x273b;\n t.a55 = 0x273c;\n t.a56 = 0x273d;\n t.a57 = 0x273e;\n t.a58 = 0x273f;\n t.a59 = 0x2740;\n t.a60 = 0x2741;\n t.a61 = 0x2742;\n t.a62 = 0x2743;\n t.a63 = 0x2744;\n t.a64 = 0x2745;\n t.a65 = 0x2746;\n t.a66 = 0x2747;\n t.a67 = 0x2748;\n t.a68 = 0x2749;\n t.a69 = 0x274a;\n t.a70 = 0x274b;\n t.a71 = 0x25cf;\n t.a72 = 0x274d;\n t.a73 = 0x25a0;\n t.a74 = 0x274f;\n t.a203 = 0x2750;\n t.a75 = 0x2751;\n t.a204 = 0x2752;\n t.a76 = 0x25b2;\n t.a77 = 0x25bc;\n t.a78 = 0x25c6;\n t.a79 = 0x2756;\n t.a81 = 0x25d7;\n t.a82 = 0x2758;\n t.a83 = 0x2759;\n t.a84 = 0x275a;\n t.a97 = 0x275b;\n t.a98 = 0x275c;\n t.a99 = 0x275d;\n t.a100 = 0x275e;\n t.a101 = 0x2761;\n t.a102 = 0x2762;\n t.a103 = 0x2763;\n t.a104 = 0x2764;\n t.a106 = 0x2765;\n t.a107 = 0x2766;\n t.a108 = 0x2767;\n t.a112 = 0x2663;\n t.a111 = 0x2666;\n t.a110 = 0x2665;\n t.a109 = 0x2660;\n t.a120 = 0x2460;\n t.a121 = 0x2461;\n t.a122 = 0x2462;\n t.a123 = 0x2463;\n t.a124 = 0x2464;\n t.a125 = 0x2465;\n t.a126 = 0x2466;\n t.a127 = 0x2467;\n t.a128 = 0x2468;\n t.a129 = 0x2469;\n t.a130 = 0x2776;\n t.a131 = 0x2777;\n t.a132 = 0x2778;\n t.a133 = 0x2779;\n t.a134 = 0x277a;\n t.a135 = 0x277b;\n t.a136 = 0x277c;\n t.a137 = 0x277d;\n t.a138 = 0x277e;\n t.a139 = 0x277f;\n t.a140 = 0x2780;\n t.a141 = 0x2781;\n t.a142 = 0x2782;\n t.a143 = 0x2783;\n t.a144 = 0x2784;\n t.a145 = 0x2785;\n t.a146 = 0x2786;\n t.a147 = 0x2787;\n t.a148 = 0x2788;\n t.a149 = 0x2789;\n t.a150 = 0x278a;\n t.a151 = 0x278b;\n t.a152 = 0x278c;\n t.a153 = 0x278d;\n t.a154 = 0x278e;\n t.a155 = 0x278f;\n t.a156 = 0x2790;\n t.a157 = 0x2791;\n t.a158 = 0x2792;\n t.a159 = 0x2793;\n t.a160 = 0x2794;\n t.a161 = 0x2192;\n t.a163 = 0x2194;\n t.a164 = 0x2195;\n t.a196 = 0x2798;\n t.a165 = 0x2799;\n t.a192 = 0x279a;\n t.a166 = 0x279b;\n t.a167 = 0x279c;\n t.a168 = 0x279d;\n t.a169 = 0x279e;\n t.a170 = 0x279f;\n t.a171 = 0x27a0;\n t.a172 = 0x27a1;\n t.a173 = 0x27a2;\n t.a162 = 0x27a3;\n t.a174 = 0x27a4;\n t.a175 = 0x27a5;\n t.a176 = 0x27a6;\n t.a177 = 0x27a7;\n t.a178 = 0x27a8;\n t.a179 = 0x27a9;\n t.a193 = 0x27aa;\n t.a180 = 0x27ab;\n t.a199 = 0x27ac;\n t.a181 = 0x27ad;\n t.a200 = 0x27ae;\n t.a182 = 0x27af;\n t.a201 = 0x27b1;\n t.a183 = 0x27b2;\n t.a184 = 0x27b3;\n t.a197 = 0x27b4;\n t.a185 = 0x27b5;\n t.a194 = 0x27b6;\n t.a198 = 0x27b7;\n t.a186 = 0x27b8;\n t.a195 = 0x27b9;\n t.a187 = 0x27ba;\n t.a188 = 0x27bb;\n t.a189 = 0x27bc;\n t.a190 = 0x27bd;\n t.a191 = 0x27be;\n t.a89 = 0x2768;\n t.a90 = 0x2769;\n t.a93 = 0x276a;\n t.a94 = 0x276b;\n t.a91 = 0x276c;\n t.a92 = 0x276d;\n t.a205 = 0x276e;\n t.a85 = 0x276f;\n t.a206 = 0x2770;\n t.a86 = 0x2771;\n t.a87 = 0x2772;\n t.a88 = 0x2773;\n t.a95 = 0x2774;\n t.a96 = 0x2775;\n t[\".notdef\"] = 0x0000;\n});\nexports.getGlyphsUnicode = getGlyphsUnicode;\nexports.getDingbatsGlyphsUnicode = getDingbatsGlyphsUnicode;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSupplementalGlyphMapForCalibri = exports.getSupplementalGlyphMapForArialBlack = exports.getGlyphMapForStandardFonts = exports.getSymbolsFonts = exports.getSerifFonts = exports.getNonStdFontMap = exports.getStdFontMap = void 0;\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nconst getStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.ArialNarrow = \"Helvetica\";\n  t[\"ArialNarrow-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialNarrow-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialNarrow-Italic\"] = \"Helvetica-Oblique\";\n  t.ArialBlack = \"Helvetica\";\n  t[\"ArialBlack-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialBlack-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialBlack-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-Black\"] = \"Helvetica\";\n  t[\"Arial-Black-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-Black-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Black-Italic\"] = \"Helvetica-Oblique\";\n  t.Arial = \"Helvetica\";\n  t[\"Arial-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-BoldItalicMT\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-BoldMT\"] = \"Helvetica-Bold\";\n  t[\"Arial-ItalicMT\"] = \"Helvetica-Oblique\";\n  t.ArialMT = \"Helvetica\";\n  t[\"Courier-Bold\"] = \"Courier-Bold\";\n  t[\"Courier-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"Courier-Italic\"] = \"Courier-Oblique\";\n  t.CourierNew = \"Courier\";\n  t[\"CourierNew-Bold\"] = \"Courier-Bold\";\n  t[\"CourierNew-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"CourierNew-Italic\"] = \"Courier-Oblique\";\n  t[\"CourierNewPS-BoldItalicMT\"] = \"Courier-BoldOblique\";\n  t[\"CourierNewPS-BoldMT\"] = \"Courier-Bold\";\n  t[\"CourierNewPS-ItalicMT\"] = \"Courier-Oblique\";\n  t.CourierNewPSMT = \"Courier\";\n  t.Helvetica = \"Helvetica\";\n  t[\"Helvetica-Bold\"] = \"Helvetica-Bold\";\n  t[\"Helvetica-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-BoldOblique\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Helvetica-Oblique\"] = \"Helvetica-Oblique\";\n  t[\"Symbol-Bold\"] = \"Symbol\";\n  t[\"Symbol-BoldItalic\"] = \"Symbol\";\n  t[\"Symbol-Italic\"] = \"Symbol\";\n  t.TimesNewRoman = \"Times-Roman\";\n  t[\"TimesNewRoman-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRoman-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRoman-Italic\"] = \"Times-Italic\";\n  t.TimesNewRomanPS = \"Times-Roman\";\n  t[\"TimesNewRomanPS-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldItalicMT\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldMT\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-Italic\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPS-ItalicMT\"] = \"Times-Italic\";\n  t.TimesNewRomanPSMT = \"Times-Roman\";\n  t[\"TimesNewRomanPSMT-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPSMT-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPSMT-Italic\"] = \"Times-Italic\";\n});\nexports.getStdFontMap = getStdFontMap;\nconst getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Calibri = \"Helvetica\";\n  t[\"Calibri-Bold\"] = \"Helvetica-Bold\";\n  t[\"Calibri-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Calibri-Italic\"] = \"Helvetica-Oblique\";\n  t.CenturyGothic = \"Helvetica\";\n  t[\"CenturyGothic-Bold\"] = \"Helvetica-Bold\";\n  t[\"CenturyGothic-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"CenturyGothic-Italic\"] = \"Helvetica-Oblique\";\n  t.ComicSansMS = \"Comic Sans MS\";\n  t[\"ComicSansMS-Bold\"] = \"Comic Sans MS-Bold\";\n  t[\"ComicSansMS-BoldItalic\"] = \"Comic Sans MS-BoldItalic\";\n  t[\"ComicSansMS-Italic\"] = \"Comic Sans MS-Italic\";\n  t.LucidaConsole = \"Courier\";\n  t[\"LucidaConsole-Bold\"] = \"Courier-Bold\";\n  t[\"LucidaConsole-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"LucidaConsole-Italic\"] = \"Courier-Oblique\";\n  t[\"LucidaSans-Demi\"] = \"Helvetica-Bold\";\n  t[\"MS-Gothic\"] = \"MS Gothic\";\n  t[\"MS-Gothic-Bold\"] = \"MS Gothic-Bold\";\n  t[\"MS-Gothic-BoldItalic\"] = \"MS Gothic-BoldItalic\";\n  t[\"MS-Gothic-Italic\"] = \"MS Gothic-Italic\";\n  t[\"MS-Mincho\"] = \"MS Mincho\";\n  t[\"MS-Mincho-Bold\"] = \"MS Mincho-Bold\";\n  t[\"MS-Mincho-BoldItalic\"] = \"MS Mincho-BoldItalic\";\n  t[\"MS-Mincho-Italic\"] = \"MS Mincho-Italic\";\n  t[\"MS-PGothic\"] = \"MS PGothic\";\n  t[\"MS-PGothic-Bold\"] = \"MS PGothic-Bold\";\n  t[\"MS-PGothic-BoldItalic\"] = \"MS PGothic-BoldItalic\";\n  t[\"MS-PGothic-Italic\"] = \"MS PGothic-Italic\";\n  t[\"MS-PMincho\"] = \"MS PMincho\";\n  t[\"MS-PMincho-Bold\"] = \"MS PMincho-Bold\";\n  t[\"MS-PMincho-BoldItalic\"] = \"MS PMincho-BoldItalic\";\n  t[\"MS-PMincho-Italic\"] = \"MS PMincho-Italic\";\n  t.NuptialScript = \"Times-Italic\";\n  t.SegoeUISymbol = \"Helvetica\";\n  t.Wingdings = \"ZapfDingbats\";\n  t[\"Wingdings-Regular\"] = \"ZapfDingbats\";\n});\nexports.getNonStdFontMap = getNonStdFontMap;\nconst getSerifFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Adobe Jenson\"] = true;\n  t[\"Adobe Text\"] = true;\n  t.Albertus = true;\n  t.Aldus = true;\n  t.Alexandria = true;\n  t.Algerian = true;\n  t[\"American Typewriter\"] = true;\n  t.Antiqua = true;\n  t.Apex = true;\n  t.Arno = true;\n  t.Aster = true;\n  t.Aurora = true;\n  t.Baskerville = true;\n  t.Bell = true;\n  t.Bembo = true;\n  t[\"Bembo Schoolbook\"] = true;\n  t.Benguiat = true;\n  t[\"Berkeley Old Style\"] = true;\n  t[\"Bernhard Modern\"] = true;\n  t[\"Berthold City\"] = true;\n  t.Bodoni = true;\n  t[\"Bauer Bodoni\"] = true;\n  t[\"Book Antiqua\"] = true;\n  t.Bookman = true;\n  t[\"Bordeaux Roman\"] = true;\n  t[\"Californian FB\"] = true;\n  t.Calisto = true;\n  t.Calvert = true;\n  t.Capitals = true;\n  t.Cambria = true;\n  t.Cartier = true;\n  t.Caslon = true;\n  t.Catull = true;\n  t.Centaur = true;\n  t[\"Century Old Style\"] = true;\n  t[\"Century Schoolbook\"] = true;\n  t.Chaparral = true;\n  t[\"Charis SIL\"] = true;\n  t.Cheltenham = true;\n  t[\"Cholla Slab\"] = true;\n  t.Clarendon = true;\n  t.Clearface = true;\n  t.Cochin = true;\n  t.Colonna = true;\n  t[\"Computer Modern\"] = true;\n  t[\"Concrete Roman\"] = true;\n  t.Constantia = true;\n  t[\"Cooper Black\"] = true;\n  t.Corona = true;\n  t.Ecotype = true;\n  t.Egyptienne = true;\n  t.Elephant = true;\n  t.Excelsior = true;\n  t.Fairfield = true;\n  t[\"FF Scala\"] = true;\n  t.Folkard = true;\n  t.Footlight = true;\n  t.FreeSerif = true;\n  t[\"Friz Quadrata\"] = true;\n  t.Garamond = true;\n  t.Gentium = true;\n  t.Georgia = true;\n  t.Gloucester = true;\n  t[\"Goudy Old Style\"] = true;\n  t[\"Goudy Schoolbook\"] = true;\n  t[\"Goudy Pro Font\"] = true;\n  t.Granjon = true;\n  t[\"Guardian Egyptian\"] = true;\n  t.Heather = true;\n  t.Hercules = true;\n  t[\"High Tower Text\"] = true;\n  t.Hiroshige = true;\n  t[\"Hoefler Text\"] = true;\n  t[\"Humana Serif\"] = true;\n  t.Imprint = true;\n  t[\"Ionic No. 5\"] = true;\n  t.Janson = true;\n  t.Joanna = true;\n  t.Korinna = true;\n  t.Lexicon = true;\n  t[\"Liberation Serif\"] = true;\n  t[\"Linux Libertine\"] = true;\n  t.Literaturnaya = true;\n  t.Lucida = true;\n  t[\"Lucida Bright\"] = true;\n  t.Melior = true;\n  t.Memphis = true;\n  t.Miller = true;\n  t.Minion = true;\n  t.Modern = true;\n  t[\"Mona Lisa\"] = true;\n  t[\"Mrs Eaves\"] = true;\n  t[\"MS Serif\"] = true;\n  t[\"Museo Slab\"] = true;\n  t[\"New York\"] = true;\n  t[\"Nimbus Roman\"] = true;\n  t[\"NPS Rawlinson Roadway\"] = true;\n  t.NuptialScript = true;\n  t.Palatino = true;\n  t.Perpetua = true;\n  t.Plantin = true;\n  t[\"Plantin Schoolbook\"] = true;\n  t.Playbill = true;\n  t[\"Poor Richard\"] = true;\n  t[\"Rawlinson Roadway\"] = true;\n  t.Renault = true;\n  t.Requiem = true;\n  t.Rockwell = true;\n  t.Roman = true;\n  t[\"Rotis Serif\"] = true;\n  t.Sabon = true;\n  t.Scala = true;\n  t.Seagull = true;\n  t.Sistina = true;\n  t.Souvenir = true;\n  t.STIX = true;\n  t[\"Stone Informal\"] = true;\n  t[\"Stone Serif\"] = true;\n  t.Sylfaen = true;\n  t.Times = true;\n  t.Trajan = true;\n  t[\"Trinité\"] = true;\n  t[\"Trump Mediaeval\"] = true;\n  t.Utopia = true;\n  t[\"Vale Type\"] = true;\n  t[\"Bitstream Vera\"] = true;\n  t[\"Vera Serif\"] = true;\n  t.Versailles = true;\n  t.Wanted = true;\n  t.Weiss = true;\n  t[\"Wide Latin\"] = true;\n  t.Windsor = true;\n  t.XITS = true;\n});\nexports.getSerifFonts = getSerifFonts;\nconst getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Dingbats = true;\n  t.Symbol = true;\n  t.ZapfDingbats = true;\n});\nexports.getSymbolsFonts = getSymbolsFonts;\nconst getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[2] = 10;\n  t[3] = 32;\n  t[4] = 33;\n  t[5] = 34;\n  t[6] = 35;\n  t[7] = 36;\n  t[8] = 37;\n  t[9] = 38;\n  t[10] = 39;\n  t[11] = 40;\n  t[12] = 41;\n  t[13] = 42;\n  t[14] = 43;\n  t[15] = 44;\n  t[16] = 45;\n  t[17] = 46;\n  t[18] = 47;\n  t[19] = 48;\n  t[20] = 49;\n  t[21] = 50;\n  t[22] = 51;\n  t[23] = 52;\n  t[24] = 53;\n  t[25] = 54;\n  t[26] = 55;\n  t[27] = 56;\n  t[28] = 57;\n  t[29] = 58;\n  t[30] = 894;\n  t[31] = 60;\n  t[32] = 61;\n  t[33] = 62;\n  t[34] = 63;\n  t[35] = 64;\n  t[36] = 65;\n  t[37] = 66;\n  t[38] = 67;\n  t[39] = 68;\n  t[40] = 69;\n  t[41] = 70;\n  t[42] = 71;\n  t[43] = 72;\n  t[44] = 73;\n  t[45] = 74;\n  t[46] = 75;\n  t[47] = 76;\n  t[48] = 77;\n  t[49] = 78;\n  t[50] = 79;\n  t[51] = 80;\n  t[52] = 81;\n  t[53] = 82;\n  t[54] = 83;\n  t[55] = 84;\n  t[56] = 85;\n  t[57] = 86;\n  t[58] = 87;\n  t[59] = 88;\n  t[60] = 89;\n  t[61] = 90;\n  t[62] = 91;\n  t[63] = 92;\n  t[64] = 93;\n  t[65] = 94;\n  t[66] = 95;\n  t[67] = 96;\n  t[68] = 97;\n  t[69] = 98;\n  t[70] = 99;\n  t[71] = 100;\n  t[72] = 101;\n  t[73] = 102;\n  t[74] = 103;\n  t[75] = 104;\n  t[76] = 105;\n  t[77] = 106;\n  t[78] = 107;\n  t[79] = 108;\n  t[80] = 109;\n  t[81] = 110;\n  t[82] = 111;\n  t[83] = 112;\n  t[84] = 113;\n  t[85] = 114;\n  t[86] = 115;\n  t[87] = 116;\n  t[88] = 117;\n  t[89] = 118;\n  t[90] = 119;\n  t[91] = 120;\n  t[92] = 121;\n  t[93] = 122;\n  t[94] = 123;\n  t[95] = 124;\n  t[96] = 125;\n  t[97] = 126;\n  t[98] = 196;\n  t[99] = 197;\n  t[100] = 199;\n  t[101] = 201;\n  t[102] = 209;\n  t[103] = 214;\n  t[104] = 220;\n  t[105] = 225;\n  t[106] = 224;\n  t[107] = 226;\n  t[108] = 228;\n  t[109] = 227;\n  t[110] = 229;\n  t[111] = 231;\n  t[112] = 233;\n  t[113] = 232;\n  t[114] = 234;\n  t[115] = 235;\n  t[116] = 237;\n  t[117] = 236;\n  t[118] = 238;\n  t[119] = 239;\n  t[120] = 241;\n  t[121] = 243;\n  t[122] = 242;\n  t[123] = 244;\n  t[124] = 246;\n  t[125] = 245;\n  t[126] = 250;\n  t[127] = 249;\n  t[128] = 251;\n  t[129] = 252;\n  t[130] = 8224;\n  t[131] = 176;\n  t[132] = 162;\n  t[133] = 163;\n  t[134] = 167;\n  t[135] = 8226;\n  t[136] = 182;\n  t[137] = 223;\n  t[138] = 174;\n  t[139] = 169;\n  t[140] = 8482;\n  t[141] = 180;\n  t[142] = 168;\n  t[143] = 8800;\n  t[144] = 198;\n  t[145] = 216;\n  t[146] = 8734;\n  t[147] = 177;\n  t[148] = 8804;\n  t[149] = 8805;\n  t[150] = 165;\n  t[151] = 181;\n  t[152] = 8706;\n  t[153] = 8721;\n  t[154] = 8719;\n  t[156] = 8747;\n  t[157] = 170;\n  t[158] = 186;\n  t[159] = 8486;\n  t[160] = 230;\n  t[161] = 248;\n  t[162] = 191;\n  t[163] = 161;\n  t[164] = 172;\n  t[165] = 8730;\n  t[166] = 402;\n  t[167] = 8776;\n  t[168] = 8710;\n  t[169] = 171;\n  t[170] = 187;\n  t[171] = 8230;\n  t[210] = 218;\n  t[223] = 711;\n  t[224] = 321;\n  t[225] = 322;\n  t[227] = 353;\n  t[229] = 382;\n  t[234] = 253;\n  t[252] = 263;\n  t[253] = 268;\n  t[254] = 269;\n  t[258] = 258;\n  t[260] = 260;\n  t[261] = 261;\n  t[265] = 280;\n  t[266] = 281;\n  t[268] = 283;\n  t[269] = 313;\n  t[275] = 323;\n  t[276] = 324;\n  t[278] = 328;\n  t[284] = 345;\n  t[285] = 346;\n  t[286] = 347;\n  t[292] = 367;\n  t[295] = 377;\n  t[296] = 378;\n  t[298] = 380;\n  t[305] = 963;\n  t[306] = 964;\n  t[307] = 966;\n  t[308] = 8215;\n  t[309] = 8252;\n  t[310] = 8319;\n  t[311] = 8359;\n  t[312] = 8592;\n  t[313] = 8593;\n  t[337] = 9552;\n  t[493] = 1039;\n  t[494] = 1040;\n  t[705] = 1524;\n  t[706] = 8362;\n  t[710] = 64288;\n  t[711] = 64298;\n  t[759] = 1617;\n  t[761] = 1776;\n  t[763] = 1778;\n  t[775] = 1652;\n  t[777] = 1764;\n  t[778] = 1780;\n  t[779] = 1781;\n  t[780] = 1782;\n  t[782] = 771;\n  t[783] = 64726;\n  t[786] = 8363;\n  t[788] = 8532;\n  t[790] = 768;\n  t[791] = 769;\n  t[792] = 768;\n  t[795] = 803;\n  t[797] = 64336;\n  t[798] = 64337;\n  t[799] = 64342;\n  t[800] = 64343;\n  t[801] = 64344;\n  t[802] = 64345;\n  t[803] = 64362;\n  t[804] = 64363;\n  t[805] = 64364;\n  t[2424] = 7821;\n  t[2425] = 7822;\n  t[2426] = 7823;\n  t[2427] = 7824;\n  t[2428] = 7825;\n  t[2429] = 7826;\n  t[2430] = 7827;\n  t[2433] = 7682;\n  t[2678] = 8045;\n  t[2679] = 8046;\n  t[2830] = 1552;\n  t[2838] = 686;\n  t[2840] = 751;\n  t[2842] = 753;\n  t[2843] = 754;\n  t[2844] = 755;\n  t[2846] = 757;\n  t[2856] = 767;\n  t[2857] = 848;\n  t[2858] = 849;\n  t[2862] = 853;\n  t[2863] = 854;\n  t[2864] = 855;\n  t[2865] = 861;\n  t[2866] = 862;\n  t[2906] = 7460;\n  t[2908] = 7462;\n  t[2909] = 7463;\n  t[2910] = 7464;\n  t[2912] = 7466;\n  t[2913] = 7467;\n  t[2914] = 7468;\n  t[2916] = 7470;\n  t[2917] = 7471;\n  t[2918] = 7472;\n  t[2920] = 7474;\n  t[2921] = 7475;\n  t[2922] = 7476;\n  t[2924] = 7478;\n  t[2925] = 7479;\n  t[2926] = 7480;\n  t[2928] = 7482;\n  t[2929] = 7483;\n  t[2930] = 7484;\n  t[2932] = 7486;\n  t[2933] = 7487;\n  t[2934] = 7488;\n  t[2936] = 7490;\n  t[2937] = 7491;\n  t[2938] = 7492;\n  t[2940] = 7494;\n  t[2941] = 7495;\n  t[2942] = 7496;\n  t[2944] = 7498;\n  t[2946] = 7500;\n  t[2948] = 7502;\n  t[2950] = 7504;\n  t[2951] = 7505;\n  t[2952] = 7506;\n  t[2954] = 7508;\n  t[2955] = 7509;\n  t[2956] = 7510;\n  t[2958] = 7512;\n  t[2959] = 7513;\n  t[2960] = 7514;\n  t[2962] = 7516;\n  t[2963] = 7517;\n  t[2964] = 7518;\n  t[2966] = 7520;\n  t[2967] = 7521;\n  t[2968] = 7522;\n  t[2970] = 7524;\n  t[2971] = 7525;\n  t[2972] = 7526;\n  t[2974] = 7528;\n  t[2975] = 7529;\n  t[2976] = 7530;\n  t[2978] = 1537;\n  t[2979] = 1538;\n  t[2980] = 1539;\n  t[2982] = 1549;\n  t[2983] = 1551;\n  t[2984] = 1552;\n  t[2986] = 1554;\n  t[2987] = 1555;\n  t[2988] = 1556;\n  t[2990] = 1623;\n  t[2991] = 1624;\n  t[2995] = 1775;\n  t[2999] = 1791;\n  t[3002] = 64290;\n  t[3003] = 64291;\n  t[3004] = 64292;\n  t[3006] = 64294;\n  t[3007] = 64295;\n  t[3008] = 64296;\n  t[3011] = 1900;\n  t[3014] = 8223;\n  t[3015] = 8244;\n  t[3017] = 7532;\n  t[3018] = 7533;\n  t[3019] = 7534;\n  t[3075] = 7590;\n  t[3076] = 7591;\n  t[3079] = 7594;\n  t[3080] = 7595;\n  t[3083] = 7598;\n  t[3084] = 7599;\n  t[3087] = 7602;\n  t[3088] = 7603;\n  t[3091] = 7606;\n  t[3092] = 7607;\n  t[3095] = 7610;\n  t[3096] = 7611;\n  t[3099] = 7614;\n  t[3100] = 7615;\n  t[3103] = 7618;\n  t[3104] = 7619;\n  t[3107] = 8337;\n  t[3108] = 8338;\n  t[3116] = 1884;\n  t[3119] = 1885;\n  t[3120] = 1885;\n  t[3123] = 1886;\n  t[3124] = 1886;\n  t[3127] = 1887;\n  t[3128] = 1887;\n  t[3131] = 1888;\n  t[3132] = 1888;\n  t[3135] = 1889;\n  t[3136] = 1889;\n  t[3139] = 1890;\n  t[3140] = 1890;\n  t[3143] = 1891;\n  t[3144] = 1891;\n  t[3147] = 1892;\n  t[3148] = 1892;\n  t[3153] = 580;\n  t[3154] = 581;\n  t[3157] = 584;\n  t[3158] = 585;\n  t[3161] = 588;\n  t[3162] = 589;\n  t[3165] = 891;\n  t[3166] = 892;\n  t[3169] = 1274;\n  t[3170] = 1275;\n  t[3173] = 1278;\n  t[3174] = 1279;\n  t[3181] = 7622;\n  t[3182] = 7623;\n  t[3282] = 11799;\n  t[3316] = 578;\n  t[3379] = 42785;\n  t[3393] = 1159;\n  t[3416] = 8377;\n});\nexports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;\nconst getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[227] = 322;\n  t[264] = 261;\n  t[291] = 346;\n});\nexports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;\nconst getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[1] = 32;\n  t[4] = 65;\n  t[17] = 66;\n  t[18] = 67;\n  t[24] = 68;\n  t[28] = 69;\n  t[38] = 70;\n  t[39] = 71;\n  t[44] = 72;\n  t[47] = 73;\n  t[58] = 74;\n  t[60] = 75;\n  t[62] = 76;\n  t[68] = 77;\n  t[69] = 78;\n  t[75] = 79;\n  t[87] = 80;\n  t[89] = 81;\n  t[90] = 82;\n  t[94] = 83;\n  t[100] = 84;\n  t[104] = 85;\n  t[115] = 86;\n  t[116] = 87;\n  t[121] = 88;\n  t[122] = 89;\n  t[127] = 90;\n  t[258] = 97;\n  t[268] = 261;\n  t[271] = 98;\n  t[272] = 99;\n  t[273] = 263;\n  t[282] = 100;\n  t[286] = 101;\n  t[295] = 281;\n  t[296] = 102;\n  t[336] = 103;\n  t[346] = 104;\n  t[349] = 105;\n  t[361] = 106;\n  t[364] = 107;\n  t[367] = 108;\n  t[371] = 322;\n  t[373] = 109;\n  t[374] = 110;\n  t[381] = 111;\n  t[383] = 243;\n  t[393] = 112;\n  t[395] = 113;\n  t[396] = 114;\n  t[400] = 115;\n  t[401] = 347;\n  t[410] = 116;\n  t[437] = 117;\n  t[448] = 118;\n  t[449] = 119;\n  t[454] = 120;\n  t[455] = 121;\n  t[460] = 122;\n  t[463] = 380;\n  t[853] = 44;\n  t[855] = 58;\n  t[856] = 46;\n  t[876] = 47;\n  t[878] = 45;\n  t[882] = 45;\n  t[894] = 40;\n  t[895] = 41;\n  t[896] = 91;\n  t[897] = 93;\n  t[923] = 64;\n  t[1004] = 48;\n  t[1005] = 49;\n  t[1006] = 50;\n  t[1007] = 51;\n  t[1008] = 52;\n  t[1009] = 53;\n  t[1010] = 54;\n  t[1011] = 55;\n  t[1012] = 56;\n  t[1013] = 57;\n  t[1081] = 37;\n  t[1085] = 43;\n  t[1086] = 45;\n});\nexports.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\nvar getLookupTableFactory = __w_pdfjs_require__(8).getLookupTableFactory;\nvar getSpecialPUASymbols = getLookupTableFactory(function (t) {\n t[63721] = 0x00a9;\n t[63193] = 0x00a9;\n t[63720] = 0x00ae;\n t[63194] = 0x00ae;\n t[63722] = 0x2122;\n t[63195] = 0x2122;\n t[63729] = 0x23a7;\n t[63730] = 0x23a8;\n t[63731] = 0x23a9;\n t[63740] = 0x23ab;\n t[63741] = 0x23ac;\n t[63742] = 0x23ad;\n t[63726] = 0x23a1;\n t[63727] = 0x23a2;\n t[63728] = 0x23a3;\n t[63737] = 0x23a4;\n t[63738] = 0x23a5;\n t[63739] = 0x23a6;\n t[63723] = 0x239b;\n t[63724] = 0x239c;\n t[63725] = 0x239d;\n t[63734] = 0x239e;\n t[63735] = 0x239f;\n t[63736] = 0x23a0;\n});\nfunction mapSpecialUnicodeValues(code) {\n if (code >= 0xfff0 && code <= 0xffff) {\n  return 0;\n } else if (code >= 0xf600 && code <= 0xf8ff) {\n  return getSpecialPUASymbols()[code] || code;\n } else if (code === 0x00ad) {\n  return 0x002d;\n }\n return code;\n}\nfunction getUnicodeForGlyph(name, glyphsUnicodeMap) {\n var unicode = glyphsUnicodeMap[name];\n if (unicode !== undefined) {\n  return unicode;\n }\n if (!name) {\n  return -1;\n }\n if (name[0] === \"u\") {\n  var nameLen = name.length, hexStr;\n  if (nameLen === 7 && name[1] === \"n\" && name[2] === \"i\") {\n   hexStr = name.substring(3);\n  } else if (nameLen >= 5 && nameLen <= 7) {\n   hexStr = name.substring(1);\n  } else {\n   return -1;\n  }\n  if (hexStr === hexStr.toUpperCase()) {\n   unicode = parseInt(hexStr, 16);\n   if (unicode >= 0) {\n    return unicode;\n   }\n  }\n }\n return -1;\n}\nvar UnicodeRanges = [\n {\n  begin: 0x0000,\n  end: 0x007f\n },\n {\n  begin: 0x0080,\n  end: 0x00ff\n },\n {\n  begin: 0x0100,\n  end: 0x017f\n },\n {\n  begin: 0x0180,\n  end: 0x024f\n },\n {\n  begin: 0x0250,\n  end: 0x02af\n },\n {\n  begin: 0x02b0,\n  end: 0x02ff\n },\n {\n  begin: 0x0300,\n  end: 0x036f\n },\n {\n  begin: 0x0370,\n  end: 0x03ff\n },\n {\n  begin: 0x2c80,\n  end: 0x2cff\n },\n {\n  begin: 0x0400,\n  end: 0x04ff\n },\n {\n  begin: 0x0530,\n  end: 0x058f\n },\n {\n  begin: 0x0590,\n  end: 0x05ff\n },\n {\n  begin: 0xa500,\n  end: 0xa63f\n },\n {\n  begin: 0x0600,\n  end: 0x06ff\n },\n {\n  begin: 0x07c0,\n  end: 0x07ff\n },\n {\n  begin: 0x0900,\n  end: 0x097f\n },\n {\n  begin: 0x0980,\n  end: 0x09ff\n },\n {\n  begin: 0x0a00,\n  end: 0x0a7f\n },\n {\n  begin: 0x0a80,\n  end: 0x0aff\n },\n {\n  begin: 0x0b00,\n  end: 0x0b7f\n },\n {\n  begin: 0x0b80,\n  end: 0x0bff\n },\n {\n  begin: 0x0c00,\n  end: 0x0c7f\n },\n {\n  begin: 0x0c80,\n  end: 0x0cff\n },\n {\n  begin: 0x0d00,\n  end: 0x0d7f\n },\n {\n  begin: 0x0e00,\n  end: 0x0e7f\n },\n {\n  begin: 0x0e80,\n  end: 0x0eff\n },\n {\n  begin: 0x10a0,\n  end: 0x10ff\n },\n {\n  begin: 0x1b00,\n  end: 0x1b7f\n },\n {\n  begin: 0x1100,\n  end: 0x11ff\n },\n {\n  begin: 0x1e00,\n  end: 0x1eff\n },\n {\n  begin: 0x1f00,\n  end: 0x1fff\n },\n {\n  begin: 0x2000,\n  end: 0x206f\n },\n {\n  begin: 0x2070,\n  end: 0x209f\n },\n {\n  begin: 0x20a0,\n  end: 0x20cf\n },\n {\n  begin: 0x20d0,\n  end: 0x20ff\n },\n {\n  begin: 0x2100,\n  end: 0x214f\n },\n {\n  begin: 0x2150,\n  end: 0x218f\n },\n {\n  begin: 0x2190,\n  end: 0x21ff\n },\n {\n  begin: 0x2200,\n  end: 0x22ff\n },\n {\n  begin: 0x2300,\n  end: 0x23ff\n },\n {\n  begin: 0x2400,\n  end: 0x243f\n },\n {\n  begin: 0x2440,\n  end: 0x245f\n },\n {\n  begin: 0x2460,\n  end: 0x24ff\n },\n {\n  begin: 0x2500,\n  end: 0x257f\n },\n {\n  begin: 0x2580,\n  end: 0x259f\n },\n {\n  begin: 0x25a0,\n  end: 0x25ff\n },\n {\n  begin: 0x2600,\n  end: 0x26ff\n },\n {\n  begin: 0x2700,\n  end: 0x27bf\n },\n {\n  begin: 0x3000,\n  end: 0x303f\n },\n {\n  begin: 0x3040,\n  end: 0x309f\n },\n {\n  begin: 0x30a0,\n  end: 0x30ff\n },\n {\n  begin: 0x3100,\n  end: 0x312f\n },\n {\n  begin: 0x3130,\n  end: 0x318f\n },\n {\n  begin: 0xa840,\n  end: 0xa87f\n },\n {\n  begin: 0x3200,\n  end: 0x32ff\n },\n {\n  begin: 0x3300,\n  end: 0x33ff\n },\n {\n  begin: 0xac00,\n  end: 0xd7af\n },\n {\n  begin: 0xd800,\n  end: 0xdfff\n },\n {\n  begin: 0x10900,\n  end: 0x1091f\n },\n {\n  begin: 0x4e00,\n  end: 0x9fff\n },\n {\n  begin: 0xe000,\n  end: 0xf8ff\n },\n {\n  begin: 0x31c0,\n  end: 0x31ef\n },\n {\n  begin: 0xfb00,\n  end: 0xfb4f\n },\n {\n  begin: 0xfb50,\n  end: 0xfdff\n },\n {\n  begin: 0xfe20,\n  end: 0xfe2f\n },\n {\n  begin: 0xfe10,\n  end: 0xfe1f\n },\n {\n  begin: 0xfe50,\n  end: 0xfe6f\n },\n {\n  begin: 0xfe70,\n  end: 0xfeff\n },\n {\n  begin: 0xff00,\n  end: 0xffef\n },\n {\n  begin: 0xfff0,\n  end: 0xffff\n },\n {\n  begin: 0x0f00,\n  end: 0x0fff\n },\n {\n  begin: 0x0700,\n  end: 0x074f\n },\n {\n  begin: 0x0780,\n  end: 0x07bf\n },\n {\n  begin: 0x0d80,\n  end: 0x0dff\n },\n {\n  begin: 0x1000,\n  end: 0x109f\n },\n {\n  begin: 0x1200,\n  end: 0x137f\n },\n {\n  begin: 0x13a0,\n  end: 0x13ff\n },\n {\n  begin: 0x1400,\n  end: 0x167f\n },\n {\n  begin: 0x1680,\n  end: 0x169f\n },\n {\n  begin: 0x16a0,\n  end: 0x16ff\n },\n {\n  begin: 0x1780,\n  end: 0x17ff\n },\n {\n  begin: 0x1800,\n  end: 0x18af\n },\n {\n  begin: 0x2800,\n  end: 0x28ff\n },\n {\n  begin: 0xa000,\n  end: 0xa48f\n },\n {\n  begin: 0x1700,\n  end: 0x171f\n },\n {\n  begin: 0x10300,\n  end: 0x1032f\n },\n {\n  begin: 0x10330,\n  end: 0x1034f\n },\n {\n  begin: 0x10400,\n  end: 0x1044f\n },\n {\n  begin: 0x1d000,\n  end: 0x1d0ff\n },\n {\n  begin: 0x1d400,\n  end: 0x1d7ff\n },\n {\n  begin: 0xff000,\n  end: 0xffffd\n },\n {\n  begin: 0xfe00,\n  end: 0xfe0f\n },\n {\n  begin: 0xe0000,\n  end: 0xe007f\n },\n {\n  begin: 0x1900,\n  end: 0x194f\n },\n {\n  begin: 0x1950,\n  end: 0x197f\n },\n {\n  begin: 0x1980,\n  end: 0x19df\n },\n {\n  begin: 0x1a00,\n  end: 0x1a1f\n },\n {\n  begin: 0x2c00,\n  end: 0x2c5f\n },\n {\n  begin: 0x2d30,\n  end: 0x2d7f\n },\n {\n  begin: 0x4dc0,\n  end: 0x4dff\n },\n {\n  begin: 0xa800,\n  end: 0xa82f\n },\n {\n  begin: 0x10000,\n  end: 0x1007f\n },\n {\n  begin: 0x10140,\n  end: 0x1018f\n },\n {\n  begin: 0x10380,\n  end: 0x1039f\n },\n {\n  begin: 0x103a0,\n  end: 0x103df\n },\n {\n  begin: 0x10450,\n  end: 0x1047f\n },\n {\n  begin: 0x10480,\n  end: 0x104af\n },\n {\n  begin: 0x10800,\n  end: 0x1083f\n },\n {\n  begin: 0x10a00,\n  end: 0x10a5f\n },\n {\n  begin: 0x1d300,\n  end: 0x1d35f\n },\n {\n  begin: 0x12000,\n  end: 0x123ff\n },\n {\n  begin: 0x1d360,\n  end: 0x1d37f\n },\n {\n  begin: 0x1b80,\n  end: 0x1bbf\n },\n {\n  begin: 0x1c00,\n  end: 0x1c4f\n },\n {\n  begin: 0x1c50,\n  end: 0x1c7f\n },\n {\n  begin: 0xa880,\n  end: 0xa8df\n },\n {\n  begin: 0xa900,\n  end: 0xa92f\n },\n {\n  begin: 0xa930,\n  end: 0xa95f\n },\n {\n  begin: 0xaa00,\n  end: 0xaa5f\n },\n {\n  begin: 0x10190,\n  end: 0x101cf\n },\n {\n  begin: 0x101d0,\n  end: 0x101ff\n },\n {\n  begin: 0x102a0,\n  end: 0x102df\n },\n {\n  begin: 0x1f030,\n  end: 0x1f09f\n }\n];\nfunction getUnicodeRangeFor(value) {\n for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n  var range = UnicodeRanges[i];\n  if (value >= range.begin && value < range.end) {\n   return i;\n  }\n }\n return -1;\n}\nfunction isRTLRangeFor(value) {\n var range = UnicodeRanges[13];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n range = UnicodeRanges[11];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n return false;\n}\nvar getNormalizedUnicodes = getLookupTableFactory(function (t) {\n t[\"\\u00A8\"] = \"\\u0020\\u0308\";\n t[\"\\u00AF\"] = \"\\u0020\\u0304\";\n t[\"\\u00B4\"] = \"\\u0020\\u0301\";\n t[\"\\u00B5\"] = \"\\u03BC\";\n t[\"\\u00B8\"] = \"\\u0020\\u0327\";\n t[\"\\u0132\"] = \"\\u0049\\u004A\";\n t[\"\\u0133\"] = \"\\u0069\\u006A\";\n t[\"\\u013F\"] = \"\\u004C\\u00B7\";\n t[\"\\u0140\"] = \"\\u006C\\u00B7\";\n t[\"\\u0149\"] = \"\\u02BC\\u006E\";\n t[\"\\u017F\"] = \"\\u0073\";\n t[\"\\u01C4\"] = \"\\u0044\\u017D\";\n t[\"\\u01C5\"] = \"\\u0044\\u017E\";\n t[\"\\u01C6\"] = \"\\u0064\\u017E\";\n t[\"\\u01C7\"] = \"\\u004C\\u004A\";\n t[\"\\u01C8\"] = \"\\u004C\\u006A\";\n t[\"\\u01C9\"] = \"\\u006C\\u006A\";\n t[\"\\u01CA\"] = \"\\u004E\\u004A\";\n t[\"\\u01CB\"] = \"\\u004E\\u006A\";\n t[\"\\u01CC\"] = \"\\u006E\\u006A\";\n t[\"\\u01F1\"] = \"\\u0044\\u005A\";\n t[\"\\u01F2\"] = \"\\u0044\\u007A\";\n t[\"\\u01F3\"] = \"\\u0064\\u007A\";\n t[\"\\u02D8\"] = \"\\u0020\\u0306\";\n t[\"\\u02D9\"] = \"\\u0020\\u0307\";\n t[\"\\u02DA\"] = \"\\u0020\\u030A\";\n t[\"\\u02DB\"] = \"\\u0020\\u0328\";\n t[\"\\u02DC\"] = \"\\u0020\\u0303\";\n t[\"\\u02DD\"] = \"\\u0020\\u030B\";\n t[\"\\u037A\"] = \"\\u0020\\u0345\";\n t[\"\\u0384\"] = \"\\u0020\\u0301\";\n t[\"\\u03D0\"] = \"\\u03B2\";\n t[\"\\u03D1\"] = \"\\u03B8\";\n t[\"\\u03D2\"] = \"\\u03A5\";\n t[\"\\u03D5\"] = \"\\u03C6\";\n t[\"\\u03D6\"] = \"\\u03C0\";\n t[\"\\u03F0\"] = \"\\u03BA\";\n t[\"\\u03F1\"] = \"\\u03C1\";\n t[\"\\u03F2\"] = \"\\u03C2\";\n t[\"\\u03F4\"] = \"\\u0398\";\n t[\"\\u03F5\"] = \"\\u03B5\";\n t[\"\\u03F9\"] = \"\\u03A3\";\n t[\"\\u0587\"] = \"\\u0565\\u0582\";\n t[\"\\u0675\"] = \"\\u0627\\u0674\";\n t[\"\\u0676\"] = \"\\u0648\\u0674\";\n t[\"\\u0677\"] = \"\\u06C7\\u0674\";\n t[\"\\u0678\"] = \"\\u064A\\u0674\";\n t[\"\\u0E33\"] = \"\\u0E4D\\u0E32\";\n t[\"\\u0EB3\"] = \"\\u0ECD\\u0EB2\";\n t[\"\\u0EDC\"] = \"\\u0EAB\\u0E99\";\n t[\"\\u0EDD\"] = \"\\u0EAB\\u0EA1\";\n t[\"\\u0F77\"] = \"\\u0FB2\\u0F81\";\n t[\"\\u0F79\"] = \"\\u0FB3\\u0F81\";\n t[\"\\u1E9A\"] = \"\\u0061\\u02BE\";\n t[\"\\u1FBD\"] = \"\\u0020\\u0313\";\n t[\"\\u1FBF\"] = \"\\u0020\\u0313\";\n t[\"\\u1FC0\"] = \"\\u0020\\u0342\";\n t[\"\\u1FFE\"] = \"\\u0020\\u0314\";\n t[\"\\u2002\"] = \"\\u0020\";\n t[\"\\u2003\"] = \"\\u0020\";\n t[\"\\u2004\"] = \"\\u0020\";\n t[\"\\u2005\"] = \"\\u0020\";\n t[\"\\u2006\"] = \"\\u0020\";\n t[\"\\u2008\"] = \"\\u0020\";\n t[\"\\u2009\"] = \"\\u0020\";\n t[\"\\u200A\"] = \"\\u0020\";\n t[\"\\u2017\"] = \"\\u0020\\u0333\";\n t[\"\\u2024\"] = \"\\u002E\";\n t[\"\\u2025\"] = \"\\u002E\\u002E\";\n t[\"\\u2026\"] = \"\\u002E\\u002E\\u002E\";\n t[\"\\u2033\"] = \"\\u2032\\u2032\";\n t[\"\\u2034\"] = \"\\u2032\\u2032\\u2032\";\n t[\"\\u2036\"] = \"\\u2035\\u2035\";\n t[\"\\u2037\"] = \"\\u2035\\u2035\\u2035\";\n t[\"\\u203C\"] = \"\\u0021\\u0021\";\n t[\"\\u203E\"] = \"\\u0020\\u0305\";\n t[\"\\u2047\"] = \"\\u003F\\u003F\";\n t[\"\\u2048\"] = \"\\u003F\\u0021\";\n t[\"\\u2049\"] = \"\\u0021\\u003F\";\n t[\"\\u2057\"] = \"\\u2032\\u2032\\u2032\\u2032\";\n t[\"\\u205F\"] = \"\\u0020\";\n t[\"\\u20A8\"] = \"\\u0052\\u0073\";\n t[\"\\u2100\"] = \"\\u0061\\u002F\\u0063\";\n t[\"\\u2101\"] = \"\\u0061\\u002F\\u0073\";\n t[\"\\u2103\"] = \"\\u00B0\\u0043\";\n t[\"\\u2105\"] = \"\\u0063\\u002F\\u006F\";\n t[\"\\u2106\"] = \"\\u0063\\u002F\\u0075\";\n t[\"\\u2107\"] = \"\\u0190\";\n t[\"\\u2109\"] = \"\\u00B0\\u0046\";\n t[\"\\u2116\"] = \"\\u004E\\u006F\";\n t[\"\\u2121\"] = \"\\u0054\\u0045\\u004C\";\n t[\"\\u2135\"] = \"\\u05D0\";\n t[\"\\u2136\"] = \"\\u05D1\";\n t[\"\\u2137\"] = \"\\u05D2\";\n t[\"\\u2138\"] = \"\\u05D3\";\n t[\"\\u213B\"] = \"\\u0046\\u0041\\u0058\";\n t[\"\\u2160\"] = \"\\u0049\";\n t[\"\\u2161\"] = \"\\u0049\\u0049\";\n t[\"\\u2162\"] = \"\\u0049\\u0049\\u0049\";\n t[\"\\u2163\"] = \"\\u0049\\u0056\";\n t[\"\\u2164\"] = \"\\u0056\";\n t[\"\\u2165\"] = \"\\u0056\\u0049\";\n t[\"\\u2166\"] = \"\\u0056\\u0049\\u0049\";\n t[\"\\u2167\"] = \"\\u0056\\u0049\\u0049\\u0049\";\n t[\"\\u2168\"] = \"\\u0049\\u0058\";\n t[\"\\u2169\"] = \"\\u0058\";\n t[\"\\u216A\"] = \"\\u0058\\u0049\";\n t[\"\\u216B\"] = \"\\u0058\\u0049\\u0049\";\n t[\"\\u216C\"] = \"\\u004C\";\n t[\"\\u216D\"] = \"\\u0043\";\n t[\"\\u216E\"] = \"\\u0044\";\n t[\"\\u216F\"] = \"\\u004D\";\n t[\"\\u2170\"] = \"\\u0069\";\n t[\"\\u2171\"] = \"\\u0069\\u0069\";\n t[\"\\u2172\"] = \"\\u0069\\u0069\\u0069\";\n t[\"\\u2173\"] = \"\\u0069\\u0076\";\n t[\"\\u2174\"] = \"\\u0076\";\n t[\"\\u2175\"] = \"\\u0076\\u0069\";\n t[\"\\u2176\"] = \"\\u0076\\u0069\\u0069\";\n t[\"\\u2177\"] = \"\\u0076\\u0069\\u0069\\u0069\";\n t[\"\\u2178\"] = \"\\u0069\\u0078\";\n t[\"\\u2179\"] = \"\\u0078\";\n t[\"\\u217A\"] = \"\\u0078\\u0069\";\n t[\"\\u217B\"] = \"\\u0078\\u0069\\u0069\";\n t[\"\\u217C\"] = \"\\u006C\";\n t[\"\\u217D\"] = \"\\u0063\";\n t[\"\\u217E\"] = \"\\u0064\";\n t[\"\\u217F\"] = \"\\u006D\";\n t[\"\\u222C\"] = \"\\u222B\\u222B\";\n t[\"\\u222D\"] = \"\\u222B\\u222B\\u222B\";\n t[\"\\u222F\"] = \"\\u222E\\u222E\";\n t[\"\\u2230\"] = \"\\u222E\\u222E\\u222E\";\n t[\"\\u2474\"] = \"\\u0028\\u0031\\u0029\";\n t[\"\\u2475\"] = \"\\u0028\\u0032\\u0029\";\n t[\"\\u2476\"] = \"\\u0028\\u0033\\u0029\";\n t[\"\\u2477\"] = \"\\u0028\\u0034\\u0029\";\n t[\"\\u2478\"] = \"\\u0028\\u0035\\u0029\";\n t[\"\\u2479\"] = \"\\u0028\\u0036\\u0029\";\n t[\"\\u247A\"] = \"\\u0028\\u0037\\u0029\";\n t[\"\\u247B\"] = \"\\u0028\\u0038\\u0029\";\n t[\"\\u247C\"] = \"\\u0028\\u0039\\u0029\";\n t[\"\\u247D\"] = \"\\u0028\\u0031\\u0030\\u0029\";\n t[\"\\u247E\"] = \"\\u0028\\u0031\\u0031\\u0029\";\n t[\"\\u247F\"] = \"\\u0028\\u0031\\u0032\\u0029\";\n t[\"\\u2480\"] = \"\\u0028\\u0031\\u0033\\u0029\";\n t[\"\\u2481\"] = \"\\u0028\\u0031\\u0034\\u0029\";\n t[\"\\u2482\"] = \"\\u0028\\u0031\\u0035\\u0029\";\n t[\"\\u2483\"] = \"\\u0028\\u0031\\u0036\\u0029\";\n t[\"\\u2484\"] = \"\\u0028\\u0031\\u0037\\u0029\";\n t[\"\\u2485\"] = \"\\u0028\\u0031\\u0038\\u0029\";\n t[\"\\u2486\"] = \"\\u0028\\u0031\\u0039\\u0029\";\n t[\"\\u2487\"] = \"\\u0028\\u0032\\u0030\\u0029\";\n t[\"\\u2488\"] = \"\\u0031\\u002E\";\n t[\"\\u2489\"] = \"\\u0032\\u002E\";\n t[\"\\u248A\"] = \"\\u0033\\u002E\";\n t[\"\\u248B\"] = \"\\u0034\\u002E\";\n t[\"\\u248C\"] = \"\\u0035\\u002E\";\n t[\"\\u248D\"] = \"\\u0036\\u002E\";\n t[\"\\u248E\"] = \"\\u0037\\u002E\";\n t[\"\\u248F\"] = \"\\u0038\\u002E\";\n t[\"\\u2490\"] = \"\\u0039\\u002E\";\n t[\"\\u2491\"] = \"\\u0031\\u0030\\u002E\";\n t[\"\\u2492\"] = \"\\u0031\\u0031\\u002E\";\n t[\"\\u2493\"] = \"\\u0031\\u0032\\u002E\";\n t[\"\\u2494\"] = \"\\u0031\\u0033\\u002E\";\n t[\"\\u2495\"] = \"\\u0031\\u0034\\u002E\";\n t[\"\\u2496\"] = \"\\u0031\\u0035\\u002E\";\n t[\"\\u2497\"] = \"\\u0031\\u0036\\u002E\";\n t[\"\\u2498\"] = \"\\u0031\\u0037\\u002E\";\n t[\"\\u2499\"] = \"\\u0031\\u0038\\u002E\";\n t[\"\\u249A\"] = \"\\u0031\\u0039\\u002E\";\n t[\"\\u249B\"] = \"\\u0032\\u0030\\u002E\";\n t[\"\\u249C\"] = \"\\u0028\\u0061\\u0029\";\n t[\"\\u249D\"] = \"\\u0028\\u0062\\u0029\";\n t[\"\\u249E\"] = \"\\u0028\\u0063\\u0029\";\n t[\"\\u249F\"] = \"\\u0028\\u0064\\u0029\";\n t[\"\\u24A0\"] = \"\\u0028\\u0065\\u0029\";\n t[\"\\u24A1\"] = \"\\u0028\\u0066\\u0029\";\n t[\"\\u24A2\"] = \"\\u0028\\u0067\\u0029\";\n t[\"\\u24A3\"] = \"\\u0028\\u0068\\u0029\";\n t[\"\\u24A4\"] = \"\\u0028\\u0069\\u0029\";\n t[\"\\u24A5\"] = \"\\u0028\\u006A\\u0029\";\n t[\"\\u24A6\"] = \"\\u0028\\u006B\\u0029\";\n t[\"\\u24A7\"] = \"\\u0028\\u006C\\u0029\";\n t[\"\\u24A8\"] = \"\\u0028\\u006D\\u0029\";\n t[\"\\u24A9\"] = \"\\u0028\\u006E\\u0029\";\n t[\"\\u24AA\"] = \"\\u0028\\u006F\\u0029\";\n t[\"\\u24AB\"] = \"\\u0028\\u0070\\u0029\";\n t[\"\\u24AC\"] = \"\\u0028\\u0071\\u0029\";\n t[\"\\u24AD\"] = \"\\u0028\\u0072\\u0029\";\n t[\"\\u24AE\"] = \"\\u0028\\u0073\\u0029\";\n t[\"\\u24AF\"] = \"\\u0028\\u0074\\u0029\";\n t[\"\\u24B0\"] = \"\\u0028\\u0075\\u0029\";\n t[\"\\u24B1\"] = \"\\u0028\\u0076\\u0029\";\n t[\"\\u24B2\"] = \"\\u0028\\u0077\\u0029\";\n t[\"\\u24B3\"] = \"\\u0028\\u0078\\u0029\";\n t[\"\\u24B4\"] = \"\\u0028\\u0079\\u0029\";\n t[\"\\u24B5\"] = \"\\u0028\\u007A\\u0029\";\n t[\"\\u2A0C\"] = \"\\u222B\\u222B\\u222B\\u222B\";\n t[\"\\u2A74\"] = \"\\u003A\\u003A\\u003D\";\n t[\"\\u2A75\"] = \"\\u003D\\u003D\";\n t[\"\\u2A76\"] = \"\\u003D\\u003D\\u003D\";\n t[\"\\u2E9F\"] = \"\\u6BCD\";\n t[\"\\u2EF3\"] = \"\\u9F9F\";\n t[\"\\u2F00\"] = \"\\u4E00\";\n t[\"\\u2F01\"] = \"\\u4E28\";\n t[\"\\u2F02\"] = \"\\u4E36\";\n t[\"\\u2F03\"] = \"\\u4E3F\";\n t[\"\\u2F04\"] = \"\\u4E59\";\n t[\"\\u2F05\"] = \"\\u4E85\";\n t[\"\\u2F06\"] = \"\\u4E8C\";\n t[\"\\u2F07\"] = \"\\u4EA0\";\n t[\"\\u2F08\"] = \"\\u4EBA\";\n t[\"\\u2F09\"] = \"\\u513F\";\n t[\"\\u2F0A\"] = \"\\u5165\";\n t[\"\\u2F0B\"] = \"\\u516B\";\n t[\"\\u2F0C\"] = \"\\u5182\";\n t[\"\\u2F0D\"] = \"\\u5196\";\n t[\"\\u2F0E\"] = \"\\u51AB\";\n t[\"\\u2F0F\"] = \"\\u51E0\";\n t[\"\\u2F10\"] = \"\\u51F5\";\n t[\"\\u2F11\"] = \"\\u5200\";\n t[\"\\u2F12\"] = \"\\u529B\";\n t[\"\\u2F13\"] = \"\\u52F9\";\n t[\"\\u2F14\"] = \"\\u5315\";\n t[\"\\u2F15\"] = \"\\u531A\";\n t[\"\\u2F16\"] = \"\\u5338\";\n t[\"\\u2F17\"] = \"\\u5341\";\n t[\"\\u2F18\"] = \"\\u535C\";\n t[\"\\u2F19\"] = \"\\u5369\";\n t[\"\\u2F1A\"] = \"\\u5382\";\n t[\"\\u2F1B\"] = \"\\u53B6\";\n t[\"\\u2F1C\"] = \"\\u53C8\";\n t[\"\\u2F1D\"] = \"\\u53E3\";\n t[\"\\u2F1E\"] = \"\\u56D7\";\n t[\"\\u2F1F\"] = \"\\u571F\";\n t[\"\\u2F20\"] = \"\\u58EB\";\n t[\"\\u2F21\"] = \"\\u5902\";\n t[\"\\u2F22\"] = \"\\u590A\";\n t[\"\\u2F23\"] = \"\\u5915\";\n t[\"\\u2F24\"] = \"\\u5927\";\n t[\"\\u2F25\"] = \"\\u5973\";\n t[\"\\u2F26\"] = \"\\u5B50\";\n t[\"\\u2F27\"] = \"\\u5B80\";\n t[\"\\u2F28\"] = \"\\u5BF8\";\n t[\"\\u2F29\"] = \"\\u5C0F\";\n t[\"\\u2F2A\"] = \"\\u5C22\";\n t[\"\\u2F2B\"] = \"\\u5C38\";\n t[\"\\u2F2C\"] = \"\\u5C6E\";\n t[\"\\u2F2D\"] = \"\\u5C71\";\n t[\"\\u2F2E\"] = \"\\u5DDB\";\n t[\"\\u2F2F\"] = \"\\u5DE5\";\n t[\"\\u2F30\"] = \"\\u5DF1\";\n t[\"\\u2F31\"] = \"\\u5DFE\";\n t[\"\\u2F32\"] = \"\\u5E72\";\n t[\"\\u2F33\"] = \"\\u5E7A\";\n t[\"\\u2F34\"] = \"\\u5E7F\";\n t[\"\\u2F35\"] = \"\\u5EF4\";\n t[\"\\u2F36\"] = \"\\u5EFE\";\n t[\"\\u2F37\"] = \"\\u5F0B\";\n t[\"\\u2F38\"] = \"\\u5F13\";\n t[\"\\u2F39\"] = \"\\u5F50\";\n t[\"\\u2F3A\"] = \"\\u5F61\";\n t[\"\\u2F3B\"] = \"\\u5F73\";\n t[\"\\u2F3C\"] = \"\\u5FC3\";\n t[\"\\u2F3D\"] = \"\\u6208\";\n t[\"\\u2F3E\"] = \"\\u6236\";\n t[\"\\u2F3F\"] = \"\\u624B\";\n t[\"\\u2F40\"] = \"\\u652F\";\n t[\"\\u2F41\"] = \"\\u6534\";\n t[\"\\u2F42\"] = \"\\u6587\";\n t[\"\\u2F43\"] = \"\\u6597\";\n t[\"\\u2F44\"] = \"\\u65A4\";\n t[\"\\u2F45\"] = \"\\u65B9\";\n t[\"\\u2F46\"] = \"\\u65E0\";\n t[\"\\u2F47\"] = \"\\u65E5\";\n t[\"\\u2F48\"] = \"\\u66F0\";\n t[\"\\u2F49\"] = \"\\u6708\";\n t[\"\\u2F4A\"] = \"\\u6728\";\n t[\"\\u2F4B\"] = \"\\u6B20\";\n t[\"\\u2F4C\"] = \"\\u6B62\";\n t[\"\\u2F4D\"] = \"\\u6B79\";\n t[\"\\u2F4E\"] = \"\\u6BB3\";\n t[\"\\u2F4F\"] = \"\\u6BCB\";\n t[\"\\u2F50\"] = \"\\u6BD4\";\n t[\"\\u2F51\"] = \"\\u6BDB\";\n t[\"\\u2F52\"] = \"\\u6C0F\";\n t[\"\\u2F53\"] = \"\\u6C14\";\n t[\"\\u2F54\"] = \"\\u6C34\";\n t[\"\\u2F55\"] = \"\\u706B\";\n t[\"\\u2F56\"] = \"\\u722A\";\n t[\"\\u2F57\"] = \"\\u7236\";\n t[\"\\u2F58\"] = \"\\u723B\";\n t[\"\\u2F59\"] = \"\\u723F\";\n t[\"\\u2F5A\"] = \"\\u7247\";\n t[\"\\u2F5B\"] = \"\\u7259\";\n t[\"\\u2F5C\"] = \"\\u725B\";\n t[\"\\u2F5D\"] = \"\\u72AC\";\n t[\"\\u2F5E\"] = \"\\u7384\";\n t[\"\\u2F5F\"] = \"\\u7389\";\n t[\"\\u2F60\"] = \"\\u74DC\";\n t[\"\\u2F61\"] = \"\\u74E6\";\n t[\"\\u2F62\"] = \"\\u7518\";\n t[\"\\u2F63\"] = \"\\u751F\";\n t[\"\\u2F64\"] = \"\\u7528\";\n t[\"\\u2F65\"] = \"\\u7530\";\n t[\"\\u2F66\"] = \"\\u758B\";\n t[\"\\u2F67\"] = \"\\u7592\";\n t[\"\\u2F68\"] = \"\\u7676\";\n t[\"\\u2F69\"] = \"\\u767D\";\n t[\"\\u2F6A\"] = \"\\u76AE\";\n t[\"\\u2F6B\"] = \"\\u76BF\";\n t[\"\\u2F6C\"] = \"\\u76EE\";\n t[\"\\u2F6D\"] = \"\\u77DB\";\n t[\"\\u2F6E\"] = \"\\u77E2\";\n t[\"\\u2F6F\"] = \"\\u77F3\";\n t[\"\\u2F70\"] = \"\\u793A\";\n t[\"\\u2F71\"] = \"\\u79B8\";\n t[\"\\u2F72\"] = \"\\u79BE\";\n t[\"\\u2F73\"] = \"\\u7A74\";\n t[\"\\u2F74\"] = \"\\u7ACB\";\n t[\"\\u2F75\"] = \"\\u7AF9\";\n t[\"\\u2F76\"] = \"\\u7C73\";\n t[\"\\u2F77\"] = \"\\u7CF8\";\n t[\"\\u2F78\"] = \"\\u7F36\";\n t[\"\\u2F79\"] = \"\\u7F51\";\n t[\"\\u2F7A\"] = \"\\u7F8A\";\n t[\"\\u2F7B\"] = \"\\u7FBD\";\n t[\"\\u2F7C\"] = \"\\u8001\";\n t[\"\\u2F7D\"] = \"\\u800C\";\n t[\"\\u2F7E\"] = \"\\u8012\";\n t[\"\\u2F7F\"] = \"\\u8033\";\n t[\"\\u2F80\"] = \"\\u807F\";\n t[\"\\u2F81\"] = \"\\u8089\";\n t[\"\\u2F82\"] = \"\\u81E3\";\n t[\"\\u2F83\"] = \"\\u81EA\";\n t[\"\\u2F84\"] = \"\\u81F3\";\n t[\"\\u2F85\"] = \"\\u81FC\";\n t[\"\\u2F86\"] = \"\\u820C\";\n t[\"\\u2F87\"] = \"\\u821B\";\n t[\"\\u2F88\"] = \"\\u821F\";\n t[\"\\u2F89\"] = \"\\u826E\";\n t[\"\\u2F8A\"] = \"\\u8272\";\n t[\"\\u2F8B\"] = \"\\u8278\";\n t[\"\\u2F8C\"] = \"\\u864D\";\n t[\"\\u2F8D\"] = \"\\u866B\";\n t[\"\\u2F8E\"] = \"\\u8840\";\n t[\"\\u2F8F\"] = \"\\u884C\";\n t[\"\\u2F90\"] = \"\\u8863\";\n t[\"\\u2F91\"] = \"\\u897E\";\n t[\"\\u2F92\"] = \"\\u898B\";\n t[\"\\u2F93\"] = \"\\u89D2\";\n t[\"\\u2F94\"] = \"\\u8A00\";\n t[\"\\u2F95\"] = \"\\u8C37\";\n t[\"\\u2F96\"] = \"\\u8C46\";\n t[\"\\u2F97\"] = \"\\u8C55\";\n t[\"\\u2F98\"] = \"\\u8C78\";\n t[\"\\u2F99\"] = \"\\u8C9D\";\n t[\"\\u2F9A\"] = \"\\u8D64\";\n t[\"\\u2F9B\"] = \"\\u8D70\";\n t[\"\\u2F9C\"] = \"\\u8DB3\";\n t[\"\\u2F9D\"] = \"\\u8EAB\";\n t[\"\\u2F9E\"] = \"\\u8ECA\";\n t[\"\\u2F9F\"] = \"\\u8F9B\";\n t[\"\\u2FA0\"] = \"\\u8FB0\";\n t[\"\\u2FA1\"] = \"\\u8FB5\";\n t[\"\\u2FA2\"] = \"\\u9091\";\n t[\"\\u2FA3\"] = \"\\u9149\";\n t[\"\\u2FA4\"] = \"\\u91C6\";\n t[\"\\u2FA5\"] = \"\\u91CC\";\n t[\"\\u2FA6\"] = \"\\u91D1\";\n t[\"\\u2FA7\"] = \"\\u9577\";\n t[\"\\u2FA8\"] = \"\\u9580\";\n t[\"\\u2FA9\"] = \"\\u961C\";\n t[\"\\u2FAA\"] = \"\\u96B6\";\n t[\"\\u2FAB\"] = \"\\u96B9\";\n t[\"\\u2FAC\"] = \"\\u96E8\";\n t[\"\\u2FAD\"] = \"\\u9751\";\n t[\"\\u2FAE\"] = \"\\u975E\";\n t[\"\\u2FAF\"] = \"\\u9762\";\n t[\"\\u2FB0\"] = \"\\u9769\";\n t[\"\\u2FB1\"] = \"\\u97CB\";\n t[\"\\u2FB2\"] = \"\\u97ED\";\n t[\"\\u2FB3\"] = \"\\u97F3\";\n t[\"\\u2FB4\"] = \"\\u9801\";\n t[\"\\u2FB5\"] = \"\\u98A8\";\n t[\"\\u2FB6\"] = \"\\u98DB\";\n t[\"\\u2FB7\"] = \"\\u98DF\";\n t[\"\\u2FB8\"] = \"\\u9996\";\n t[\"\\u2FB9\"] = \"\\u9999\";\n t[\"\\u2FBA\"] = \"\\u99AC\";\n t[\"\\u2FBB\"] = \"\\u9AA8\";\n t[\"\\u2FBC\"] = \"\\u9AD8\";\n t[\"\\u2FBD\"] = \"\\u9ADF\";\n t[\"\\u2FBE\"] = \"\\u9B25\";\n t[\"\\u2FBF\"] = \"\\u9B2F\";\n t[\"\\u2FC0\"] = \"\\u9B32\";\n t[\"\\u2FC1\"] = \"\\u9B3C\";\n t[\"\\u2FC2\"] = \"\\u9B5A\";\n t[\"\\u2FC3\"] = \"\\u9CE5\";\n t[\"\\u2FC4\"] = \"\\u9E75\";\n t[\"\\u2FC5\"] = \"\\u9E7F\";\n t[\"\\u2FC6\"] = \"\\u9EA5\";\n t[\"\\u2FC7\"] = \"\\u9EBB\";\n t[\"\\u2FC8\"] = \"\\u9EC3\";\n t[\"\\u2FC9\"] = \"\\u9ECD\";\n t[\"\\u2FCA\"] = \"\\u9ED1\";\n t[\"\\u2FCB\"] = \"\\u9EF9\";\n t[\"\\u2FCC\"] = \"\\u9EFD\";\n t[\"\\u2FCD\"] = \"\\u9F0E\";\n t[\"\\u2FCE\"] = \"\\u9F13\";\n t[\"\\u2FCF\"] = \"\\u9F20\";\n t[\"\\u2FD0\"] = \"\\u9F3B\";\n t[\"\\u2FD1\"] = \"\\u9F4A\";\n t[\"\\u2FD2\"] = \"\\u9F52\";\n t[\"\\u2FD3\"] = \"\\u9F8D\";\n t[\"\\u2FD4\"] = \"\\u9F9C\";\n t[\"\\u2FD5\"] = \"\\u9FA0\";\n t[\"\\u3036\"] = \"\\u3012\";\n t[\"\\u3038\"] = \"\\u5341\";\n t[\"\\u3039\"] = \"\\u5344\";\n t[\"\\u303A\"] = \"\\u5345\";\n t[\"\\u309B\"] = \"\\u0020\\u3099\";\n t[\"\\u309C\"] = \"\\u0020\\u309A\";\n t[\"\\u3131\"] = \"\\u1100\";\n t[\"\\u3132\"] = \"\\u1101\";\n t[\"\\u3133\"] = \"\\u11AA\";\n t[\"\\u3134\"] = \"\\u1102\";\n t[\"\\u3135\"] = \"\\u11AC\";\n t[\"\\u3136\"] = \"\\u11AD\";\n t[\"\\u3137\"] = \"\\u1103\";\n t[\"\\u3138\"] = \"\\u1104\";\n t[\"\\u3139\"] = \"\\u1105\";\n t[\"\\u313A\"] = \"\\u11B0\";\n t[\"\\u313B\"] = \"\\u11B1\";\n t[\"\\u313C\"] = \"\\u11B2\";\n t[\"\\u313D\"] = \"\\u11B3\";\n t[\"\\u313E\"] = \"\\u11B4\";\n t[\"\\u313F\"] = \"\\u11B5\";\n t[\"\\u3140\"] = \"\\u111A\";\n t[\"\\u3141\"] = \"\\u1106\";\n t[\"\\u3142\"] = \"\\u1107\";\n t[\"\\u3143\"] = \"\\u1108\";\n t[\"\\u3144\"] = \"\\u1121\";\n t[\"\\u3145\"] = \"\\u1109\";\n t[\"\\u3146\"] = \"\\u110A\";\n t[\"\\u3147\"] = \"\\u110B\";\n t[\"\\u3148\"] = \"\\u110C\";\n t[\"\\u3149\"] = \"\\u110D\";\n t[\"\\u314A\"] = \"\\u110E\";\n t[\"\\u314B\"] = \"\\u110F\";\n t[\"\\u314C\"] = \"\\u1110\";\n t[\"\\u314D\"] = \"\\u1111\";\n t[\"\\u314E\"] = \"\\u1112\";\n t[\"\\u314F\"] = \"\\u1161\";\n t[\"\\u3150\"] = \"\\u1162\";\n t[\"\\u3151\"] = \"\\u1163\";\n t[\"\\u3152\"] = \"\\u1164\";\n t[\"\\u3153\"] = \"\\u1165\";\n t[\"\\u3154\"] = \"\\u1166\";\n t[\"\\u3155\"] = \"\\u1167\";\n t[\"\\u3156\"] = \"\\u1168\";\n t[\"\\u3157\"] = \"\\u1169\";\n t[\"\\u3158\"] = \"\\u116A\";\n t[\"\\u3159\"] = \"\\u116B\";\n t[\"\\u315A\"] = \"\\u116C\";\n t[\"\\u315B\"] = \"\\u116D\";\n t[\"\\u315C\"] = \"\\u116E\";\n t[\"\\u315D\"] = \"\\u116F\";\n t[\"\\u315E\"] = \"\\u1170\";\n t[\"\\u315F\"] = \"\\u1171\";\n t[\"\\u3160\"] = \"\\u1172\";\n t[\"\\u3161\"] = \"\\u1173\";\n t[\"\\u3162\"] = \"\\u1174\";\n t[\"\\u3163\"] = \"\\u1175\";\n t[\"\\u3164\"] = \"\\u1160\";\n t[\"\\u3165\"] = \"\\u1114\";\n t[\"\\u3166\"] = \"\\u1115\";\n t[\"\\u3167\"] = \"\\u11C7\";\n t[\"\\u3168\"] = \"\\u11C8\";\n t[\"\\u3169\"] = \"\\u11CC\";\n t[\"\\u316A\"] = \"\\u11CE\";\n t[\"\\u316B\"] = \"\\u11D3\";\n t[\"\\u316C\"] = \"\\u11D7\";\n t[\"\\u316D\"] = \"\\u11D9\";\n t[\"\\u316E\"] = \"\\u111C\";\n t[\"\\u316F\"] = \"\\u11DD\";\n t[\"\\u3170\"] = \"\\u11DF\";\n t[\"\\u3171\"] = \"\\u111D\";\n t[\"\\u3172\"] = \"\\u111E\";\n t[\"\\u3173\"] = \"\\u1120\";\n t[\"\\u3174\"] = \"\\u1122\";\n t[\"\\u3175\"] = \"\\u1123\";\n t[\"\\u3176\"] = \"\\u1127\";\n t[\"\\u3177\"] = \"\\u1129\";\n t[\"\\u3178\"] = \"\\u112B\";\n t[\"\\u3179\"] = \"\\u112C\";\n t[\"\\u317A\"] = \"\\u112D\";\n t[\"\\u317B\"] = \"\\u112E\";\n t[\"\\u317C\"] = \"\\u112F\";\n t[\"\\u317D\"] = \"\\u1132\";\n t[\"\\u317E\"] = \"\\u1136\";\n t[\"\\u317F\"] = \"\\u1140\";\n t[\"\\u3180\"] = \"\\u1147\";\n t[\"\\u3181\"] = \"\\u114C\";\n t[\"\\u3182\"] = \"\\u11F1\";\n t[\"\\u3183\"] = \"\\u11F2\";\n t[\"\\u3184\"] = \"\\u1157\";\n t[\"\\u3185\"] = \"\\u1158\";\n t[\"\\u3186\"] = \"\\u1159\";\n t[\"\\u3187\"] = \"\\u1184\";\n t[\"\\u3188\"] = \"\\u1185\";\n t[\"\\u3189\"] = \"\\u1188\";\n t[\"\\u318A\"] = \"\\u1191\";\n t[\"\\u318B\"] = \"\\u1192\";\n t[\"\\u318C\"] = \"\\u1194\";\n t[\"\\u318D\"] = \"\\u119E\";\n t[\"\\u318E\"] = \"\\u11A1\";\n t[\"\\u3200\"] = \"\\u0028\\u1100\\u0029\";\n t[\"\\u3201\"] = \"\\u0028\\u1102\\u0029\";\n t[\"\\u3202\"] = \"\\u0028\\u1103\\u0029\";\n t[\"\\u3203\"] = \"\\u0028\\u1105\\u0029\";\n t[\"\\u3204\"] = \"\\u0028\\u1106\\u0029\";\n t[\"\\u3205\"] = \"\\u0028\\u1107\\u0029\";\n t[\"\\u3206\"] = \"\\u0028\\u1109\\u0029\";\n t[\"\\u3207\"] = \"\\u0028\\u110B\\u0029\";\n t[\"\\u3208\"] = \"\\u0028\\u110C\\u0029\";\n t[\"\\u3209\"] = \"\\u0028\\u110E\\u0029\";\n t[\"\\u320A\"] = \"\\u0028\\u110F\\u0029\";\n t[\"\\u320B\"] = \"\\u0028\\u1110\\u0029\";\n t[\"\\u320C\"] = \"\\u0028\\u1111\\u0029\";\n t[\"\\u320D\"] = \"\\u0028\\u1112\\u0029\";\n t[\"\\u320E\"] = \"\\u0028\\u1100\\u1161\\u0029\";\n t[\"\\u320F\"] = \"\\u0028\\u1102\\u1161\\u0029\";\n t[\"\\u3210\"] = \"\\u0028\\u1103\\u1161\\u0029\";\n t[\"\\u3211\"] = \"\\u0028\\u1105\\u1161\\u0029\";\n t[\"\\u3212\"] = \"\\u0028\\u1106\\u1161\\u0029\";\n t[\"\\u3213\"] = \"\\u0028\\u1107\\u1161\\u0029\";\n t[\"\\u3214\"] = \"\\u0028\\u1109\\u1161\\u0029\";\n t[\"\\u3215\"] = \"\\u0028\\u110B\\u1161\\u0029\";\n t[\"\\u3216\"] = \"\\u0028\\u110C\\u1161\\u0029\";\n t[\"\\u3217\"] = \"\\u0028\\u110E\\u1161\\u0029\";\n t[\"\\u3218\"] = \"\\u0028\\u110F\\u1161\\u0029\";\n t[\"\\u3219\"] = \"\\u0028\\u1110\\u1161\\u0029\";\n t[\"\\u321A\"] = \"\\u0028\\u1111\\u1161\\u0029\";\n t[\"\\u321B\"] = \"\\u0028\\u1112\\u1161\\u0029\";\n t[\"\\u321C\"] = \"\\u0028\\u110C\\u116E\\u0029\";\n t[\"\\u321D\"] = \"\\u0028\\u110B\\u1169\\u110C\\u1165\\u11AB\\u0029\";\n t[\"\\u321E\"] = \"\\u0028\\u110B\\u1169\\u1112\\u116E\\u0029\";\n t[\"\\u3220\"] = \"\\u0028\\u4E00\\u0029\";\n t[\"\\u3221\"] = \"\\u0028\\u4E8C\\u0029\";\n t[\"\\u3222\"] = \"\\u0028\\u4E09\\u0029\";\n t[\"\\u3223\"] = \"\\u0028\\u56DB\\u0029\";\n t[\"\\u3224\"] = \"\\u0028\\u4E94\\u0029\";\n t[\"\\u3225\"] = \"\\u0028\\u516D\\u0029\";\n t[\"\\u3226\"] = \"\\u0028\\u4E03\\u0029\";\n t[\"\\u3227\"] = \"\\u0028\\u516B\\u0029\";\n t[\"\\u3228\"] = \"\\u0028\\u4E5D\\u0029\";\n t[\"\\u3229\"] = \"\\u0028\\u5341\\u0029\";\n t[\"\\u322A\"] = \"\\u0028\\u6708\\u0029\";\n t[\"\\u322B\"] = \"\\u0028\\u706B\\u0029\";\n t[\"\\u322C\"] = \"\\u0028\\u6C34\\u0029\";\n t[\"\\u322D\"] = \"\\u0028\\u6728\\u0029\";\n t[\"\\u322E\"] = \"\\u0028\\u91D1\\u0029\";\n t[\"\\u322F\"] = \"\\u0028\\u571F\\u0029\";\n t[\"\\u3230\"] = \"\\u0028\\u65E5\\u0029\";\n t[\"\\u3231\"] = \"\\u0028\\u682A\\u0029\";\n t[\"\\u3232\"] = \"\\u0028\\u6709\\u0029\";\n t[\"\\u3233\"] = \"\\u0028\\u793E\\u0029\";\n t[\"\\u3234\"] = \"\\u0028\\u540D\\u0029\";\n t[\"\\u3235\"] = \"\\u0028\\u7279\\u0029\";\n t[\"\\u3236\"] = \"\\u0028\\u8CA1\\u0029\";\n t[\"\\u3237\"] = \"\\u0028\\u795D\\u0029\";\n t[\"\\u3238\"] = \"\\u0028\\u52B4\\u0029\";\n t[\"\\u3239\"] = \"\\u0028\\u4EE3\\u0029\";\n t[\"\\u323A\"] = \"\\u0028\\u547C\\u0029\";\n t[\"\\u323B\"] = \"\\u0028\\u5B66\\u0029\";\n t[\"\\u323C\"] = \"\\u0028\\u76E3\\u0029\";\n t[\"\\u323D\"] = \"\\u0028\\u4F01\\u0029\";\n t[\"\\u323E\"] = \"\\u0028\\u8CC7\\u0029\";\n t[\"\\u323F\"] = \"\\u0028\\u5354\\u0029\";\n t[\"\\u3240\"] = \"\\u0028\\u796D\\u0029\";\n t[\"\\u3241\"] = \"\\u0028\\u4F11\\u0029\";\n t[\"\\u3242\"] = \"\\u0028\\u81EA\\u0029\";\n t[\"\\u3243\"] = \"\\u0028\\u81F3\\u0029\";\n t[\"\\u32C0\"] = \"\\u0031\\u6708\";\n t[\"\\u32C1\"] = \"\\u0032\\u6708\";\n t[\"\\u32C2\"] = \"\\u0033\\u6708\";\n t[\"\\u32C3\"] = \"\\u0034\\u6708\";\n t[\"\\u32C4\"] = \"\\u0035\\u6708\";\n t[\"\\u32C5\"] = \"\\u0036\\u6708\";\n t[\"\\u32C6\"] = \"\\u0037\\u6708\";\n t[\"\\u32C7\"] = \"\\u0038\\u6708\";\n t[\"\\u32C8\"] = \"\\u0039\\u6708\";\n t[\"\\u32C9\"] = \"\\u0031\\u0030\\u6708\";\n t[\"\\u32CA\"] = \"\\u0031\\u0031\\u6708\";\n t[\"\\u32CB\"] = \"\\u0031\\u0032\\u6708\";\n t[\"\\u3358\"] = \"\\u0030\\u70B9\";\n t[\"\\u3359\"] = \"\\u0031\\u70B9\";\n t[\"\\u335A\"] = \"\\u0032\\u70B9\";\n t[\"\\u335B\"] = \"\\u0033\\u70B9\";\n t[\"\\u335C\"] = \"\\u0034\\u70B9\";\n t[\"\\u335D\"] = \"\\u0035\\u70B9\";\n t[\"\\u335E\"] = \"\\u0036\\u70B9\";\n t[\"\\u335F\"] = \"\\u0037\\u70B9\";\n t[\"\\u3360\"] = \"\\u0038\\u70B9\";\n t[\"\\u3361\"] = \"\\u0039\\u70B9\";\n t[\"\\u3362\"] = \"\\u0031\\u0030\\u70B9\";\n t[\"\\u3363\"] = \"\\u0031\\u0031\\u70B9\";\n t[\"\\u3364\"] = \"\\u0031\\u0032\\u70B9\";\n t[\"\\u3365\"] = \"\\u0031\\u0033\\u70B9\";\n t[\"\\u3366\"] = \"\\u0031\\u0034\\u70B9\";\n t[\"\\u3367\"] = \"\\u0031\\u0035\\u70B9\";\n t[\"\\u3368\"] = \"\\u0031\\u0036\\u70B9\";\n t[\"\\u3369\"] = \"\\u0031\\u0037\\u70B9\";\n t[\"\\u336A\"] = \"\\u0031\\u0038\\u70B9\";\n t[\"\\u336B\"] = \"\\u0031\\u0039\\u70B9\";\n t[\"\\u336C\"] = \"\\u0032\\u0030\\u70B9\";\n t[\"\\u336D\"] = \"\\u0032\\u0031\\u70B9\";\n t[\"\\u336E\"] = \"\\u0032\\u0032\\u70B9\";\n t[\"\\u336F\"] = \"\\u0032\\u0033\\u70B9\";\n t[\"\\u3370\"] = \"\\u0032\\u0034\\u70B9\";\n t[\"\\u33E0\"] = \"\\u0031\\u65E5\";\n t[\"\\u33E1\"] = \"\\u0032\\u65E5\";\n t[\"\\u33E2\"] = \"\\u0033\\u65E5\";\n t[\"\\u33E3\"] = \"\\u0034\\u65E5\";\n t[\"\\u33E4\"] = \"\\u0035\\u65E5\";\n t[\"\\u33E5\"] = \"\\u0036\\u65E5\";\n t[\"\\u33E6\"] = \"\\u0037\\u65E5\";\n t[\"\\u33E7\"] = \"\\u0038\\u65E5\";\n t[\"\\u33E8\"] = \"\\u0039\\u65E5\";\n t[\"\\u33E9\"] = \"\\u0031\\u0030\\u65E5\";\n t[\"\\u33EA\"] = \"\\u0031\\u0031\\u65E5\";\n t[\"\\u33EB\"] = \"\\u0031\\u0032\\u65E5\";\n t[\"\\u33EC\"] = \"\\u0031\\u0033\\u65E5\";\n t[\"\\u33ED\"] = \"\\u0031\\u0034\\u65E5\";\n t[\"\\u33EE\"] = \"\\u0031\\u0035\\u65E5\";\n t[\"\\u33EF\"] = \"\\u0031\\u0036\\u65E5\";\n t[\"\\u33F0\"] = \"\\u0031\\u0037\\u65E5\";\n t[\"\\u33F1\"] = \"\\u0031\\u0038\\u65E5\";\n t[\"\\u33F2\"] = \"\\u0031\\u0039\\u65E5\";\n t[\"\\u33F3\"] = \"\\u0032\\u0030\\u65E5\";\n t[\"\\u33F4\"] = \"\\u0032\\u0031\\u65E5\";\n t[\"\\u33F5\"] = \"\\u0032\\u0032\\u65E5\";\n t[\"\\u33F6\"] = \"\\u0032\\u0033\\u65E5\";\n t[\"\\u33F7\"] = \"\\u0032\\u0034\\u65E5\";\n t[\"\\u33F8\"] = \"\\u0032\\u0035\\u65E5\";\n t[\"\\u33F9\"] = \"\\u0032\\u0036\\u65E5\";\n t[\"\\u33FA\"] = \"\\u0032\\u0037\\u65E5\";\n t[\"\\u33FB\"] = \"\\u0032\\u0038\\u65E5\";\n t[\"\\u33FC\"] = \"\\u0032\\u0039\\u65E5\";\n t[\"\\u33FD\"] = \"\\u0033\\u0030\\u65E5\";\n t[\"\\u33FE\"] = \"\\u0033\\u0031\\u65E5\";\n t[\"\\uFB00\"] = \"\\u0066\\u0066\";\n t[\"\\uFB01\"] = \"\\u0066\\u0069\";\n t[\"\\uFB02\"] = \"\\u0066\\u006C\";\n t[\"\\uFB03\"] = \"\\u0066\\u0066\\u0069\";\n t[\"\\uFB04\"] = \"\\u0066\\u0066\\u006C\";\n t[\"\\uFB05\"] = \"\\u017F\\u0074\";\n t[\"\\uFB06\"] = \"\\u0073\\u0074\";\n t[\"\\uFB13\"] = \"\\u0574\\u0576\";\n t[\"\\uFB14\"] = \"\\u0574\\u0565\";\n t[\"\\uFB15\"] = \"\\u0574\\u056B\";\n t[\"\\uFB16\"] = \"\\u057E\\u0576\";\n t[\"\\uFB17\"] = \"\\u0574\\u056D\";\n t[\"\\uFB4F\"] = \"\\u05D0\\u05DC\";\n t[\"\\uFB50\"] = \"\\u0671\";\n t[\"\\uFB51\"] = \"\\u0671\";\n t[\"\\uFB52\"] = \"\\u067B\";\n t[\"\\uFB53\"] = \"\\u067B\";\n t[\"\\uFB54\"] = \"\\u067B\";\n t[\"\\uFB55\"] = \"\\u067B\";\n t[\"\\uFB56\"] = \"\\u067E\";\n t[\"\\uFB57\"] = \"\\u067E\";\n t[\"\\uFB58\"] = \"\\u067E\";\n t[\"\\uFB59\"] = \"\\u067E\";\n t[\"\\uFB5A\"] = \"\\u0680\";\n t[\"\\uFB5B\"] = \"\\u0680\";\n t[\"\\uFB5C\"] = \"\\u0680\";\n t[\"\\uFB5D\"] = \"\\u0680\";\n t[\"\\uFB5E\"] = \"\\u067A\";\n t[\"\\uFB5F\"] = \"\\u067A\";\n t[\"\\uFB60\"] = \"\\u067A\";\n t[\"\\uFB61\"] = \"\\u067A\";\n t[\"\\uFB62\"] = \"\\u067F\";\n t[\"\\uFB63\"] = \"\\u067F\";\n t[\"\\uFB64\"] = \"\\u067F\";\n t[\"\\uFB65\"] = \"\\u067F\";\n t[\"\\uFB66\"] = \"\\u0679\";\n t[\"\\uFB67\"] = \"\\u0679\";\n t[\"\\uFB68\"] = \"\\u0679\";\n t[\"\\uFB69\"] = \"\\u0679\";\n t[\"\\uFB6A\"] = \"\\u06A4\";\n t[\"\\uFB6B\"] = \"\\u06A4\";\n t[\"\\uFB6C\"] = \"\\u06A4\";\n t[\"\\uFB6D\"] = \"\\u06A4\";\n t[\"\\uFB6E\"] = \"\\u06A6\";\n t[\"\\uFB6F\"] = \"\\u06A6\";\n t[\"\\uFB70\"] = \"\\u06A6\";\n t[\"\\uFB71\"] = \"\\u06A6\";\n t[\"\\uFB72\"] = \"\\u0684\";\n t[\"\\uFB73\"] = \"\\u0684\";\n t[\"\\uFB74\"] = \"\\u0684\";\n t[\"\\uFB75\"] = \"\\u0684\";\n t[\"\\uFB76\"] = \"\\u0683\";\n t[\"\\uFB77\"] = \"\\u0683\";\n t[\"\\uFB78\"] = \"\\u0683\";\n t[\"\\uFB79\"] = \"\\u0683\";\n t[\"\\uFB7A\"] = \"\\u0686\";\n t[\"\\uFB7B\"] = \"\\u0686\";\n t[\"\\uFB7C\"] = \"\\u0686\";\n t[\"\\uFB7D\"] = \"\\u0686\";\n t[\"\\uFB7E\"] = \"\\u0687\";\n t[\"\\uFB7F\"] = \"\\u0687\";\n t[\"\\uFB80\"] = \"\\u0687\";\n t[\"\\uFB81\"] = \"\\u0687\";\n t[\"\\uFB82\"] = \"\\u068D\";\n t[\"\\uFB83\"] = \"\\u068D\";\n t[\"\\uFB84\"] = \"\\u068C\";\n t[\"\\uFB85\"] = \"\\u068C\";\n t[\"\\uFB86\"] = \"\\u068E\";\n t[\"\\uFB87\"] = \"\\u068E\";\n t[\"\\uFB88\"] = \"\\u0688\";\n t[\"\\uFB89\"] = \"\\u0688\";\n t[\"\\uFB8A\"] = \"\\u0698\";\n t[\"\\uFB8B\"] = \"\\u0698\";\n t[\"\\uFB8C\"] = \"\\u0691\";\n t[\"\\uFB8D\"] = \"\\u0691\";\n t[\"\\uFB8E\"] = \"\\u06A9\";\n t[\"\\uFB8F\"] = \"\\u06A9\";\n t[\"\\uFB90\"] = \"\\u06A9\";\n t[\"\\uFB91\"] = \"\\u06A9\";\n t[\"\\uFB92\"] = \"\\u06AF\";\n t[\"\\uFB93\"] = \"\\u06AF\";\n t[\"\\uFB94\"] = \"\\u06AF\";\n t[\"\\uFB95\"] = \"\\u06AF\";\n t[\"\\uFB96\"] = \"\\u06B3\";\n t[\"\\uFB97\"] = \"\\u06B3\";\n t[\"\\uFB98\"] = \"\\u06B3\";\n t[\"\\uFB99\"] = \"\\u06B3\";\n t[\"\\uFB9A\"] = \"\\u06B1\";\n t[\"\\uFB9B\"] = \"\\u06B1\";\n t[\"\\uFB9C\"] = \"\\u06B1\";\n t[\"\\uFB9D\"] = \"\\u06B1\";\n t[\"\\uFB9E\"] = \"\\u06BA\";\n t[\"\\uFB9F\"] = \"\\u06BA\";\n t[\"\\uFBA0\"] = \"\\u06BB\";\n t[\"\\uFBA1\"] = \"\\u06BB\";\n t[\"\\uFBA2\"] = \"\\u06BB\";\n t[\"\\uFBA3\"] = \"\\u06BB\";\n t[\"\\uFBA4\"] = \"\\u06C0\";\n t[\"\\uFBA5\"] = \"\\u06C0\";\n t[\"\\uFBA6\"] = \"\\u06C1\";\n t[\"\\uFBA7\"] = \"\\u06C1\";\n t[\"\\uFBA8\"] = \"\\u06C1\";\n t[\"\\uFBA9\"] = \"\\u06C1\";\n t[\"\\uFBAA\"] = \"\\u06BE\";\n t[\"\\uFBAB\"] = \"\\u06BE\";\n t[\"\\uFBAC\"] = \"\\u06BE\";\n t[\"\\uFBAD\"] = \"\\u06BE\";\n t[\"\\uFBAE\"] = \"\\u06D2\";\n t[\"\\uFBAF\"] = \"\\u06D2\";\n t[\"\\uFBB0\"] = \"\\u06D3\";\n t[\"\\uFBB1\"] = \"\\u06D3\";\n t[\"\\uFBD3\"] = \"\\u06AD\";\n t[\"\\uFBD4\"] = \"\\u06AD\";\n t[\"\\uFBD5\"] = \"\\u06AD\";\n t[\"\\uFBD6\"] = \"\\u06AD\";\n t[\"\\uFBD7\"] = \"\\u06C7\";\n t[\"\\uFBD8\"] = \"\\u06C7\";\n t[\"\\uFBD9\"] = \"\\u06C6\";\n t[\"\\uFBDA\"] = \"\\u06C6\";\n t[\"\\uFBDB\"] = \"\\u06C8\";\n t[\"\\uFBDC\"] = \"\\u06C8\";\n t[\"\\uFBDD\"] = \"\\u0677\";\n t[\"\\uFBDE\"] = \"\\u06CB\";\n t[\"\\uFBDF\"] = \"\\u06CB\";\n t[\"\\uFBE0\"] = \"\\u06C5\";\n t[\"\\uFBE1\"] = \"\\u06C5\";\n t[\"\\uFBE2\"] = \"\\u06C9\";\n t[\"\\uFBE3\"] = \"\\u06C9\";\n t[\"\\uFBE4\"] = \"\\u06D0\";\n t[\"\\uFBE5\"] = \"\\u06D0\";\n t[\"\\uFBE6\"] = \"\\u06D0\";\n t[\"\\uFBE7\"] = \"\\u06D0\";\n t[\"\\uFBE8\"] = \"\\u0649\";\n t[\"\\uFBE9\"] = \"\\u0649\";\n t[\"\\uFBEA\"] = \"\\u0626\\u0627\";\n t[\"\\uFBEB\"] = \"\\u0626\\u0627\";\n t[\"\\uFBEC\"] = \"\\u0626\\u06D5\";\n t[\"\\uFBED\"] = \"\\u0626\\u06D5\";\n t[\"\\uFBEE\"] = \"\\u0626\\u0648\";\n t[\"\\uFBEF\"] = \"\\u0626\\u0648\";\n t[\"\\uFBF0\"] = \"\\u0626\\u06C7\";\n t[\"\\uFBF1\"] = \"\\u0626\\u06C7\";\n t[\"\\uFBF2\"] = \"\\u0626\\u06C6\";\n t[\"\\uFBF3\"] = \"\\u0626\\u06C6\";\n t[\"\\uFBF4\"] = \"\\u0626\\u06C8\";\n t[\"\\uFBF5\"] = \"\\u0626\\u06C8\";\n t[\"\\uFBF6\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF7\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF8\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF9\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFA\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFB\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFC\"] = \"\\u06CC\";\n t[\"\\uFBFD\"] = \"\\u06CC\";\n t[\"\\uFBFE\"] = \"\\u06CC\";\n t[\"\\uFBFF\"] = \"\\u06CC\";\n t[\"\\uFC00\"] = \"\\u0626\\u062C\";\n t[\"\\uFC01\"] = \"\\u0626\\u062D\";\n t[\"\\uFC02\"] = \"\\u0626\\u0645\";\n t[\"\\uFC03\"] = \"\\u0626\\u0649\";\n t[\"\\uFC04\"] = \"\\u0626\\u064A\";\n t[\"\\uFC05\"] = \"\\u0628\\u062C\";\n t[\"\\uFC06\"] = \"\\u0628\\u062D\";\n t[\"\\uFC07\"] = \"\\u0628\\u062E\";\n t[\"\\uFC08\"] = \"\\u0628\\u0645\";\n t[\"\\uFC09\"] = \"\\u0628\\u0649\";\n t[\"\\uFC0A\"] = \"\\u0628\\u064A\";\n t[\"\\uFC0B\"] = \"\\u062A\\u062C\";\n t[\"\\uFC0C\"] = \"\\u062A\\u062D\";\n t[\"\\uFC0D\"] = \"\\u062A\\u062E\";\n t[\"\\uFC0E\"] = \"\\u062A\\u0645\";\n t[\"\\uFC0F\"] = \"\\u062A\\u0649\";\n t[\"\\uFC10\"] = \"\\u062A\\u064A\";\n t[\"\\uFC11\"] = \"\\u062B\\u062C\";\n t[\"\\uFC12\"] = \"\\u062B\\u0645\";\n t[\"\\uFC13\"] = \"\\u062B\\u0649\";\n t[\"\\uFC14\"] = \"\\u062B\\u064A\";\n t[\"\\uFC15\"] = \"\\u062C\\u062D\";\n t[\"\\uFC16\"] = \"\\u062C\\u0645\";\n t[\"\\uFC17\"] = \"\\u062D\\u062C\";\n t[\"\\uFC18\"] = \"\\u062D\\u0645\";\n t[\"\\uFC19\"] = \"\\u062E\\u062C\";\n t[\"\\uFC1A\"] = \"\\u062E\\u062D\";\n t[\"\\uFC1B\"] = \"\\u062E\\u0645\";\n t[\"\\uFC1C\"] = \"\\u0633\\u062C\";\n t[\"\\uFC1D\"] = \"\\u0633\\u062D\";\n t[\"\\uFC1E\"] = \"\\u0633\\u062E\";\n t[\"\\uFC1F\"] = \"\\u0633\\u0645\";\n t[\"\\uFC20\"] = \"\\u0635\\u062D\";\n t[\"\\uFC21\"] = \"\\u0635\\u0645\";\n t[\"\\uFC22\"] = \"\\u0636\\u062C\";\n t[\"\\uFC23\"] = \"\\u0636\\u062D\";\n t[\"\\uFC24\"] = \"\\u0636\\u062E\";\n t[\"\\uFC25\"] = \"\\u0636\\u0645\";\n t[\"\\uFC26\"] = \"\\u0637\\u062D\";\n t[\"\\uFC27\"] = \"\\u0637\\u0645\";\n t[\"\\uFC28\"] = \"\\u0638\\u0645\";\n t[\"\\uFC29\"] = \"\\u0639\\u062C\";\n t[\"\\uFC2A\"] = \"\\u0639\\u0645\";\n t[\"\\uFC2B\"] = \"\\u063A\\u062C\";\n t[\"\\uFC2C\"] = \"\\u063A\\u0645\";\n t[\"\\uFC2D\"] = \"\\u0641\\u062C\";\n t[\"\\uFC2E\"] = \"\\u0641\\u062D\";\n t[\"\\uFC2F\"] = \"\\u0641\\u062E\";\n t[\"\\uFC30\"] = \"\\u0641\\u0645\";\n t[\"\\uFC31\"] = \"\\u0641\\u0649\";\n t[\"\\uFC32\"] = \"\\u0641\\u064A\";\n t[\"\\uFC33\"] = \"\\u0642\\u062D\";\n t[\"\\uFC34\"] = \"\\u0642\\u0645\";\n t[\"\\uFC35\"] = \"\\u0642\\u0649\";\n t[\"\\uFC36\"] = \"\\u0642\\u064A\";\n t[\"\\uFC37\"] = \"\\u0643\\u0627\";\n t[\"\\uFC38\"] = \"\\u0643\\u062C\";\n t[\"\\uFC39\"] = \"\\u0643\\u062D\";\n t[\"\\uFC3A\"] = \"\\u0643\\u062E\";\n t[\"\\uFC3B\"] = \"\\u0643\\u0644\";\n t[\"\\uFC3C\"] = \"\\u0643\\u0645\";\n t[\"\\uFC3D\"] = \"\\u0643\\u0649\";\n t[\"\\uFC3E\"] = \"\\u0643\\u064A\";\n t[\"\\uFC3F\"] = \"\\u0644\\u062C\";\n t[\"\\uFC40\"] = \"\\u0644\\u062D\";\n t[\"\\uFC41\"] = \"\\u0644\\u062E\";\n t[\"\\uFC42\"] = \"\\u0644\\u0645\";\n t[\"\\uFC43\"] = \"\\u0644\\u0649\";\n t[\"\\uFC44\"] = \"\\u0644\\u064A\";\n t[\"\\uFC45\"] = \"\\u0645\\u062C\";\n t[\"\\uFC46\"] = \"\\u0645\\u062D\";\n t[\"\\uFC47\"] = \"\\u0645\\u062E\";\n t[\"\\uFC48\"] = \"\\u0645\\u0645\";\n t[\"\\uFC49\"] = \"\\u0645\\u0649\";\n t[\"\\uFC4A\"] = \"\\u0645\\u064A\";\n t[\"\\uFC4B\"] = \"\\u0646\\u062C\";\n t[\"\\uFC4C\"] = \"\\u0646\\u062D\";\n t[\"\\uFC4D\"] = \"\\u0646\\u062E\";\n t[\"\\uFC4E\"] = \"\\u0646\\u0645\";\n t[\"\\uFC4F\"] = \"\\u0646\\u0649\";\n t[\"\\uFC50\"] = \"\\u0646\\u064A\";\n t[\"\\uFC51\"] = \"\\u0647\\u062C\";\n t[\"\\uFC52\"] = \"\\u0647\\u0645\";\n t[\"\\uFC53\"] = \"\\u0647\\u0649\";\n t[\"\\uFC54\"] = \"\\u0647\\u064A\";\n t[\"\\uFC55\"] = \"\\u064A\\u062C\";\n t[\"\\uFC56\"] = \"\\u064A\\u062D\";\n t[\"\\uFC57\"] = \"\\u064A\\u062E\";\n t[\"\\uFC58\"] = \"\\u064A\\u0645\";\n t[\"\\uFC59\"] = \"\\u064A\\u0649\";\n t[\"\\uFC5A\"] = \"\\u064A\\u064A\";\n t[\"\\uFC5B\"] = \"\\u0630\\u0670\";\n t[\"\\uFC5C\"] = \"\\u0631\\u0670\";\n t[\"\\uFC5D\"] = \"\\u0649\\u0670\";\n t[\"\\uFC5E\"] = \"\\u0020\\u064C\\u0651\";\n t[\"\\uFC5F\"] = \"\\u0020\\u064D\\u0651\";\n t[\"\\uFC60\"] = \"\\u0020\\u064E\\u0651\";\n t[\"\\uFC61\"] = \"\\u0020\\u064F\\u0651\";\n t[\"\\uFC62\"] = \"\\u0020\\u0650\\u0651\";\n t[\"\\uFC63\"] = \"\\u0020\\u0651\\u0670\";\n t[\"\\uFC64\"] = \"\\u0626\\u0631\";\n t[\"\\uFC65\"] = \"\\u0626\\u0632\";\n t[\"\\uFC66\"] = \"\\u0626\\u0645\";\n t[\"\\uFC67\"] = \"\\u0626\\u0646\";\n t[\"\\uFC68\"] = \"\\u0626\\u0649\";\n t[\"\\uFC69\"] = \"\\u0626\\u064A\";\n t[\"\\uFC6A\"] = \"\\u0628\\u0631\";\n t[\"\\uFC6B\"] = \"\\u0628\\u0632\";\n t[\"\\uFC6C\"] = \"\\u0628\\u0645\";\n t[\"\\uFC6D\"] = \"\\u0628\\u0646\";\n t[\"\\uFC6E\"] = \"\\u0628\\u0649\";\n t[\"\\uFC6F\"] = \"\\u0628\\u064A\";\n t[\"\\uFC70\"] = \"\\u062A\\u0631\";\n t[\"\\uFC71\"] = \"\\u062A\\u0632\";\n t[\"\\uFC72\"] = \"\\u062A\\u0645\";\n t[\"\\uFC73\"] = \"\\u062A\\u0646\";\n t[\"\\uFC74\"] = \"\\u062A\\u0649\";\n t[\"\\uFC75\"] = \"\\u062A\\u064A\";\n t[\"\\uFC76\"] = \"\\u062B\\u0631\";\n t[\"\\uFC77\"] = \"\\u062B\\u0632\";\n t[\"\\uFC78\"] = \"\\u062B\\u0645\";\n t[\"\\uFC79\"] = \"\\u062B\\u0646\";\n t[\"\\uFC7A\"] = \"\\u062B\\u0649\";\n t[\"\\uFC7B\"] = \"\\u062B\\u064A\";\n t[\"\\uFC7C\"] = \"\\u0641\\u0649\";\n t[\"\\uFC7D\"] = \"\\u0641\\u064A\";\n t[\"\\uFC7E\"] = \"\\u0642\\u0649\";\n t[\"\\uFC7F\"] = \"\\u0642\\u064A\";\n t[\"\\uFC80\"] = \"\\u0643\\u0627\";\n t[\"\\uFC81\"] = \"\\u0643\\u0644\";\n t[\"\\uFC82\"] = \"\\u0643\\u0645\";\n t[\"\\uFC83\"] = \"\\u0643\\u0649\";\n t[\"\\uFC84\"] = \"\\u0643\\u064A\";\n t[\"\\uFC85\"] = \"\\u0644\\u0645\";\n t[\"\\uFC86\"] = \"\\u0644\\u0649\";\n t[\"\\uFC87\"] = \"\\u0644\\u064A\";\n t[\"\\uFC88\"] = \"\\u0645\\u0627\";\n t[\"\\uFC89\"] = \"\\u0645\\u0645\";\n t[\"\\uFC8A\"] = \"\\u0646\\u0631\";\n t[\"\\uFC8B\"] = \"\\u0646\\u0632\";\n t[\"\\uFC8C\"] = \"\\u0646\\u0645\";\n t[\"\\uFC8D\"] = \"\\u0646\\u0646\";\n t[\"\\uFC8E\"] = \"\\u0646\\u0649\";\n t[\"\\uFC8F\"] = \"\\u0646\\u064A\";\n t[\"\\uFC90\"] = \"\\u0649\\u0670\";\n t[\"\\uFC91\"] = \"\\u064A\\u0631\";\n t[\"\\uFC92\"] = \"\\u064A\\u0632\";\n t[\"\\uFC93\"] = \"\\u064A\\u0645\";\n t[\"\\uFC94\"] = \"\\u064A\\u0646\";\n t[\"\\uFC95\"] = \"\\u064A\\u0649\";\n t[\"\\uFC96\"] = \"\\u064A\\u064A\";\n t[\"\\uFC97\"] = \"\\u0626\\u062C\";\n t[\"\\uFC98\"] = \"\\u0626\\u062D\";\n t[\"\\uFC99\"] = \"\\u0626\\u062E\";\n t[\"\\uFC9A\"] = \"\\u0626\\u0645\";\n t[\"\\uFC9B\"] = \"\\u0626\\u0647\";\n t[\"\\uFC9C\"] = \"\\u0628\\u062C\";\n t[\"\\uFC9D\"] = \"\\u0628\\u062D\";\n t[\"\\uFC9E\"] = \"\\u0628\\u062E\";\n t[\"\\uFC9F\"] = \"\\u0628\\u0645\";\n t[\"\\uFCA0\"] = \"\\u0628\\u0647\";\n t[\"\\uFCA1\"] = \"\\u062A\\u062C\";\n t[\"\\uFCA2\"] = \"\\u062A\\u062D\";\n t[\"\\uFCA3\"] = \"\\u062A\\u062E\";\n t[\"\\uFCA4\"] = \"\\u062A\\u0645\";\n t[\"\\uFCA5\"] = \"\\u062A\\u0647\";\n t[\"\\uFCA6\"] = \"\\u062B\\u0645\";\n t[\"\\uFCA7\"] = \"\\u062C\\u062D\";\n t[\"\\uFCA8\"] = \"\\u062C\\u0645\";\n t[\"\\uFCA9\"] = \"\\u062D\\u062C\";\n t[\"\\uFCAA\"] = \"\\u062D\\u0645\";\n t[\"\\uFCAB\"] = \"\\u062E\\u062C\";\n t[\"\\uFCAC\"] = \"\\u062E\\u0645\";\n t[\"\\uFCAD\"] = \"\\u0633\\u062C\";\n t[\"\\uFCAE\"] = \"\\u0633\\u062D\";\n t[\"\\uFCAF\"] = \"\\u0633\\u062E\";\n t[\"\\uFCB0\"] = \"\\u0633\\u0645\";\n t[\"\\uFCB1\"] = \"\\u0635\\u062D\";\n t[\"\\uFCB2\"] = \"\\u0635\\u062E\";\n t[\"\\uFCB3\"] = \"\\u0635\\u0645\";\n t[\"\\uFCB4\"] = \"\\u0636\\u062C\";\n t[\"\\uFCB5\"] = \"\\u0636\\u062D\";\n t[\"\\uFCB6\"] = \"\\u0636\\u062E\";\n t[\"\\uFCB7\"] = \"\\u0636\\u0645\";\n t[\"\\uFCB8\"] = \"\\u0637\\u062D\";\n t[\"\\uFCB9\"] = \"\\u0638\\u0645\";\n t[\"\\uFCBA\"] = \"\\u0639\\u062C\";\n t[\"\\uFCBB\"] = \"\\u0639\\u0645\";\n t[\"\\uFCBC\"] = \"\\u063A\\u062C\";\n t[\"\\uFCBD\"] = \"\\u063A\\u0645\";\n t[\"\\uFCBE\"] = \"\\u0641\\u062C\";\n t[\"\\uFCBF\"] = \"\\u0641\\u062D\";\n t[\"\\uFCC0\"] = \"\\u0641\\u062E\";\n t[\"\\uFCC1\"] = \"\\u0641\\u0645\";\n t[\"\\uFCC2\"] = \"\\u0642\\u062D\";\n t[\"\\uFCC3\"] = \"\\u0642\\u0645\";\n t[\"\\uFCC4\"] = \"\\u0643\\u062C\";\n t[\"\\uFCC5\"] = \"\\u0643\\u062D\";\n t[\"\\uFCC6\"] = \"\\u0643\\u062E\";\n t[\"\\uFCC7\"] = \"\\u0643\\u0644\";\n t[\"\\uFCC8\"] = \"\\u0643\\u0645\";\n t[\"\\uFCC9\"] = \"\\u0644\\u062C\";\n t[\"\\uFCCA\"] = \"\\u0644\\u062D\";\n t[\"\\uFCCB\"] = \"\\u0644\\u062E\";\n t[\"\\uFCCC\"] = \"\\u0644\\u0645\";\n t[\"\\uFCCD\"] = \"\\u0644\\u0647\";\n t[\"\\uFCCE\"] = \"\\u0645\\u062C\";\n t[\"\\uFCCF\"] = \"\\u0645\\u062D\";\n t[\"\\uFCD0\"] = \"\\u0645\\u062E\";\n t[\"\\uFCD1\"] = \"\\u0645\\u0645\";\n t[\"\\uFCD2\"] = \"\\u0646\\u062C\";\n t[\"\\uFCD3\"] = \"\\u0646\\u062D\";\n t[\"\\uFCD4\"] = \"\\u0646\\u062E\";\n t[\"\\uFCD5\"] = \"\\u0646\\u0645\";\n t[\"\\uFCD6\"] = \"\\u0646\\u0647\";\n t[\"\\uFCD7\"] = \"\\u0647\\u062C\";\n t[\"\\uFCD8\"] = \"\\u0647\\u0645\";\n t[\"\\uFCD9\"] = \"\\u0647\\u0670\";\n t[\"\\uFCDA\"] = \"\\u064A\\u062C\";\n t[\"\\uFCDB\"] = \"\\u064A\\u062D\";\n t[\"\\uFCDC\"] = \"\\u064A\\u062E\";\n t[\"\\uFCDD\"] = \"\\u064A\\u0645\";\n t[\"\\uFCDE\"] = \"\\u064A\\u0647\";\n t[\"\\uFCDF\"] = \"\\u0626\\u0645\";\n t[\"\\uFCE0\"] = \"\\u0626\\u0647\";\n t[\"\\uFCE1\"] = \"\\u0628\\u0645\";\n t[\"\\uFCE2\"] = \"\\u0628\\u0647\";\n t[\"\\uFCE3\"] = \"\\u062A\\u0645\";\n t[\"\\uFCE4\"] = \"\\u062A\\u0647\";\n t[\"\\uFCE5\"] = \"\\u062B\\u0645\";\n t[\"\\uFCE6\"] = \"\\u062B\\u0647\";\n t[\"\\uFCE7\"] = \"\\u0633\\u0645\";\n t[\"\\uFCE8\"] = \"\\u0633\\u0647\";\n t[\"\\uFCE9\"] = \"\\u0634\\u0645\";\n t[\"\\uFCEA\"] = \"\\u0634\\u0647\";\n t[\"\\uFCEB\"] = \"\\u0643\\u0644\";\n t[\"\\uFCEC\"] = \"\\u0643\\u0645\";\n t[\"\\uFCED\"] = \"\\u0644\\u0645\";\n t[\"\\uFCEE\"] = \"\\u0646\\u0645\";\n t[\"\\uFCEF\"] = \"\\u0646\\u0647\";\n t[\"\\uFCF0\"] = \"\\u064A\\u0645\";\n t[\"\\uFCF1\"] = \"\\u064A\\u0647\";\n t[\"\\uFCF2\"] = \"\\u0640\\u064E\\u0651\";\n t[\"\\uFCF3\"] = \"\\u0640\\u064F\\u0651\";\n t[\"\\uFCF4\"] = \"\\u0640\\u0650\\u0651\";\n t[\"\\uFCF5\"] = \"\\u0637\\u0649\";\n t[\"\\uFCF6\"] = \"\\u0637\\u064A\";\n t[\"\\uFCF7\"] = \"\\u0639\\u0649\";\n t[\"\\uFCF8\"] = \"\\u0639\\u064A\";\n t[\"\\uFCF9\"] = \"\\u063A\\u0649\";\n t[\"\\uFCFA\"] = \"\\u063A\\u064A\";\n t[\"\\uFCFB\"] = \"\\u0633\\u0649\";\n t[\"\\uFCFC\"] = \"\\u0633\\u064A\";\n t[\"\\uFCFD\"] = \"\\u0634\\u0649\";\n t[\"\\uFCFE\"] = \"\\u0634\\u064A\";\n t[\"\\uFCFF\"] = \"\\u062D\\u0649\";\n t[\"\\uFD00\"] = \"\\u062D\\u064A\";\n t[\"\\uFD01\"] = \"\\u062C\\u0649\";\n t[\"\\uFD02\"] = \"\\u062C\\u064A\";\n t[\"\\uFD03\"] = \"\\u062E\\u0649\";\n t[\"\\uFD04\"] = \"\\u062E\\u064A\";\n t[\"\\uFD05\"] = \"\\u0635\\u0649\";\n t[\"\\uFD06\"] = \"\\u0635\\u064A\";\n t[\"\\uFD07\"] = \"\\u0636\\u0649\";\n t[\"\\uFD08\"] = \"\\u0636\\u064A\";\n t[\"\\uFD09\"] = \"\\u0634\\u062C\";\n t[\"\\uFD0A\"] = \"\\u0634\\u062D\";\n t[\"\\uFD0B\"] = \"\\u0634\\u062E\";\n t[\"\\uFD0C\"] = \"\\u0634\\u0645\";\n t[\"\\uFD0D\"] = \"\\u0634\\u0631\";\n t[\"\\uFD0E\"] = \"\\u0633\\u0631\";\n t[\"\\uFD0F\"] = \"\\u0635\\u0631\";\n t[\"\\uFD10\"] = \"\\u0636\\u0631\";\n t[\"\\uFD11\"] = \"\\u0637\\u0649\";\n t[\"\\uFD12\"] = \"\\u0637\\u064A\";\n t[\"\\uFD13\"] = \"\\u0639\\u0649\";\n t[\"\\uFD14\"] = \"\\u0639\\u064A\";\n t[\"\\uFD15\"] = \"\\u063A\\u0649\";\n t[\"\\uFD16\"] = \"\\u063A\\u064A\";\n t[\"\\uFD17\"] = \"\\u0633\\u0649\";\n t[\"\\uFD18\"] = \"\\u0633\\u064A\";\n t[\"\\uFD19\"] = \"\\u0634\\u0649\";\n t[\"\\uFD1A\"] = \"\\u0634\\u064A\";\n t[\"\\uFD1B\"] = \"\\u062D\\u0649\";\n t[\"\\uFD1C\"] = \"\\u062D\\u064A\";\n t[\"\\uFD1D\"] = \"\\u062C\\u0649\";\n t[\"\\uFD1E\"] = \"\\u062C\\u064A\";\n t[\"\\uFD1F\"] = \"\\u062E\\u0649\";\n t[\"\\uFD20\"] = \"\\u062E\\u064A\";\n t[\"\\uFD21\"] = \"\\u0635\\u0649\";\n t[\"\\uFD22\"] = \"\\u0635\\u064A\";\n t[\"\\uFD23\"] = \"\\u0636\\u0649\";\n t[\"\\uFD24\"] = \"\\u0636\\u064A\";\n t[\"\\uFD25\"] = \"\\u0634\\u062C\";\n t[\"\\uFD26\"] = \"\\u0634\\u062D\";\n t[\"\\uFD27\"] = \"\\u0634\\u062E\";\n t[\"\\uFD28\"] = \"\\u0634\\u0645\";\n t[\"\\uFD29\"] = \"\\u0634\\u0631\";\n t[\"\\uFD2A\"] = \"\\u0633\\u0631\";\n t[\"\\uFD2B\"] = \"\\u0635\\u0631\";\n t[\"\\uFD2C\"] = \"\\u0636\\u0631\";\n t[\"\\uFD2D\"] = \"\\u0634\\u062C\";\n t[\"\\uFD2E\"] = \"\\u0634\\u062D\";\n t[\"\\uFD2F\"] = \"\\u0634\\u062E\";\n t[\"\\uFD30\"] = \"\\u0634\\u0645\";\n t[\"\\uFD31\"] = \"\\u0633\\u0647\";\n t[\"\\uFD32\"] = \"\\u0634\\u0647\";\n t[\"\\uFD33\"] = \"\\u0637\\u0645\";\n t[\"\\uFD34\"] = \"\\u0633\\u062C\";\n t[\"\\uFD35\"] = \"\\u0633\\u062D\";\n t[\"\\uFD36\"] = \"\\u0633\\u062E\";\n t[\"\\uFD37\"] = \"\\u0634\\u062C\";\n t[\"\\uFD38\"] = \"\\u0634\\u062D\";\n t[\"\\uFD39\"] = \"\\u0634\\u062E\";\n t[\"\\uFD3A\"] = \"\\u0637\\u0645\";\n t[\"\\uFD3B\"] = \"\\u0638\\u0645\";\n t[\"\\uFD3C\"] = \"\\u0627\\u064B\";\n t[\"\\uFD3D\"] = \"\\u0627\\u064B\";\n t[\"\\uFD50\"] = \"\\u062A\\u062C\\u0645\";\n t[\"\\uFD51\"] = \"\\u062A\\u062D\\u062C\";\n t[\"\\uFD52\"] = \"\\u062A\\u062D\\u062C\";\n t[\"\\uFD53\"] = \"\\u062A\\u062D\\u0645\";\n t[\"\\uFD54\"] = \"\\u062A\\u062E\\u0645\";\n t[\"\\uFD55\"] = \"\\u062A\\u0645\\u062C\";\n t[\"\\uFD56\"] = \"\\u062A\\u0645\\u062D\";\n t[\"\\uFD57\"] = \"\\u062A\\u0645\\u062E\";\n t[\"\\uFD58\"] = \"\\u062C\\u0645\\u062D\";\n t[\"\\uFD59\"] = \"\\u062C\\u0645\\u062D\";\n t[\"\\uFD5A\"] = \"\\u062D\\u0645\\u064A\";\n t[\"\\uFD5B\"] = \"\\u062D\\u0645\\u0649\";\n t[\"\\uFD5C\"] = \"\\u0633\\u062D\\u062C\";\n t[\"\\uFD5D\"] = \"\\u0633\\u062C\\u062D\";\n t[\"\\uFD5E\"] = \"\\u0633\\u062C\\u0649\";\n t[\"\\uFD5F\"] = \"\\u0633\\u0645\\u062D\";\n t[\"\\uFD60\"] = \"\\u0633\\u0645\\u062D\";\n t[\"\\uFD61\"] = \"\\u0633\\u0645\\u062C\";\n t[\"\\uFD62\"] = \"\\u0633\\u0645\\u0645\";\n t[\"\\uFD63\"] = \"\\u0633\\u0645\\u0645\";\n t[\"\\uFD64\"] = \"\\u0635\\u062D\\u062D\";\n t[\"\\uFD65\"] = \"\\u0635\\u062D\\u062D\";\n t[\"\\uFD66\"] = \"\\u0635\\u0645\\u0645\";\n t[\"\\uFD67\"] = \"\\u0634\\u062D\\u0645\";\n t[\"\\uFD68\"] = \"\\u0634\\u062D\\u0645\";\n t[\"\\uFD69\"] = \"\\u0634\\u062C\\u064A\";\n t[\"\\uFD6A\"] = \"\\u0634\\u0645\\u062E\";\n t[\"\\uFD6B\"] = \"\\u0634\\u0645\\u062E\";\n t[\"\\uFD6C\"] = \"\\u0634\\u0645\\u0645\";\n t[\"\\uFD6D\"] = \"\\u0634\\u0645\\u0645\";\n t[\"\\uFD6E\"] = \"\\u0636\\u062D\\u0649\";\n t[\"\\uFD6F\"] = \"\\u0636\\u062E\\u0645\";\n t[\"\\uFD70\"] = \"\\u0636\\u062E\\u0645\";\n t[\"\\uFD71\"] = \"\\u0637\\u0645\\u062D\";\n t[\"\\uFD72\"] = \"\\u0637\\u0645\\u062D\";\n t[\"\\uFD73\"] = \"\\u0637\\u0645\\u0645\";\n t[\"\\uFD74\"] = \"\\u0637\\u0645\\u064A\";\n t[\"\\uFD75\"] = \"\\u0639\\u062C\\u0645\";\n t[\"\\uFD76\"] = \"\\u0639\\u0645\\u0645\";\n t[\"\\uFD77\"] = \"\\u0639\\u0645\\u0645\";\n t[\"\\uFD78\"] = \"\\u0639\\u0645\\u0649\";\n t[\"\\uFD79\"] = \"\\u063A\\u0645\\u0645\";\n t[\"\\uFD7A\"] = \"\\u063A\\u0645\\u064A\";\n t[\"\\uFD7B\"] = \"\\u063A\\u0645\\u0649\";\n t[\"\\uFD7C\"] = \"\\u0641\\u062E\\u0645\";\n t[\"\\uFD7D\"] = \"\\u0641\\u062E\\u0645\";\n t[\"\\uFD7E\"] = \"\\u0642\\u0645\\u062D\";\n t[\"\\uFD7F\"] = \"\\u0642\\u0645\\u0645\";\n t[\"\\uFD80\"] = \"\\u0644\\u062D\\u0645\";\n t[\"\\uFD81\"] = \"\\u0644\\u062D\\u064A\";\n t[\"\\uFD82\"] = \"\\u0644\\u062D\\u0649\";\n t[\"\\uFD83\"] = \"\\u0644\\u062C\\u062C\";\n t[\"\\uFD84\"] = \"\\u0644\\u062C\\u062C\";\n t[\"\\uFD85\"] = \"\\u0644\\u062E\\u0645\";\n t[\"\\uFD86\"] = \"\\u0644\\u062E\\u0645\";\n t[\"\\uFD87\"] = \"\\u0644\\u0645\\u062D\";\n t[\"\\uFD88\"] = \"\\u0644\\u0645\\u062D\";\n t[\"\\uFD89\"] = \"\\u0645\\u062D\\u062C\";\n t[\"\\uFD8A\"] = \"\\u0645\\u062D\\u0645\";\n t[\"\\uFD8B\"] = \"\\u0645\\u062D\\u064A\";\n t[\"\\uFD8C\"] = \"\\u0645\\u062C\\u062D\";\n t[\"\\uFD8D\"] = \"\\u0645\\u062C\\u0645\";\n t[\"\\uFD8E\"] = \"\\u0645\\u062E\\u062C\";\n t[\"\\uFD8F\"] = \"\\u0645\\u062E\\u0645\";\n t[\"\\uFD92\"] = \"\\u0645\\u062C\\u062E\";\n t[\"\\uFD93\"] = \"\\u0647\\u0645\\u062C\";\n t[\"\\uFD94\"] = \"\\u0647\\u0645\\u0645\";\n t[\"\\uFD95\"] = \"\\u0646\\u062D\\u0645\";\n t[\"\\uFD96\"] = \"\\u0646\\u062D\\u0649\";\n t[\"\\uFD97\"] = \"\\u0646\\u062C\\u0645\";\n t[\"\\uFD98\"] = \"\\u0646\\u062C\\u0645\";\n t[\"\\uFD99\"] = \"\\u0646\\u062C\\u0649\";\n t[\"\\uFD9A\"] = \"\\u0646\\u0645\\u064A\";\n t[\"\\uFD9B\"] = \"\\u0646\\u0645\\u0649\";\n t[\"\\uFD9C\"] = \"\\u064A\\u0645\\u0645\";\n t[\"\\uFD9D\"] = \"\\u064A\\u0645\\u0645\";\n t[\"\\uFD9E\"] = \"\\u0628\\u062E\\u064A\";\n t[\"\\uFD9F\"] = \"\\u062A\\u062C\\u064A\";\n t[\"\\uFDA0\"] = \"\\u062A\\u062C\\u0649\";\n t[\"\\uFDA1\"] = \"\\u062A\\u062E\\u064A\";\n t[\"\\uFDA2\"] = \"\\u062A\\u062E\\u0649\";\n t[\"\\uFDA3\"] = \"\\u062A\\u0645\\u064A\";\n t[\"\\uFDA4\"] = \"\\u062A\\u0645\\u0649\";\n t[\"\\uFDA5\"] = \"\\u062C\\u0645\\u064A\";\n t[\"\\uFDA6\"] = \"\\u062C\\u062D\\u0649\";\n t[\"\\uFDA7\"] = \"\\u062C\\u0645\\u0649\";\n t[\"\\uFDA8\"] = \"\\u0633\\u062E\\u0649\";\n t[\"\\uFDA9\"] = \"\\u0635\\u062D\\u064A\";\n t[\"\\uFDAA\"] = \"\\u0634\\u062D\\u064A\";\n t[\"\\uFDAB\"] = \"\\u0636\\u062D\\u064A\";\n t[\"\\uFDAC\"] = \"\\u0644\\u062C\\u064A\";\n t[\"\\uFDAD\"] = \"\\u0644\\u0645\\u064A\";\n t[\"\\uFDAE\"] = \"\\u064A\\u062D\\u064A\";\n t[\"\\uFDAF\"] = \"\\u064A\\u062C\\u064A\";\n t[\"\\uFDB0\"] = \"\\u064A\\u0645\\u064A\";\n t[\"\\uFDB1\"] = \"\\u0645\\u0645\\u064A\";\n t[\"\\uFDB2\"] = \"\\u0642\\u0645\\u064A\";\n t[\"\\uFDB3\"] = \"\\u0646\\u062D\\u064A\";\n t[\"\\uFDB4\"] = \"\\u0642\\u0645\\u062D\";\n t[\"\\uFDB5\"] = \"\\u0644\\u062D\\u0645\";\n t[\"\\uFDB6\"] = \"\\u0639\\u0645\\u064A\";\n t[\"\\uFDB7\"] = \"\\u0643\\u0645\\u064A\";\n t[\"\\uFDB8\"] = \"\\u0646\\u062C\\u062D\";\n t[\"\\uFDB9\"] = \"\\u0645\\u062E\\u064A\";\n t[\"\\uFDBA\"] = \"\\u0644\\u062C\\u0645\";\n t[\"\\uFDBB\"] = \"\\u0643\\u0645\\u0645\";\n t[\"\\uFDBC\"] = \"\\u0644\\u062C\\u0645\";\n t[\"\\uFDBD\"] = \"\\u0646\\u062C\\u062D\";\n t[\"\\uFDBE\"] = \"\\u062C\\u062D\\u064A\";\n t[\"\\uFDBF\"] = \"\\u062D\\u062C\\u064A\";\n t[\"\\uFDC0\"] = \"\\u0645\\u062C\\u064A\";\n t[\"\\uFDC1\"] = \"\\u0641\\u0645\\u064A\";\n t[\"\\uFDC2\"] = \"\\u0628\\u062D\\u064A\";\n t[\"\\uFDC3\"] = \"\\u0643\\u0645\\u0645\";\n t[\"\\uFDC4\"] = \"\\u0639\\u062C\\u0645\";\n t[\"\\uFDC5\"] = \"\\u0635\\u0645\\u0645\";\n t[\"\\uFDC6\"] = \"\\u0633\\u062E\\u064A\";\n t[\"\\uFDC7\"] = \"\\u0646\\u062C\\u064A\";\n t[\"\\uFE49\"] = \"\\u203E\";\n t[\"\\uFE4A\"] = \"\\u203E\";\n t[\"\\uFE4B\"] = \"\\u203E\";\n t[\"\\uFE4C\"] = \"\\u203E\";\n t[\"\\uFE4D\"] = \"\\u005F\";\n t[\"\\uFE4E\"] = \"\\u005F\";\n t[\"\\uFE4F\"] = \"\\u005F\";\n t[\"\\uFE80\"] = \"\\u0621\";\n t[\"\\uFE81\"] = \"\\u0622\";\n t[\"\\uFE82\"] = \"\\u0622\";\n t[\"\\uFE83\"] = \"\\u0623\";\n t[\"\\uFE84\"] = \"\\u0623\";\n t[\"\\uFE85\"] = \"\\u0624\";\n t[\"\\uFE86\"] = \"\\u0624\";\n t[\"\\uFE87\"] = \"\\u0625\";\n t[\"\\uFE88\"] = \"\\u0625\";\n t[\"\\uFE89\"] = \"\\u0626\";\n t[\"\\uFE8A\"] = \"\\u0626\";\n t[\"\\uFE8B\"] = \"\\u0626\";\n t[\"\\uFE8C\"] = \"\\u0626\";\n t[\"\\uFE8D\"] = \"\\u0627\";\n t[\"\\uFE8E\"] = \"\\u0627\";\n t[\"\\uFE8F\"] = \"\\u0628\";\n t[\"\\uFE90\"] = \"\\u0628\";\n t[\"\\uFE91\"] = \"\\u0628\";\n t[\"\\uFE92\"] = \"\\u0628\";\n t[\"\\uFE93\"] = \"\\u0629\";\n t[\"\\uFE94\"] = \"\\u0629\";\n t[\"\\uFE95\"] = \"\\u062A\";\n t[\"\\uFE96\"] = \"\\u062A\";\n t[\"\\uFE97\"] = \"\\u062A\";\n t[\"\\uFE98\"] = \"\\u062A\";\n t[\"\\uFE99\"] = \"\\u062B\";\n t[\"\\uFE9A\"] = \"\\u062B\";\n t[\"\\uFE9B\"] = \"\\u062B\";\n t[\"\\uFE9C\"] = \"\\u062B\";\n t[\"\\uFE9D\"] = \"\\u062C\";\n t[\"\\uFE9E\"] = \"\\u062C\";\n t[\"\\uFE9F\"] = \"\\u062C\";\n t[\"\\uFEA0\"] = \"\\u062C\";\n t[\"\\uFEA1\"] = \"\\u062D\";\n t[\"\\uFEA2\"] = \"\\u062D\";\n t[\"\\uFEA3\"] = \"\\u062D\";\n t[\"\\uFEA4\"] = \"\\u062D\";\n t[\"\\uFEA5\"] = \"\\u062E\";\n t[\"\\uFEA6\"] = \"\\u062E\";\n t[\"\\uFEA7\"] = \"\\u062E\";\n t[\"\\uFEA8\"] = \"\\u062E\";\n t[\"\\uFEA9\"] = \"\\u062F\";\n t[\"\\uFEAA\"] = \"\\u062F\";\n t[\"\\uFEAB\"] = \"\\u0630\";\n t[\"\\uFEAC\"] = \"\\u0630\";\n t[\"\\uFEAD\"] = \"\\u0631\";\n t[\"\\uFEAE\"] = \"\\u0631\";\n t[\"\\uFEAF\"] = \"\\u0632\";\n t[\"\\uFEB0\"] = \"\\u0632\";\n t[\"\\uFEB1\"] = \"\\u0633\";\n t[\"\\uFEB2\"] = \"\\u0633\";\n t[\"\\uFEB3\"] = \"\\u0633\";\n t[\"\\uFEB4\"] = \"\\u0633\";\n t[\"\\uFEB5\"] = \"\\u0634\";\n t[\"\\uFEB6\"] = \"\\u0634\";\n t[\"\\uFEB7\"] = \"\\u0634\";\n t[\"\\uFEB8\"] = \"\\u0634\";\n t[\"\\uFEB9\"] = \"\\u0635\";\n t[\"\\uFEBA\"] = \"\\u0635\";\n t[\"\\uFEBB\"] = \"\\u0635\";\n t[\"\\uFEBC\"] = \"\\u0635\";\n t[\"\\uFEBD\"] = \"\\u0636\";\n t[\"\\uFEBE\"] = \"\\u0636\";\n t[\"\\uFEBF\"] = \"\\u0636\";\n t[\"\\uFEC0\"] = \"\\u0636\";\n t[\"\\uFEC1\"] = \"\\u0637\";\n t[\"\\uFEC2\"] = \"\\u0637\";\n t[\"\\uFEC3\"] = \"\\u0637\";\n t[\"\\uFEC4\"] = \"\\u0637\";\n t[\"\\uFEC5\"] = \"\\u0638\";\n t[\"\\uFEC6\"] = \"\\u0638\";\n t[\"\\uFEC7\"] = \"\\u0638\";\n t[\"\\uFEC8\"] = \"\\u0638\";\n t[\"\\uFEC9\"] = \"\\u0639\";\n t[\"\\uFECA\"] = \"\\u0639\";\n t[\"\\uFECB\"] = \"\\u0639\";\n t[\"\\uFECC\"] = \"\\u0639\";\n t[\"\\uFECD\"] = \"\\u063A\";\n t[\"\\uFECE\"] = \"\\u063A\";\n t[\"\\uFECF\"] = \"\\u063A\";\n t[\"\\uFED0\"] = \"\\u063A\";\n t[\"\\uFED1\"] = \"\\u0641\";\n t[\"\\uFED2\"] = \"\\u0641\";\n t[\"\\uFED3\"] = \"\\u0641\";\n t[\"\\uFED4\"] = \"\\u0641\";\n t[\"\\uFED5\"] = \"\\u0642\";\n t[\"\\uFED6\"] = \"\\u0642\";\n t[\"\\uFED7\"] = \"\\u0642\";\n t[\"\\uFED8\"] = \"\\u0642\";\n t[\"\\uFED9\"] = \"\\u0643\";\n t[\"\\uFEDA\"] = \"\\u0643\";\n t[\"\\uFEDB\"] = \"\\u0643\";\n t[\"\\uFEDC\"] = \"\\u0643\";\n t[\"\\uFEDD\"] = \"\\u0644\";\n t[\"\\uFEDE\"] = \"\\u0644\";\n t[\"\\uFEDF\"] = \"\\u0644\";\n t[\"\\uFEE0\"] = \"\\u0644\";\n t[\"\\uFEE1\"] = \"\\u0645\";\n t[\"\\uFEE2\"] = \"\\u0645\";\n t[\"\\uFEE3\"] = \"\\u0645\";\n t[\"\\uFEE4\"] = \"\\u0645\";\n t[\"\\uFEE5\"] = \"\\u0646\";\n t[\"\\uFEE6\"] = \"\\u0646\";\n t[\"\\uFEE7\"] = \"\\u0646\";\n t[\"\\uFEE8\"] = \"\\u0646\";\n t[\"\\uFEE9\"] = \"\\u0647\";\n t[\"\\uFEEA\"] = \"\\u0647\";\n t[\"\\uFEEB\"] = \"\\u0647\";\n t[\"\\uFEEC\"] = \"\\u0647\";\n t[\"\\uFEED\"] = \"\\u0648\";\n t[\"\\uFEEE\"] = \"\\u0648\";\n t[\"\\uFEEF\"] = \"\\u0649\";\n t[\"\\uFEF0\"] = \"\\u0649\";\n t[\"\\uFEF1\"] = \"\\u064A\";\n t[\"\\uFEF2\"] = \"\\u064A\";\n t[\"\\uFEF3\"] = \"\\u064A\";\n t[\"\\uFEF4\"] = \"\\u064A\";\n t[\"\\uFEF5\"] = \"\\u0644\\u0622\";\n t[\"\\uFEF6\"] = \"\\u0644\\u0622\";\n t[\"\\uFEF7\"] = \"\\u0644\\u0623\";\n t[\"\\uFEF8\"] = \"\\u0644\\u0623\";\n t[\"\\uFEF9\"] = \"\\u0644\\u0625\";\n t[\"\\uFEFA\"] = \"\\u0644\\u0625\";\n t[\"\\uFEFB\"] = \"\\u0644\\u0627\";\n t[\"\\uFEFC\"] = \"\\u0644\\u0627\";\n});\nfunction reverseIfRtl(chars) {\n var charsLength = chars.length;\n if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n  return chars;\n }\n var s = \"\";\n for (var ii = charsLength - 1; ii >= 0; ii--) {\n  s += chars[ii];\n }\n return s;\n}\nexports.mapSpecialUnicodeValues = mapSpecialUnicodeValues;\nexports.reverseIfRtl = reverseIfRtl;\nexports.getUnicodeRangeFor = getUnicodeRangeFor;\nexports.getNormalizedUnicodes = getNormalizedUnicodes;\nexports.getUnicodeForGlyph = getUnicodeForGlyph;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontRendererFactory = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(30);\n\nvar _glyphlist = __w_pdfjs_require__(33);\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar FontRendererFactory = function FontRendererFactoryClosure() {\n  function getLong(data, offset) {\n    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n  }\n\n  function getUshort(data, offset) {\n    return data[offset] << 8 | data[offset + 1];\n  }\n\n  function getSubroutineBias(subrs) {\n    const numSubrs = subrs.length;\n    let bias = 32768;\n\n    if (numSubrs < 1240) {\n      bias = 107;\n    } else if (numSubrs < 33900) {\n      bias = 1131;\n    }\n\n    return bias;\n  }\n\n  function parseCmap(data, start, end) {\n    var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);\n    var format = getUshort(data, start + offset);\n    var ranges, p, i;\n\n    if (format === 4) {\n      getUshort(data, start + offset + 2);\n      var segCount = getUshort(data, start + offset + 6) >> 1;\n      p = start + offset + 14;\n      ranges = [];\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i] = {\n          end: getUshort(data, p)\n        };\n      }\n\n      p += 2;\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].start = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].idDelta = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        var idOffset = getUshort(data, p);\n\n        if (idOffset === 0) {\n          continue;\n        }\n\n        ranges[i].ids = [];\n\n        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n          ranges[i].ids[j] = getUshort(data, p + idOffset);\n          idOffset += 2;\n        }\n      }\n\n      return ranges;\n    } else if (format === 12) {\n      getLong(data, start + offset + 4);\n      var groups = getLong(data, start + offset + 12);\n      p = start + offset + 16;\n      ranges = [];\n\n      for (i = 0; i < groups; i++) {\n        ranges.push({\n          start: getLong(data, p),\n          end: getLong(data, p + 4),\n          idDelta: getLong(data, p + 8) - getLong(data, p)\n        });\n        p += 12;\n      }\n\n      return ranges;\n    }\n\n    throw new _util.FormatError(`unsupported cmap: ${format}`);\n  }\n\n  function parseCff(data, start, end, seacAnalysisEnabled) {\n    var properties = {};\n    var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);\n    var cff = parser.parse();\n    return {\n      glyphs: cff.charStrings.objects,\n      subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,\n      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n      isCFFCIDFont: cff.isCIDFont,\n      fdSelect: cff.fdSelect,\n      fdArray: cff.fdArray\n    };\n  }\n\n  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n    var itemSize, itemDecode;\n\n    if (isGlyphLocationsLong) {\n      itemSize = 4;\n\n      itemDecode = function fontItemDecodeLong(data, offset) {\n        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n      };\n    } else {\n      itemSize = 2;\n\n      itemDecode = function fontItemDecode(data, offset) {\n        return data[offset] << 9 | data[offset + 1] << 1;\n      };\n    }\n\n    var glyphs = [];\n    var startOffset = itemDecode(loca, 0);\n\n    for (var j = itemSize; j < loca.length; j += itemSize) {\n      var endOffset = itemDecode(loca, j);\n      glyphs.push(glyf.subarray(startOffset, endOffset));\n      startOffset = endOffset;\n    }\n\n    return glyphs;\n  }\n\n  function lookupCmap(ranges, unicode) {\n    var code = unicode.codePointAt(0),\n        gid = 0;\n    var l = 0,\n        r = ranges.length - 1;\n\n    while (l < r) {\n      var c = l + r + 1 >> 1;\n\n      if (code < ranges[c].start) {\n        r = c - 1;\n      } else {\n        l = c;\n      }\n    }\n\n    if (ranges[l].start <= code && code <= ranges[l].end) {\n      gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;\n    }\n\n    return {\n      charCode: code,\n      glyphId: gid\n    };\n  }\n\n  function compileGlyf(code, cmds, font) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function quadraticCurveTo(xa, ya, x, y) {\n      cmds.push({\n        cmd: \"quadraticCurveTo\",\n        args: [xa, ya, x, y]\n      });\n    }\n\n    var i = 0;\n    var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;\n    var flags;\n    var x = 0,\n        y = 0;\n    i += 10;\n\n    if (numberOfContours < 0) {\n      do {\n        flags = code[i] << 8 | code[i + 1];\n        var glyphIndex = code[i + 2] << 8 | code[i + 3];\n        i += 4;\n        var arg1, arg2;\n\n        if (flags & 0x01) {\n          arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;\n          arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;\n          i += 4;\n        } else {\n          arg1 = code[i++];\n          arg2 = code[i++];\n        }\n\n        if (flags & 0x02) {\n          x = arg1;\n          y = arg2;\n        } else {\n          x = 0;\n          y = 0;\n        }\n\n        var scaleX = 1,\n            scaleY = 1,\n            scale01 = 0,\n            scale10 = 0;\n\n        if (flags & 0x08) {\n          scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          i += 2;\n        } else if (flags & 0x40) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          i += 4;\n        } else if (flags & 0x80) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;\n          scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;\n          i += 8;\n        }\n\n        var subglyph = font.glyphs[glyphIndex];\n\n        if (subglyph) {\n          cmds.push({\n            cmd: \"save\"\n          });\n          cmds.push({\n            cmd: \"transform\",\n            args: [scaleX, scale01, scale10, scaleY, x, y]\n          });\n          compileGlyf(subglyph, cmds, font);\n          cmds.push({\n            cmd: \"restore\"\n          });\n        }\n      } while (flags & 0x20);\n    } else {\n      var endPtsOfContours = [];\n      var j, jj;\n\n      for (j = 0; j < numberOfContours; j++) {\n        endPtsOfContours.push(code[i] << 8 | code[i + 1]);\n        i += 2;\n      }\n\n      var instructionLength = code[i] << 8 | code[i + 1];\n      i += 2 + instructionLength;\n      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n      var points = [];\n\n      while (points.length < numberOfPoints) {\n        flags = code[i++];\n        var repeat = 1;\n\n        if (flags & 0x08) {\n          repeat += code[i++];\n        }\n\n        while (repeat-- > 0) {\n          points.push({\n            flags\n          });\n        }\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x12) {\n          case 0x00:\n            x += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x02:\n            x -= code[i++];\n            break;\n\n          case 0x12:\n            x += code[i++];\n            break;\n        }\n\n        points[j].x = x;\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x24) {\n          case 0x00:\n            y += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x04:\n            y -= code[i++];\n            break;\n\n          case 0x24:\n            y += code[i++];\n            break;\n        }\n\n        points[j].y = y;\n      }\n\n      var startPoint = 0;\n\n      for (i = 0; i < numberOfContours; i++) {\n        var endPoint = endPtsOfContours[i];\n        var contour = points.slice(startPoint, endPoint + 1);\n\n        if (contour[0].flags & 1) {\n          contour.push(contour[0]);\n        } else if (contour[contour.length - 1].flags & 1) {\n          contour.unshift(contour[contour.length - 1]);\n        } else {\n          var p = {\n            flags: 1,\n            x: (contour[0].x + contour[contour.length - 1].x) / 2,\n            y: (contour[0].y + contour[contour.length - 1].y) / 2\n          };\n          contour.unshift(p);\n          contour.push(p);\n        }\n\n        moveTo(contour[0].x, contour[0].y);\n\n        for (j = 1, jj = contour.length; j < jj; j++) {\n          if (contour[j].flags & 1) {\n            lineTo(contour[j].x, contour[j].y);\n          } else if (contour[j + 1].flags & 1) {\n            quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);\n            j++;\n          } else {\n            quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);\n          }\n        }\n\n        startPoint = endPoint + 1;\n      }\n    }\n  }\n\n  function compileCharString(charStringCode, cmds, font, glyphId) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      cmds.push({\n        cmd: \"bezierCurveTo\",\n        args: [x1, y1, x2, y2, x, y]\n      });\n    }\n\n    var stack = [];\n    var x = 0,\n        y = 0;\n    var stems = 0;\n\n    function parse(code) {\n      var i = 0;\n\n      while (i < code.length) {\n        var stackClean = false;\n        var v = code[i++];\n        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;\n\n        switch (v) {\n          case 1:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 3:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 4:\n            y += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 5:\n            while (stack.length > 0) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 6:\n            while (stack.length > 0) {\n              x += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 7:\n            while (stack.length > 0) {\n              y += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              x += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 8:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 10:\n            n = stack.pop();\n            subrCode = null;\n\n            if (font.isCFFCIDFont) {\n              const fdIndex = font.fdSelect.getFDIndex(glyphId);\n\n              if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                const fontDict = font.fdArray[fdIndex];\n                let subrs;\n\n                if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                  subrs = fontDict.privateDict.subrsIndex.objects;\n                }\n\n                if (subrs) {\n                  n += getSubroutineBias(subrs);\n                  subrCode = subrs[n];\n                }\n              } else {\n                (0, _util.warn)(\"Invalid fd index for glyph index.\");\n              }\n            } else {\n              subrCode = font.subrs[n + font.subrsBias];\n            }\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 11:\n            return;\n\n          case 12:\n            v = code[i++];\n\n            switch (v) {\n              case 34:\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y1 = y + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y, xb, y1, x, y1);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y, x, y);\n                break;\n\n              case 35:\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                stack.pop();\n                break;\n\n              case 36:\n                xa = x + stack.shift();\n                y1 = y + stack.shift();\n                xb = xa + stack.shift();\n                y2 = y1 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y2, x, y2);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y3 = y2 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y2, xb, y3, x, y);\n                break;\n\n              case 37:\n                var x0 = x,\n                    y0 = y;\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb;\n                y = yb;\n\n                if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                break;\n\n              default:\n                throw new _util.FormatError(`unknown operator: 12 ${v}`);\n            }\n\n            break;\n\n          case 14:\n            if (stack.length >= 4) {\n              var achar = stack.pop();\n              var bchar = stack.pop();\n              y = stack.pop();\n              x = stack.pop();\n              cmds.push({\n                cmd: \"save\"\n              });\n              cmds.push({\n                cmd: \"translate\",\n                args: [x, y]\n              });\n              var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n              cmds.push({\n                cmd: \"restore\"\n              });\n              cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n            }\n\n            return;\n\n          case 18:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 19:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 20:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 21:\n            y += stack.pop();\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 22:\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 23:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 24:\n            while (stack.length > 2) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            x += stack.shift();\n            y += stack.shift();\n            lineTo(x, y);\n            break;\n\n          case 25:\n            while (stack.length > 6) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            xa = x + stack.shift();\n            ya = y + stack.shift();\n            xb = xa + stack.shift();\n            yb = ya + stack.shift();\n            x = xb + stack.shift();\n            y = yb + stack.shift();\n            bezierCurveTo(xa, ya, xb, yb, x, y);\n            break;\n\n          case 26:\n            if (stack.length % 2) {\n              x += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb;\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 27:\n            if (stack.length % 2) {\n              y += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb;\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 28:\n            stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);\n            i += 2;\n            break;\n\n          case 29:\n            n = stack.pop() + font.gsubrsBias;\n            subrCode = font.gsubrs[n];\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 30:\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 31:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          default:\n            if (v < 32) {\n              throw new _util.FormatError(`unknown operator: ${v}`);\n            }\n\n            if (v < 247) {\n              stack.push(v - 139);\n            } else if (v < 251) {\n              stack.push((v - 247) * 256 + code[i++] + 108);\n            } else if (v < 255) {\n              stack.push(-(v - 251) * 256 - code[i++] - 108);\n            } else {\n              stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);\n              i += 4;\n            }\n\n            break;\n        }\n\n        if (stackClean) {\n          stack.length = 0;\n        }\n      }\n    }\n\n    parse(charStringCode);\n  }\n\n  const NOOP = [];\n\n  class CompiledFont {\n    constructor(fontMatrix) {\n      if (this.constructor === CompiledFont) {\n        (0, _util.unreachable)(\"Cannot initialize CompiledFont.\");\n      }\n\n      this.fontMatrix = fontMatrix;\n      this.compiledGlyphs = Object.create(null);\n      this.compiledCharCodeToGlyphId = Object.create(null);\n    }\n\n    getPathJs(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      let fn = this.compiledGlyphs[cmap.glyphId];\n\n      if (!fn) {\n        fn = this.compileGlyph(this.glyphs[cmap.glyphId], cmap.glyphId);\n        this.compiledGlyphs[cmap.glyphId] = fn;\n      }\n\n      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {\n        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;\n      }\n\n      return fn;\n    }\n\n    compileGlyph(code, glyphId) {\n      if (!code || code.length === 0 || code[0] === 14) {\n        return NOOP;\n      }\n\n      let fontMatrix = this.fontMatrix;\n\n      if (this.isCFFCIDFont) {\n        const fdIndex = this.fdSelect.getFDIndex(glyphId);\n\n        if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n          const fontDict = this.fdArray[fdIndex];\n          fontMatrix = fontDict.getByName(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX;\n        } else {\n          (0, _util.warn)(\"Invalid fd index for glyph index.\");\n        }\n      }\n\n      const cmds = [];\n      cmds.push({\n        cmd: \"save\"\n      });\n      cmds.push({\n        cmd: \"transform\",\n        args: fontMatrix.slice()\n      });\n      cmds.push({\n        cmd: \"scale\",\n        args: [\"size\", \"-size\"]\n      });\n      this.compileGlyphImpl(code, cmds, glyphId);\n      cmds.push({\n        cmd: \"restore\"\n      });\n      return cmds;\n    }\n\n    compileGlyphImpl() {\n      (0, _util.unreachable)(\"Children classes should implement this.\");\n    }\n\n    hasBuiltPath(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      return this.compiledGlyphs[cmap.glyphId] !== undefined && this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined;\n    }\n\n  }\n\n  class TrueTypeCompiled extends CompiledFont {\n    constructor(glyphs, cmap, fontMatrix) {\n      super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);\n      this.glyphs = glyphs;\n      this.cmap = cmap;\n    }\n\n    compileGlyphImpl(code, cmds) {\n      compileGlyf(code, cmds, this);\n    }\n\n  }\n\n  class Type2Compiled extends CompiledFont {\n    constructor(cffInfo, cmap, fontMatrix, glyphNameMap) {\n      super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);\n      this.glyphs = cffInfo.glyphs;\n      this.gsubrs = cffInfo.gsubrs || [];\n      this.subrs = cffInfo.subrs || [];\n      this.cmap = cmap;\n      this.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();\n      this.gsubrsBias = getSubroutineBias(this.gsubrs);\n      this.subrsBias = getSubroutineBias(this.subrs);\n      this.isCFFCIDFont = cffInfo.isCFFCIDFont;\n      this.fdSelect = cffInfo.fdSelect;\n      this.fdArray = cffInfo.fdArray;\n    }\n\n    compileGlyphImpl(code, cmds, glyphId) {\n      compileCharString(code, cmds, this, glyphId);\n    }\n\n  }\n\n  return {\n    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {\n      var data = new Uint8Array(font.data);\n      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n      var numTables = getUshort(data, 4);\n\n      for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n        var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));\n        var offset = getLong(data, p + 8);\n        var length = getLong(data, p + 12);\n\n        switch (tag) {\n          case \"cmap\":\n            cmap = parseCmap(data, offset, offset + length);\n            break;\n\n          case \"glyf\":\n            glyf = data.subarray(offset, offset + length);\n            break;\n\n          case \"loca\":\n            loca = data.subarray(offset, offset + length);\n            break;\n\n          case \"head\":\n            unitsPerEm = getUshort(data, offset + 18);\n            indexToLocFormat = getUshort(data, offset + 50);\n            break;\n\n          case \"CFF \":\n            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n            break;\n        }\n      }\n\n      if (glyf) {\n        var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n        return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);\n      }\n\n      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n    }\n  };\n}();\n\nexports.FontRendererFactory = FontRendererFactory;\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Type1Parser = void 0;\n\nvar _encodings = __w_pdfjs_require__(32);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar HINTING_ENABLED = false;\n\nvar Type1CharString = function Type1CharStringClosure() {\n  var COMMAND_MAP = {\n    hstem: [1],\n    vstem: [3],\n    vmoveto: [4],\n    rlineto: [5],\n    hlineto: [6],\n    vlineto: [7],\n    rrcurveto: [8],\n    callsubr: [10],\n    flex: [12, 35],\n    drop: [12, 18],\n    endchar: [14],\n    rmoveto: [21],\n    hmoveto: [22],\n    vhcurveto: [30],\n    hvcurveto: [31]\n  };\n\n  function Type1CharString() {\n    this.width = 0;\n    this.lsb = 0;\n    this.flexing = false;\n    this.output = [];\n    this.stack = [];\n  }\n\n  Type1CharString.prototype = {\n    convert: function Type1CharString_convert(encoded, subrs, seacAnalysisEnabled) {\n      var count = encoded.length;\n      var error = false;\n      var wx, sbx, subrNumber;\n\n      for (var i = 0; i < count; i++) {\n        var value = encoded[i];\n\n        if (value < 32) {\n          if (value === 12) {\n            value = (value << 8) + encoded[++i];\n          }\n\n          switch (value) {\n            case 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case 3:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case 4:\n              if (this.flexing) {\n                if (this.stack.length < 1) {\n                  error = true;\n                  break;\n                }\n\n                var dy = this.stack.pop();\n                this.stack.push(0, dy);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n              break;\n\n            case 5:\n              error = this.executeCommand(2, COMMAND_MAP.rlineto);\n              break;\n\n            case 6:\n              error = this.executeCommand(1, COMMAND_MAP.hlineto);\n              break;\n\n            case 7:\n              error = this.executeCommand(1, COMMAND_MAP.vlineto);\n              break;\n\n            case 8:\n              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n              break;\n\n            case 9:\n              this.stack = [];\n              break;\n\n            case 10:\n              if (this.stack.length < 1) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n\n              if (!subrs[subrNumber]) {\n                error = true;\n                break;\n              }\n\n              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);\n              break;\n\n            case 11:\n              return error;\n\n            case 13:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              wx = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx);\n              error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n              break;\n\n            case 14:\n              this.output.push(COMMAND_MAP.endchar[0]);\n              break;\n\n            case 21:\n              if (this.flexing) {\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n              break;\n\n            case 22:\n              if (this.flexing) {\n                this.stack.push(0);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n              break;\n\n            case 30:\n              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n              break;\n\n            case 31:\n              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n              break;\n\n            case (12 << 8) + 0:\n              this.stack = [];\n              break;\n\n            case (12 << 8) + 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case (12 << 8) + 2:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case (12 << 8) + 6:\n              if (seacAnalysisEnabled) {\n                this.seac = this.stack.splice(-4, 4);\n                error = this.executeCommand(0, COMMAND_MAP.endchar);\n              } else {\n                error = this.executeCommand(4, COMMAND_MAP.endchar);\n              }\n\n              break;\n\n            case (12 << 8) + 7:\n              if (this.stack.length < 4) {\n                error = true;\n                break;\n              }\n\n              this.stack.pop();\n              wx = this.stack.pop();\n              var sby = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx, sby);\n              error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n              break;\n\n            case (12 << 8) + 12:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              var num2 = this.stack.pop();\n              var num1 = this.stack.pop();\n              this.stack.push(num1 / num2);\n              break;\n\n            case (12 << 8) + 16:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n              var numArgs = this.stack.pop();\n\n              if (subrNumber === 0 && numArgs === 3) {\n                var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);\n                error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                this.flexing = false;\n                this.stack.push(flexArgs[15], flexArgs[16]);\n              } else if (subrNumber === 1 && numArgs === 0) {\n                this.flexing = true;\n              }\n\n              break;\n\n            case (12 << 8) + 17:\n              break;\n\n            case (12 << 8) + 33:\n              this.stack = [];\n              break;\n\n            default:\n              (0, _util.warn)('Unknown type 1 charstring command of \"' + value + '\"');\n              break;\n          }\n\n          if (error) {\n            break;\n          }\n\n          continue;\n        } else if (value <= 246) {\n          value = value - 139;\n        } else if (value <= 250) {\n          value = (value - 247) * 256 + encoded[++i] + 108;\n        } else if (value <= 254) {\n          value = -((value - 251) * 256) - encoded[++i] - 108;\n        } else {\n          value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;\n        }\n\n        this.stack.push(value);\n      }\n\n      return error;\n    },\n\n    executeCommand(howManyArgs, command, keepStack) {\n      var stackLength = this.stack.length;\n\n      if (howManyArgs > stackLength) {\n        return true;\n      }\n\n      var start = stackLength - howManyArgs;\n\n      for (var i = start; i < stackLength; i++) {\n        var value = this.stack[i];\n\n        if (Number.isInteger(value)) {\n          this.output.push(28, value >> 8 & 0xff, value & 0xff);\n        } else {\n          value = 65536 * value | 0;\n          this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n      }\n\n      this.output.push.apply(this.output, command);\n\n      if (keepStack) {\n        this.stack.splice(start, howManyArgs);\n      } else {\n        this.stack.length = 0;\n      }\n\n      return false;\n    }\n\n  };\n  return Type1CharString;\n}();\n\nvar Type1Parser = function Type1ParserClosure() {\n  var EEXEC_ENCRYPT_KEY = 55665;\n  var CHAR_STRS_ENCRYPT_KEY = 4330;\n\n  function isHexDigit(code) {\n    return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;\n  }\n\n  function decrypt(data, key, discardNumber) {\n    if (discardNumber >= data.length) {\n      return new Uint8Array(0);\n    }\n\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719,\n        i,\n        j;\n\n    for (i = 0; i < discardNumber; i++) {\n      r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    var count = data.length - discardNumber;\n    var decrypted = new Uint8Array(count);\n\n    for (i = discardNumber, j = 0; j < count; i++, j++) {\n      var value = data[i];\n      decrypted[j] = value ^ r >> 8;\n      r = (value + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    return decrypted;\n  }\n\n  function decryptAscii(data, key, discardNumber) {\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719;\n    var count = data.length,\n        maybeLength = count >>> 1;\n    var decrypted = new Uint8Array(maybeLength);\n    var i, j;\n\n    for (i = 0, j = 0; i < count; i++) {\n      var digit1 = data[i];\n\n      if (!isHexDigit(digit1)) {\n        continue;\n      }\n\n      i++;\n      var digit2;\n\n      while (i < count && !isHexDigit(digit2 = data[i])) {\n        i++;\n      }\n\n      if (i < count) {\n        var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n        decrypted[j++] = value ^ r >> 8;\n        r = (value + r) * c1 + c2 & (1 << 16) - 1;\n      }\n    }\n\n    return decrypted.slice(discardNumber, j);\n  }\n\n  function isSpecial(c) {\n    return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;\n  }\n\n  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n    if (encrypted) {\n      var data = stream.getBytes();\n      var isBinary = !((isHexDigit(data[0]) || (0, _core_utils.isWhiteSpace)(data[0])) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]) && isHexDigit(data[4]) && isHexDigit(data[5]) && isHexDigit(data[6]) && isHexDigit(data[7]));\n      stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));\n    }\n\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    this.stream = stream;\n    this.nextChar();\n  }\n\n  Type1Parser.prototype = {\n    readNumberArray: function Type1Parser_readNumberArray() {\n      this.getToken();\n      var array = [];\n\n      while (true) {\n        var token = this.getToken();\n\n        if (token === null || token === \"]\" || token === \"}\") {\n          break;\n        }\n\n        array.push(parseFloat(token || 0));\n      }\n\n      return array;\n    },\n    readNumber: function Type1Parser_readNumber() {\n      var token = this.getToken();\n      return parseFloat(token || 0);\n    },\n    readInt: function Type1Parser_readInt() {\n      var token = this.getToken();\n      return parseInt(token || 0, 10) | 0;\n    },\n    readBoolean: function Type1Parser_readBoolean() {\n      var token = this.getToken();\n      return token === \"true\" ? 1 : 0;\n    },\n    nextChar: function Type1_nextChar() {\n      return this.currentChar = this.stream.getByte();\n    },\n    getToken: function Type1Parser_getToken() {\n      var comment = false;\n      var ch = this.currentChar;\n\n      while (true) {\n        if (ch === -1) {\n          return null;\n        }\n\n        if (comment) {\n          if (ch === 0x0a || ch === 0x0d) {\n            comment = false;\n          }\n        } else if (ch === 0x25) {\n          comment = true;\n        } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n          break;\n        }\n\n        ch = this.nextChar();\n      }\n\n      if (isSpecial(ch)) {\n        this.nextChar();\n        return String.fromCharCode(ch);\n      }\n\n      var token = \"\";\n\n      do {\n        token += String.fromCharCode(ch);\n        ch = this.nextChar();\n      } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));\n\n      return token;\n    },\n    readCharStrings: function Type1Parser_readCharStrings(bytes, lenIV) {\n      if (lenIV === -1) {\n        return bytes;\n      }\n\n      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n    },\n    extractFontProgram: function Type1Parser_extractFontProgram(properties) {\n      var stream = this.stream;\n      var subrs = [],\n          charstrings = [];\n      var privateData = Object.create(null);\n      privateData.lenIV = 4;\n      var program = {\n        subrs: [],\n        charstrings: [],\n        properties: {\n          privateData\n        }\n      };\n      var token, length, data, lenIV, encoded;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"CharStrings\":\n            this.getToken();\n            this.getToken();\n            this.getToken();\n            this.getToken();\n\n            while (true) {\n              token = this.getToken();\n\n              if (token === null || token === \"end\") {\n                break;\n              }\n\n              if (token !== \"/\") {\n                continue;\n              }\n\n              var glyph = this.getToken();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              charstrings.push({\n                glyph,\n                encoded\n              });\n            }\n\n            break;\n\n          case \"Subrs\":\n            this.readInt();\n            this.getToken();\n\n            while (this.getToken() === \"dup\") {\n              const index = this.readInt();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              subrs[index] = encoded;\n            }\n\n            break;\n\n          case \"BlueValues\":\n          case \"OtherBlues\":\n          case \"FamilyBlues\":\n          case \"FamilyOtherBlues\":\n            var blueArray = this.readNumberArray();\n\n            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {\n              program.properties.privateData[token] = blueArray;\n            }\n\n            break;\n\n          case \"StemSnapH\":\n          case \"StemSnapV\":\n            program.properties.privateData[token] = this.readNumberArray();\n            break;\n\n          case \"StdHW\":\n          case \"StdVW\":\n            program.properties.privateData[token] = this.readNumberArray()[0];\n            break;\n\n          case \"BlueShift\":\n          case \"lenIV\":\n          case \"BlueFuzz\":\n          case \"BlueScale\":\n          case \"LanguageGroup\":\n          case \"ExpansionFactor\":\n            program.properties.privateData[token] = this.readNumber();\n            break;\n\n          case \"ForceBold\":\n            program.properties.privateData[token] = this.readBoolean();\n            break;\n        }\n      }\n\n      for (var i = 0; i < charstrings.length; i++) {\n        glyph = charstrings[i].glyph;\n        encoded = charstrings[i].encoded;\n        var charString = new Type1CharString();\n        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);\n        var output = charString.output;\n\n        if (error) {\n          output = [14];\n        }\n\n        const charStringObject = {\n          glyphName: glyph,\n          charstring: output,\n          width: charString.width,\n          lsb: charString.lsb,\n          seac: charString.seac\n        };\n\n        if (glyph === \".notdef\") {\n          program.charstrings.unshift(charStringObject);\n        } else {\n          program.charstrings.push(charStringObject);\n        }\n\n        if (properties.builtInEncoding) {\n          const index = properties.builtInEncoding.indexOf(glyph);\n\n          if (index > -1 && properties.widths[index] === undefined && index >= properties.firstChar && index <= properties.lastChar) {\n            properties.widths[index] = charString.width;\n          }\n        }\n      }\n\n      return program;\n    },\n    extractFontHeader: function Type1Parser_extractFontHeader(properties) {\n      var token;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"FontMatrix\":\n            var matrix = this.readNumberArray();\n            properties.fontMatrix = matrix;\n            break;\n\n          case \"Encoding\":\n            var encodingArg = this.getToken();\n            var encoding;\n\n            if (!/^\\d+$/.test(encodingArg)) {\n              encoding = (0, _encodings.getEncoding)(encodingArg);\n            } else {\n              encoding = [];\n              var size = parseInt(encodingArg, 10) | 0;\n              this.getToken();\n\n              for (var j = 0; j < size; j++) {\n                token = this.getToken();\n\n                while (token !== \"dup\" && token !== \"def\") {\n                  token = this.getToken();\n\n                  if (token === null) {\n                    return;\n                  }\n                }\n\n                if (token === \"def\") {\n                  break;\n                }\n\n                var index = this.readInt();\n                this.getToken();\n                var glyph = this.getToken();\n                encoding[index] = glyph;\n                this.getToken();\n              }\n            }\n\n            properties.builtInEncoding = encoding;\n            break;\n\n          case \"FontBBox\":\n            var fontBBox = this.readNumberArray();\n            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n            properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n            properties.ascentScaled = true;\n            break;\n        }\n      }\n    }\n  };\n  return Type1Parser;\n}();\n\nexports.Type1Parser = Type1Parser;\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTilingPatternIR = getTilingPatternIR;\nexports.Pattern = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar ShadingType = {\n  FUNCTION_BASED: 1,\n  AXIAL: 2,\n  RADIAL: 3,\n  FREE_FORM_MESH: 4,\n  LATTICE_FORM_MESH: 5,\n  COONS_PATCH_MESH: 6,\n  TENSOR_PATCH_MESH: 7\n};\n\nvar Pattern = function PatternClosure() {\n  function Pattern() {\n    (0, _util.unreachable)(\"should not call Pattern constructor\");\n  }\n\n  Pattern.prototype = {\n    getPattern: function Pattern_getPattern(ctx) {\n      (0, _util.unreachable)(`Should not call Pattern.getStyle: ${ctx}`);\n    }\n  };\n\n  Pattern.parseShading = function (shading, matrix, xref, res, handler, pdfFunctionFactory) {\n    var dict = (0, _primitives.isStream)(shading) ? shading.dict : shading;\n    var type = dict.get(\"ShadingType\");\n\n    try {\n      switch (type) {\n        case ShadingType.AXIAL:\n        case ShadingType.RADIAL:\n          return new Shadings.RadialAxial(dict, matrix, xref, res, pdfFunctionFactory);\n\n        case ShadingType.FREE_FORM_MESH:\n        case ShadingType.LATTICE_FORM_MESH:\n        case ShadingType.COONS_PATCH_MESH:\n        case ShadingType.TENSOR_PATCH_MESH:\n          return new Shadings.Mesh(shading, matrix, xref, res, pdfFunctionFactory);\n\n        default:\n          throw new _util.FormatError(\"Unsupported ShadingType: \" + type);\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.shadingPattern\n      });\n      (0, _util.warn)(ex);\n      return new Shadings.Dummy();\n    }\n  };\n\n  return Pattern;\n}();\n\nexports.Pattern = Pattern;\nvar Shadings = {};\nShadings.SMALL_NUMBER = 1e-6;\n\nShadings.RadialAxial = function RadialAxialClosure() {\n  function RadialAxial(dict, matrix, xref, res, pdfFunctionFactory) {\n    this.matrix = matrix;\n    this.coordsArr = dict.getArray(\"Coords\");\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = _colorspace.ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var t0 = 0.0,\n        t1 = 1.0;\n\n    if (dict.has(\"Domain\")) {\n      var domainArr = dict.getArray(\"Domain\");\n      t0 = domainArr[0];\n      t1 = domainArr[1];\n    }\n\n    var extendStart = false,\n        extendEnd = false;\n\n    if (dict.has(\"Extend\")) {\n      var extendArr = dict.getArray(\"Extend\");\n      extendStart = extendArr[0];\n      extendEnd = extendArr[1];\n    }\n\n    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {\n      var x1 = this.coordsArr[0];\n      var y1 = this.coordsArr[1];\n      var r1 = this.coordsArr[2];\n      var x2 = this.coordsArr[3];\n      var y2 = this.coordsArr[4];\n      var r2 = this.coordsArr[5];\n      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n      if (r1 <= r2 + distance && r2 <= r1 + distance) {\n        (0, _util.warn)(\"Unsupported radial gradient.\");\n      }\n    }\n\n    this.extendStart = extendStart;\n    this.extendEnd = extendEnd;\n    var fnObj = dict.get(\"Function\");\n    var fn = pdfFunctionFactory.createFromArray(fnObj);\n    const NUMBER_OF_SAMPLES = 10;\n    const step = (t1 - t0) / NUMBER_OF_SAMPLES;\n    var colorStops = this.colorStops = [];\n\n    if (t0 >= t1 || step <= 0) {\n      (0, _util.info)(\"Bad shading domain.\");\n      return;\n    }\n\n    var color = new Float32Array(cs.numComps),\n        ratio = new Float32Array(1);\n    var rgbColor;\n\n    for (let i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n      ratio[0] = t0 + i * step;\n      fn(ratio, 0, color, 0);\n      rgbColor = cs.getRgb(color, 0);\n\n      var cssColor = _util.Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n\n      colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n    }\n\n    var background = \"transparent\";\n\n    if (dict.has(\"Background\")) {\n      rgbColor = cs.getRgb(dict.get(\"Background\"), 0);\n      background = _util.Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n    }\n\n    if (!extendStart) {\n      colorStops.unshift([0, background]);\n      colorStops[1][0] += Shadings.SMALL_NUMBER;\n    }\n\n    if (!extendEnd) {\n      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;\n      colorStops.push([1, background]);\n    }\n\n    this.colorStops = colorStops;\n  }\n\n  RadialAxial.prototype = {\n    getIR: function RadialAxial_getIR() {\n      var coordsArr = this.coordsArr;\n      var shadingType = this.shadingType;\n      var type, p0, p1, r0, r1;\n\n      if (shadingType === ShadingType.AXIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[2], coordsArr[3]];\n        r0 = null;\n        r1 = null;\n        type = \"axial\";\n      } else if (shadingType === ShadingType.RADIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[3], coordsArr[4]];\n        r0 = coordsArr[2];\n        r1 = coordsArr[5];\n        type = \"radial\";\n      } else {\n        (0, _util.unreachable)(`getPattern type unknown: ${shadingType}`);\n      }\n\n      var matrix = this.matrix;\n\n      if (matrix) {\n        p0 = _util.Util.applyTransform(p0, matrix);\n        p1 = _util.Util.applyTransform(p1, matrix);\n\n        if (shadingType === ShadingType.RADIAL) {\n          var scale = _util.Util.singularValueDecompose2dScale(matrix);\n\n          r0 *= scale[0];\n          r1 *= scale[1];\n        }\n      }\n\n      return [\"RadialAxial\", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n    }\n  };\n  return RadialAxial;\n}();\n\nShadings.Mesh = function MeshClosure() {\n  function MeshStreamReader(stream, context) {\n    this.stream = stream;\n    this.context = context;\n    this.buffer = 0;\n    this.bufferLength = 0;\n    var numComps = context.numComps;\n    this.tmpCompsBuf = new Float32Array(numComps);\n    var csNumComps = context.colorSpace.numComps;\n    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;\n  }\n\n  MeshStreamReader.prototype = {\n    get hasData() {\n      if (this.stream.end) {\n        return this.stream.pos < this.stream.end;\n      }\n\n      if (this.bufferLength > 0) {\n        return true;\n      }\n\n      var nextByte = this.stream.getByte();\n\n      if (nextByte < 0) {\n        return false;\n      }\n\n      this.buffer = nextByte;\n      this.bufferLength = 8;\n      return true;\n    },\n\n    readBits: function MeshStreamReader_readBits(n) {\n      var buffer = this.buffer;\n      var bufferLength = this.bufferLength;\n\n      if (n === 32) {\n        if (bufferLength === 0) {\n          return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;\n        }\n\n        buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();\n        var nextByte = this.stream.getByte();\n        this.buffer = nextByte & (1 << bufferLength) - 1;\n        return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;\n      }\n\n      if (n === 8 && bufferLength === 0) {\n        return this.stream.getByte();\n      }\n\n      while (bufferLength < n) {\n        buffer = buffer << 8 | this.stream.getByte();\n        bufferLength += 8;\n      }\n\n      bufferLength -= n;\n      this.bufferLength = bufferLength;\n      this.buffer = buffer & (1 << bufferLength) - 1;\n      return buffer >> bufferLength;\n    },\n    align: function MeshStreamReader_align() {\n      this.buffer = 0;\n      this.bufferLength = 0;\n    },\n    readFlag: function MeshStreamReader_readFlag() {\n      return this.readBits(this.context.bitsPerFlag);\n    },\n    readCoordinate: function MeshStreamReader_readCoordinate() {\n      var bitsPerCoordinate = this.context.bitsPerCoordinate;\n      var xi = this.readBits(bitsPerCoordinate);\n      var yi = this.readBits(bitsPerCoordinate);\n      var decode = this.context.decode;\n      var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;\n      return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];\n    },\n    readComponents: function MeshStreamReader_readComponents() {\n      var numComps = this.context.numComps;\n      var bitsPerComponent = this.context.bitsPerComponent;\n      var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;\n      var decode = this.context.decode;\n      var components = this.tmpCompsBuf;\n\n      for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n        var ci = this.readBits(bitsPerComponent);\n        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n      }\n\n      var color = this.tmpCsCompsBuf;\n\n      if (this.context.colorFn) {\n        this.context.colorFn(components, 0, color, 0);\n      }\n\n      return this.context.colorSpace.getRgb(color, 0);\n    }\n  };\n\n  function decodeType4Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var operators = [];\n    var ps = [];\n    var verticesLeft = 0;\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n\n      if (verticesLeft === 0) {\n        if (!(0 <= f && f <= 2)) {\n          throw new _util.FormatError(\"Unknown type4 flag\");\n        }\n\n        switch (f) {\n          case 0:\n            verticesLeft = 3;\n            break;\n\n          case 1:\n            ps.push(ps[ps.length - 2], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n\n          case 2:\n            ps.push(ps[ps.length - 3], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n        }\n\n        operators.push(f);\n      }\n\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n      verticesLeft--;\n      reader.align();\n    }\n\n    mesh.figures.push({\n      type: \"triangles\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps)\n    });\n  }\n\n  function decodeType5Shading(mesh, reader, verticesPerRow) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = [];\n\n    while (reader.hasData) {\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n    }\n\n    mesh.figures.push({\n      type: \"lattice\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n      verticesPerRow\n    });\n  }\n\n  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;\n  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;\n  var TRIANGLE_DENSITY = 20;\n\n  var getB = function getBClosure() {\n    function buildB(count) {\n      var lut = [];\n\n      for (var i = 0; i <= count; i++) {\n        var t = i / count,\n            t_ = 1 - t;\n        lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));\n      }\n\n      return lut;\n    }\n\n    var cache = [];\n    return function getB(count) {\n      if (!cache[count]) {\n        cache[count] = buildB(count);\n      }\n\n      return cache[count];\n    };\n  }();\n\n  function buildFigureFromPatch(mesh, index) {\n    var figure = mesh.figures[index];\n    (0, _util.assert)(figure.type === \"patch\", \"Unexpected patch mesh figure\");\n    var coords = mesh.coords,\n        colors = mesh.colors;\n    var pi = figure.coords;\n    var ci = figure.colors;\n    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var splitXBy = Math.ceil((figureMaxX - figureMinX) * TRIANGLE_DENSITY / (mesh.bounds[2] - mesh.bounds[0]));\n    splitXBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));\n    var splitYBy = Math.ceil((figureMaxY - figureMinY) * TRIANGLE_DENSITY / (mesh.bounds[3] - mesh.bounds[1]));\n    splitYBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));\n    var verticesPerRow = splitXBy + 1;\n    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var k = 0;\n    var cl = new Uint8Array(3),\n        cr = new Uint8Array(3);\n    var c0 = colors[ci[0]],\n        c1 = colors[ci[1]],\n        c2 = colors[ci[2]],\n        c3 = colors[ci[3]];\n    var bRow = getB(splitYBy),\n        bCol = getB(splitXBy);\n\n    for (var row = 0; row <= splitYBy; row++) {\n      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;\n      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;\n      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;\n      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;\n      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;\n      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;\n\n      for (var col = 0; col <= splitXBy; col++, k++) {\n        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {\n          continue;\n        }\n\n        var x = 0,\n            y = 0;\n        var q = 0;\n\n        for (var i = 0; i <= 3; i++) {\n          for (var j = 0; j <= 3; j++, q++) {\n            var m = bRow[row][i] * bCol[col][j];\n            x += coords[pi[q]][0] * m;\n            y += coords[pi[q]][1] * m;\n          }\n        }\n\n        figureCoords[k] = coords.length;\n        coords.push([x, y]);\n        figureColors[k] = colors.length;\n        var newColor = new Uint8Array(3);\n        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;\n        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;\n        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;\n        colors.push(newColor);\n      }\n    }\n\n    figureCoords[0] = pi[0];\n    figureColors[0] = ci[0];\n    figureCoords[splitXBy] = pi[3];\n    figureColors[splitXBy] = ci[1];\n    figureCoords[verticesPerRow * splitYBy] = pi[12];\n    figureColors[verticesPerRow * splitYBy] = ci[2];\n    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n    mesh.figures[index] = {\n      type: \"lattice\",\n      coords: figureCoords,\n      colors: figureColors,\n      verticesPerRow\n    };\n  }\n\n  function decodeType6Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type6 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      ps[5] = coords.length;\n      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);\n      ps[6] = coords.length;\n      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);\n      ps[9] = coords.length;\n      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);\n      ps[10] = coords.length;\n      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function decodeType7Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type7 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[9] = pi + 13;\n          ps[10] = pi + 14;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[5] = pi + 12;\n          ps[6] = pi + 15;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function updateBounds(mesh) {\n    var minX = mesh.coords[0][0],\n        minY = mesh.coords[0][1],\n        maxX = minX,\n        maxY = minY;\n\n    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {\n      var x = mesh.coords[i][0],\n          y = mesh.coords[i][1];\n      minX = minX > x ? x : minX;\n      minY = minY > y ? y : minY;\n      maxX = maxX < x ? x : maxX;\n      maxY = maxY < y ? y : maxY;\n    }\n\n    mesh.bounds = [minX, minY, maxX, maxY];\n  }\n\n  function packData(mesh) {\n    var i, ii, j, jj;\n    var coords = mesh.coords;\n    var coordsPacked = new Float32Array(coords.length * 2);\n\n    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n      var xy = coords[i];\n      coordsPacked[j++] = xy[0];\n      coordsPacked[j++] = xy[1];\n    }\n\n    mesh.coords = coordsPacked;\n    var colors = mesh.colors;\n    var colorsPacked = new Uint8Array(colors.length * 3);\n\n    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n      var c = colors[i];\n      colorsPacked[j++] = c[0];\n      colorsPacked[j++] = c[1];\n      colorsPacked[j++] = c[2];\n    }\n\n    mesh.colors = colorsPacked;\n    var figures = mesh.figures;\n\n    for (i = 0, ii = figures.length; i < ii; i++) {\n      var figure = figures[i],\n          ps = figure.coords,\n          cs = figure.colors;\n\n      for (j = 0, jj = ps.length; j < jj; j++) {\n        ps[j] *= 2;\n        cs[j] *= 3;\n      }\n    }\n  }\n\n  function Mesh(stream, matrix, xref, res, pdfFunctionFactory) {\n    if (!(0, _primitives.isStream)(stream)) {\n      throw new _util.FormatError(\"Mesh data is not a stream\");\n    }\n\n    var dict = stream.dict;\n    this.matrix = matrix;\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = _colorspace.ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    this.background = dict.has(\"Background\") ? cs.getRgb(dict.get(\"Background\"), 0) : null;\n    var fnObj = dict.get(\"Function\");\n    var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n    this.coords = [];\n    this.colors = [];\n    this.figures = [];\n    var decodeContext = {\n      bitsPerCoordinate: dict.get(\"BitsPerCoordinate\"),\n      bitsPerComponent: dict.get(\"BitsPerComponent\"),\n      bitsPerFlag: dict.get(\"BitsPerFlag\"),\n      decode: dict.getArray(\"Decode\"),\n      colorFn: fn,\n      colorSpace: cs,\n      numComps: fn ? 1 : cs.numComps\n    };\n    var reader = new MeshStreamReader(stream, decodeContext);\n    var patchMesh = false;\n\n    switch (this.shadingType) {\n      case ShadingType.FREE_FORM_MESH:\n        decodeType4Shading(this, reader);\n        break;\n\n      case ShadingType.LATTICE_FORM_MESH:\n        var verticesPerRow = dict.get(\"VerticesPerRow\") | 0;\n\n        if (verticesPerRow < 2) {\n          throw new _util.FormatError(\"Invalid VerticesPerRow\");\n        }\n\n        decodeType5Shading(this, reader, verticesPerRow);\n        break;\n\n      case ShadingType.COONS_PATCH_MESH:\n        decodeType6Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      case ShadingType.TENSOR_PATCH_MESH:\n        decodeType7Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      default:\n        (0, _util.unreachable)(\"Unsupported mesh type.\");\n        break;\n    }\n\n    if (patchMesh) {\n      updateBounds(this);\n\n      for (var i = 0, ii = this.figures.length; i < ii; i++) {\n        buildFigureFromPatch(this, i);\n      }\n    }\n\n    updateBounds(this);\n    packData(this);\n  }\n\n  Mesh.prototype = {\n    getIR: function Mesh_getIR() {\n      return [\"Mesh\", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.matrix, this.bbox, this.background];\n    }\n  };\n  return Mesh;\n}();\n\nShadings.Dummy = function DummyClosure() {\n  function Dummy() {\n    this.type = \"Pattern\";\n  }\n\n  Dummy.prototype = {\n    getIR: function Dummy_getIR() {\n      return [\"Dummy\"];\n    }\n  };\n  return Dummy;\n}();\n\nfunction getTilingPatternIR(operatorList, dict, args) {\n  const matrix = dict.getArray(\"Matrix\");\n\n  const bbox = _util.Util.normalizeRect(dict.getArray(\"BBox\"));\n\n  const xstep = dict.get(\"XStep\");\n  const ystep = dict.get(\"YStep\");\n  const paintType = dict.get(\"PaintType\");\n  const tilingType = dict.get(\"TilingType\");\n\n  if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n    throw new _util.FormatError(`Invalid getTilingPatternIR /BBox array: [${bbox}].`);\n  }\n\n  return [\"TilingPattern\", args, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];\n}\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bidi = bidi;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar baseTypesnvar arabicTypes = [\"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ON\", \"ON\", \"AL\", \"ET\", \"ET\", \"AL\", \"CS\", \"AL\", \"ON\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"];\n\nfunction isOdd(i) {\n  return (i & 1) !== 0;\n}\n\nfunction isEven(i) {\n  return (i & 1) === 0;\n}\n\nfunction findUnequal(arr, start, value) {\n  for (var j = start, jj = arr.length; j < jj; ++j) {\n    if (arr[j] !== value) {\n      return j;\n    }\n  }\n\n  return j;\n}\n\nfunction setValues(arr, start, end, value) {\n  for (var j = start; j < end; ++j) {\n    arr[j] = value;\n  }\n}\n\nfunction reverseValues(arr, start, end) {\n  for (var i = start, j = end - 1; i < j; ++i, --j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction createBidiText(str, isLTR, vertical = false) {\n  let dir = \"ltr\";\n\n  if (vertical) {\n    dir = \"ttb\";\n  } else if (!isLTR) {\n    dir = \"rtl\";\n  }\n\n  return {\n    str,\n    dir\n  };\n}\n\nvar chars = [];\nvar types = [];\n\nfunction bidi(str, startLevel, vertical) {\n  var isLTR = true;\n  var strLength = str.length;\n\n  if (strLength === 0 || vertical) {\n    return createBidiText(str, isLTR, vertical);\n  }\n\n  chars.length = strLength;\n  types.length = strLength;\n  var numBidi = 0;\n  var i, ii;\n\n  for (i = 0; i < strLength; ++i) {\n    chars[i] = str.charAt(i);\n    var charCode = str.charCodeAt(i);\n    var charType = \"L\";\n\n    if (charCode <= 0x00ff) {\n      charType = baseTypes[charCode];\n    } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n      charType = \"R\";\n    } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n      charType = arabicTypes[charCode & 0xff];\n\n      if (!charType) {\n        (0, _util.warn)(\"Bidi: invalid Unicode character \" + charCode.toString(16));\n      }\n    } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n      charType = \"AL\";\n    }\n\n    if (charType === \"R\" || charType === \"AL\" || charType === \"AN\") {\n      numBidi++;\n    }\n\n    types[i] = charType;\n  }\n\n  if (numBidi === 0) {\n    isLTR = true;\n    return createBidiText(str, isLTR);\n  }\n\n  if (startLevel === -1) {\n    if (numBidi / strLength < 0.3) {\n      isLTR = true;\n      startLevel = 0;\n    } else {\n      isLTR = false;\n      startLevel = 1;\n    }\n  }\n\n  var levels = [];\n\n  for (i = 0; i < strLength; ++i) {\n    levels[i] = startLevel;\n  }\n\n  var e = isOdd(startLevel) ? \"R\" : \"L\";\n  var sor = e;\n  var eor = sor;\n  var lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"NSM\") {\n      types[i] = lastType;\n    } else {\n      lastType = types[i];\n    }\n  }\n\n  lastType = sor;\n  var t;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"AL\" ? \"AN\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\" || t === \"AL\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"AL\") {\n      types[i] = \"R\";\n    }\n  }\n\n  for (i = 1; i < strLength - 1; ++i) {\n    if (types[i] === \"ES\" && types[i - 1] === \"EN\" && types[i + 1] === \"EN\") {\n      types[i] = \"EN\";\n    }\n\n    if (types[i] === \"CS\" && (types[i - 1] === \"EN\" || types[i - 1] === \"AN\") && types[i + 1] === types[i - 1]) {\n      types[i] = types[i - 1];\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"EN\") {\n      var j;\n\n      for (j = i - 1; j >= 0; --j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n\n      for (j = i + 1; j < strLength; ++j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"WS\" || t === \"ES\" || t === \"ET\" || t === \"CS\") {\n      types[i] = \"ON\";\n    }\n  }\n\n  lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"L\" ? \"L\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      var end = findUnequal(types, i + 1, \"ON\");\n      var before = sor;\n\n      if (i > 0) {\n        before = types[i - 1];\n      }\n\n      var after = eor;\n\n      if (end + 1 < strLength) {\n        after = types[end + 1];\n      }\n\n      if (before !== \"L\") {\n        before = \"R\";\n      }\n\n      if (after !== \"L\") {\n        after = \"R\";\n      }\n\n      if (before === after) {\n        setValues(types, i, end, before);\n      }\n\n      i = end - 1;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      types[i] = e;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (isEven(levels[i])) {\n      if (t === \"R\") {\n        levels[i] += 1;\n      } else if (t === \"AN\" || t === \"EN\") {\n        levels[i] += 2;\n      }\n    } else {\n      if (t === \"L\" || t === \"AN\" || t === \"EN\") {\n        levels[i] += 1;\n      }\n    }\n  }\n\n  var highestLevel = -1;\n  var lowestOddLevel = 99;\n  var level;\n\n  for (i = 0, ii = levels.length; i < ii; ++i) {\n    level = levels[i];\n\n    if (highestLevel < level) {\n      highestLevel = level;\n    }\n\n    if (lowestOddLevel > level && isOdd(level)) {\n      lowestOddLevel = level;\n    }\n  }\n\n  for (level = highestLevel; level >= lowestOddLevel; --level) {\n    var start = -1;\n\n    for (i = 0, ii = levels.length; i < ii; ++i) {\n      if (levels[i] < level) {\n        if (start >= 0) {\n          reverseValues(chars, start, i);\n          start = -1;\n        }\n      } else if (start < 0) {\n        start = i;\n      }\n    }\n\n    if (start >= 0) {\n      reverseValues(chars, start, levels.length);\n    }\n  }\n\n  for (i = 0, ii = chars.length; i < ii; ++i) {\n    var ch = chars[i];\n\n    if (ch === \"<\" || ch === \">\") {\n      chars[i] = \"\";\n    }\n  }\n\n  return createBidiText(chars.join(\"\"), isLTR);\n}\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMetrics = void 0;\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nvar getMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t.Courier = 600;\n  t[\"Courier-Bold\"] = 600;\n  t[\"Courier-BoldOblique\"] = 600;\n  t[\"Courier-Oblique\"] = 600;\n  t.Helvetica = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-BoldOblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t[\"Helvetica-Oblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  t.Symbol = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.universal = 713;\n    t.numbersign = 500;\n    t.existential = 549;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.suchthat = 439;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asteriskmath = 500;\n    t.plus = 549;\n    t.comma = 250;\n    t.minus = 549;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 549;\n    t.equal = 549;\n    t.greater = 549;\n    t.question = 444;\n    t.congruent = 549;\n    t.Alpha = 722;\n    t.Beta = 667;\n    t.Chi = 722;\n    t.Delta = 612;\n    t.Epsilon = 611;\n    t.Phi = 763;\n    t.Gamma = 603;\n    t.Eta = 722;\n    t.Iota = 333;\n    t.theta1 = 631;\n    t.Kappa = 722;\n    t.Lambda = 686;\n    t.Mu = 889;\n    t.Nu = 722;\n    t.Omicron = 722;\n    t.Pi = 768;\n    t.Theta = 741;\n    t.Rho = 556;\n    t.Sigma = 592;\n    t.Tau = 611;\n    t.Upsilon = 690;\n    t.sigma1 = 439;\n    t.Omega = 768;\n    t.Xi = 645;\n    t.Psi = 795;\n    t.Zeta = 611;\n    t.bracketleft = 333;\n    t.therefore = 863;\n    t.bracketright = 333;\n    t.perpendicular = 658;\n    t.underscore = 500;\n    t.radicalex = 500;\n    t.alpha = 631;\n    t.beta = 549;\n    t.chi = 549;\n    t.delta = 494;\n    t.epsilon = 439;\n    t.phi = 521;\n    t.gamma = 411;\n    t.eta = 603;\n    t.iota = 329;\n    t.phi1 = 603;\n    t.kappa = 549;\n    t.lambda = 549;\n    t.mu = 576;\n    t.nu = 521;\n    t.omicron = 549;\n    t.pi = 549;\n    t.theta = 521;\n    t.rho = 549;\n    t.sigma = 603;\n    t.tau = 439;\n    t.upsilon = 576;\n    t.omega1 = 713;\n    t.omega = 686;\n    t.xi = 493;\n    t.psi = 686;\n    t.zeta = 494;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.similar = 549;\n    t.Euro = 750;\n    t.Upsilon1 = 620;\n    t.minute = 247;\n    t.lessequal = 549;\n    t.fraction = 167;\n    t.infinity = 713;\n    t.florin = 500;\n    t.club = 753;\n    t.diamond = 753;\n    t.heart = 753;\n    t.spade = 753;\n    t.arrowboth = 1042;\n    t.arrowleft = 987;\n    t.arrowup = 603;\n    t.arrowright = 987;\n    t.arrowdown = 603;\n    t.degree = 400;\n    t.plusminus = 549;\n    t.second = 411;\n    t.greaterequal = 549;\n    t.multiply = 549;\n    t.proportional = 713;\n    t.partialdiff = 494;\n    t.bullet = 460;\n    t.divide = 549;\n    t.notequal = 549;\n    t.equivalence = 549;\n    t.approxequal = 549;\n    t.ellipsis = 1000;\n    t.arrowvertex = 603;\n    t.arrowhorizex = 1000;\n    t.carriagereturn = 658;\n    t.aleph = 823;\n    t.Ifraktur = 686;\n    t.Rfraktur = 795;\n    t.weierstrass = 987;\n    t.circlemultiply = 768;\n    t.circleplus = 768;\n    t.emptyset = 823;\n    t.intersection = 768;\n    t.union = 768;\n    t.propersuperset = 713;\n    t.reflexsuperset = 713;\n    t.notsubset = 713;\n    t.propersubset = 713;\n    t.reflexsubset = 713;\n    t.element = 713;\n    t.notelement = 713;\n    t.angle = 768;\n    t.gradient = 713;\n    t.registerserif = 790;\n    t.copyrightserif = 790;\n    t.trademarkserif = 890;\n    t.product = 823;\n    t.radical = 549;\n    t.dotmath = 250;\n    t.logicalnot = 713;\n    t.logicaland = 603;\n    t.logicalor = 603;\n    t.arrowdblboth = 1042;\n    t.arrowdblleft = 987;\n    t.arrowdblup = 603;\n    t.arrowdblright = 987;\n    t.arrowdbldown = 603;\n    t.lozenge = 494;\n    t.angleleft = 329;\n    t.registersans = 790;\n    t.copyrightsans = 790;\n    t.trademarksans = 786;\n    t.summation = 713;\n    t.parenlefttp = 384;\n    t.parenleftex = 384;\n    t.parenleftbt = 384;\n    t.bracketlefttp = 384;\n    t.bracketleftex = 384;\n    t.bracketleftbt = 384;\n    t.bracelefttp = 494;\n    t.braceleftmid = 494;\n    t.braceleftbt = 494;\n    t.braceex = 494;\n    t.angleright = 329;\n    t.integral = 274;\n    t.integraltp = 686;\n    t.integralex = 686;\n    t.integralbt = 686;\n    t.parenrighttp = 384;\n    t.parenrightex = 384;\n    t.parenrightbt = 384;\n    t.bracketrighttp = 384;\n    t.bracketrightex = 384;\n    t.bracketrightbt = 384;\n    t.bracerighttp = 494;\n    t.bracerightmid = 494;\n    t.bracerightbt = 494;\n    t.apple = 790;\n  });\n  t[\"Times-Roman\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 408;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 564;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 564;\n    t.equal = 564;\n    t.greater = 564;\n    t.question = 444;\n    t.at = 921;\n    t.A = 722;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 556;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 389;\n    t.K = 722;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 556;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 722;\n    t.W = 944;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 469;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 444;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 333;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.asciitilde = 541;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 180;\n    t.quotedblleft = 444;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 453;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 444;\n    t.quotedblright = 444;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 444;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 889;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 444;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 564;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 444;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 444;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 444;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 444;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 444;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 444;\n    t.Amacron = 722;\n    t.rcaron = 333;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 556;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 588;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 564;\n    t.uacute = 500;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 444;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 722;\n    t.Iacute = 333;\n    t.plusminus = 564;\n    t.brokenbar = 200;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 333;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 326;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 444;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 344;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 722;\n    t.zdotaccent = 444;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 500;\n    t.minus = 564;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 564;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 1000;\n    t.ampersand = 833;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 930;\n    t.A = 722;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 778;\n    t.L = 667;\n    t.M = 944;\n    t.N = 722;\n    t.O = 778;\n    t.P = 611;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 556;\n    t.T = 667;\n    t.U = 722;\n    t.V = 722;\n    t.W = 1000;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 667;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 581;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 556;\n    t.c = 444;\n    t.d = 556;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 333;\n    t.k = 556;\n    t.l = 278;\n    t.m = 833;\n    t.n = 556;\n    t.o = 500;\n    t.p = 556;\n    t.q = 556;\n    t.r = 444;\n    t.s = 389;\n    t.t = 333;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 394;\n    t.bar = 220;\n    t.braceright = 394;\n    t.asciitilde = 520;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 540;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 300;\n    t.Lslash = 667;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 330;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 556;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 570;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 667;\n    t.Cacute = 722;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 722;\n    t.rcaron = 444;\n    t.ccedilla = 444;\n    t.Zdotaccent = 667;\n    t.Thorn = 611;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 556;\n    t.dcaron = 672;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 667;\n    t.partialdiff = 494;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 778;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 444;\n    t.omacron = 500;\n    t.Zacute = 667;\n    t.Zcaron = 667;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 416;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 300;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 394;\n    t.Kcommaaccent = 778;\n    t.Lacute = 667;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 667;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 444;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 667;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 444;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 556;\n    t.minus = 570;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 333;\n    t.logicalnot = 570;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-BoldItalic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 389;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 832;\n    t.A = 667;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 667;\n    t.F = 667;\n    t.G = 722;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 667;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 889;\n    t.X = 667;\n    t.Y = 611;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 570;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 556;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 556;\n    t.v = 444;\n    t.w = 667;\n    t.x = 500;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 348;\n    t.bar = 220;\n    t.braceright = 348;\n    t.asciitilde = 570;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 500;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 944;\n    t.ordfeminine = 266;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 300;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 611;\n    t.divide = 570;\n    t.Yacute = 611;\n    t.Acircumflex = 667;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 667;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 608;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 444;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 722;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 366;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 576;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 382;\n    t.Kcommaaccent = 667;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 500;\n    t.minus = 606;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 606;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t[\"Times-Italic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 420;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 675;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 675;\n    t.equal = 675;\n    t.greater = 675;\n    t.question = 500;\n    t.at = 920;\n    t.A = 611;\n    t.B = 611;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 611;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 444;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 667;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 611;\n    t.S = 500;\n    t.T = 556;\n    t.U = 722;\n    t.V = 611;\n    t.W = 833;\n    t.X = 611;\n    t.Y = 556;\n    t.Z = 556;\n    t.bracketleft = 389;\n    t.backslash = 278;\n    t.bracketright = 389;\n    t.asciicircum = 422;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 278;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 444;\n    t.l = 278;\n    t.m = 722;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 444;\n    t.w = 667;\n    t.x = 444;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 400;\n    t.bar = 275;\n    t.braceright = 400;\n    t.asciitilde = 541;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 214;\n    t.quotedblleft = 556;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 523;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 556;\n    t.quotedblright = 556;\n    t.guillemotright = 500;\n    t.ellipsis = 889;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 889;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 556;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 667;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 556;\n    t.divide = 675;\n    t.Yacute = 556;\n    t.Acircumflex = 611;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 667;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 556;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 611;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 500;\n    t.Amacron = 611;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 556;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 611;\n    t.Sacute = 500;\n    t.dcaron = 544;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 611;\n    t.Abreve = 611;\n    t.multiply = 675;\n    t.uacute = 500;\n    t.Tcaron = 556;\n    t.partialdiff = 476;\n    t.ydieresis = 444;\n    t.Nacute = 667;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 667;\n    t.Iacute = 333;\n    t.plusminus = 675;\n    t.brokenbar = 275;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 556;\n    t.Zcaron = 556;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 300;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 611;\n    t.Adieresis = 611;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 500;\n    t.lcaron = 300;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 500;\n    t.Scommaaccent = 500;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 667;\n    t.otilde = 500;\n    t.Rcommaaccent = 611;\n    t.Lcommaaccent = 556;\n    t.Atilde = 611;\n    t.Aogonek = 611;\n    t.Aring = 611;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 444;\n    t.minus = 675;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 675;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  t.ZapfDingbats = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t.space = 278;\n    t.a1 = 974;\n    t.a2 = 961;\n    t.a202 = 974;\n    t.a3 = 980;\n    t.a4 = 719;\n    t.a5 = 789;\n    t.a119 = 790;\n    t.a118 = 791;\n    t.a117 = 690;\n    t.a11 = 960;\n    t.a12 = 939;\n    t.a13 = 549;\n    t.a14 = 855;\n    t.a15 = 911;\n    t.a16 = 933;\n    t.a105 = 911;\n    t.a17 = 945;\n    t.a18 = 974;\n    t.a19 = 755;\n    t.a20 = 846;\n    t.a21 = 762;\n    t.a22 = 761;\n    t.a23 = 571;\n    t.a24 = 677;\n    t.a25 = 763;\n    t.a26 = 760;\n    t.a27 = 759;\n    t.a28 = 754;\n    t.a6 = 494;\n    t.a7 = 552;\n    t.a8 = 537;\n    t.a9 = 577;\n    t.a10 = 692;\n    t.a29 = 786;\n    t.a30 = 788;\n    t.a31 = 788;\n    t.a32 = 790;\n    t.a33 = 793;\n    t.a34 = 794;\n    t.a35 = 816;\n    t.a36 = 823;\n    t.a37 = 789;\n    t.a38 = 841;\n    t.a39 = 823;\n    t.a40 = 833;\n    t.a41 = 816;\n    t.a42 = 831;\n    t.a43 = 923;\n    t.a44 = 744;\n    t.a45 = 723;\n    t.a46 = 749;\n    t.a47 = 790;\n    t.a48 = 792;\n    t.a49 = 695;\n    t.a50 = 776;\n    t.a51 = 768;\n    t.a52 = 792;\n    t.a53 = 759;\n    t.a54 = 707;\n    t.a55 = 708;\n    t.a56 = 682;\n    t.a57 = 701;\n    t.a58 = 826;\n    t.a59 = 815;\n    t.a60 = 789;\n    t.a61 = 789;\n    t.a62 = 707;\n    t.a63 = 687;\n    t.a64 = 696;\n    t.a65 = 689;\n    t.a66 = 786;\n    t.a67 = 787;\n    t.a68 = 713;\n    t.a69 = 791;\n    t.a70 = 785;\n    t.a71 = 791;\n    t.a72 = 873;\n    t.a73 = 761;\n    t.a74 = 762;\n    t.a203 = 762;\n    t.a75 = 759;\n    t.a204 = 759;\n    t.a76 = 892;\n    t.a77 = 892;\n    t.a78 = 788;\n    t.a79 = 784;\n    t.a81 = 438;\n    t.a82 = 138;\n    t.a83 = 277;\n    t.a84 = 415;\n    t.a97 = 392;\n    t.a98 = 392;\n    t.a99 = 668;\n    t.a100 = 668;\n    t.a89 = 390;\n    t.a90 = 390;\n    t.a93 = 317;\n    t.a94 = 317;\n    t.a91 = 276;\n    t.a92 = 276;\n    t.a205 = 509;\n    t.a85 = 509;\n    t.a206 = 410;\n    t.a86 = 410;\n    t.a87 = 234;\n    t.a88 = 234;\n    t.a95 = 334;\n    t.a96 = 334;\n    t.a101 = 732;\n    t.a102 = 544;\n    t.a103 = 544;\n    t.a104 = 910;\n    t.a106 = 667;\n    t.a107 = 760;\n    t.a108 = 760;\n    t.a112 = 776;\n    t.a111 = 595;\n    t.a110 = 694;\n    t.a109 = 626;\n    t.a120 = 788;\n    t.a121 = 788;\n    t.a122 = 788;\n    t.a123 = 788;\n    t.a124 = 788;\n    t.a125 = 788;\n    t.a126 = 788;\n    t.a127 = 788;\n    t.a128 = 788;\n    t.a129 = 788;\n    t.a130 = 788;\n    t.a131 = 788;\n    t.a132 = 788;\n    t.a133 = 788;\n    t.a134 = 788;\n    t.a135 = 788;\n    t.a136 = 788;\n    t.a137 = 788;\n    t.a138 = 788;\n    t.a139 = 788;\n    t.a140 = 788;\n    t.a141 = 788;\n    t.a142 = 788;\n    t.a143 = 788;\n    t.a144 = 788;\n    t.a145 = 788;\n    t.a146 = 788;\n    t.a147 = 788;\n    t.a148 = 788;\n    t.a149 = 788;\n    t.a150 = 788;\n    t.a151 = 788;\n    t.a152 = 788;\n    t.a153 = 788;\n    t.a154 = 788;\n    t.a155 = 788;\n    t.a156 = 788;\n    t.a157 = 788;\n    t.a158 = 788;\n    t.a159 = 788;\n    t.a160 = 894;\n    t.a161 = 838;\n    t.a163 = 1016;\n    t.a164 = 458;\n    t.a196 = 748;\n    t.a165 = 924;\n    t.a192 = 748;\n    t.a166 = 918;\n    t.a167 = 927;\n    t.a168 = 928;\n    t.a169 = 928;\n    t.a170 = 834;\n    t.a171 = 873;\n    t.a172 = 828;\n    t.a173 = 924;\n    t.a162 = 924;\n    t.a174 = 917;\n    t.a175 = 930;\n    t.a176 = 931;\n    t.a177 = 463;\n    t.a178 = 883;\n    t.a179 = 836;\n    t.a193 = 836;\n    t.a180 = 867;\n    t.a199 = 867;\n    t.a181 = 696;\n    t.a200 = 696;\n    t.a182 = 874;\n    t.a201 = 874;\n    t.a183 = 760;\n    t.a184 = 946;\n    t.a197 = 771;\n    t.a185 = 865;\n    t.a194 = 771;\n    t.a198 = 888;\n    t.a186 = 967;\n    t.a195 = 888;\n    t.a187 = 831;\n    t.a188 = 873;\n    t.a189 = 927;\n    t.a190 = 970;\n    t.a191 = 918;\n  });\n});\nexports.getMetrics = getMetrics;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPDFFunction = isPDFFunction;\nexports.PostScriptCompiler = exports.PostScriptEvaluator = exports.PDFFunctionFactory = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _ps_parser = __w_pdfjs_require__(42);\n\nclass PDFFunctionFactory {\n  constructor({\n    xref,\n    isEvalSupported = true\n  }) {\n    this.xref = xref;\n    this.isEvalSupported = isEvalSupported !== false;\n  }\n\n  create(fn) {\n    return PDFFunction.parse({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fn\n    });\n  }\n\n  createFromArray(fnObj) {\n    return PDFFunction.parseArray({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fnObj\n    });\n  }\n\n}\n\nexports.PDFFunctionFactory = PDFFunctionFactory;\n\nfunction toNumberArray(arr) {\n  if (!Array.isArray(arr)) {\n    return null;\n  }\n\n  const length = arr.length;\n\n  for (let i = 0; i < length; i++) {\n    if (typeof arr[i] !== \"number\") {\n      const result = new Array(length);\n\n      for (let j = 0; j < length; j++) {\n        result[j] = +arr[j];\n      }\n\n      return result;\n    }\n  }\n\n  return arr;\n}\n\nvar PDFFunction = function PDFFunctionClosure() {\n  const CONSTRUCT_SAMPLED = 0;\n  const CONSTRUCT_INTERPOLATED = 2;\n  const CONSTRUCT_STICHED = 3;\n  const CONSTRUCT_POSTSCRIPT = 4;\n  return {\n    getSampleArray(size, outputSize, bps, stream) {\n      var i, ii;\n      var length = 1;\n\n      for (i = 0, ii = size.length; i < ii; i++) {\n        length *= size[i];\n      }\n\n      length *= outputSize;\n      var array = new Array(length);\n      var codeSize = 0;\n      var codeBuf = 0;\n      var sampleMul = 1.0 / (2.0 ** bps - 1);\n      var strBytes = stream.getBytes((length * bps + 7) / 8);\n      var strIdx = 0;\n\n      for (i = 0; i < length; i++) {\n        while (codeSize < bps) {\n          codeBuf <<= 8;\n          codeBuf |= strBytes[strIdx++];\n          codeSize += 8;\n        }\n\n        codeSize -= bps;\n        array[i] = (codeBuf >> codeSize) * sampleMul;\n        codeBuf &= (1 << codeSize) - 1;\n      }\n\n      return array;\n    },\n\n    getIR({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      var dict = fn.dict;\n\n      if (!dict) {\n        dict = fn;\n      }\n\n      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];\n      var typeNum = dict.get(\"FunctionType\");\n      var typeFn = types[typeNum];\n\n      if (!typeFn) {\n        throw new _util.FormatError(\"Unknown type of function\");\n      }\n\n      return typeFn.call(this, {\n        xref,\n        isEvalSupported,\n        fn,\n        dict\n      });\n    },\n\n    fromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var type = IR[0];\n\n      switch (type) {\n        case CONSTRUCT_SAMPLED:\n          return this.constructSampledFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_INTERPOLATED:\n          return this.constructInterpolatedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_STICHED:\n          return this.constructStichedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        default:\n          return this.constructPostScriptFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n      }\n    },\n\n    parse({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      const IR = this.getIR({\n        xref,\n        isEvalSupported,\n        fn\n      });\n      return this.fromIR({\n        xref,\n        isEvalSupported,\n        IR\n      });\n    },\n\n    parseArray({\n      xref,\n      isEvalSupported,\n      fnObj\n    }) {\n      if (!Array.isArray(fnObj)) {\n        return this.parse({\n          xref,\n          isEvalSupported,\n          fn: fnObj\n        });\n      }\n\n      var fnArray = [];\n\n      for (var j = 0, jj = fnObj.length; j < jj; j++) {\n        fnArray.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnObj[j])\n        }));\n      }\n\n      return function (src, srcOffset, dest, destOffset) {\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          fnArray[i](src, srcOffset, dest, destOffset + i);\n        }\n      };\n    },\n\n    constructSampled({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      function toMultiArray(arr) {\n        var inputLength = arr.length;\n        var out = [];\n        var index = 0;\n\n        for (var i = 0; i < inputLength; i += 2) {\n          out[index] = [arr[i], arr[i + 1]];\n          ++index;\n        }\n\n        return out;\n      }\n\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain || !range) {\n        throw new _util.FormatError(\"No domain or range\");\n      }\n\n      var inputSize = domain.length / 2;\n      var outputSize = range.length / 2;\n      domain = toMultiArray(domain);\n      range = toMultiArray(range);\n      var size = toNumberArray(dict.getArray(\"Size\"));\n      var bps = dict.get(\"BitsPerSample\");\n      var order = dict.get(\"Order\") || 1;\n\n      if (order !== 1) {\n        (0, _util.info)(\"No support for cubic spline interpolation: \" + order);\n      }\n\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n\n      if (!encode) {\n        encode = [];\n\n        for (var i = 0; i < inputSize; ++i) {\n          encode.push([0, size[i] - 1]);\n        }\n      } else {\n        encode = toMultiArray(encode);\n      }\n\n      var decode = toNumberArray(dict.getArray(\"Decode\"));\n\n      if (!decode) {\n        decode = range;\n      } else {\n        decode = toMultiArray(decode);\n      }\n\n      var samples = this.getSampleArray(size, outputSize, bps, fn);\n      return [CONSTRUCT_SAMPLED, inputSize, domain, encode, decode, samples, size, outputSize, 2 ** bps - 1, range];\n    },\n\n    constructSampledFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      function interpolate(x, xmin, xmax, ymin, ymax) {\n        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n      }\n\n      return function constructSampledFromIRResult(src, srcOffset, dest, destOffset) {\n        var m = IR[1];\n        var domain = IR[2];\n        var encode = IR[3];\n        var decode = IR[4];\n        var samples = IR[5];\n        var size = IR[6];\n        var n = IR[7];\n        var range = IR[9];\n        var cubeVertices = 1 << m;\n        var cubeN = new Float64Array(cubeVertices);\n        var cubeVertex = new Uint32Array(cubeVertices);\n        var i, j;\n\n        for (j = 0; j < cubeVertices; j++) {\n          cubeN[j] = 1;\n        }\n\n        var k = n,\n            pos = 1;\n\n        for (i = 0; i < m; ++i) {\n          var domain_2i = domain[i][0];\n          var domain_2i_1 = domain[i][1];\n          var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);\n          var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);\n          var size_i = size[i];\n          e = Math.min(Math.max(e, 0), size_i - 1);\n          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;\n          var n0 = e0 + 1 - e;\n          var n1 = e - e0;\n          var offset0 = e0 * k;\n          var offset1 = offset0 + k;\n\n          for (j = 0; j < cubeVertices; j++) {\n            if (j & pos) {\n              cubeN[j] *= n1;\n              cubeVertex[j] += offset1;\n            } else {\n              cubeN[j] *= n0;\n              cubeVertex[j] += offset0;\n            }\n          }\n\n          k *= size_i;\n          pos <<= 1;\n        }\n\n        for (j = 0; j < n; ++j) {\n          var rj = 0;\n\n          for (i = 0; i < cubeVertices; i++) {\n            rj += samples[cubeVertex[i] + j] * cubeN[i];\n          }\n\n          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n          dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);\n        }\n      };\n    },\n\n    constructInterpolated({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var c0 = toNumberArray(dict.getArray(\"C0\")) || [0];\n      var c1 = toNumberArray(dict.getArray(\"C1\")) || [1];\n      var n = dict.get(\"N\");\n      var length = c0.length;\n      var diff = [];\n\n      for (var i = 0; i < length; ++i) {\n        diff.push(c1[i] - c0[i]);\n      }\n\n      return [CONSTRUCT_INTERPOLATED, c0, diff, n];\n    },\n\n    constructInterpolatedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var c0 = IR[1];\n      var diff = IR[2];\n      var n = IR[3];\n      var length = diff.length;\n      return function constructInterpolatedFromIRResult(src, srcOffset, dest, destOffset) {\n        var x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;\n\n        for (var j = 0; j < length; ++j) {\n          dest[destOffset + j] = c0[j] + x * diff[j];\n        }\n      };\n    },\n\n    constructStiched({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain\");\n      }\n\n      var inputSize = domain.length / 2;\n\n      if (inputSize !== 1) {\n        throw new _util.FormatError(\"Bad domain for stiched function\");\n      }\n\n      var fnRefs = dict.get(\"Functions\");\n      var fns = [];\n\n      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n        fns.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnRefs[i])\n        }));\n      }\n\n      var bounds = toNumberArray(dict.getArray(\"Bounds\"));\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];\n    },\n\n    constructStichedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var bounds = IR[2];\n      var encode = IR[3];\n      var fns = IR[4];\n      var tmpBuf = new Float32Array(1);\n      return function constructStichedFromIRResult(src, srcOffset, dest, destOffset) {\n        var clip = function constructStichedFromIRClip(v, min, max) {\n          if (v > max) {\n            v = max;\n          } else if (v < min) {\n            v = min;\n          }\n\n          return v;\n        };\n\n        var v = clip(src[srcOffset], domain[0], domain[1]);\n\n        for (var i = 0, ii = bounds.length; i < ii; ++i) {\n          if (v < bounds[i]) {\n            break;\n          }\n        }\n\n        var dmin = domain[0];\n\n        if (i > 0) {\n          dmin = bounds[i - 1];\n        }\n\n        var dmax = domain[1];\n\n        if (i < bounds.length) {\n          dmax = bounds[i];\n        }\n\n        var rmin = encode[2 * i];\n        var rmax = encode[2 * i + 1];\n        tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);\n        fns[i](tmpBuf, 0, dest, destOffset);\n      };\n    },\n\n    constructPostScript({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain.\");\n      }\n\n      if (!range) {\n        throw new _util.FormatError(\"No range.\");\n      }\n\n      var lexer = new _ps_parser.PostScriptLexer(fn);\n      var parser = new _ps_parser.PostScriptParser(lexer);\n      var code = parser.parse();\n      return [CONSTRUCT_POSTSCRIPT, domain, range, code];\n    },\n\n    constructPostScriptFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var range = IR[2];\n      var code = IR[3];\n\n      if (isEvalSupported && _util.IsEvalSupportedCached.value) {\n        const compiled = new PostScriptCompiler().compile(code, domain, range);\n\n        if (compiled) {\n          return new Function(\"src\", \"srcOffset\", \"dest\", \"destOffset\", compiled);\n        }\n      }\n\n      (0, _util.info)(\"Unable to compile PS function\");\n      var numOutputs = range.length >> 1;\n      var numInputs = domain.length >> 1;\n      var evaluator = new PostScriptEvaluator(code);\n      var cache = Object.create(null);\n      var MAX_CACHE_SIZE = 2048 * 4;\n      var cache_available = MAX_CACHE_SIZE;\n      var tmpBuf = new Float32Array(numInputs);\n      return function constructPostScriptFromIRResult(src, srcOffset, dest, destOffset) {\n        var i, value;\n        var key = \"\";\n        var input = tmpBuf;\n\n        for (i = 0; i < numInputs; i++) {\n          value = src[srcOffset + i];\n          input[i] = value;\n          key += value + \"_\";\n        }\n\n        var cachedValue = cache[key];\n\n        if (cachedValue !== undefined) {\n          dest.set(cachedValue, destOffset);\n          return;\n        }\n\n        var output = new Float32Array(numOutputs);\n        var stack = evaluator.execute(input);\n        var stackIndex = stack.length - numOutputs;\n\n        for (i = 0; i < numOutputs; i++) {\n          value = stack[stackIndex + i];\n          var bound = range[i * 2];\n\n          if (value < bound) {\n            value = bound;\n          } else {\n            bound = range[i * 2 + 1];\n\n            if (value > bound) {\n              value = bound;\n            }\n          }\n\n          output[i] = value;\n        }\n\n        if (cache_available > 0) {\n          cache_available--;\n          cache[key] = output;\n        }\n\n        dest.set(output, destOffset);\n      };\n    }\n\n  };\n}();\n\nfunction isPDFFunction(v) {\n  var fnDict;\n\n  if (typeof v !== \"object\") {\n    return false;\n  } else if ((0, _primitives.isDict)(v)) {\n    fnDict = v;\n  } else if ((0, _primitives.isStream)(v)) {\n    fnDict = v.dict;\n  } else {\n    return false;\n  }\n\n  return fnDict.has(\"FunctionType\");\n}\n\nvar PostScriptStack = function PostScriptStackClosure() {\n  var MAX_STACK_SIZE = 100;\n\n  function PostScriptStack(initialStack) {\n    this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);\n  }\n\n  PostScriptStack.prototype = {\n    push: function PostScriptStack_push(value) {\n      if (this.stack.length >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      this.stack.push(value);\n    },\n    pop: function PostScriptStack_pop() {\n      if (this.stack.length <= 0) {\n        throw new Error(\"PostScript function stack underflow.\");\n      }\n\n      return this.stack.pop();\n    },\n    copy: function PostScriptStack_copy(n) {\n      if (this.stack.length + n >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      var stack = this.stack;\n\n      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n        stack.push(stack[i]);\n      }\n    },\n    index: function PostScriptStack_index(n) {\n      this.push(this.stack[this.stack.length - n - 1]);\n    },\n    roll: function PostScriptStack_roll(n, p) {\n      var stack = this.stack;\n      var l = stack.length - n;\n      var r = stack.length - 1,\n          c = l + (p - Math.floor(p / n) * n),\n          i,\n          j,\n          t;\n\n      for (i = l, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = l, j = c - 1; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = c, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n    }\n  };\n  return PostScriptStack;\n}();\n\nvar PostScriptEvaluator = function PostScriptEvaluatorClosure() {\n  function PostScriptEvaluator(operators) {\n    this.operators = operators;\n  }\n\n  PostScriptEvaluator.prototype = {\n    execute: function PostScriptEvaluator_execute(initialStack) {\n      var stack = new PostScriptStack(initialStack);\n      var counter = 0;\n      var operators = this.operators;\n      var length = operators.length;\n      var operator, a, b;\n\n      while (counter < length) {\n        operator = operators[counter++];\n\n        if (typeof operator === \"number\") {\n          stack.push(operator);\n          continue;\n        }\n\n        switch (operator) {\n          case \"jz\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (!a) {\n              counter = b;\n            }\n\n            break;\n\n          case \"j\":\n            a = stack.pop();\n            counter = a;\n            break;\n\n          case \"abs\":\n            a = stack.pop();\n            stack.push(Math.abs(a));\n            break;\n\n          case \"add\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a + b);\n            break;\n\n          case \"and\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a && b);\n            } else {\n              stack.push(a & b);\n            }\n\n            break;\n\n          case \"atan\":\n            a = stack.pop();\n            stack.push(Math.atan(a));\n            break;\n\n          case \"bitshift\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (a > 0) {\n              stack.push(a << b);\n            } else {\n              stack.push(a >> b);\n            }\n\n            break;\n\n          case \"ceiling\":\n            a = stack.pop();\n            stack.push(Math.ceil(a));\n            break;\n\n          case \"copy\":\n            a = stack.pop();\n            stack.copy(a);\n            break;\n\n          case \"cos\":\n            a = stack.pop();\n            stack.push(Math.cos(a));\n            break;\n\n          case \"cvi\":\n            a = stack.pop() | 0;\n            stack.push(a);\n            break;\n\n          case \"cvr\":\n            break;\n\n          case \"div\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b);\n            break;\n\n          case \"dup\":\n            stack.copy(1);\n            break;\n\n          case \"eq\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a === b);\n            break;\n\n          case \"exch\":\n            stack.roll(2, 1);\n            break;\n\n          case \"exp\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a ** b);\n            break;\n\n          case \"false\":\n            stack.push(false);\n            break;\n\n          case \"floor\":\n            a = stack.pop();\n            stack.push(Math.floor(a));\n            break;\n\n          case \"ge\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a >= b);\n            break;\n\n          case \"gt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a > b);\n            break;\n\n          case \"idiv\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b | 0);\n            break;\n\n          case \"index\":\n            a = stack.pop();\n            stack.index(a);\n            break;\n\n          case \"le\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a <= b);\n            break;\n\n          case \"ln\":\n            a = stack.pop();\n            stack.push(Math.log(a));\n            break;\n\n          case \"log\":\n            a = stack.pop();\n            stack.push(Math.log(a) / Math.LN10);\n            break;\n\n          case \"lt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a < b);\n            break;\n\n          case \"mod\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a % b);\n            break;\n\n          case \"mul\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a * b);\n            break;\n\n          case \"ne\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a !== b);\n            break;\n\n          case \"neg\":\n            a = stack.pop();\n            stack.push(-a);\n            break;\n\n          case \"not\":\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a)) {\n              stack.push(!a);\n            } else {\n              stack.push(~a);\n            }\n\n            break;\n\n          case \"or\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a || b);\n            } else {\n              stack.push(a | b);\n            }\n\n            break;\n\n          case \"pop\":\n            stack.pop();\n            break;\n\n          case \"roll\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.roll(a, b);\n            break;\n\n          case \"round\":\n            a = stack.pop();\n            stack.push(Math.round(a));\n            break;\n\n          case \"sin\":\n            a = stack.pop();\n            stack.push(Math.sin(a));\n            break;\n\n          case \"sqrt\":\n            a = stack.pop();\n            stack.push(Math.sqrt(a));\n            break;\n\n          case \"sub\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a - b);\n            break;\n\n          case \"true\":\n            stack.push(true);\n            break;\n\n          case \"truncate\":\n            a = stack.pop();\n            a = a < 0 ? Math.ceil(a) : Math.floor(a);\n            stack.push(a);\n            break;\n\n          case \"xor\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a !== b);\n            } else {\n              stack.push(a ^ b);\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown operator ${operator}`);\n        }\n      }\n\n      return stack.stack;\n    }\n  };\n  return PostScriptEvaluator;\n}();\n\nexports.PostScriptEvaluator = PostScriptEvaluator;\n\nvar PostScriptCompiler = function PostScriptCompilerClosure() {\n  function AstNode(type) {\n    this.type = type;\n  }\n\n  AstNode.prototype.visit = function (visitor) {\n    (0, _util.unreachable)(\"abstract method\");\n  };\n\n  function AstArgument(index, min, max) {\n    AstNode.call(this, \"args\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstArgument.prototype = Object.create(AstNode.prototype);\n\n  AstArgument.prototype.visit = function (visitor) {\n    visitor.visitArgument(this);\n  };\n\n  function AstLiteral(number) {\n    AstNode.call(this, \"literal\");\n    this.number = number;\n    this.min = number;\n    this.max = number;\n  }\n\n  AstLiteral.prototype = Object.create(AstNode.prototype);\n\n  AstLiteral.prototype.visit = function (visitor) {\n    visitor.visitLiteral(this);\n  };\n\n  function AstBinaryOperation(op, arg1, arg2, min, max) {\n    AstNode.call(this, \"binary\");\n    this.op = op;\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstBinaryOperation.prototype = Object.create(AstNode.prototype);\n\n  AstBinaryOperation.prototype.visit = function (visitor) {\n    visitor.visitBinaryOperation(this);\n  };\n\n  function AstMin(arg, max) {\n    AstNode.call(this, \"max\");\n    this.arg = arg;\n    this.min = arg.min;\n    this.max = max;\n  }\n\n  AstMin.prototype = Object.create(AstNode.prototype);\n\n  AstMin.prototype.visit = function (visitor) {\n    visitor.visitMin(this);\n  };\n\n  function AstVariable(index, min, max) {\n    AstNode.call(this, \"var\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstVariable.prototype = Object.create(AstNode.prototype);\n\n  AstVariable.prototype.visit = function (visitor) {\n    visitor.visitVariable(this);\n  };\n\n  function AstVariableDefinition(variable, arg) {\n    AstNode.call(this, \"definition\");\n    this.variable = variable;\n    this.arg = arg;\n  }\n\n  AstVariableDefinition.prototype = Object.create(AstNode.prototype);\n\n  AstVariableDefinition.prototype.visit = function (visitor) {\n    visitor.visitVariableDefinition(this);\n  };\n\n  function ExpressionBuilderVisitor() {\n    this.parts = [];\n  }\n\n  ExpressionBuilderVisitor.prototype = {\n    visitArgument(arg) {\n      this.parts.push(\"Math.max(\", arg.min, \", Math.min(\", arg.max, \", src[srcOffset + \", arg.index, \"]))\");\n    },\n\n    visitVariable(variable) {\n      this.parts.push(\"v\", variable.index);\n    },\n\n    visitLiteral(literal) {\n      this.parts.push(literal.number);\n    },\n\n    visitBinaryOperation(operation) {\n      this.parts.push(\"(\");\n      operation.arg1.visit(this);\n      this.parts.push(\" \", operation.op, \" \");\n      operation.arg2.visit(this);\n      this.parts.push(\")\");\n    },\n\n    visitVariableDefinition(definition) {\n      this.parts.push(\"var \");\n      definition.variable.visit(this);\n      this.parts.push(\" = \");\n      definition.arg.visit(this);\n      this.parts.push(\";\");\n    },\n\n    visitMin(max) {\n      this.parts.push(\"Math.min(\");\n      max.arg.visit(this);\n      this.parts.push(\", \", max.max, \")\");\n    },\n\n    toString() {\n      return this.parts.join(\"\");\n    }\n\n  };\n\n  function buildAddOperation(num1, num2) {\n    if (num2.type === \"literal\" && num2.number === 0) {\n      return num1;\n    }\n\n    if (num1.type === \"literal\" && num1.number === 0) {\n      return num2;\n    }\n\n    if (num2.type === \"literal\" && num1.type === \"literal\") {\n      return new AstLiteral(num1.number + num2.number);\n    }\n\n    return new AstBinaryOperation(\"+\", num1, num2, num1.min + num2.min, num1.max + num2.max);\n  }\n\n  function buildMulOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return new AstLiteral(0);\n      } else if (num2.number === 1) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number * num2.number);\n      }\n    }\n\n    if (num1.type === \"literal\") {\n      if (num1.number === 0) {\n        return new AstLiteral(0);\n      } else if (num1.number === 1) {\n        return num2;\n      }\n    }\n\n    var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    return new AstBinaryOperation(\"*\", num1, num2, min, max);\n  }\n\n  function buildSubOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number - num2.number);\n      }\n    }\n\n    if (num2.type === \"binary\" && num2.op === \"-\" && num1.type === \"literal\" && num1.number === 1 && num2.arg1.type === \"literal\" && num2.arg1.number === 1) {\n      return num2.arg2;\n    }\n\n    return new AstBinaryOperation(\"-\", num1, num2, num1.min - num2.max, num1.max - num2.min);\n  }\n\n  function buildMinOperation(num1, max) {\n    if (num1.min >= max) {\n      return new AstLiteral(max);\n    } else if (num1.max <= max) {\n      return num1;\n    }\n\n    return new AstMin(num1, max);\n  }\n\n  function PostScriptCompiler() {}\n\n  PostScriptCompiler.prototype = {\n    compile: function PostScriptCompiler_compile(code, domain, range) {\n      var stack = [];\n      var instructions = [];\n      var inputSize = domain.length >> 1,\n          outputSize = range.length >> 1;\n      var lastRegister = 0;\n      var n, j;\n      var num1, num2, ast1, ast2, tmpVar, item;\n\n      for (let i = 0; i < inputSize; i++) {\n        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n      }\n\n      for (let i = 0, ii = code.length; i < ii; i++) {\n        item = code[i];\n\n        if (typeof item === \"number\") {\n          stack.push(new AstLiteral(item));\n          continue;\n        }\n\n        switch (item) {\n          case \"add\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildAddOperation(num1, num2));\n            break;\n\n          case \"cvr\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            break;\n\n          case \"mul\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildMulOperation(num1, num2));\n            break;\n\n          case \"sub\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildSubOperation(num1, num2));\n            break;\n\n          case \"exch\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            ast1 = stack.pop();\n            ast2 = stack.pop();\n            stack.push(ast1, ast2);\n            break;\n\n          case \"pop\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            stack.pop();\n            break;\n\n          case \"index\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            num1 = stack.pop();\n\n            if (num1.type !== \"literal\") {\n              return null;\n            }\n\n            n = num1.number;\n\n            if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n              return null;\n            }\n\n            ast1 = stack[stack.length - n - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - n - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"dup\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            if (typeof code[i + 1] === \"number\" && code[i + 2] === \"gt\" && code[i + 3] === i + 7 && code[i + 4] === \"jz\" && code[i + 5] === \"pop\" && code[i + 6] === code[i + 1]) {\n              num1 = stack.pop();\n              stack.push(buildMinOperation(num1, code[i + 1]));\n              i += 6;\n              break;\n            }\n\n            ast1 = stack[stack.length - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"roll\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n\n            if (num2.type !== \"literal\" || num1.type !== \"literal\") {\n              return null;\n            }\n\n            j = num2.number;\n            n = num1.number;\n\n            if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {\n              return null;\n            }\n\n            j = (j % n + n) % n;\n\n            if (j === 0) {\n              break;\n            }\n\n            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));\n            break;\n\n          default:\n            return null;\n        }\n      }\n\n      if (stack.length !== outputSize) {\n        return null;\n      }\n\n      var result = [];\n      instructions.forEach(function (instruction) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        instruction.visit(statementBuilder);\n        result.push(statementBuilder.toString());\n      });\n      stack.forEach(function (expr, i) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        expr.visit(statementBuilder);\n        var min = range[i * 2],\n            max = range[i * 2 + 1];\n        var out = [statementBuilder.toString()];\n\n        if (min > expr.min) {\n          out.unshift(\"Math.max(\", min, \", \");\n          out.push(\")\");\n        }\n\n        if (max < expr.max) {\n          out.unshift(\"Math.min(\", max, \", \");\n          out.push(\")\");\n        }\n\n        out.unshift(\"dest[destOffset + \", i, \"] = \");\n        out.push(\";\");\n        result.push(out.join(\"\"));\n      });\n      return result.join(\"\\n\");\n    }\n  };\n  return PostScriptCompiler;\n}();\n\nexports.PostScriptCompiler = PostScriptCompiler;\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostScriptParser = exports.PostScriptLexer = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _core_utils = __w_pdfjs_require__(8);\n\nclass PostScriptParser {\n  constructor(lexer) {\n    this.lexer = lexer;\n    this.operators = [];\n    this.token = null;\n    this.prev = null;\n  }\n\n  nextToken() {\n    this.prev = this.token;\n    this.token = this.lexer.getToken();\n  }\n\n  accept(type) {\n    if (this.token.type === type) {\n      this.nextToken();\n      return true;\n    }\n\n    return false;\n  }\n\n  expect(type) {\n    if (this.accept(type)) {\n      return true;\n    }\n\n    throw new _util.FormatError(`Unexpected symbol: found ${this.token.type} expected ${type}.`);\n  }\n\n  parse() {\n    this.nextToken();\n    this.expect(PostScriptTokenTypes.LBRACE);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    return this.operators;\n  }\n\n  parseBlock() {\n    while (true) {\n      if (this.accept(PostScriptTokenTypes.NUMBER)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n        this.parseCondition();\n      } else {\n        return;\n      }\n    }\n  }\n\n  parseCondition() {\n    const conditionLocation = this.operators.length;\n    this.operators.push(null, null);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n\n    if (this.accept(PostScriptTokenTypes.IF)) {\n      this.operators[conditionLocation] = this.operators.length;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n      const jumpLocation = this.operators.length;\n      this.operators.push(null, null);\n      const endOfTrue = this.operators.length;\n      this.parseBlock();\n      this.expect(PostScriptTokenTypes.RBRACE);\n      this.expect(PostScriptTokenTypes.IFELSE);\n      this.operators[jumpLocation] = this.operators.length;\n      this.operators[jumpLocation + 1] = \"j\";\n      this.operators[conditionLocation] = endOfTrue;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else {\n      throw new _util.FormatError(\"PS Function: error parsing conditional.\");\n    }\n  }\n\n}\n\nexports.PostScriptParser = PostScriptParser;\nconst PostScriptTokenTypes = {\n  LBRACE: 0,\n  RBRACE: 1,\n  NUMBER: 2,\n  OPERATOR: 3,\n  IF: 4,\n  IFELSE: 5\n};\n\nconst PostScriptToken = function PostScriptTokenClosure() {\n  const opCache = Object.create(null);\n\n  class PostScriptToken {\n    constructor(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    static getOperator(op) {\n      const opValue = opCache[op];\n\n      if (opValue) {\n        return opValue;\n      }\n\n      return opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);\n    }\n\n    static get LBRACE() {\n      return (0, _util.shadow)(this, \"LBRACE\", new PostScriptToken(PostScriptTokenTypes.LBRACE, \"{\"));\n    }\n\n    static get RBRACE() {\n      return (0, _util.shadow)(this, \"RBRACE\", new PostScriptToken(PostScriptTokenTypes.RBRACE, \"}\"));\n    }\n\n    static get IF() {\n      return (0, _util.shadow)(this, \"IF\", new PostScriptToken(PostScriptTokenTypes.IF, \"IF\"));\n    }\n\n    static get IFELSE() {\n      return (0, _util.shadow)(this, \"IFELSE\", new PostScriptToken(PostScriptTokenTypes.IFELSE, \"IFELSE\"));\n    }\n\n  }\n\n  return PostScriptToken;\n}();\n\nclass PostScriptLexer {\n  constructor(stream) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  getToken() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());\n\n      case 0x7b:\n        this.nextChar();\n        return PostScriptToken.LBRACE;\n\n      case 0x7d:\n        this.nextChar();\n        return PostScriptToken.RBRACE;\n    }\n\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {\n      strBuf.push(String.fromCharCode(ch));\n    }\n\n    const str = strBuf.join(\"\");\n\n    switch (str.toLowerCase()) {\n      case \"if\":\n        return PostScriptToken.IF;\n\n      case \"ifelse\":\n        return PostScriptToken.IFELSE;\n\n      default:\n        return PostScriptToken.getOperator(str);\n    }\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {\n        strBuf.push(String.fromCharCode(ch));\n      } else {\n        break;\n      }\n    }\n\n    const value = parseFloat(strBuf.join(\"\"));\n\n    if (isNaN(value)) {\n      throw new _util.FormatError(`Invalid floating point number: ${value}`);\n    }\n\n    return value;\n  }\n\n}\n\nexports.PostScriptLexer = PostScriptLexer;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MurmurHash3_64 = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst SEED = 0xc3d2e1f0;\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n\n    if ((0, _util.isString)(input)) {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if ((0, _util.isArrayBuffer)(input)) {\n      data = input;\n      length = data.byteLength;\n    } else {\n      throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n        k2 = 0;\n    let h1 = this.h1,\n        h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n          C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n          C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n        k2 = k2 << 15 | k2 >>> 17;\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n        h2 ^= k2;\n        h2 = h2 << 13 | h2 >>> 19;\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n        h2 = this.h2;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    const hex1 = (h1 >>> 0).toString(16),\n          hex2 = (h2 >>> 0).toString(16);\n    return hex1.padStart(8, \"0\") + hex2.padStart(8, \"0\");\n  }\n\n}\n\nexports.MurmurHash3_64 = MurmurHash3_64;\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(5);\n\nvar _colorspace = __w_pdfjs_require__(23);\n\nvar _stream = __w_pdfjs_require__(12);\n\nvar _jpeg_stream = __w_pdfjs_require__(18);\n\nvar _jpx = __w_pdfjs_require__(21);\n\nvar PDFImage = function PDFImageClosure() {\n  function decodeAndClamp(value, addend, coefficient, max) {\n    value = addend + value * coefficient;\n\n    if (value < 0) {\n      value = 0;\n    } else if (value > max) {\n      value = max;\n    }\n\n    return value;\n  }\n\n  function resizeImageMask(src, bpc, w1, h1, w2, h2) {\n    var length = w2 * h2;\n    let dest;\n\n    if (bpc <= 8) {\n      dest = new Uint8Array(length);\n    } else if (bpc <= 16) {\n      dest = new Uint16Array(length);\n    } else {\n      dest = new Uint32Array(length);\n    }\n\n    var xRatio = w1 / w2;\n    var yRatio = h1 / h2;\n    var i,\n        j,\n        py,\n        newIndex = 0,\n        oldIndex;\n    var xScaled = new Uint16Array(w2);\n    var w1Scanline = w1;\n\n    for (i = 0; i < w2; i++) {\n      xScaled[i] = Math.floor(i * xRatio);\n    }\n\n    for (i = 0; i < h2; i++) {\n      py = Math.floor(i * yRatio) * w1Scanline;\n\n      for (j = 0; j < w2; j++) {\n        oldIndex = py + xScaled[j];\n        dest[newIndex++] = src[oldIndex];\n      }\n    }\n\n    return dest;\n  }\n\n  function PDFImage({\n    xref,\n    res,\n    image,\n    isInline = false,\n    smask = null,\n    mask = null,\n    isMask = false,\n    pdfFunctionFactory\n  }) {\n    this.image = image;\n    var dict = image.dict;\n    const filter = dict.get(\"Filter\");\n\n    if ((0, _primitives.isName)(filter)) {\n      switch (filter.name) {\n        case \"JPXDecode\":\n          var jpxImage = new _jpx.JpxImage();\n          jpxImage.parseImageProperties(image.stream);\n          image.stream.reset();\n          image.width = jpxImage.width;\n          image.height = jpxImage.height;\n          image.bitsPerComponent = jpxImage.bitsPerComponent;\n          image.numComps = jpxImage.componentsCount;\n          break;\n\n        case \"JBIG2Decode\":\n          image.bitsPerComponent = 1;\n          image.numComps = 1;\n          break;\n      }\n    }\n\n    let width = dict.get(\"Width\", \"W\");\n    let height = dict.get(\"Height\", \"H\");\n\n    if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {\n      (0, _util.warn)(\"PDFImage - using the Width/Height of the image data, \" + \"rather than the image dictionary.\");\n      width = image.width;\n      height = image.height;\n    }\n\n    if (width < 1 || height < 1) {\n      throw new _util.FormatError(`Invalid image width: ${width} or height: ${height}`);\n    }\n\n    this.width = width;\n    this.height = height;\n    this.interpolate = dict.get(\"Interpolate\", \"I\") || false;\n    this.imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n    this.matte = dict.get(\"Matte\") || false;\n    var bitsPerComponent = image.bitsPerComponent;\n\n    if (!bitsPerComponent) {\n      bitsPerComponent = dict.get(\"BitsPerComponent\", \"BPC\");\n\n      if (!bitsPerComponent) {\n        if (this.imageMask) {\n          bitsPerComponent = 1;\n        } else {\n          throw new _util.FormatError(`Bits per component missing in image: ${this.imageMask}`);\n        }\n      }\n    }\n\n    this.bpc = bitsPerComponent;\n\n    if (!this.imageMask) {\n      var colorSpace = dict.get(\"ColorSpace\", \"CS\");\n\n      if (!colorSpace) {\n        (0, _util.info)(\"JPX images (which do not require color spaces)\");\n\n        switch (image.numComps) {\n          case 1:\n            colorSpace = _primitives.Name.get(\"DeviceGray\");\n            break;\n\n          case 3:\n            colorSpace = _primitives.Name.get(\"DeviceRGB\");\n            break;\n\n          case 4:\n            colorSpace = _primitives.Name.get(\"DeviceCMYK\");\n            break;\n\n          default:\n            throw new Error(`JPX images with ${image.numComps} ` + \"color components not supported.\");\n        }\n      }\n\n      const resources = isInline ? res : null;\n      this.colorSpace = _colorspace.ColorSpace.parse(colorSpace, xref, resources, pdfFunctionFactory);\n      this.numComps = this.colorSpace.numComps;\n    }\n\n    this.decode = dict.getArray(\"Decode\", \"D\");\n    this.needsDecode = false;\n\n    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {\n      this.needsDecode = true;\n      var max = (1 << bitsPerComponent) - 1;\n      this.decodeCoefficients = [];\n      this.decodeAddends = [];\n      const isIndexed = this.colorSpace && this.colorSpace.name === \"Indexed\";\n\n      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n        var dmin = this.decode[i];\n        var dmax = this.decode[i + 1];\n        this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;\n        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n      }\n    }\n\n    if (smask) {\n      this.smask = new PDFImage({\n        xref,\n        res,\n        image: smask,\n        isInline,\n        pdfFunctionFactory\n      });\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask)) {\n        var maskDict = mask.dict,\n            imageMask = maskDict.get(\"ImageMask\", \"IM\");\n\n        if (!imageMask) {\n          (0, _util.warn)(\"Ignoring /Mask in image without /ImageMask.\");\n        } else {\n          this.mask = new PDFImage({\n            xref,\n            res,\n            image: mask,\n            isInline,\n            isMask: true,\n            pdfFunctionFactory\n          });\n        }\n      } else {\n        this.mask = mask;\n      }\n    }\n  }\n\n  PDFImage.buildImage = function ({\n    xref,\n    res,\n    image,\n    isInline = false,\n    pdfFunctionFactory\n  }) {\n    const imageData = image;\n    let smaskData = null;\n    let maskData = null;\n    const smask = image.dict.get(\"SMask\");\n    const mask = image.dict.get(\"Mask\");\n\n    if (smask) {\n      smaskData = smask;\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask) || Array.isArray(mask)) {\n        maskData = mask;\n      } else {\n        (0, _util.warn)(\"Unsupported mask format.\");\n      }\n    }\n\n    return Promise.resolve(new PDFImage({\n      xref,\n      res,\n      image: imageData,\n      isInline,\n      smask: smaskData,\n      mask: maskData,\n      pdfFunctionFactory\n    }));\n  };\n\n  PDFImage.createMask = function ({\n    imgArray,\n    width,\n    height,\n    imageIsFromDecodeStream,\n    inverseDecode\n  }) {\n    var computedLength = (width + 7 >> 3) * height;\n    var actualLength = imgArray.byteLength;\n    var haveFullData = computedLength === actualLength;\n    var data, i;\n\n    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n      data = imgArray;\n    } else if (!inverseDecode) {\n      data = new Uint8ClampedArray(actualLength);\n      data.set(imgArray);\n    } else {\n      data = new Uint8ClampedArray(computedLength);\n      data.set(imgArray);\n\n      for (i = actualLength; i < computedLength; i++) {\n        data[i] = 0xff;\n      }\n    }\n\n    if (inverseDecode) {\n      for (i = 0; i < actualLength; i++) {\n        data[i] ^= 0xff;\n      }\n    }\n\n    return {\n      data,\n      width,\n      height\n    };\n  };\n\n  PDFImage.prototype = {\n    get drawWidth() {\n      return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);\n    },\n\n    get drawHeight() {\n      return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);\n    },\n\n    decodeBuffer(buffer) {\n      var bpc = this.bpc;\n      var numComps = this.numComps;\n      var decodeAddends = this.decodeAddends;\n      var decodeCoefficients = this.decodeCoefficients;\n      var max = (1 << bpc) - 1;\n      var i, ii;\n\n      if (bpc === 1) {\n        for (i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = +!buffer[i];\n        }\n\n        return;\n      }\n\n      var index = 0;\n\n      for (i = 0, ii = this.width * this.height; i < ii; i++) {\n        for (var j = 0; j < numComps; j++) {\n          buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);\n          index++;\n        }\n      }\n    },\n\n    getComponents(buffer) {\n      var bpc = this.bpc;\n\n      if (bpc === 8) {\n        return buffer;\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var numComps = this.numComps;\n      var length = width * height * numComps;\n      var bufferPos = 0;\n      let output;\n\n      if (bpc <= 8) {\n        output = new Uint8Array(length);\n      } else if (bpc <= 16) {\n        output = new Uint16Array(length);\n      } else {\n        output = new Uint32Array(length);\n      }\n\n      var rowComps = width * numComps;\n      var max = (1 << bpc) - 1;\n      var i = 0,\n          ii,\n          buf;\n\n      if (bpc === 1) {\n        var mask, loop1End, loop2End;\n\n        for (var j = 0; j < height; j++) {\n          loop1End = i + (rowComps & ~7);\n          loop2End = i + rowComps;\n\n          while (i < loop1End) {\n            buf = buffer[bufferPos++];\n            output[i] = buf >> 7 & 1;\n            output[i + 1] = buf >> 6 & 1;\n            output[i + 2] = buf >> 5 & 1;\n            output[i + 3] = buf >> 4 & 1;\n            output[i + 4] = buf >> 3 & 1;\n            output[i + 5] = buf >> 2 & 1;\n            output[i + 6] = buf >> 1 & 1;\n            output[i + 7] = buf & 1;\n            i += 8;\n          }\n\n          if (i < loop2End) {\n            buf = buffer[bufferPos++];\n            mask = 128;\n\n            while (i < loop2End) {\n              output[i++] = +!!(buf & mask);\n              mask >>= 1;\n            }\n          }\n        }\n      } else {\n        var bits = 0;\n        buf = 0;\n\n        for (i = 0, ii = length; i < ii; ++i) {\n          if (i % rowComps === 0) {\n            buf = 0;\n            bits = 0;\n          }\n\n          while (bits < bpc) {\n            buf = buf << 8 | buffer[bufferPos++];\n            bits += 8;\n          }\n\n          var remainingBits = bits - bpc;\n          let value = buf >> remainingBits;\n\n          if (value < 0) {\n            value = 0;\n          } else if (value > max) {\n            value = max;\n          }\n\n          output[i] = value;\n          buf = buf & (1 << remainingBits) - 1;\n          bits = remainingBits;\n        }\n      }\n\n      return output;\n    },\n\n    fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n      var smask = this.smask;\n      var mask = this.mask;\n      var alphaBuf, sw, sh, i, ii, j;\n\n      if (smask) {\n        sw = smask.width;\n        sh = smask.height;\n        alphaBuf = new Uint8ClampedArray(sw * sh);\n        smask.fillGrayBuffer(alphaBuf);\n\n        if (sw !== width || sh !== height) {\n          alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);\n        }\n      } else if (mask) {\n        if (mask instanceof PDFImage) {\n          sw = mask.width;\n          sh = mask.height;\n          alphaBuf = new Uint8ClampedArray(sw * sh);\n          mask.numComps = 1;\n          mask.fillGrayBuffer(alphaBuf);\n\n          for (i = 0, ii = sw * sh; i < ii; ++i) {\n            alphaBuf[i] = 255 - alphaBuf[i];\n          }\n\n          if (sw !== width || sh !== height) {\n            alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);\n          }\n        } else if (Array.isArray(mask)) {\n          alphaBuf = new Uint8ClampedArray(width * height);\n          var numComps = this.numComps;\n\n          for (i = 0, ii = width * height; i < ii; ++i) {\n            var opacity = 0;\n            var imageOffset = i * numComps;\n\n            for (j = 0; j < numComps; ++j) {\n              var color = image[imageOffset + j];\n              var maskOffset = j * 2;\n\n              if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n                opacity = 255;\n                break;\n              }\n            }\n\n            alphaBuf[i] = opacity;\n          }\n        } else {\n          throw new _util.FormatError(\"Unknown mask format.\");\n        }\n      }\n\n      if (alphaBuf) {\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = alphaBuf[i];\n        }\n      } else {\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = 255;\n        }\n      }\n    },\n\n    undoPreblend(buffer, width, height) {\n      var matte = this.smask && this.smask.matte;\n\n      if (!matte) {\n        return;\n      }\n\n      var matteRgb = this.colorSpace.getRgb(matte, 0);\n      var matteR = matteRgb[0];\n      var matteG = matteRgb[1];\n      var matteB = matteRgb[2];\n      var length = width * height * 4;\n\n      for (var i = 0; i < length; i += 4) {\n        var alpha = buffer[i + 3];\n\n        if (alpha === 0) {\n          buffer[i] = 255;\n          buffer[i + 1] = 255;\n          buffer[i + 2] = 255;\n          continue;\n        }\n\n        var k = 255 / alpha;\n        buffer[i] = (buffer[i] - matteR) * k + matteR;\n        buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n        buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n      }\n    },\n\n    createImageData(forceRGBA = false) {\n      var drawWidth = this.drawWidth;\n      var drawHeight = this.drawHeight;\n      var imgData = {\n        width: drawWidth,\n        height: drawHeight,\n        kind: 0,\n        data: null\n      };\n      var numComps = this.numComps;\n      var originalWidth = this.width;\n      var originalHeight = this.height;\n      var bpc = this.bpc;\n      var rowBytes = originalWidth * numComps * bpc + 7 >> 3;\n      var imgArray;\n\n      if (!forceRGBA) {\n        var kind;\n\n        if (this.colorSpace.name === \"DeviceGray\" && bpc === 1) {\n          kind = _util.ImageKind.GRAYSCALE_1BPP;\n        } else if (this.colorSpace.name === \"DeviceRGB\" && bpc === 8 && !this.needsDecode) {\n          kind = _util.ImageKind.RGB_24BPP;\n        }\n\n        if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {\n          imgData.kind = kind;\n          imgArray = this.getImageBytes(originalHeight * rowBytes);\n\n          if (this.image instanceof _stream.DecodeStream) {\n            imgData.data = imgArray;\n          } else {\n            var newArray = new Uint8ClampedArray(imgArray.length);\n            newArray.set(imgArray);\n            imgData.data = newArray;\n          }\n\n          if (this.needsDecode) {\n            (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, \"PDFImage.createImageData: The image must be grayscale.\");\n            var buffer = imgData.data;\n\n            for (var i = 0, ii = buffer.length; i < ii; i++) {\n              buffer[i] ^= 0xff;\n            }\n          }\n\n          return imgData;\n        }\n\n        if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {\n          let imageLength = originalHeight * rowBytes;\n\n          switch (this.colorSpace.name) {\n            case \"DeviceGray\":\n              imageLength *= 3;\n\n            case \"DeviceRGB\":\n            case \"DeviceCMYK\":\n              imgData.kind = _util.ImageKind.RGB_24BPP;\n              imgData.data = this.getImageBytes(imageLength, drawWidth, drawHeight, true);\n              return imgData;\n          }\n        }\n      }\n\n      imgArray = this.getImageBytes(originalHeight * rowBytes);\n      var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;\n      var comps = this.getComponents(imgArray);\n      var alpha01, maybeUndoPreblend;\n\n      if (!forceRGBA && !this.smask && !this.mask) {\n        imgData.kind = _util.ImageKind.RGB_24BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n        alpha01 = 0;\n        maybeUndoPreblend = false;\n      } else {\n        imgData.kind = _util.ImageKind.RGBA_32BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n        alpha01 = 1;\n        maybeUndoPreblend = true;\n        this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n\n      this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);\n\n      if (maybeUndoPreblend) {\n        this.undoPreblend(imgData.data, drawWidth, actualHeight);\n      }\n\n      return imgData;\n    },\n\n    fillGrayBuffer(buffer) {\n      var numComps = this.numComps;\n\n      if (numComps !== 1) {\n        throw new _util.FormatError(`Reading gray scale from a color image: ${numComps}`);\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var bpc = this.bpc;\n      var rowBytes = width * numComps * bpc + 7 >> 3;\n      var imgArray = this.getImageBytes(height * rowBytes);\n      var comps = this.getComponents(imgArray);\n      var i, length;\n\n      if (bpc === 1) {\n        length = width * height;\n\n        if (this.needsDecode) {\n          for (i = 0; i < length; ++i) {\n            buffer[i] = comps[i] - 1 & 255;\n          }\n        } else {\n          for (i = 0; i < length; ++i) {\n            buffer[i] = -comps[i] & 255;\n          }\n        }\n\n        return;\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n\n      length = width * height;\n      var scale = 255 / ((1 << bpc) - 1);\n\n      for (i = 0; i < length; ++i) {\n        buffer[i] = scale * comps[i];\n      }\n    },\n\n    getImageBytes(length, drawWidth, drawHeight, forceRGB = false) {\n      this.image.reset();\n      this.image.drawWidth = drawWidth || this.width;\n      this.image.drawHeight = drawHeight || this.height;\n      this.image.forceRGB = !!forceRGB;\n      return this.image.getBytes(length, true);\n    }\n\n  };\n  return PDFImage;\n}();\n\nexports.PDFImage = PDFImage;\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageHandler = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2\n};\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8\n};\n\nfunction wrapReason(reason) {\n  if (typeof reason !== \"object\" || reason === null) {\n    return reason;\n  }\n\n  switch (reason.name) {\n    case \"AbortException\":\n      return new _util.AbortException(reason.message);\n\n    case \"MissingPDFException\":\n      return new _util.MissingPDFException(reason.message);\n\n    case \"UnexpectedResponseException\":\n      return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n    case \"UnknownErrorException\":\n      return new _util.UnknownErrorException(reason.message, reason.details);\n\n    default:\n      return new _util.UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n\n      if (data.stream) {\n        this._processStreamMessage(data);\n\n        return;\n      }\n\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n\n        return;\n      }\n\n      const action = this.actionHandler[data.action];\n\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(function (result) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.DATA,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.ERROR,\n            callbackId: data.callbackId,\n            reason: wrapReason(reason)\n          });\n        });\n        return;\n      }\n\n      if (data.streamId) {\n        this._createStreamSink(data);\n\n        return;\n      }\n\n      action(data.data);\n    };\n\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    const ah = this.actionHandler;\n\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n\n    ah[actionName] = handler;\n  }\n\n  send(actionName, data, transfers) {\n    this._postMessage({\n      sourceName: this.sourceName,\n      targetName: this.targetName,\n      action: actionName,\n      data\n    }, transfers);\n  }\n\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = (0, _util.createPromiseCapability)();\n    this.callbackCapabilities[callbackId] = capability;\n\n    try {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        callbackId,\n        data\n      }, transfers);\n    } catch (ex) {\n      capability.reject(ex);\n    }\n\n    return capability.promise;\n  }\n\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n    return new ReadableStream({\n      start: controller => {\n        const startCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId] = {\n          controller,\n          startCall: startCapability,\n          pullCall: null,\n          cancelCall: null,\n          isClosed: false\n        };\n\n        this._postMessage({\n          sourceName,\n          targetName,\n          action: actionName,\n          streamId,\n          data,\n          desiredSize: controller.desiredSize\n        }, transfers);\n\n        return startCapability.promise;\n      },\n      pull: controller => {\n        const pullCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].pullCall = pullCapability;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL,\n          streamId,\n          desiredSize: controller.desiredSize\n        });\n        return pullCapability.promise;\n      },\n      cancel: reason => {\n        (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n        const cancelCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].cancelCall = cancelCapability;\n        this.streamControllers[streamId].isClosed = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL,\n          streamId,\n          reason: wrapReason(reason)\n        });\n        return cancelCapability.promise;\n      }\n    }, queueingStrategy);\n  }\n\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = (0, _util.createPromiseCapability)();\n          this.ready = this.sinkCapability.promise;\n        }\n\n        self._postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ENQUEUE,\n          streamId,\n          chunk\n        }, transfers);\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      },\n\n      sinkCapability: (0, _util.createPromiseCapability)(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null\n    };\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(function () {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        success: true\n      });\n    }, function (reason) {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        reason: wrapReason(reason)\n      });\n    });\n  }\n\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL:\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n          break;\n        }\n\n        if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const {\n          onPull\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        break;\n\n      case StreamKind.ENQUEUE:\n        (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n\n      case StreamKind.CLOSE:\n        (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.ERROR:\n        (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n        this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n        }\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n\n        const {\n          onCancel\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async _deleteStreamController(streamId) {\n    await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n      return capability && capability.promise;\n    }));\n    delete this.streamControllers[streamId];\n  }\n\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n}\n\nexports.MessageHandler = MessageHandler;\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFWorkerStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nclass PDFWorkerStream {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this._contentLength = null;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  getFullReader() {\n    (0, _util.assert)(!this._fullRequestReader, \"PDFWorkerStream.getFullReader can only be called once.\");\n    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n\n    this._rangeRequestReaders.push(reader);\n\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n\n    const readers = this._rangeRequestReaders.slice(0);\n\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n\n}\n\nexports.PDFWorkerStream = PDFWorkerStream;\n\nclass PDFWorkerStreamReader {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n    this._contentLength = null;\n    this._isRangeSupported = false;\n    this._isStreamingSupported = false;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetReader\");\n\n    this._reader = readableStream.getReader();\n    this._headersReady = this._msgHandler.sendWithPromise(\"ReaderHeadersReady\").then(data => {\n      this._isStreamingSupported = data.isStreamingSupported;\n      this._isRangeSupported = data.isRangeSupported;\n      this._contentLength = data.contentLength;\n    });\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\nclass PDFWorkerStreamRangeReader {\n  constructor(begin, end, msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetRangeReader\", {\n      begin,\n      end\n    });\n\n    this._reader = readableStream.getReader();\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=pdf.worker.js.map"],"sourceRoot":""}